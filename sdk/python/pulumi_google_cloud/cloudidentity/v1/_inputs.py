# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'EntityKeyArgs',
    'GoogleAppsCloudidentityDevicesV1AndroidAttributesArgs',
    'MembershipRoleArgs',
]

@pulumi.input_type
class EntityKeyArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s.
        :param pulumi.Input[str] id: The ID of the entity. For Google-managed entities, the `id` should be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.
        :param pulumi.Input[str] namespace: The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the entity. For Google-managed entities, the `id` should be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class GoogleAppsCloudidentityDevicesV1AndroidAttributesArgs:
    def __init__(__self__, *,
                 enabled_unknown_sources: Optional[pulumi.Input[bool]] = None,
                 owner_profile_account: Optional[pulumi.Input[bool]] = None,
                 ownership_privilege: Optional[pulumi.Input[str]] = None,
                 supports_work_profile: Optional[pulumi.Input[bool]] = None):
        """
        Resource representing the Android specific attributes of a Device.
        :param pulumi.Input[bool] enabled_unknown_sources: Whether applications from unknown sources can be installed on device.
        :param pulumi.Input[bool] owner_profile_account: Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.
        :param pulumi.Input[str] ownership_privilege: Ownership privileges on device.
        :param pulumi.Input[bool] supports_work_profile: Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the "Enforce Work Profile" policy.
        """
        if enabled_unknown_sources is not None:
            pulumi.set(__self__, "enabled_unknown_sources", enabled_unknown_sources)
        if owner_profile_account is not None:
            pulumi.set(__self__, "owner_profile_account", owner_profile_account)
        if ownership_privilege is not None:
            pulumi.set(__self__, "ownership_privilege", ownership_privilege)
        if supports_work_profile is not None:
            pulumi.set(__self__, "supports_work_profile", supports_work_profile)

    @property
    @pulumi.getter(name="enabledUnknownSources")
    def enabled_unknown_sources(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether applications from unknown sources can be installed on device.
        """
        return pulumi.get(self, "enabled_unknown_sources")

    @enabled_unknown_sources.setter
    def enabled_unknown_sources(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled_unknown_sources", value)

    @property
    @pulumi.getter(name="ownerProfileAccount")
    def owner_profile_account(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.
        """
        return pulumi.get(self, "owner_profile_account")

    @owner_profile_account.setter
    def owner_profile_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "owner_profile_account", value)

    @property
    @pulumi.getter(name="ownershipPrivilege")
    def ownership_privilege(self) -> Optional[pulumi.Input[str]]:
        """
        Ownership privileges on device.
        """
        return pulumi.get(self, "ownership_privilege")

    @ownership_privilege.setter
    def ownership_privilege(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ownership_privilege", value)

    @property
    @pulumi.getter(name="supportsWorkProfile")
    def supports_work_profile(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the "Enforce Work Profile" policy.
        """
        return pulumi.get(self, "supports_work_profile")

    @supports_work_profile.setter
    def supports_work_profile(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supports_work_profile", value)


@pulumi.input_type
class MembershipRoleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        A membership role within the Cloud Identity Groups API. A `MembershipRole` defines the privileges granted to a `Membership`.
        :param pulumi.Input[str] name: The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


