# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'AndroidAttributesArgs',
    'DeviceArgs',
    'DynamicGroupMetadataArgs',
    'DynamicGroupQueryArgs',
    'DynamicGroupStatusArgs',
    'EntityKeyArgs',
    'ExpiryDetailArgs',
    'MembershipRoleArgs',
]

@pulumi.input_type
class AndroidAttributesArgs:
    def __init__(__self__, *,
                 enabled_unknown_sources: Optional[pulumi.Input[bool]] = None,
                 owner_profile_account: Optional[pulumi.Input[bool]] = None,
                 ownership_privilege: Optional[pulumi.Input[str]] = None,
                 supports_work_profile: Optional[pulumi.Input[bool]] = None):
        """
        Resource representing the Android specific attributes of a Device.
        :param pulumi.Input[bool] enabled_unknown_sources: Whether applications from unknown sources can be installed on device.
        :param pulumi.Input[bool] owner_profile_account: Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.
        :param pulumi.Input[str] ownership_privilege: Ownership privileges on device.
        :param pulumi.Input[bool] supports_work_profile: Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the "Enforce Work Profile" policy.
        """
        if enabled_unknown_sources is not None:
            pulumi.set(__self__, "enabled_unknown_sources", enabled_unknown_sources)
        if owner_profile_account is not None:
            pulumi.set(__self__, "owner_profile_account", owner_profile_account)
        if ownership_privilege is not None:
            pulumi.set(__self__, "ownership_privilege", ownership_privilege)
        if supports_work_profile is not None:
            pulumi.set(__self__, "supports_work_profile", supports_work_profile)

    @property
    @pulumi.getter(name="enabledUnknownSources")
    def enabled_unknown_sources(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether applications from unknown sources can be installed on device.
        """
        return pulumi.get(self, "enabled_unknown_sources")

    @enabled_unknown_sources.setter
    def enabled_unknown_sources(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled_unknown_sources", value)

    @property
    @pulumi.getter(name="ownerProfileAccount")
    def owner_profile_account(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.
        """
        return pulumi.get(self, "owner_profile_account")

    @owner_profile_account.setter
    def owner_profile_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "owner_profile_account", value)

    @property
    @pulumi.getter(name="ownershipPrivilege")
    def ownership_privilege(self) -> Optional[pulumi.Input[str]]:
        """
        Ownership privileges on device.
        """
        return pulumi.get(self, "ownership_privilege")

    @ownership_privilege.setter
    def ownership_privilege(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ownership_privilege", value)

    @property
    @pulumi.getter(name="supportsWorkProfile")
    def supports_work_profile(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the "Enforce Work Profile" policy.
        """
        return pulumi.get(self, "supports_work_profile")

    @supports_work_profile.setter
    def supports_work_profile(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supports_work_profile", value)


@pulumi.input_type
class DeviceArgs:
    def __init__(__self__, *,
                 android_specific_attributes: Optional[pulumi.Input['AndroidAttributesArgs']] = None,
                 asset_tag: Optional[pulumi.Input[str]] = None,
                 baseband_version: Optional[pulumi.Input[str]] = None,
                 bootloader_version: Optional[pulumi.Input[str]] = None,
                 brand: Optional[pulumi.Input[str]] = None,
                 build_number: Optional[pulumi.Input[str]] = None,
                 compromised_state: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 enabled_developer_options: Optional[pulumi.Input[bool]] = None,
                 enabled_usb_debugging: Optional[pulumi.Input[bool]] = None,
                 encryption_state: Optional[pulumi.Input[str]] = None,
                 imei: Optional[pulumi.Input[str]] = None,
                 kernel_version: Optional[pulumi.Input[str]] = None,
                 last_sync_time: Optional[pulumi.Input[str]] = None,
                 management_state: Optional[pulumi.Input[str]] = None,
                 manufacturer: Optional[pulumi.Input[str]] = None,
                 meid: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_operator: Optional[pulumi.Input[str]] = None,
                 os_version: Optional[pulumi.Input[str]] = None,
                 other_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owner_type: Optional[pulumi.Input[str]] = None,
                 release_version: Optional[pulumi.Input[str]] = None,
                 security_patch_time: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 wifi_mac_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A Device within the Cloud Identity Devices API. Represents a Device known to Google Cloud, independent of the device ownership, type, and whether it is assigned or in use by a user.
        :param pulumi.Input['AndroidAttributesArgs'] android_specific_attributes: Output only. Attributes specific to Android devices.
        :param pulumi.Input[str] asset_tag: Asset tag of the device.
        :param pulumi.Input[str] baseband_version: Output only. Baseband version of the device.
        :param pulumi.Input[str] bootloader_version: Output only. Device bootloader version. Example: 0.6.7.
        :param pulumi.Input[str] brand: Output only. Device brand. Example: Samsung.
        :param pulumi.Input[str] build_number: Output only. Build number of the device.
        :param pulumi.Input[str] compromised_state: Output only. Represents whether the Device is compromised.
        :param pulumi.Input[str] create_time: Output only. When the Company-Owned device was imported. This field is empty for BYOD devices.
        :param pulumi.Input[str] device_type: Output only. Type of device.
        :param pulumi.Input[bool] enabled_developer_options: Output only. Whether developer options is enabled on device.
        :param pulumi.Input[bool] enabled_usb_debugging: Output only. Whether USB debugging is enabled on device.
        :param pulumi.Input[str] encryption_state: Output only. Device encryption state.
        :param pulumi.Input[str] imei: Output only. IMEI number of device if GSM device; empty otherwise.
        :param pulumi.Input[str] kernel_version: Output only. Kernel version of the device.
        :param pulumi.Input[str] last_sync_time: Most recent time when device synced with this service.
        :param pulumi.Input[str] management_state: Output only. Management state of the device
        :param pulumi.Input[str] manufacturer: Output only. Device manufacturer. Example: Motorola.
        :param pulumi.Input[str] meid: Output only. MEID number of device if CDMA device; empty otherwise.
        :param pulumi.Input[str] model: Output only. Model name of device. Example: Pixel 3.
        :param pulumi.Input[str] name: Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device_id}`, where device_id is the unique id assigned to the Device.
        :param pulumi.Input[str] network_operator: Output only. Mobile or network operator of device, if available.
        :param pulumi.Input[str] os_version: Output only. OS version of the device. Example: Android 8.1.0.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] other_accounts: Output only. Domain name for Google accounts on device. Type for other accounts on device. On Android, will only be populated if |ownership_privilege| is |PROFILE_OWNER| or |DEVICE_OWNER|. Does not include the account signed in to the device policy app if that account's domain has only one account. Examples: "com.example", "xyz.com".
        :param pulumi.Input[str] owner_type: Output only. Whether the device is owned by the company or an individual
        :param pulumi.Input[str] release_version: Output only. OS release version. Example: 6.0.
        :param pulumi.Input[str] security_patch_time: Output only. OS security patch update time on device.
        :param pulumi.Input[str] serial_number: Serial Number of device. Example: HT82V1A01076.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] wifi_mac_addresses: WiFi MAC addresses of device.
        """
        if android_specific_attributes is not None:
            pulumi.set(__self__, "android_specific_attributes", android_specific_attributes)
        if asset_tag is not None:
            pulumi.set(__self__, "asset_tag", asset_tag)
        if baseband_version is not None:
            pulumi.set(__self__, "baseband_version", baseband_version)
        if bootloader_version is not None:
            pulumi.set(__self__, "bootloader_version", bootloader_version)
        if brand is not None:
            pulumi.set(__self__, "brand", brand)
        if build_number is not None:
            pulumi.set(__self__, "build_number", build_number)
        if compromised_state is not None:
            pulumi.set(__self__, "compromised_state", compromised_state)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if enabled_developer_options is not None:
            pulumi.set(__self__, "enabled_developer_options", enabled_developer_options)
        if enabled_usb_debugging is not None:
            pulumi.set(__self__, "enabled_usb_debugging", enabled_usb_debugging)
        if encryption_state is not None:
            pulumi.set(__self__, "encryption_state", encryption_state)
        if imei is not None:
            pulumi.set(__self__, "imei", imei)
        if kernel_version is not None:
            pulumi.set(__self__, "kernel_version", kernel_version)
        if last_sync_time is not None:
            pulumi.set(__self__, "last_sync_time", last_sync_time)
        if management_state is not None:
            pulumi.set(__self__, "management_state", management_state)
        if manufacturer is not None:
            pulumi.set(__self__, "manufacturer", manufacturer)
        if meid is not None:
            pulumi.set(__self__, "meid", meid)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_operator is not None:
            pulumi.set(__self__, "network_operator", network_operator)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)
        if other_accounts is not None:
            pulumi.set(__self__, "other_accounts", other_accounts)
        if owner_type is not None:
            pulumi.set(__self__, "owner_type", owner_type)
        if release_version is not None:
            pulumi.set(__self__, "release_version", release_version)
        if security_patch_time is not None:
            pulumi.set(__self__, "security_patch_time", security_patch_time)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if wifi_mac_addresses is not None:
            pulumi.set(__self__, "wifi_mac_addresses", wifi_mac_addresses)

    @property
    @pulumi.getter(name="androidSpecificAttributes")
    def android_specific_attributes(self) -> Optional[pulumi.Input['AndroidAttributesArgs']]:
        """
        Output only. Attributes specific to Android devices.
        """
        return pulumi.get(self, "android_specific_attributes")

    @android_specific_attributes.setter
    def android_specific_attributes(self, value: Optional[pulumi.Input['AndroidAttributesArgs']]):
        pulumi.set(self, "android_specific_attributes", value)

    @property
    @pulumi.getter(name="assetTag")
    def asset_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Asset tag of the device.
        """
        return pulumi.get(self, "asset_tag")

    @asset_tag.setter
    def asset_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset_tag", value)

    @property
    @pulumi.getter(name="basebandVersion")
    def baseband_version(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Baseband version of the device.
        """
        return pulumi.get(self, "baseband_version")

    @baseband_version.setter
    def baseband_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "baseband_version", value)

    @property
    @pulumi.getter(name="bootloaderVersion")
    def bootloader_version(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Device bootloader version. Example: 0.6.7.
        """
        return pulumi.get(self, "bootloader_version")

    @bootloader_version.setter
    def bootloader_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bootloader_version", value)

    @property
    @pulumi.getter
    def brand(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Device brand. Example: Samsung.
        """
        return pulumi.get(self, "brand")

    @brand.setter
    def brand(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "brand", value)

    @property
    @pulumi.getter(name="buildNumber")
    def build_number(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Build number of the device.
        """
        return pulumi.get(self, "build_number")

    @build_number.setter
    def build_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "build_number", value)

    @property
    @pulumi.getter(name="compromisedState")
    def compromised_state(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Represents whether the Device is compromised.
        """
        return pulumi.get(self, "compromised_state")

    @compromised_state.setter
    def compromised_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compromised_state", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. When the Company-Owned device was imported. This field is empty for BYOD devices.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Type of device.
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="enabledDeveloperOptions")
    def enabled_developer_options(self) -> Optional[pulumi.Input[bool]]:
        """
        Output only. Whether developer options is enabled on device.
        """
        return pulumi.get(self, "enabled_developer_options")

    @enabled_developer_options.setter
    def enabled_developer_options(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled_developer_options", value)

    @property
    @pulumi.getter(name="enabledUsbDebugging")
    def enabled_usb_debugging(self) -> Optional[pulumi.Input[bool]]:
        """
        Output only. Whether USB debugging is enabled on device.
        """
        return pulumi.get(self, "enabled_usb_debugging")

    @enabled_usb_debugging.setter
    def enabled_usb_debugging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled_usb_debugging", value)

    @property
    @pulumi.getter(name="encryptionState")
    def encryption_state(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Device encryption state.
        """
        return pulumi.get(self, "encryption_state")

    @encryption_state.setter
    def encryption_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_state", value)

    @property
    @pulumi.getter
    def imei(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. IMEI number of device if GSM device; empty otherwise.
        """
        return pulumi.get(self, "imei")

    @imei.setter
    def imei(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imei", value)

    @property
    @pulumi.getter(name="kernelVersion")
    def kernel_version(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Kernel version of the device.
        """
        return pulumi.get(self, "kernel_version")

    @kernel_version.setter
    def kernel_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kernel_version", value)

    @property
    @pulumi.getter(name="lastSyncTime")
    def last_sync_time(self) -> Optional[pulumi.Input[str]]:
        """
        Most recent time when device synced with this service.
        """
        return pulumi.get(self, "last_sync_time")

    @last_sync_time.setter
    def last_sync_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_sync_time", value)

    @property
    @pulumi.getter(name="managementState")
    def management_state(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Management state of the device
        """
        return pulumi.get(self, "management_state")

    @management_state.setter
    def management_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_state", value)

    @property
    @pulumi.getter
    def manufacturer(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Device manufacturer. Example: Motorola.
        """
        return pulumi.get(self, "manufacturer")

    @manufacturer.setter
    def manufacturer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manufacturer", value)

    @property
    @pulumi.getter
    def meid(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. MEID number of device if CDMA device; empty otherwise.
        """
        return pulumi.get(self, "meid")

    @meid.setter
    def meid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "meid", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Model name of device. Example: Pixel 3.
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device_id}`, where device_id is the unique id assigned to the Device.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkOperator")
    def network_operator(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Mobile or network operator of device, if available.
        """
        return pulumi.get(self, "network_operator")

    @network_operator.setter
    def network_operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_operator", value)

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. OS version of the device. Example: Android 8.1.0.
        """
        return pulumi.get(self, "os_version")

    @os_version.setter
    def os_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_version", value)

    @property
    @pulumi.getter(name="otherAccounts")
    def other_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Output only. Domain name for Google accounts on device. Type for other accounts on device. On Android, will only be populated if |ownership_privilege| is |PROFILE_OWNER| or |DEVICE_OWNER|. Does not include the account signed in to the device policy app if that account's domain has only one account. Examples: "com.example", "xyz.com".
        """
        return pulumi.get(self, "other_accounts")

    @other_accounts.setter
    def other_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "other_accounts", value)

    @property
    @pulumi.getter(name="ownerType")
    def owner_type(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Whether the device is owned by the company or an individual
        """
        return pulumi.get(self, "owner_type")

    @owner_type.setter
    def owner_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_type", value)

    @property
    @pulumi.getter(name="releaseVersion")
    def release_version(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. OS release version. Example: 6.0.
        """
        return pulumi.get(self, "release_version")

    @release_version.setter
    def release_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_version", value)

    @property
    @pulumi.getter(name="securityPatchTime")
    def security_patch_time(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. OS security patch update time on device.
        """
        return pulumi.get(self, "security_patch_time")

    @security_patch_time.setter
    def security_patch_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_patch_time", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        """
        Serial Number of device. Example: HT82V1A01076.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter(name="wifiMacAddresses")
    def wifi_mac_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        WiFi MAC addresses of device.
        """
        return pulumi.get(self, "wifi_mac_addresses")

    @wifi_mac_addresses.setter
    def wifi_mac_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "wifi_mac_addresses", value)


@pulumi.input_type
class DynamicGroupMetadataArgs:
    def __init__(__self__, *,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['DynamicGroupQueryArgs']]]] = None,
                 status: Optional[pulumi.Input['DynamicGroupStatusArgs']] = None):
        """
        Dynamic group metadata like queries and status.
        :param pulumi.Input[Sequence[pulumi.Input['DynamicGroupQueryArgs']]] queries: Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
        :param pulumi.Input['DynamicGroupStatusArgs'] status: Output only. Status of the dynamic group.
        """
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DynamicGroupQueryArgs']]]]:
        """
        Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
        """
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DynamicGroupQueryArgs']]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['DynamicGroupStatusArgs']]:
        """
        Output only. Status of the dynamic group.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['DynamicGroupStatusArgs']]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class DynamicGroupQueryArgs:
    def __init__(__self__, *,
                 query: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None):
        """
        Defines a query on a resource.
        :param pulumi.Input[str] query: Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')`
        """
        if query is not None:
            pulumi.set(__self__, "query", query)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')`
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)


@pulumi.input_type
class DynamicGroupStatusArgs:
    def __init__(__self__, *,
                 status: Optional[pulumi.Input[str]] = None,
                 status_time: Optional[pulumi.Input[str]] = None):
        """
        The current status of a dynamic group along with timestamp.
        :param pulumi.Input[str] status: Status of the dynamic group.
        :param pulumi.Input[str] status_time: The latest time at which the dynamic group is guaranteed to be in the given status. If status is `UP_TO_DATE`, the latest time at which the dynamic group was confirmed to be up-to-date. If status is `UPDATING_MEMBERSHIPS`, the time at which dynamic group was created.
        """
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_time is not None:
            pulumi.set(__self__, "status_time", status_time)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the dynamic group.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusTime")
    def status_time(self) -> Optional[pulumi.Input[str]]:
        """
        The latest time at which the dynamic group is guaranteed to be in the given status. If status is `UP_TO_DATE`, the latest time at which the dynamic group was confirmed to be up-to-date. If status is `UPDATING_MEMBERSHIPS`, the time at which dynamic group was created.
        """
        return pulumi.get(self, "status_time")

    @status_time.setter
    def status_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_time", value)


@pulumi.input_type
class EntityKeyArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s.
        :param pulumi.Input[str] id: The ID of the entity. For Google-managed entities, the `id` must be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.
        :param pulumi.Input[str] namespace: The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the entity. For Google-managed entities, the `id` must be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ExpiryDetailArgs:
    def __init__(__self__, *,
                 expire_time: Optional[pulumi.Input[str]] = None):
        """
        The `MembershipRole` expiry details.
        :param pulumi.Input[str] expire_time: The time at which the `MembershipRole` will expire.
        """
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time at which the `MembershipRole` will expire.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expire_time", value)


@pulumi.input_type
class MembershipRoleArgs:
    def __init__(__self__, *,
                 expiry_detail: Optional[pulumi.Input['ExpiryDetailArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        A membership role within the Cloud Identity Groups API. A `MembershipRole` defines the privileges granted to a `Membership`.
        :param pulumi.Input['ExpiryDetailArgs'] expiry_detail: The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value.
        :param pulumi.Input[str] name: The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`.
        """
        if expiry_detail is not None:
            pulumi.set(__self__, "expiry_detail", expiry_detail)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="expiryDetail")
    def expiry_detail(self) -> Optional[pulumi.Input['ExpiryDetailArgs']]:
        """
        The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value.
        """
        return pulumi.get(self, "expiry_detail")

    @expiry_detail.setter
    def expiry_detail(self, value: Optional[pulumi.Input['ExpiryDetailArgs']]):
        pulumi.set(self, "expiry_detail", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


