# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'GoogleCloudDialogflowV2ContextArgs',
    'GoogleCloudDialogflowV2EntityTypeEntityArgs',
    'GoogleCloudDialogflowV2IntentFollowupIntentInfoArgs',
    'GoogleCloudDialogflowV2IntentMessageArgs',
    'GoogleCloudDialogflowV2IntentMessageBasicCardArgs',
    'GoogleCloudDialogflowV2IntentMessageBasicCardButtonArgs',
    'GoogleCloudDialogflowV2IntentMessageBasicCardButtonOpenUriActionArgs',
    'GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardArgs',
    'GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemArgs',
    'GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionArgs',
    'GoogleCloudDialogflowV2IntentMessageCardArgs',
    'GoogleCloudDialogflowV2IntentMessageCardButtonArgs',
    'GoogleCloudDialogflowV2IntentMessageCarouselSelectArgs',
    'GoogleCloudDialogflowV2IntentMessageCarouselSelectItemArgs',
    'GoogleCloudDialogflowV2IntentMessageColumnPropertiesArgs',
    'GoogleCloudDialogflowV2IntentMessageImageArgs',
    'GoogleCloudDialogflowV2IntentMessageLinkOutSuggestionArgs',
    'GoogleCloudDialogflowV2IntentMessageListSelectArgs',
    'GoogleCloudDialogflowV2IntentMessageListSelectItemArgs',
    'GoogleCloudDialogflowV2IntentMessageMediaContentArgs',
    'GoogleCloudDialogflowV2IntentMessageMediaContentResponseMediaObjectArgs',
    'GoogleCloudDialogflowV2IntentMessageQuickRepliesArgs',
    'GoogleCloudDialogflowV2IntentMessageSelectItemInfoArgs',
    'GoogleCloudDialogflowV2IntentMessageSimpleResponseArgs',
    'GoogleCloudDialogflowV2IntentMessageSimpleResponsesArgs',
    'GoogleCloudDialogflowV2IntentMessageSuggestionArgs',
    'GoogleCloudDialogflowV2IntentMessageSuggestionsArgs',
    'GoogleCloudDialogflowV2IntentMessageTableCardArgs',
    'GoogleCloudDialogflowV2IntentMessageTableCardCellArgs',
    'GoogleCloudDialogflowV2IntentMessageTableCardRowArgs',
    'GoogleCloudDialogflowV2IntentMessageTextArgs',
    'GoogleCloudDialogflowV2IntentParameterArgs',
    'GoogleCloudDialogflowV2IntentTrainingPhraseArgs',
    'GoogleCloudDialogflowV2IntentTrainingPhrasePartArgs',
]

@pulumi.input_type
class GoogleCloudDialogflowV2ContextArgs:
    def __init__(__self__, *,
                 lifespan_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Dialogflow contexts are similar to natural language context. If a person says to you "they are orange", you need context in order to understand what "they" is referring to. Similarly, for Dialogflow to handle an end-user expression like that, it needs to be provided with context in order to correctly match an intent. Using contexts, you can control the flow of a conversation. You can configure contexts for an intent by setting input and output contexts, which are identified by string names. When an intent is matched, any configured output contexts for that intent become active. While any contexts are active, Dialogflow is more likely to match intents that are configured with input contexts that correspond to the currently active contexts. For more information about context, see the [Contexts guide](https://cloud.google.com/dialogflow/docs/contexts-overview).
        :param pulumi.Input[int] lifespan_count: Optional. The number of conversational query requests after which the context expires. The default is `0`. If set to `0`, the context expires immediately. Contexts expire automatically after 20 minutes if there are no matching queries.
        :param pulumi.Input[str] name: Required. The unique identifier of the context. Format: `projects//agent/sessions//contexts/`, or `projects//agent/environments//users//sessions//contexts/`. The `Context ID` is always converted to lowercase, may only contain characters in a-zA-Z0-9_-% and may be at most 250 bytes long. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. The following context names are reserved for internal use by Dialogflow. You should not use these contexts or create contexts with these names: * `__system_counters__` * `*_id_dialog_context` * `*_dialog_params_size`
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: Optional. The collection of parameters associated with this context. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: - MapKey type: string - MapKey value: parameter name - MapValue type: - If parameter's entity type is a composite entity: map - Else: string or number, depending on parameter value type - MapValue value: - If parameter's entity type is a composite entity: map from composite entity property names to property values - Else: parameter value
        """
        if lifespan_count is not None:
            pulumi.set(__self__, "lifespan_count", lifespan_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter(name="lifespanCount")
    def lifespan_count(self) -> Optional[pulumi.Input[int]]:
        """
        Optional. The number of conversational query requests after which the context expires. The default is `0`. If set to `0`, the context expires immediately. Contexts expire automatically after 20 minutes if there are no matching queries.
        """
        return pulumi.get(self, "lifespan_count")

    @lifespan_count.setter
    def lifespan_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lifespan_count", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The unique identifier of the context. Format: `projects//agent/sessions//contexts/`, or `projects//agent/environments//users//sessions//contexts/`. The `Context ID` is always converted to lowercase, may only contain characters in a-zA-Z0-9_-% and may be at most 250 bytes long. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. The following context names are reserved for internal use by Dialogflow. You should not use these contexts or create contexts with these names: * `__system_counters__` * `*_id_dialog_context` * `*_dialog_params_size`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional. The collection of parameters associated with this context. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: - MapKey type: string - MapKey value: parameter name - MapValue type: - If parameter's entity type is a composite entity: map - Else: string or number, depending on parameter value type - MapValue value: - If parameter's entity type is a composite entity: map from composite entity property names to property values - Else: parameter value
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class GoogleCloudDialogflowV2EntityTypeEntityArgs:
    def __init__(__self__, *,
                 synonyms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        An **entity entry** for an associated entity type.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] synonyms: Required. A collection of value synonyms. For example, if the entity type is *vegetable*, and `value` is *scallions*, a synonym could be *green onions*. For `KIND_LIST` entity types: * This collection must contain exactly one synonym equal to `value`.
        :param pulumi.Input[str] value: Required. The primary value associated with this entity entry. For example, if the entity type is *vegetable*, the value could be *scallions*. For `KIND_MAP` entity types: * A reference value to be used in place of synonyms. For `KIND_LIST` entity types: * A string that can contain references to other entity types (with or without aliases).
        """
        if synonyms is not None:
            pulumi.set(__self__, "synonyms", synonyms)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def synonyms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Required. A collection of value synonyms. For example, if the entity type is *vegetable*, and `value` is *scallions*, a synonym could be *green onions*. For `KIND_LIST` entity types: * This collection must contain exactly one synonym equal to `value`.
        """
        return pulumi.get(self, "synonyms")

    @synonyms.setter
    def synonyms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "synonyms", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The primary value associated with this entity entry. For example, if the entity type is *vegetable*, the value could be *scallions*. For `KIND_MAP` entity types: * A reference value to be used in place of synonyms. For `KIND_LIST` entity types: * A string that can contain references to other entity types (with or without aliases).
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentFollowupIntentInfoArgs:
    def __init__(__self__, *,
                 followup_intent_name: Optional[pulumi.Input[str]] = None,
                 parent_followup_intent_name: Optional[pulumi.Input[str]] = None):
        """
        Represents a single followup intent in the chain.
        :param pulumi.Input[str] followup_intent_name: The unique identifier of the followup intent. Format: `projects//agent/intents/`.
        :param pulumi.Input[str] parent_followup_intent_name: The unique identifier of the followup intent's parent. Format: `projects//agent/intents/`.
        """
        if followup_intent_name is not None:
            pulumi.set(__self__, "followup_intent_name", followup_intent_name)
        if parent_followup_intent_name is not None:
            pulumi.set(__self__, "parent_followup_intent_name", parent_followup_intent_name)

    @property
    @pulumi.getter(name="followupIntentName")
    def followup_intent_name(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the followup intent. Format: `projects//agent/intents/`.
        """
        return pulumi.get(self, "followup_intent_name")

    @followup_intent_name.setter
    def followup_intent_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "followup_intent_name", value)

    @property
    @pulumi.getter(name="parentFollowupIntentName")
    def parent_followup_intent_name(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the followup intent's parent. Format: `projects//agent/intents/`.
        """
        return pulumi.get(self, "parent_followup_intent_name")

    @parent_followup_intent_name.setter
    def parent_followup_intent_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_followup_intent_name", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageArgs:
    def __init__(__self__, *,
                 basic_card: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBasicCardArgs']] = None,
                 browse_carousel_card: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardArgs']] = None,
                 card: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageCardArgs']] = None,
                 carousel_select: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageCarouselSelectArgs']] = None,
                 image: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']] = None,
                 link_out_suggestion: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageLinkOutSuggestionArgs']] = None,
                 list_select: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageListSelectArgs']] = None,
                 media_content: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageMediaContentArgs']] = None,
                 payload: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 platform: Optional[pulumi.Input[str]] = None,
                 quick_replies: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageQuickRepliesArgs']] = None,
                 simple_responses: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageSimpleResponsesArgs']] = None,
                 suggestions: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageSuggestionsArgs']] = None,
                 table_card: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageTableCardArgs']] = None,
                 text: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageTextArgs']] = None):
        """
        A rich response message. Corresponds to the intent `Response` field in the Dialogflow console. For more information, see [Rich response messages](https://cloud.google.com/dialogflow/docs/intents-rich-messages).
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageBasicCardArgs'] basic_card: The basic card response for Actions on Google.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardArgs'] browse_carousel_card: Browse carousel card for Actions on Google.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageCardArgs'] card: The card response.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageCarouselSelectArgs'] carousel_select: The carousel card response for Actions on Google.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs'] image: The image response.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageLinkOutSuggestionArgs'] link_out_suggestion: The link out suggestion chip for Actions on Google.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageListSelectArgs'] list_select: The list card response for Actions on Google.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageMediaContentArgs'] media_content: The media content card for Actions on Google.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] payload: A custom platform-specific response.
        :param pulumi.Input[str] platform: Optional. The platform that this message is intended for.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageQuickRepliesArgs'] quick_replies: The quick replies response.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageSimpleResponsesArgs'] simple_responses: The voice and text-only responses for Actions on Google.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageSuggestionsArgs'] suggestions: The suggestion chips for Actions on Google.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageTableCardArgs'] table_card: Table card for Actions on Google.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageTextArgs'] text: The text response.
        """
        if basic_card is not None:
            pulumi.set(__self__, "basic_card", basic_card)
        if browse_carousel_card is not None:
            pulumi.set(__self__, "browse_carousel_card", browse_carousel_card)
        if card is not None:
            pulumi.set(__self__, "card", card)
        if carousel_select is not None:
            pulumi.set(__self__, "carousel_select", carousel_select)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if link_out_suggestion is not None:
            pulumi.set(__self__, "link_out_suggestion", link_out_suggestion)
        if list_select is not None:
            pulumi.set(__self__, "list_select", list_select)
        if media_content is not None:
            pulumi.set(__self__, "media_content", media_content)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if quick_replies is not None:
            pulumi.set(__self__, "quick_replies", quick_replies)
        if simple_responses is not None:
            pulumi.set(__self__, "simple_responses", simple_responses)
        if suggestions is not None:
            pulumi.set(__self__, "suggestions", suggestions)
        if table_card is not None:
            pulumi.set(__self__, "table_card", table_card)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter(name="basicCard")
    def basic_card(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBasicCardArgs']]:
        """
        The basic card response for Actions on Google.
        """
        return pulumi.get(self, "basic_card")

    @basic_card.setter
    def basic_card(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBasicCardArgs']]):
        pulumi.set(self, "basic_card", value)

    @property
    @pulumi.getter(name="browseCarouselCard")
    def browse_carousel_card(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardArgs']]:
        """
        Browse carousel card for Actions on Google.
        """
        return pulumi.get(self, "browse_carousel_card")

    @browse_carousel_card.setter
    def browse_carousel_card(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardArgs']]):
        pulumi.set(self, "browse_carousel_card", value)

    @property
    @pulumi.getter
    def card(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageCardArgs']]:
        """
        The card response.
        """
        return pulumi.get(self, "card")

    @card.setter
    def card(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageCardArgs']]):
        pulumi.set(self, "card", value)

    @property
    @pulumi.getter(name="carouselSelect")
    def carousel_select(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageCarouselSelectArgs']]:
        """
        The carousel card response for Actions on Google.
        """
        return pulumi.get(self, "carousel_select")

    @carousel_select.setter
    def carousel_select(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageCarouselSelectArgs']]):
        pulumi.set(self, "carousel_select", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']]:
        """
        The image response.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="linkOutSuggestion")
    def link_out_suggestion(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageLinkOutSuggestionArgs']]:
        """
        The link out suggestion chip for Actions on Google.
        """
        return pulumi.get(self, "link_out_suggestion")

    @link_out_suggestion.setter
    def link_out_suggestion(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageLinkOutSuggestionArgs']]):
        pulumi.set(self, "link_out_suggestion", value)

    @property
    @pulumi.getter(name="listSelect")
    def list_select(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageListSelectArgs']]:
        """
        The list card response for Actions on Google.
        """
        return pulumi.get(self, "list_select")

    @list_select.setter
    def list_select(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageListSelectArgs']]):
        pulumi.set(self, "list_select", value)

    @property
    @pulumi.getter(name="mediaContent")
    def media_content(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageMediaContentArgs']]:
        """
        The media content card for Actions on Google.
        """
        return pulumi.get(self, "media_content")

    @media_content.setter
    def media_content(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageMediaContentArgs']]):
        pulumi.set(self, "media_content", value)

    @property
    @pulumi.getter
    def payload(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A custom platform-specific response.
        """
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "payload", value)

    @property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The platform that this message is intended for.
        """
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "platform", value)

    @property
    @pulumi.getter(name="quickReplies")
    def quick_replies(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageQuickRepliesArgs']]:
        """
        The quick replies response.
        """
        return pulumi.get(self, "quick_replies")

    @quick_replies.setter
    def quick_replies(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageQuickRepliesArgs']]):
        pulumi.set(self, "quick_replies", value)

    @property
    @pulumi.getter(name="simpleResponses")
    def simple_responses(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageSimpleResponsesArgs']]:
        """
        The voice and text-only responses for Actions on Google.
        """
        return pulumi.get(self, "simple_responses")

    @simple_responses.setter
    def simple_responses(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageSimpleResponsesArgs']]):
        pulumi.set(self, "simple_responses", value)

    @property
    @pulumi.getter
    def suggestions(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageSuggestionsArgs']]:
        """
        The suggestion chips for Actions on Google.
        """
        return pulumi.get(self, "suggestions")

    @suggestions.setter
    def suggestions(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageSuggestionsArgs']]):
        pulumi.set(self, "suggestions", value)

    @property
    @pulumi.getter(name="tableCard")
    def table_card(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageTableCardArgs']]:
        """
        Table card for Actions on Google.
        """
        return pulumi.get(self, "table_card")

    @table_card.setter
    def table_card(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageTableCardArgs']]):
        pulumi.set(self, "table_card", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageTextArgs']]:
        """
        The text response.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageTextArgs']]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageBasicCardArgs:
    def __init__(__self__, *,
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBasicCardButtonArgs']]]] = None,
                 formatted_text: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']] = None,
                 subtitle: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        The basic card message. Useful for displaying information.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBasicCardButtonArgs']]] buttons: Optional. The collection of card buttons.
        :param pulumi.Input[str] formatted_text: Required, unless image is present. The body text of the card.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs'] image: Optional. The image for the card.
        :param pulumi.Input[str] subtitle: Optional. The subtitle of the card.
        :param pulumi.Input[str] title: Optional. The title of the card.
        """
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if formatted_text is not None:
            pulumi.set(__self__, "formatted_text", formatted_text)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBasicCardButtonArgs']]]]:
        """
        Optional. The collection of card buttons.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBasicCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="formattedText")
    def formatted_text(self) -> Optional[pulumi.Input[str]]:
        """
        Required, unless image is present. The body text of the card.
        """
        return pulumi.get(self, "formatted_text")

    @formatted_text.setter
    def formatted_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "formatted_text", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']]:
        """
        Optional. The image for the card.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The subtitle of the card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The title of the card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageBasicCardButtonArgs:
    def __init__(__self__, *,
                 open_uri_action: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBasicCardButtonOpenUriActionArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        The button object that appears at the bottom of a card.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageBasicCardButtonOpenUriActionArgs'] open_uri_action: Required. Action to take when a user taps on the button.
        :param pulumi.Input[str] title: Required. The title of the button.
        """
        if open_uri_action is not None:
            pulumi.set(__self__, "open_uri_action", open_uri_action)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="openUriAction")
    def open_uri_action(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBasicCardButtonOpenUriActionArgs']]:
        """
        Required. Action to take when a user taps on the button.
        """
        return pulumi.get(self, "open_uri_action")

    @open_uri_action.setter
    def open_uri_action(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBasicCardButtonOpenUriActionArgs']]):
        pulumi.set(self, "open_uri_action", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The title of the button.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageBasicCardButtonOpenUriActionArgs:
    def __init__(__self__, *,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        Opens the given URI.
        :param pulumi.Input[str] uri: Required. The HTTP or HTTPS scheme URI.
        """
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The HTTP or HTTPS scheme URI.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardArgs:
    def __init__(__self__, *,
                 image_display_options: Optional[pulumi.Input[str]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemArgs']]]] = None):
        """
        Browse Carousel Card for Actions on Google. https://developers.google.com/actions/assistant/responses#browsing_carousel
        :param pulumi.Input[str] image_display_options: Optional. Settings for displaying the image. Applies to every image in items.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemArgs']]] items: Required. List of items in the Browse Carousel Card. Minimum of two items, maximum of ten.
        """
        if image_display_options is not None:
            pulumi.set(__self__, "image_display_options", image_display_options)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="imageDisplayOptions")
    def image_display_options(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Settings for displaying the image. Applies to every image in items.
        """
        return pulumi.get(self, "image_display_options")

    @image_display_options.setter
    def image_display_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_display_options", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemArgs']]]]:
        """
        Required. List of items in the Browse Carousel Card. Minimum of two items, maximum of ten.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemArgs']]]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 footer: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']] = None,
                 open_uri_action: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        Browsing carousel tile
        :param pulumi.Input[str] description: Optional. Description of the carousel item. Maximum of four lines of text.
        :param pulumi.Input[str] footer: Optional. Text that appears at the bottom of the Browse Carousel Card. Maximum of one line of text.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs'] image: Optional. Hero image for the carousel item.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionArgs'] open_uri_action: Required. Action to present to the user.
        :param pulumi.Input[str] title: Required. Title of the carousel item. Maximum of two lines of text.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if footer is not None:
            pulumi.set(__self__, "footer", footer)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if open_uri_action is not None:
            pulumi.set(__self__, "open_uri_action", open_uri_action)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Description of the carousel item. Maximum of four lines of text.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def footer(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Text that appears at the bottom of the Browse Carousel Card. Maximum of one line of text.
        """
        return pulumi.get(self, "footer")

    @footer.setter
    def footer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "footer", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']]:
        """
        Optional. Hero image for the carousel item.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="openUriAction")
    def open_uri_action(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionArgs']]:
        """
        Required. Action to present to the user.
        """
        return pulumi.get(self, "open_uri_action")

    @open_uri_action.setter
    def open_uri_action(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionArgs']]):
        pulumi.set(self, "open_uri_action", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Required. Title of the carousel item. Maximum of two lines of text.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionArgs:
    def __init__(__self__, *,
                 url: Optional[pulumi.Input[str]] = None,
                 url_type_hint: Optional[pulumi.Input[str]] = None):
        """
        Actions on Google action to open a given url.
        :param pulumi.Input[str] url: Required. URL
        :param pulumi.Input[str] url_type_hint: Optional. Specifies the type of viewer that is used when opening the URL. Defaults to opening via web browser.
        """
        if url is not None:
            pulumi.set(__self__, "url", url)
        if url_type_hint is not None:
            pulumi.set(__self__, "url_type_hint", url_type_hint)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Required. URL
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="urlTypeHint")
    def url_type_hint(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Specifies the type of viewer that is used when opening the URL. Defaults to opening via web browser.
        """
        return pulumi.get(self, "url_type_hint")

    @url_type_hint.setter
    def url_type_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_type_hint", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageCardArgs:
    def __init__(__self__, *,
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageCardButtonArgs']]]] = None,
                 image_uri: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        The card response message.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageCardButtonArgs']]] buttons: Optional. The collection of card buttons.
        :param pulumi.Input[str] image_uri: Optional. The public URI to an image file for the card.
        :param pulumi.Input[str] subtitle: Optional. The subtitle of the card.
        :param pulumi.Input[str] title: Optional. The title of the card.
        """
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_uri is not None:
            pulumi.set(__self__, "image_uri", image_uri)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageCardButtonArgs']]]]:
        """
        Optional. The collection of card buttons.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The public URI to an image file for the card.
        """
        return pulumi.get(self, "image_uri")

    @image_uri.setter
    def image_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_uri", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The subtitle of the card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The title of the card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageCardButtonArgs:
    def __init__(__self__, *,
                 postback: Optional[pulumi.Input[str]] = None,
                 text: Optional[pulumi.Input[str]] = None):
        """
        Contains information about a button.
        :param pulumi.Input[str] postback: Optional. The text to send back to the Dialogflow API or a URI to open.
        :param pulumi.Input[str] text: Optional. The text to show on the button.
        """
        if postback is not None:
            pulumi.set(__self__, "postback", postback)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def postback(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The text to send back to the Dialogflow API or a URI to open.
        """
        return pulumi.get(self, "postback")

    @postback.setter
    def postback(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postback", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The text to show on the button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageCarouselSelectArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageCarouselSelectItemArgs']]]] = None):
        """
        The card for presenting a carousel of options to select from.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageCarouselSelectItemArgs']]] items: Required. Carousel items.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageCarouselSelectItemArgs']]]]:
        """
        Required. Carousel items.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageCarouselSelectItemArgs']]]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageCarouselSelectItemArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']] = None,
                 info: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageSelectItemInfoArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        An item in the carousel.
        :param pulumi.Input[str] description: Optional. The body text of the card.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs'] image: Optional. The image to display.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageSelectItemInfoArgs'] info: Required. Additional info about the option item.
        :param pulumi.Input[str] title: Required. Title of the carousel item.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if info is not None:
            pulumi.set(__self__, "info", info)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The body text of the card.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']]:
        """
        Optional. The image to display.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def info(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageSelectItemInfoArgs']]:
        """
        Required. Additional info about the option item.
        """
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageSelectItemInfoArgs']]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Required. Title of the carousel item.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageColumnPropertiesArgs:
    def __init__(__self__, *,
                 header: Optional[pulumi.Input[str]] = None,
                 horizontal_alignment: Optional[pulumi.Input[str]] = None):
        """
        Column properties for TableCard.
        :param pulumi.Input[str] header: Required. Column heading.
        :param pulumi.Input[str] horizontal_alignment: Optional. Defines text alignment for all cells in this column.
        """
        if header is not None:
            pulumi.set(__self__, "header", header)
        if horizontal_alignment is not None:
            pulumi.set(__self__, "horizontal_alignment", horizontal_alignment)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Required. Column heading.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="horizontalAlignment")
    def horizontal_alignment(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Defines text alignment for all cells in this column.
        """
        return pulumi.get(self, "horizontal_alignment")

    @horizontal_alignment.setter
    def horizontal_alignment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "horizontal_alignment", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageImageArgs:
    def __init__(__self__, *,
                 accessibility_text: Optional[pulumi.Input[str]] = None,
                 image_uri: Optional[pulumi.Input[str]] = None):
        """
        The image response message.
        :param pulumi.Input[str] accessibility_text: Optional. A text description of the image to be used for accessibility, e.g., screen readers.
        :param pulumi.Input[str] image_uri: Optional. The public URI to an image file.
        """
        if accessibility_text is not None:
            pulumi.set(__self__, "accessibility_text", accessibility_text)
        if image_uri is not None:
            pulumi.set(__self__, "image_uri", image_uri)

    @property
    @pulumi.getter(name="accessibilityText")
    def accessibility_text(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. A text description of the image to be used for accessibility, e.g., screen readers.
        """
        return pulumi.get(self, "accessibility_text")

    @accessibility_text.setter
    def accessibility_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accessibility_text", value)

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The public URI to an image file.
        """
        return pulumi.get(self, "image_uri")

    @image_uri.setter
    def image_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_uri", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageLinkOutSuggestionArgs:
    def __init__(__self__, *,
                 destination_name: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        The suggestion chip message that allows the user to jump out to the app or website associated with this agent.
        :param pulumi.Input[str] destination_name: Required. The name of the app or site this chip is linking to.
        :param pulumi.Input[str] uri: Required. The URI of the app or site to open when the user taps the suggestion chip.
        """
        if destination_name is not None:
            pulumi.set(__self__, "destination_name", destination_name)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="destinationName")
    def destination_name(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The name of the app or site this chip is linking to.
        """
        return pulumi.get(self, "destination_name")

    @destination_name.setter
    def destination_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_name", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The URI of the app or site to open when the user taps the suggestion chip.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageListSelectArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageListSelectItemArgs']]]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        The card for presenting a list of options to select from.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageListSelectItemArgs']]] items: Required. List items.
        :param pulumi.Input[str] subtitle: Optional. Subtitle of the list.
        :param pulumi.Input[str] title: Optional. The overall title of the list.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageListSelectItemArgs']]]]:
        """
        Required. List items.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageListSelectItemArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Subtitle of the list.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The overall title of the list.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageListSelectItemArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']] = None,
                 info: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageSelectItemInfoArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        An item in the list.
        :param pulumi.Input[str] description: Optional. The main text describing the item.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs'] image: Optional. The image to display.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageSelectItemInfoArgs'] info: Required. Additional information about this option.
        :param pulumi.Input[str] title: Required. The title of the list item.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if info is not None:
            pulumi.set(__self__, "info", info)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The main text describing the item.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']]:
        """
        Optional. The image to display.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def info(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageSelectItemInfoArgs']]:
        """
        Required. Additional information about this option.
        """
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageSelectItemInfoArgs']]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The title of the list item.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageMediaContentArgs:
    def __init__(__self__, *,
                 media_objects: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageMediaContentResponseMediaObjectArgs']]]] = None,
                 media_type: Optional[pulumi.Input[str]] = None):
        """
        The media content card for Actions on Google.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageMediaContentResponseMediaObjectArgs']]] media_objects: Required. List of media objects.
        :param pulumi.Input[str] media_type: Optional. What type of media is the content (ie "audio").
        """
        if media_objects is not None:
            pulumi.set(__self__, "media_objects", media_objects)
        if media_type is not None:
            pulumi.set(__self__, "media_type", media_type)

    @property
    @pulumi.getter(name="mediaObjects")
    def media_objects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageMediaContentResponseMediaObjectArgs']]]]:
        """
        Required. List of media objects.
        """
        return pulumi.get(self, "media_objects")

    @media_objects.setter
    def media_objects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageMediaContentResponseMediaObjectArgs']]]]):
        pulumi.set(self, "media_objects", value)

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. What type of media is the content (ie "audio").
        """
        return pulumi.get(self, "media_type")

    @media_type.setter
    def media_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "media_type", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageMediaContentResponseMediaObjectArgs:
    def __init__(__self__, *,
                 content_url: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']] = None,
                 large_image: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Response media object for media content card.
        :param pulumi.Input[str] content_url: Required. Url where the media is stored.
        :param pulumi.Input[str] description: Optional. Description of media card.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs'] icon: Optional. Icon to display above media content.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs'] large_image: Optional. Image to display above media content.
        :param pulumi.Input[str] name: Required. Name of media card.
        """
        if content_url is not None:
            pulumi.set(__self__, "content_url", content_url)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if large_image is not None:
            pulumi.set(__self__, "large_image", large_image)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="contentUrl")
    def content_url(self) -> Optional[pulumi.Input[str]]:
        """
        Required. Url where the media is stored.
        """
        return pulumi.get(self, "content_url")

    @content_url.setter
    def content_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_url", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Description of media card.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']]:
        """
        Optional. Icon to display above media content.
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="largeImage")
    def large_image(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']]:
        """
        Optional. Image to display above media content.
        """
        return pulumi.get(self, "large_image")

    @large_image.setter
    def large_image(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']]):
        pulumi.set(self, "large_image", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Required. Name of media card.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageQuickRepliesArgs:
    def __init__(__self__, *,
                 quick_replies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        The quick replies response message.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] quick_replies: Optional. The collection of quick replies.
        :param pulumi.Input[str] title: Optional. The title of the collection of quick replies.
        """
        if quick_replies is not None:
            pulumi.set(__self__, "quick_replies", quick_replies)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="quickReplies")
    def quick_replies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional. The collection of quick replies.
        """
        return pulumi.get(self, "quick_replies")

    @quick_replies.setter
    def quick_replies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "quick_replies", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The title of the collection of quick replies.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageSelectItemInfoArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 synonyms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Additional info about the select item for when it is triggered in a dialog.
        :param pulumi.Input[str] key: Required. A unique key that will be sent back to the agent if this response is given.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] synonyms: Optional. A list of synonyms that can also be used to trigger this item in dialog.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if synonyms is not None:
            pulumi.set(__self__, "synonyms", synonyms)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Required. A unique key that will be sent back to the agent if this response is given.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def synonyms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional. A list of synonyms that can also be used to trigger this item in dialog.
        """
        return pulumi.get(self, "synonyms")

    @synonyms.setter
    def synonyms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "synonyms", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageSimpleResponseArgs:
    def __init__(__self__, *,
                 display_text: Optional[pulumi.Input[str]] = None,
                 ssml: Optional[pulumi.Input[str]] = None,
                 text_to_speech: Optional[pulumi.Input[str]] = None):
        """
        The simple response message containing speech or text.
        :param pulumi.Input[str] display_text: Optional. The text to display.
        :param pulumi.Input[str] ssml: One of text_to_speech or ssml must be provided. Structured spoken response to the user in the SSML format. Mutually exclusive with text_to_speech.
        :param pulumi.Input[str] text_to_speech: One of text_to_speech or ssml must be provided. The plain text of the speech output. Mutually exclusive with ssml.
        """
        if display_text is not None:
            pulumi.set(__self__, "display_text", display_text)
        if ssml is not None:
            pulumi.set(__self__, "ssml", ssml)
        if text_to_speech is not None:
            pulumi.set(__self__, "text_to_speech", text_to_speech)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The text to display.
        """
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter
    def ssml(self) -> Optional[pulumi.Input[str]]:
        """
        One of text_to_speech or ssml must be provided. Structured spoken response to the user in the SSML format. Mutually exclusive with text_to_speech.
        """
        return pulumi.get(self, "ssml")

    @ssml.setter
    def ssml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssml", value)

    @property
    @pulumi.getter(name="textToSpeech")
    def text_to_speech(self) -> Optional[pulumi.Input[str]]:
        """
        One of text_to_speech or ssml must be provided. The plain text of the speech output. Mutually exclusive with ssml.
        """
        return pulumi.get(self, "text_to_speech")

    @text_to_speech.setter
    def text_to_speech(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_to_speech", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageSimpleResponsesArgs:
    def __init__(__self__, *,
                 simple_responses: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageSimpleResponseArgs']]]] = None):
        """
        The collection of simple response candidates. This message in `QueryResult.fulfillment_messages` and `WebhookResponse.fulfillment_messages` should contain only one `SimpleResponse`.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageSimpleResponseArgs']]] simple_responses: Required. The list of simple responses.
        """
        if simple_responses is not None:
            pulumi.set(__self__, "simple_responses", simple_responses)

    @property
    @pulumi.getter(name="simpleResponses")
    def simple_responses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageSimpleResponseArgs']]]]:
        """
        Required. The list of simple responses.
        """
        return pulumi.get(self, "simple_responses")

    @simple_responses.setter
    def simple_responses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageSimpleResponseArgs']]]]):
        pulumi.set(self, "simple_responses", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageSuggestionArgs:
    def __init__(__self__, *,
                 title: Optional[pulumi.Input[str]] = None):
        """
        The suggestion chip message that the user can tap to quickly post a reply to the conversation.
        :param pulumi.Input[str] title: Required. The text shown the in the suggestion chip.
        """
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The text shown the in the suggestion chip.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageSuggestionsArgs:
    def __init__(__self__, *,
                 suggestions: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageSuggestionArgs']]]] = None):
        """
        The collection of suggestions.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageSuggestionArgs']]] suggestions: Required. The list of suggested replies.
        """
        if suggestions is not None:
            pulumi.set(__self__, "suggestions", suggestions)

    @property
    @pulumi.getter
    def suggestions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageSuggestionArgs']]]]:
        """
        Required. The list of suggested replies.
        """
        return pulumi.get(self, "suggestions")

    @suggestions.setter
    def suggestions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageSuggestionArgs']]]]):
        pulumi.set(self, "suggestions", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageTableCardArgs:
    def __init__(__self__, *,
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBasicCardButtonArgs']]]] = None,
                 column_properties: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageColumnPropertiesArgs']]]] = None,
                 image: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']] = None,
                 rows: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageTableCardRowArgs']]]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        Table card for Actions on Google.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBasicCardButtonArgs']]] buttons: Optional. List of buttons for the card.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageColumnPropertiesArgs']]] column_properties: Optional. Display properties for the columns in this table.
        :param pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs'] image: Optional. Image which should be displayed on the card.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageTableCardRowArgs']]] rows: Optional. Rows in this table of data.
        :param pulumi.Input[str] subtitle: Optional. Subtitle to the title.
        :param pulumi.Input[str] title: Required. Title of the card.
        """
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if column_properties is not None:
            pulumi.set(__self__, "column_properties", column_properties)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if rows is not None:
            pulumi.set(__self__, "rows", rows)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBasicCardButtonArgs']]]]:
        """
        Optional. List of buttons for the card.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageBasicCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="columnProperties")
    def column_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageColumnPropertiesArgs']]]]:
        """
        Optional. Display properties for the columns in this table.
        """
        return pulumi.get(self, "column_properties")

    @column_properties.setter
    def column_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageColumnPropertiesArgs']]]]):
        pulumi.set(self, "column_properties", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']]:
        """
        Optional. Image which should be displayed on the card.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['GoogleCloudDialogflowV2IntentMessageImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def rows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageTableCardRowArgs']]]]:
        """
        Optional. Rows in this table of data.
        """
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageTableCardRowArgs']]]]):
        pulumi.set(self, "rows", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Subtitle to the title.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Required. Title of the card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageTableCardCellArgs:
    def __init__(__self__, *,
                 text: Optional[pulumi.Input[str]] = None):
        """
        Cell of TableCardRow.
        :param pulumi.Input[str] text: Required. Text in this cell.
        """
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        Required. Text in this cell.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageTableCardRowArgs:
    def __init__(__self__, *,
                 cells: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageTableCardCellArgs']]]] = None,
                 divider_after: Optional[pulumi.Input[bool]] = None):
        """
        Row of TableCard.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageTableCardCellArgs']]] cells: Optional. List of cells that make up this row.
        :param pulumi.Input[bool] divider_after: Optional. Whether to add a visual divider after this row.
        """
        if cells is not None:
            pulumi.set(__self__, "cells", cells)
        if divider_after is not None:
            pulumi.set(__self__, "divider_after", divider_after)

    @property
    @pulumi.getter
    def cells(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageTableCardCellArgs']]]]:
        """
        Optional. List of cells that make up this row.
        """
        return pulumi.get(self, "cells")

    @cells.setter
    def cells(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentMessageTableCardCellArgs']]]]):
        pulumi.set(self, "cells", value)

    @property
    @pulumi.getter(name="dividerAfter")
    def divider_after(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. Whether to add a visual divider after this row.
        """
        return pulumi.get(self, "divider_after")

    @divider_after.setter
    def divider_after(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "divider_after", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentMessageTextArgs:
    def __init__(__self__, *,
                 text: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The text response message.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] text: Optional. The collection of the agent's responses.
        """
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional. The collection of the agent's responses.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentParameterArgs:
    def __init__(__self__, *,
                 default_value: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 entity_type_display_name: Optional[pulumi.Input[str]] = None,
                 is_list: Optional[pulumi.Input[bool]] = None,
                 mandatory: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 prompts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Represents intent parameters.
        :param pulumi.Input[str] default_value: Optional. The default value to use when the `value` yields an empty result. Default values can be extracted from contexts by using the following syntax: `#context_name.parameter_name`.
        :param pulumi.Input[str] display_name: Required. The name of the parameter.
        :param pulumi.Input[str] entity_type_display_name: Optional. The name of the entity type, prefixed with `@`, that describes values of the parameter. If the parameter is required, this must be provided.
        :param pulumi.Input[bool] is_list: Optional. Indicates whether the parameter represents a list of values.
        :param pulumi.Input[bool] mandatory: Optional. Indicates whether the parameter is required. That is, whether the intent cannot be completed without collecting the parameter value.
        :param pulumi.Input[str] name: The unique identifier of this parameter.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] prompts: Optional. The collection of prompts that the agent can present to the user in order to collect a value for the parameter.
        :param pulumi.Input[str] value: Optional. The definition of the parameter value. It can be: - a constant string, - a parameter value defined as `$parameter_name`, - an original parameter value defined as `$parameter_name.original`, - a parameter value from some context defined as `#context_name.parameter_name`.
        """
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entity_type_display_name is not None:
            pulumi.set(__self__, "entity_type_display_name", entity_type_display_name)
        if is_list is not None:
            pulumi.set(__self__, "is_list", is_list)
        if mandatory is not None:
            pulumi.set(__self__, "mandatory", mandatory)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if prompts is not None:
            pulumi.set(__self__, "prompts", prompts)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The default value to use when the `value` yields an empty result. Default values can be extracted from contexts by using the following syntax: `#context_name.parameter_name`.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The name of the parameter.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="entityTypeDisplayName")
    def entity_type_display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The name of the entity type, prefixed with `@`, that describes values of the parameter. If the parameter is required, this must be provided.
        """
        return pulumi.get(self, "entity_type_display_name")

    @entity_type_display_name.setter
    def entity_type_display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type_display_name", value)

    @property
    @pulumi.getter(name="isList")
    def is_list(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. Indicates whether the parameter represents a list of values.
        """
        return pulumi.get(self, "is_list")

    @is_list.setter
    def is_list(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_list", value)

    @property
    @pulumi.getter
    def mandatory(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. Indicates whether the parameter is required. That is, whether the intent cannot be completed without collecting the parameter value.
        """
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mandatory", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of this parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def prompts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional. The collection of prompts that the agent can present to the user in order to collect a value for the parameter.
        """
        return pulumi.get(self, "prompts")

    @prompts.setter
    def prompts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "prompts", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The definition of the parameter value. It can be: - a constant string, - a parameter value defined as `$parameter_name`, - an original parameter value defined as `$parameter_name.original`, - a parameter value from some context defined as `#context_name.parameter_name`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentTrainingPhraseArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 parts: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentTrainingPhrasePartArgs']]]] = None,
                 times_added_count: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Represents an example that the agent is trained on.
        :param pulumi.Input[str] name: Output only. The unique identifier of this training phrase.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentTrainingPhrasePartArgs']]] parts: Required. The ordered list of training phrase parts. The parts are concatenated in order to form the training phrase. Note: The API does not automatically annotate training phrases like the Dialogflow Console does. Note: Do not forget to include whitespace at part boundaries, so the training phrase is well formatted when the parts are concatenated. If the training phrase does not need to be annotated with parameters, you just need a single part with only the Part.text field set. If you want to annotate the training phrase, you must create multiple parts, where the fields of each part are populated in one of two ways: - `Part.text` is set to a part of the phrase that has no parameters. - `Part.text` is set to a part of the phrase that you want to annotate, and the `entity_type`, `alias`, and `user_defined` fields are all set.
        :param pulumi.Input[int] times_added_count: Optional. Indicates how many times this example was added to the intent. Each time a developer adds an existing sample by editing an intent or training, this counter is increased.
        :param pulumi.Input[str] type: Required. The type of the training phrase.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parts is not None:
            pulumi.set(__self__, "parts", parts)
        if times_added_count is not None:
            pulumi.set(__self__, "times_added_count", times_added_count)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. The unique identifier of this training phrase.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentTrainingPhrasePartArgs']]]]:
        """
        Required. The ordered list of training phrase parts. The parts are concatenated in order to form the training phrase. Note: The API does not automatically annotate training phrases like the Dialogflow Console does. Note: Do not forget to include whitespace at part boundaries, so the training phrase is well formatted when the parts are concatenated. If the training phrase does not need to be annotated with parameters, you just need a single part with only the Part.text field set. If you want to annotate the training phrase, you must create multiple parts, where the fields of each part are populated in one of two ways: - `Part.text` is set to a part of the phrase that has no parameters. - `Part.text` is set to a part of the phrase that you want to annotate, and the `entity_type`, `alias`, and `user_defined` fields are all set.
        """
        return pulumi.get(self, "parts")

    @parts.setter
    def parts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowV2IntentTrainingPhrasePartArgs']]]]):
        pulumi.set(self, "parts", value)

    @property
    @pulumi.getter(name="timesAddedCount")
    def times_added_count(self) -> Optional[pulumi.Input[int]]:
        """
        Optional. Indicates how many times this example was added to the intent. Each time a developer adds an existing sample by editing an intent or training, this counter is increased.
        """
        return pulumi.get(self, "times_added_count")

    @times_added_count.setter
    def times_added_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "times_added_count", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The type of the training phrase.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GoogleCloudDialogflowV2IntentTrainingPhrasePartArgs:
    def __init__(__self__, *,
                 alias: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 text: Optional[pulumi.Input[str]] = None,
                 user_defined: Optional[pulumi.Input[bool]] = None):
        """
        Represents a part of a training phrase.
        :param pulumi.Input[str] alias: Optional. The parameter name for the value extracted from the annotated part of the example. This field is required for annotated parts of the training phrase.
        :param pulumi.Input[str] entity_type: Optional. The entity type name prefixed with `@`. This field is required for annotated parts of the training phrase.
        :param pulumi.Input[str] text: Required. The text for this part.
        :param pulumi.Input[bool] user_defined: Optional. Indicates whether the text was manually annotated. This field is set to true when the Dialogflow Console is used to manually annotate the part. When creating an annotated part with the API, you must set this to true.
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if user_defined is not None:
            pulumi.set(__self__, "user_defined", user_defined)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The parameter name for the value extracted from the annotated part of the example. This field is required for annotated parts of the training phrase.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The entity type name prefixed with `@`. This field is required for annotated parts of the training phrase.
        """
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The text for this part.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="userDefined")
    def user_defined(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. Indicates whether the text was manually annotated. This field is set to true when the Dialogflow Console is used to manually annotate the part. When creating an annotated part with the API, you must set this to true.
        """
        return pulumi.get(self, "user_defined")

    @user_defined.setter
    def user_defined(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_defined", value)


