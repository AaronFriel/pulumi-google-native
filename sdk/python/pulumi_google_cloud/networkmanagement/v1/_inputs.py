# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'AbortInfoArgs',
    'AuditConfigArgs',
    'AuditLogConfigArgs',
    'BindingArgs',
    'DeliverInfoArgs',
    'DropInfoArgs',
    'EndpointArgs',
    'EndpointInfoArgs',
    'ExprArgs',
    'FirewallInfoArgs',
    'ForwardInfoArgs',
    'ForwardingRuleInfoArgs',
    'InstanceInfoArgs',
    'LoadBalancerBackendArgs',
    'LoadBalancerInfoArgs',
    'NetworkInfoArgs',
    'PolicyArgs',
    'ReachabilityDetailsArgs',
    'RouteInfoArgs',
    'StatusArgs',
    'StepArgs',
    'TraceArgs',
    'VpnGatewayInfoArgs',
    'VpnTunnelInfoArgs',
]

@pulumi.input_type
class AbortInfoArgs:
    def __init__(__self__, *,
                 cause: Optional[pulumi.Input[str]] = None,
                 resource_uri: Optional[pulumi.Input[str]] = None):
        """
        Details of the final state "abort" and associated resource.
        :param pulumi.Input[str] cause: Causes that the analysis is aborted.
        :param pulumi.Input[str] resource_uri: URI of the resource that caused the abort.
        """
        if cause is not None:
            pulumi.set(__self__, "cause", cause)
        if resource_uri is not None:
            pulumi.set(__self__, "resource_uri", resource_uri)

    @property
    @pulumi.getter
    def cause(self) -> Optional[pulumi.Input[str]]:
        """
        Causes that the analysis is aborted.
        """
        return pulumi.get(self, "cause")

    @cause.setter
    def cause(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cause", value)

    @property
    @pulumi.getter(name="resourceUri")
    def resource_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of the resource that caused the abort.
        """
        return pulumi.get(self, "resource_uri")

    @resource_uri.setter
    def resource_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_uri", value)


@pulumi.input_type
class AuditConfigArgs:
    def __init__(__self__, *,
                 audit_log_configs: Optional[pulumi.Input[Sequence[pulumi.Input['AuditLogConfigArgs']]]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        """
        Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
        :param pulumi.Input[Sequence[pulumi.Input['AuditLogConfigArgs']]] audit_log_configs: The configuration for logging of each type of permission.
        :param pulumi.Input[str] service: Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
        """
        if audit_log_configs is not None:
            pulumi.set(__self__, "audit_log_configs", audit_log_configs)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="auditLogConfigs")
    def audit_log_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuditLogConfigArgs']]]]:
        """
        The configuration for logging of each type of permission.
        """
        return pulumi.get(self, "audit_log_configs")

    @audit_log_configs.setter
    def audit_log_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuditLogConfigArgs']]]]):
        pulumi.set(self, "audit_log_configs", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class AuditLogConfigArgs:
    def __init__(__self__, *,
                 exempted_members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_type: Optional[pulumi.Input[str]] = None):
        """
        Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exempted_members: Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        :param pulumi.Input[str] log_type: The log type that this config enables.
        """
        if exempted_members is not None:
            pulumi.set(__self__, "exempted_members", exempted_members)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)

    @property
    @pulumi.getter(name="exemptedMembers")
    def exempted_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        """
        return pulumi.get(self, "exempted_members")

    @exempted_members.setter
    def exempted_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exempted_members", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input[str]]:
        """
        The log type that this config enables.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_type", value)


@pulumi.input_type
class BindingArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input['ExprArgs']] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        Associates `members` with a `role`.
        :param pulumi.Input['ExprArgs'] condition: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
        :param pulumi.Input[str] role: Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input['ExprArgs']]:
        """
        The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input['ExprArgs']]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class DeliverInfoArgs:
    def __init__(__self__, *,
                 resource_uri: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        """
        Details of the final state "deliver" and associated resource.
        :param pulumi.Input[str] resource_uri: URI of the resource that the packet is delivered to.
        :param pulumi.Input[str] target: Target type where the packet is delivered to.
        """
        if resource_uri is not None:
            pulumi.set(__self__, "resource_uri", resource_uri)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="resourceUri")
    def resource_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of the resource that the packet is delivered to.
        """
        return pulumi.get(self, "resource_uri")

    @resource_uri.setter
    def resource_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_uri", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        Target type where the packet is delivered to.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class DropInfoArgs:
    def __init__(__self__, *,
                 cause: Optional[pulumi.Input[str]] = None,
                 resource_uri: Optional[pulumi.Input[str]] = None):
        """
        Details of the final state "drop" and associated resource.
        :param pulumi.Input[str] cause: Cause that the packet is dropped.
        :param pulumi.Input[str] resource_uri: URI of the resource that caused the drop.
        """
        if cause is not None:
            pulumi.set(__self__, "cause", cause)
        if resource_uri is not None:
            pulumi.set(__self__, "resource_uri", resource_uri)

    @property
    @pulumi.getter
    def cause(self) -> Optional[pulumi.Input[str]]:
        """
        Cause that the packet is dropped.
        """
        return pulumi.get(self, "cause")

    @cause.setter
    def cause(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cause", value)

    @property
    @pulumi.getter(name="resourceUri")
    def resource_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of the resource that caused the drop.
        """
        return pulumi.get(self, "resource_uri")

    @resource_uri.setter
    def resource_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_uri", value)


@pulumi.input_type
class EndpointArgs:
    def __init__(__self__, *,
                 instance: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[str]] = None):
        """
        Source or destination of the Connectivity Test.
        :param pulumi.Input[str] instance: A Compute Engine instance URI.
        :param pulumi.Input[str] ip_address: The IP address of the endpoint, which can be an external or internal IP. An IPv6 address is only allowed when the test's destination is a [global load balancer VIP](/load-balancing/docs/load-balancing-overview).
        :param pulumi.Input[str] network: A Compute Engine network URI.
        :param pulumi.Input[str] network_type: Type of the network where the endpoint is located. Applicable only to source endpoint, as destination network type can be inferred from the source.
        :param pulumi.Input[int] port: The IP protocol port of the endpoint. Only applicable when protocol is TCP or UDP.
        :param pulumi.Input[str] project_id: Project ID where the endpoint is located. The Project ID can be derived from the URI if you provide a VM instance or network URI. The following are two cases where you must provide the project ID: 1. Only the IP address is specified, and the IP address is within a GCP project. 2. When you are using Shared VPC and the IP address that you provide is from the service project. In this case, the network that the IP address resides in is defined in the host project.
        """
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def instance(self) -> Optional[pulumi.Input[str]]:
        """
        A Compute Engine instance URI.
        """
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address of the endpoint, which can be an external or internal IP. An IPv6 address is only allowed when the test's destination is a [global load balancer VIP](/load-balancing/docs/load-balancing-overview).
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        A Compute Engine network URI.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the network where the endpoint is located. Applicable only to source endpoint, as destination network type can be inferred from the source.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The IP protocol port of the endpoint. Only applicable when protocol is TCP or UDP.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project ID where the endpoint is located. The Project ID can be derived from the URI if you provide a VM instance or network URI. The following are two cases where you must provide the project ID: 1. Only the IP address is specified, and the IP address is within a GCP project. 2. When you are using Shared VPC and the IP address that you provide is from the service project. In this case, the network that the IP address resides in is defined in the host project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class EndpointInfoArgs:
    def __init__(__self__, *,
                 destination_ip: Optional[pulumi.Input[str]] = None,
                 destination_network_uri: Optional[pulumi.Input[str]] = None,
                 destination_port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_network_uri: Optional[pulumi.Input[str]] = None,
                 source_port: Optional[pulumi.Input[int]] = None):
        """
        For display only. The specification of the endpoints for the test. EndpointInfo is derived from source and destination Endpoint and validated by the backend data plane model.
        :param pulumi.Input[str] destination_ip: Destination IP address.
        :param pulumi.Input[str] destination_network_uri: URI of the network where this packet is sent to.
        :param pulumi.Input[int] destination_port: Destination port. Only valid when protocol is TCP or UDP.
        :param pulumi.Input[str] protocol: IP protocol in string format, for example: "TCP", "UDP", "ICMP".
        :param pulumi.Input[str] source_ip: Source IP address.
        :param pulumi.Input[str] source_network_uri: URI of the network where this packet originates from.
        :param pulumi.Input[int] source_port: Source port. Only valid when protocol is TCP or UDP.
        """
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if destination_network_uri is not None:
            pulumi.set(__self__, "destination_network_uri", destination_network_uri)
        if destination_port is not None:
            pulumi.set(__self__, "destination_port", destination_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_network_uri is not None:
            pulumi.set(__self__, "source_network_uri", source_network_uri)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)

    @property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IP address.
        """
        return pulumi.get(self, "destination_ip")

    @destination_ip.setter
    def destination_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_ip", value)

    @property
    @pulumi.getter(name="destinationNetworkUri")
    def destination_network_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of the network where this packet is sent to.
        """
        return pulumi.get(self, "destination_network_uri")

    @destination_network_uri.setter
    def destination_network_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_network_uri", value)

    @property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> Optional[pulumi.Input[int]]:
        """
        Destination port. Only valid when protocol is TCP or UDP.
        """
        return pulumi.get(self, "destination_port")

    @destination_port.setter
    def destination_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "destination_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        IP protocol in string format, for example: "TCP", "UDP", "ICMP".
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourceNetworkUri")
    def source_network_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of the network where this packet originates from.
        """
        return pulumi.get(self, "source_network_uri")

    @source_network_uri.setter
    def source_network_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_network_uri", value)

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[pulumi.Input[int]]:
        """
        Source port. Only valid when protocol is TCP or UDP.
        """
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_port", value)


@pulumi.input_type
class ExprArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
        :param pulumi.Input[str] description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        :param pulumi.Input[str] expression: Textual representation of an expression in Common Expression Language syntax.
        :param pulumi.Input[str] location: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        :param pulumi.Input[str] title: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class FirewallInfoArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 firewall_rule_type: Optional[pulumi.Input[str]] = None,
                 network_uri: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 target_service_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 target_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        For display only. Metadata associated with a VPC firewall rule, an implied VPC firewall rule, or a hierarchical firewall policy rule.
        :param pulumi.Input[str] action: Possible values: ALLOW, DENY
        :param pulumi.Input[str] direction: Possible values: INGRESS, EGRESS
        :param pulumi.Input[str] display_name: The display name of the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
        :param pulumi.Input[str] firewall_rule_type: The firewall rule's type.
        :param pulumi.Input[str] network_uri: The URI of the VPC network that the firewall rule is associated with. This field is not applicable to hierarchical firewall policy rules.
        :param pulumi.Input[str] policy: The hierarchical firewall policy that this rule is associated with. This field is not applicable to VPC firewall rules.
        :param pulumi.Input[int] priority: The priority of the firewall rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] target_service_accounts: The target service accounts specified by the firewall rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] target_tags: The target tags defined by the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
        :param pulumi.Input[str] uri: The URI of the VPC firewall rule. This field is not applicable to implied firewall rules or hierarchical firewall policy rules.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if firewall_rule_type is not None:
            pulumi.set(__self__, "firewall_rule_type", firewall_rule_type)
        if network_uri is not None:
            pulumi.set(__self__, "network_uri", network_uri)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if target_service_accounts is not None:
            pulumi.set(__self__, "target_service_accounts", target_service_accounts)
        if target_tags is not None:
            pulumi.set(__self__, "target_tags", target_tags)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Possible values: ALLOW, DENY
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        Possible values: INGRESS, EGRESS
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="firewallRuleType")
    def firewall_rule_type(self) -> Optional[pulumi.Input[str]]:
        """
        The firewall rule's type.
        """
        return pulumi.get(self, "firewall_rule_type")

    @firewall_rule_type.setter
    def firewall_rule_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_rule_type", value)

    @property
    @pulumi.getter(name="networkUri")
    def network_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URI of the VPC network that the firewall rule is associated with. This field is not applicable to hierarchical firewall policy rules.
        """
        return pulumi.get(self, "network_uri")

    @network_uri.setter
    def network_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_uri", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        """
        The hierarchical firewall policy that this rule is associated with. This field is not applicable to VPC firewall rules.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        The priority of the firewall rule.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="targetServiceAccounts")
    def target_service_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The target service accounts specified by the firewall rule.
        """
        return pulumi.get(self, "target_service_accounts")

    @target_service_accounts.setter
    def target_service_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_service_accounts", value)

    @property
    @pulumi.getter(name="targetTags")
    def target_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The target tags defined by the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
        """
        return pulumi.get(self, "target_tags")

    @target_tags.setter
    def target_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_tags", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URI of the VPC firewall rule. This field is not applicable to implied firewall rules or hierarchical firewall policy rules.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class ForwardInfoArgs:
    def __init__(__self__, *,
                 resource_uri: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        """
        Details of the final state "forward" and associated resource.
        :param pulumi.Input[str] resource_uri: URI of the resource that the packet is forwarded to.
        :param pulumi.Input[str] target: Target type where this packet is forwarded to.
        """
        if resource_uri is not None:
            pulumi.set(__self__, "resource_uri", resource_uri)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="resourceUri")
    def resource_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of the resource that the packet is forwarded to.
        """
        return pulumi.get(self, "resource_uri")

    @resource_uri.setter
    def resource_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_uri", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        Target type where this packet is forwarded to.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class ForwardingRuleInfoArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 matched_port_range: Optional[pulumi.Input[str]] = None,
                 matched_protocol: Optional[pulumi.Input[str]] = None,
                 network_uri: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None):
        """
        For display only. Metadata associated with a Compute Engine forwarding rule.
        :param pulumi.Input[str] display_name: Name of a Compute Engine forwarding rule.
        :param pulumi.Input[str] matched_port_range: Port range defined in the forwarding rule that matches the test.
        :param pulumi.Input[str] matched_protocol: Protocol defined in the forwarding rule that matches the test.
        :param pulumi.Input[str] network_uri: Network URI. Only valid for Internal Load Balancer.
        :param pulumi.Input[str] target: Target type of the forwarding rule.
        :param pulumi.Input[str] uri: URI of a Compute Engine forwarding rule.
        :param pulumi.Input[str] vip: VIP of the forwarding rule.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if matched_port_range is not None:
            pulumi.set(__self__, "matched_port_range", matched_port_range)
        if matched_protocol is not None:
            pulumi.set(__self__, "matched_protocol", matched_protocol)
        if network_uri is not None:
            pulumi.set(__self__, "network_uri", network_uri)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a Compute Engine forwarding rule.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="matchedPortRange")
    def matched_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        Port range defined in the forwarding rule that matches the test.
        """
        return pulumi.get(self, "matched_port_range")

    @matched_port_range.setter
    def matched_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "matched_port_range", value)

    @property
    @pulumi.getter(name="matchedProtocol")
    def matched_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol defined in the forwarding rule that matches the test.
        """
        return pulumi.get(self, "matched_protocol")

    @matched_protocol.setter
    def matched_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "matched_protocol", value)

    @property
    @pulumi.getter(name="networkUri")
    def network_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Network URI. Only valid for Internal Load Balancer.
        """
        return pulumi.get(self, "network_uri")

    @network_uri.setter
    def network_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_uri", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        Target type of the forwarding rule.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of a Compute Engine forwarding rule.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        VIP of the forwarding rule.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)


@pulumi.input_type
class InstanceInfoArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 external_ip: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 internal_ip: Optional[pulumi.Input[str]] = None,
                 network_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 network_uri: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        For display only. Metadata associated with a Compute Engine instance.
        :param pulumi.Input[str] display_name: Name of a Compute Engine instance.
        :param pulumi.Input[str] external_ip: External IP address of the network interface.
        :param pulumi.Input[str] interface: Name of the network interface of a Compute Engine instance.
        :param pulumi.Input[str] internal_ip: Internal IP address of the network interface.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] network_tags: Network tags configured on the instance.
        :param pulumi.Input[str] network_uri: URI of a Compute Engine network.
        :param pulumi.Input[str] service_account: Service account authorized for the instance.
        :param pulumi.Input[str] uri: URI of a Compute Engine instance.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if external_ip is not None:
            pulumi.set(__self__, "external_ip", external_ip)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if network_tags is not None:
            pulumi.set(__self__, "network_tags", network_tags)
        if network_uri is not None:
            pulumi.set(__self__, "network_uri", network_uri)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a Compute Engine instance.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> Optional[pulumi.Input[str]]:
        """
        External IP address of the network interface.
        """
        return pulumi.get(self, "external_ip")

    @external_ip.setter
    def external_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_ip", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the network interface of a Compute Engine instance.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Internal IP address of the network interface.
        """
        return pulumi.get(self, "internal_ip")

    @internal_ip.setter
    def internal_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_ip", value)

    @property
    @pulumi.getter(name="networkTags")
    def network_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Network tags configured on the instance.
        """
        return pulumi.get(self, "network_tags")

    @network_tags.setter
    def network_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "network_tags", value)

    @property
    @pulumi.getter(name="networkUri")
    def network_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of a Compute Engine network.
        """
        return pulumi.get(self, "network_uri")

    @network_uri.setter
    def network_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_uri", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        """
        Service account authorized for the instance.
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of a Compute Engine instance.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class LoadBalancerBackendArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 health_check_allowing_firewall_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 health_check_blocking_firewall_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 health_check_firewall_state: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        For display only. Metadata associated with a specific load balancer backend.
        :param pulumi.Input[str] display_name: Name of a Compute Engine instance or network endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] health_check_allowing_firewall_rules: A list of firewall rule URIs allowing probes from health check IP ranges.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] health_check_blocking_firewall_rules: A list of firewall rule URIs blocking probes from health check IP ranges.
        :param pulumi.Input[str] health_check_firewall_state: State of the health check firewall configuration.
        :param pulumi.Input[str] uri: URI of a Compute Engine instance or network endpoint.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if health_check_allowing_firewall_rules is not None:
            pulumi.set(__self__, "health_check_allowing_firewall_rules", health_check_allowing_firewall_rules)
        if health_check_blocking_firewall_rules is not None:
            pulumi.set(__self__, "health_check_blocking_firewall_rules", health_check_blocking_firewall_rules)
        if health_check_firewall_state is not None:
            pulumi.set(__self__, "health_check_firewall_state", health_check_firewall_state)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a Compute Engine instance or network endpoint.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="healthCheckAllowingFirewallRules")
    def health_check_allowing_firewall_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of firewall rule URIs allowing probes from health check IP ranges.
        """
        return pulumi.get(self, "health_check_allowing_firewall_rules")

    @health_check_allowing_firewall_rules.setter
    def health_check_allowing_firewall_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "health_check_allowing_firewall_rules", value)

    @property
    @pulumi.getter(name="healthCheckBlockingFirewallRules")
    def health_check_blocking_firewall_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of firewall rule URIs blocking probes from health check IP ranges.
        """
        return pulumi.get(self, "health_check_blocking_firewall_rules")

    @health_check_blocking_firewall_rules.setter
    def health_check_blocking_firewall_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "health_check_blocking_firewall_rules", value)

    @property
    @pulumi.getter(name="healthCheckFirewallState")
    def health_check_firewall_state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the health check firewall configuration.
        """
        return pulumi.get(self, "health_check_firewall_state")

    @health_check_firewall_state.setter
    def health_check_firewall_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_firewall_state", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of a Compute Engine instance or network endpoint.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class LoadBalancerInfoArgs:
    def __init__(__self__, *,
                 backend_type: Optional[pulumi.Input[str]] = None,
                 backend_uri: Optional[pulumi.Input[str]] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerBackendArgs']]]] = None,
                 health_check_uri: Optional[pulumi.Input[str]] = None,
                 load_balancer_type: Optional[pulumi.Input[str]] = None):
        """
        For display only. Metadata associated with a load balancer.
        :param pulumi.Input[str] backend_type: Type of load balancer's backend configuration.
        :param pulumi.Input[str] backend_uri: Backend configuration URI.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerBackendArgs']]] backends: Information for the loadbalancer backends.
        :param pulumi.Input[str] health_check_uri: URI of the health check for the load balancer.
        :param pulumi.Input[str] load_balancer_type: Type of the load balancer.
        """
        if backend_type is not None:
            pulumi.set(__self__, "backend_type", backend_type)
        if backend_uri is not None:
            pulumi.set(__self__, "backend_uri", backend_uri)
        if backends is not None:
            pulumi.set(__self__, "backends", backends)
        if health_check_uri is not None:
            pulumi.set(__self__, "health_check_uri", health_check_uri)
        if load_balancer_type is not None:
            pulumi.set(__self__, "load_balancer_type", load_balancer_type)

    @property
    @pulumi.getter(name="backendType")
    def backend_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of load balancer's backend configuration.
        """
        return pulumi.get(self, "backend_type")

    @backend_type.setter
    def backend_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backend_type", value)

    @property
    @pulumi.getter(name="backendUri")
    def backend_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Backend configuration URI.
        """
        return pulumi.get(self, "backend_uri")

    @backend_uri.setter
    def backend_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backend_uri", value)

    @property
    @pulumi.getter
    def backends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerBackendArgs']]]]:
        """
        Information for the loadbalancer backends.
        """
        return pulumi.get(self, "backends")

    @backends.setter
    def backends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerBackendArgs']]]]):
        pulumi.set(self, "backends", value)

    @property
    @pulumi.getter(name="healthCheckUri")
    def health_check_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of the health check for the load balancer.
        """
        return pulumi.get(self, "health_check_uri")

    @health_check_uri.setter
    def health_check_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_uri", value)

    @property
    @pulumi.getter(name="loadBalancerType")
    def load_balancer_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the load balancer.
        """
        return pulumi.get(self, "load_balancer_type")

    @load_balancer_type.setter
    def load_balancer_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_type", value)


@pulumi.input_type
class NetworkInfoArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 matched_ip_range: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        For display only. Metadata associated with a Compute Engine network.
        :param pulumi.Input[str] display_name: Name of a Compute Engine network.
        :param pulumi.Input[str] matched_ip_range: The IP range that matches the test.
        :param pulumi.Input[str] uri: URI of a Compute Engine network.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if matched_ip_range is not None:
            pulumi.set(__self__, "matched_ip_range", matched_ip_range)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a Compute Engine network.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="matchedIpRange")
    def matched_ip_range(self) -> Optional[pulumi.Input[str]]:
        """
        The IP range that matches the test.
        """
        return pulumi.get(self, "matched_ip_range")

    @matched_ip_range.setter
    def matched_ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "matched_ip_range", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of a Compute Engine network.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class PolicyArgs:
    def __init__(__self__, *,
                 audit_configs: Optional[pulumi.Input[Sequence[pulumi.Input['AuditConfigArgs']]]] = None,
                 bindings: Optional[pulumi.Input[Sequence[pulumi.Input['BindingArgs']]]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
        :param pulumi.Input[Sequence[pulumi.Input['AuditConfigArgs']]] audit_configs: Specifies cloud audit logging configuration for this policy.
        :param pulumi.Input[Sequence[pulumi.Input['BindingArgs']]] bindings: Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
        :param pulumi.Input[str] etag: `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
        :param pulumi.Input[int] version: Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        """
        if audit_configs is not None:
            pulumi.set(__self__, "audit_configs", audit_configs)
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="auditConfigs")
    def audit_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuditConfigArgs']]]]:
        """
        Specifies cloud audit logging configuration for this policy.
        """
        return pulumi.get(self, "audit_configs")

    @audit_configs.setter
    def audit_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuditConfigArgs']]]]):
        pulumi.set(self, "audit_configs", value)

    @property
    @pulumi.getter
    def bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BindingArgs']]]]:
        """
        Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
        """
        return pulumi.get(self, "bindings")

    @bindings.setter
    def bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BindingArgs']]]]):
        pulumi.set(self, "bindings", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ReachabilityDetailsArgs:
    def __init__(__self__, *,
                 error: Optional[pulumi.Input['StatusArgs']] = None,
                 result: Optional[pulumi.Input[str]] = None,
                 traces: Optional[pulumi.Input[Sequence[pulumi.Input['TraceArgs']]]] = None,
                 verify_time: Optional[pulumi.Input[str]] = None):
        """
        Results of the configuration analysis from the last run of the test.
        :param pulumi.Input['StatusArgs'] error: The details of a failure or a cancellation of reachability analysis.
        :param pulumi.Input[str] result: The overall result of the test's configuration analysis.
        :param pulumi.Input[Sequence[pulumi.Input['TraceArgs']]] traces: Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.
        :param pulumi.Input[str] verify_time: The time of the configuration analysis.
        """
        if error is not None:
            pulumi.set(__self__, "error", error)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if traces is not None:
            pulumi.set(__self__, "traces", traces)
        if verify_time is not None:
            pulumi.set(__self__, "verify_time", verify_time)

    @property
    @pulumi.getter
    def error(self) -> Optional[pulumi.Input['StatusArgs']]:
        """
        The details of a failure or a cancellation of reachability analysis.
        """
        return pulumi.get(self, "error")

    @error.setter
    def error(self, value: Optional[pulumi.Input['StatusArgs']]):
        pulumi.set(self, "error", value)

    @property
    @pulumi.getter
    def result(self) -> Optional[pulumi.Input[str]]:
        """
        The overall result of the test's configuration analysis.
        """
        return pulumi.get(self, "result")

    @result.setter
    def result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "result", value)

    @property
    @pulumi.getter
    def traces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TraceArgs']]]]:
        """
        Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.
        """
        return pulumi.get(self, "traces")

    @traces.setter
    def traces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TraceArgs']]]]):
        pulumi.set(self, "traces", value)

    @property
    @pulumi.getter(name="verifyTime")
    def verify_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time of the configuration analysis.
        """
        return pulumi.get(self, "verify_time")

    @verify_time.setter
    def verify_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_time", value)


@pulumi.input_type
class RouteInfoArgs:
    def __init__(__self__, *,
                 dest_ip_range: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 instance_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 network_uri: Optional[pulumi.Input[str]] = None,
                 next_hop: Optional[pulumi.Input[str]] = None,
                 next_hop_type: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 route_type: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        For display only. Metadata associated with a Compute Engine route.
        :param pulumi.Input[str] dest_ip_range: Destination IP range of the route.
        :param pulumi.Input[str] display_name: Name of a Compute Engine route.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_tags: Instance tags of the route.
        :param pulumi.Input[str] network_uri: URI of a Compute Engine network.
        :param pulumi.Input[str] next_hop: Next hop of the route.
        :param pulumi.Input[str] next_hop_type: Type of next hop.
        :param pulumi.Input[int] priority: Priority of the route.
        :param pulumi.Input[str] route_type: Type of route.
        :param pulumi.Input[str] uri: URI of a Compute Engine route. Dynamic route from cloud router does not have a URI. Advertised route from Google Cloud VPC to on-premises network also does not have a URI.
        """
        if dest_ip_range is not None:
            pulumi.set(__self__, "dest_ip_range", dest_ip_range)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if instance_tags is not None:
            pulumi.set(__self__, "instance_tags", instance_tags)
        if network_uri is not None:
            pulumi.set(__self__, "network_uri", network_uri)
        if next_hop is not None:
            pulumi.set(__self__, "next_hop", next_hop)
        if next_hop_type is not None:
            pulumi.set(__self__, "next_hop_type", next_hop_type)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if route_type is not None:
            pulumi.set(__self__, "route_type", route_type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="destIpRange")
    def dest_ip_range(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IP range of the route.
        """
        return pulumi.get(self, "dest_ip_range")

    @dest_ip_range.setter
    def dest_ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dest_ip_range", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a Compute Engine route.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="instanceTags")
    def instance_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Instance tags of the route.
        """
        return pulumi.get(self, "instance_tags")

    @instance_tags.setter
    def instance_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "instance_tags", value)

    @property
    @pulumi.getter(name="networkUri")
    def network_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of a Compute Engine network.
        """
        return pulumi.get(self, "network_uri")

    @network_uri.setter
    def network_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_uri", value)

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> Optional[pulumi.Input[str]]:
        """
        Next hop of the route.
        """
        return pulumi.get(self, "next_hop")

    @next_hop.setter
    def next_hop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop", value)

    @property
    @pulumi.getter(name="nextHopType")
    def next_hop_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of next hop.
        """
        return pulumi.get(self, "next_hop_type")

    @next_hop_type.setter
    def next_hop_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_type", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of the route.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of route.
        """
        return pulumi.get(self, "route_type")

    @route_type.setter
    def route_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_type", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of a Compute Engine route. Dynamic route from cloud router does not have a URI. Advertised route from Google Cloud VPC to on-premises network also does not have a URI.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class StatusArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None,
                 details: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 message: Optional[pulumi.Input[str]] = None):
        """
        The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
        :param pulumi.Input[int] code: The status code, which should be an enum value of google.rpc.Code.
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] details: A list of messages that carry the error details. There is a common set of message types for APIs to use.
        :param pulumi.Input[str] message: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        """
        The status code, which should be an enum value of google.rpc.Code.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        A list of messages that carry the error details. There is a common set of message types for APIs to use.
        """
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "details", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class StepArgs:
    def __init__(__self__, *,
                 abort: Optional[pulumi.Input['AbortInfoArgs']] = None,
                 causes_drop: Optional[pulumi.Input[bool]] = None,
                 deliver: Optional[pulumi.Input['DeliverInfoArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 drop: Optional[pulumi.Input['DropInfoArgs']] = None,
                 endpoint: Optional[pulumi.Input['EndpointInfoArgs']] = None,
                 firewall: Optional[pulumi.Input['FirewallInfoArgs']] = None,
                 forward: Optional[pulumi.Input['ForwardInfoArgs']] = None,
                 forwarding_rule: Optional[pulumi.Input['ForwardingRuleInfoArgs']] = None,
                 instance: Optional[pulumi.Input['InstanceInfoArgs']] = None,
                 load_balancer: Optional[pulumi.Input['LoadBalancerInfoArgs']] = None,
                 network: Optional[pulumi.Input['NetworkInfoArgs']] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 route: Optional[pulumi.Input['RouteInfoArgs']] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 vpn_gateway: Optional[pulumi.Input['VpnGatewayInfoArgs']] = None,
                 vpn_tunnel: Optional[pulumi.Input['VpnTunnelInfoArgs']] = None):
        """
        A simulated forwarding path is composed of multiple steps. Each step has a well-defined state and an associated configuration.
        :param pulumi.Input['AbortInfoArgs'] abort: Display info of the final state "abort" and reason.
        :param pulumi.Input[bool] causes_drop: This is a step that leads to the final state Drop.
        :param pulumi.Input['DeliverInfoArgs'] deliver: Display info of the final state "deliver" and reason.
        :param pulumi.Input[str] description: A description of the step. Usually this is a summary of the state.
        :param pulumi.Input['DropInfoArgs'] drop: Display info of the final state "drop" and reason.
        :param pulumi.Input['EndpointInfoArgs'] endpoint: Display info of the source and destination under analysis. The endpoint info in an intermediate state may differ with the initial input, as it might be modified by state like NAT, or Connection Proxy.
        :param pulumi.Input['FirewallInfoArgs'] firewall: Display info of a Compute Engine firewall rule.
        :param pulumi.Input['ForwardInfoArgs'] forward: Display info of the final state "forward" and reason.
        :param pulumi.Input['ForwardingRuleInfoArgs'] forwarding_rule: Display info of a Compute Engine forwarding rule.
        :param pulumi.Input['InstanceInfoArgs'] instance: Display info of a Compute Engine instance.
        :param pulumi.Input['LoadBalancerInfoArgs'] load_balancer: Display info of the load balancers.
        :param pulumi.Input['NetworkInfoArgs'] network: Display info of a GCP network.
        :param pulumi.Input[str] project_id: Project ID that contains the configuration this step is validating.
        :param pulumi.Input['RouteInfoArgs'] route: Display info of a Compute Engine route.
        :param pulumi.Input[str] state: Each step is in one of the pre-defined states.
        :param pulumi.Input['VpnGatewayInfoArgs'] vpn_gateway: Display info of a Compute Engine VPN gateway.
        :param pulumi.Input['VpnTunnelInfoArgs'] vpn_tunnel: Display info of a Compute Engine VPN tunnel.
        """
        if abort is not None:
            pulumi.set(__self__, "abort", abort)
        if causes_drop is not None:
            pulumi.set(__self__, "causes_drop", causes_drop)
        if deliver is not None:
            pulumi.set(__self__, "deliver", deliver)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if firewall is not None:
            pulumi.set(__self__, "firewall", firewall)
        if forward is not None:
            pulumi.set(__self__, "forward", forward)
        if forwarding_rule is not None:
            pulumi.set(__self__, "forwarding_rule", forwarding_rule)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if load_balancer is not None:
            pulumi.set(__self__, "load_balancer", load_balancer)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vpn_gateway is not None:
            pulumi.set(__self__, "vpn_gateway", vpn_gateway)
        if vpn_tunnel is not None:
            pulumi.set(__self__, "vpn_tunnel", vpn_tunnel)

    @property
    @pulumi.getter
    def abort(self) -> Optional[pulumi.Input['AbortInfoArgs']]:
        """
        Display info of the final state "abort" and reason.
        """
        return pulumi.get(self, "abort")

    @abort.setter
    def abort(self, value: Optional[pulumi.Input['AbortInfoArgs']]):
        pulumi.set(self, "abort", value)

    @property
    @pulumi.getter(name="causesDrop")
    def causes_drop(self) -> Optional[pulumi.Input[bool]]:
        """
        This is a step that leads to the final state Drop.
        """
        return pulumi.get(self, "causes_drop")

    @causes_drop.setter
    def causes_drop(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "causes_drop", value)

    @property
    @pulumi.getter
    def deliver(self) -> Optional[pulumi.Input['DeliverInfoArgs']]:
        """
        Display info of the final state "deliver" and reason.
        """
        return pulumi.get(self, "deliver")

    @deliver.setter
    def deliver(self, value: Optional[pulumi.Input['DeliverInfoArgs']]):
        pulumi.set(self, "deliver", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the step. Usually this is a summary of the state.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def drop(self) -> Optional[pulumi.Input['DropInfoArgs']]:
        """
        Display info of the final state "drop" and reason.
        """
        return pulumi.get(self, "drop")

    @drop.setter
    def drop(self, value: Optional[pulumi.Input['DropInfoArgs']]):
        pulumi.set(self, "drop", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input['EndpointInfoArgs']]:
        """
        Display info of the source and destination under analysis. The endpoint info in an intermediate state may differ with the initial input, as it might be modified by state like NAT, or Connection Proxy.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input['EndpointInfoArgs']]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def firewall(self) -> Optional[pulumi.Input['FirewallInfoArgs']]:
        """
        Display info of a Compute Engine firewall rule.
        """
        return pulumi.get(self, "firewall")

    @firewall.setter
    def firewall(self, value: Optional[pulumi.Input['FirewallInfoArgs']]):
        pulumi.set(self, "firewall", value)

    @property
    @pulumi.getter
    def forward(self) -> Optional[pulumi.Input['ForwardInfoArgs']]:
        """
        Display info of the final state "forward" and reason.
        """
        return pulumi.get(self, "forward")

    @forward.setter
    def forward(self, value: Optional[pulumi.Input['ForwardInfoArgs']]):
        pulumi.set(self, "forward", value)

    @property
    @pulumi.getter(name="forwardingRule")
    def forwarding_rule(self) -> Optional[pulumi.Input['ForwardingRuleInfoArgs']]:
        """
        Display info of a Compute Engine forwarding rule.
        """
        return pulumi.get(self, "forwarding_rule")

    @forwarding_rule.setter
    def forwarding_rule(self, value: Optional[pulumi.Input['ForwardingRuleInfoArgs']]):
        pulumi.set(self, "forwarding_rule", value)

    @property
    @pulumi.getter
    def instance(self) -> Optional[pulumi.Input['InstanceInfoArgs']]:
        """
        Display info of a Compute Engine instance.
        """
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: Optional[pulumi.Input['InstanceInfoArgs']]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> Optional[pulumi.Input['LoadBalancerInfoArgs']]:
        """
        Display info of the load balancers.
        """
        return pulumi.get(self, "load_balancer")

    @load_balancer.setter
    def load_balancer(self, value: Optional[pulumi.Input['LoadBalancerInfoArgs']]):
        pulumi.set(self, "load_balancer", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input['NetworkInfoArgs']]:
        """
        Display info of a GCP network.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input['NetworkInfoArgs']]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project ID that contains the configuration this step is validating.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input['RouteInfoArgs']]:
        """
        Display info of a Compute Engine route.
        """
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input['RouteInfoArgs']]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Each step is in one of the pre-defined states.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="vpnGateway")
    def vpn_gateway(self) -> Optional[pulumi.Input['VpnGatewayInfoArgs']]:
        """
        Display info of a Compute Engine VPN gateway.
        """
        return pulumi.get(self, "vpn_gateway")

    @vpn_gateway.setter
    def vpn_gateway(self, value: Optional[pulumi.Input['VpnGatewayInfoArgs']]):
        pulumi.set(self, "vpn_gateway", value)

    @property
    @pulumi.getter(name="vpnTunnel")
    def vpn_tunnel(self) -> Optional[pulumi.Input['VpnTunnelInfoArgs']]:
        """
        Display info of a Compute Engine VPN tunnel.
        """
        return pulumi.get(self, "vpn_tunnel")

    @vpn_tunnel.setter
    def vpn_tunnel(self, value: Optional[pulumi.Input['VpnTunnelInfoArgs']]):
        pulumi.set(self, "vpn_tunnel", value)


@pulumi.input_type
class TraceArgs:
    def __init__(__self__, *,
                 endpoint_info: Optional[pulumi.Input['EndpointInfoArgs']] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input['StepArgs']]]] = None):
        """
        Trace represents one simulated packet forwarding path. * Each trace contains multiple ordered Steps. * Each step is in a particular state with associated configuration. * State is categorized as final or non-final states. * Each final state has a reason associated. * Each trace must end with a final state (the last step). ``` |---------------------Trace----------------------| Step1(State) Step2(State) --- StepN(State(final)) ```
        :param pulumi.Input['EndpointInfoArgs'] endpoint_info: Derived from the source and destination endpoints definition, and validated by the data plane model. If there are multiple traces starting from different source locations, then the endpoint_info may be different between traces.
        :param pulumi.Input[Sequence[pulumi.Input['StepArgs']]] steps: A trace of a test contains multiple steps from the initial state to the final state (delivered, dropped, forwarded, or aborted). The steps are ordered by the processing sequence within the simulated network state machine. It is critical to preserve the order of the steps and avoid reordering or sorting them.
        """
        if endpoint_info is not None:
            pulumi.set(__self__, "endpoint_info", endpoint_info)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter(name="endpointInfo")
    def endpoint_info(self) -> Optional[pulumi.Input['EndpointInfoArgs']]:
        """
        Derived from the source and destination endpoints definition, and validated by the data plane model. If there are multiple traces starting from different source locations, then the endpoint_info may be different between traces.
        """
        return pulumi.get(self, "endpoint_info")

    @endpoint_info.setter
    def endpoint_info(self, value: Optional[pulumi.Input['EndpointInfoArgs']]):
        pulumi.set(self, "endpoint_info", value)

    @property
    @pulumi.getter
    def steps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StepArgs']]]]:
        """
        A trace of a test contains multiple steps from the initial state to the final state (delivered, dropped, forwarded, or aborted). The steps are ordered by the processing sequence within the simulated network state machine. It is critical to preserve the order of the steps and avoid reordering or sorting them.
        """
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StepArgs']]]]):
        pulumi.set(self, "steps", value)


@pulumi.input_type
class VpnGatewayInfoArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 network_uri: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 vpn_tunnel_uri: Optional[pulumi.Input[str]] = None):
        """
        For display only. Metadata associated with a Compute Engine VPN gateway.
        :param pulumi.Input[str] display_name: Name of a VPN gateway.
        :param pulumi.Input[str] ip_address: IP address of the VPN gateway.
        :param pulumi.Input[str] network_uri: URI of a Compute Engine network where the VPN gateway is configured.
        :param pulumi.Input[str] region: Name of a GCP region where this VPN gateway is configured.
        :param pulumi.Input[str] uri: URI of a VPN gateway.
        :param pulumi.Input[str] vpn_tunnel_uri: A VPN tunnel that is associated with this VPN gateway. There may be multiple VPN tunnels configured on a VPN gateway, and only the one relevant to the test is displayed.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if network_uri is not None:
            pulumi.set(__self__, "network_uri", network_uri)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if vpn_tunnel_uri is not None:
            pulumi.set(__self__, "vpn_tunnel_uri", vpn_tunnel_uri)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a VPN gateway.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the VPN gateway.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="networkUri")
    def network_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of a Compute Engine network where the VPN gateway is configured.
        """
        return pulumi.get(self, "network_uri")

    @network_uri.setter
    def network_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_uri", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a GCP region where this VPN gateway is configured.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of a VPN gateway.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="vpnTunnelUri")
    def vpn_tunnel_uri(self) -> Optional[pulumi.Input[str]]:
        """
        A VPN tunnel that is associated with this VPN gateway. There may be multiple VPN tunnels configured on a VPN gateway, and only the one relevant to the test is displayed.
        """
        return pulumi.get(self, "vpn_tunnel_uri")

    @vpn_tunnel_uri.setter
    def vpn_tunnel_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_tunnel_uri", value)


@pulumi.input_type
class VpnTunnelInfoArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 network_uri: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 remote_gateway: Optional[pulumi.Input[str]] = None,
                 remote_gateway_ip: Optional[pulumi.Input[str]] = None,
                 routing_type: Optional[pulumi.Input[str]] = None,
                 source_gateway: Optional[pulumi.Input[str]] = None,
                 source_gateway_ip: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        For display only. Metadata associated with a Compute Engine VPN tunnel.
        :param pulumi.Input[str] display_name: Name of a VPN tunnel.
        :param pulumi.Input[str] network_uri: URI of a Compute Engine network where the VPN tunnel is configured.
        :param pulumi.Input[str] region: Name of a GCP region where this VPN tunnel is configured.
        :param pulumi.Input[str] remote_gateway: URI of a VPN gateway at remote end of the tunnel.
        :param pulumi.Input[str] remote_gateway_ip: Remote VPN gateway's IP address.
        :param pulumi.Input[str] routing_type: Type of the routing policy.
        :param pulumi.Input[str] source_gateway: URI of the VPN gateway at local end of the tunnel.
        :param pulumi.Input[str] source_gateway_ip: Local VPN gateway's IP address.
        :param pulumi.Input[str] uri: URI of a VPN tunnel.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if network_uri is not None:
            pulumi.set(__self__, "network_uri", network_uri)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if remote_gateway is not None:
            pulumi.set(__self__, "remote_gateway", remote_gateway)
        if remote_gateway_ip is not None:
            pulumi.set(__self__, "remote_gateway_ip", remote_gateway_ip)
        if routing_type is not None:
            pulumi.set(__self__, "routing_type", routing_type)
        if source_gateway is not None:
            pulumi.set(__self__, "source_gateway", source_gateway)
        if source_gateway_ip is not None:
            pulumi.set(__self__, "source_gateway_ip", source_gateway_ip)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a VPN tunnel.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="networkUri")
    def network_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of a Compute Engine network where the VPN tunnel is configured.
        """
        return pulumi.get(self, "network_uri")

    @network_uri.setter
    def network_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_uri", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a GCP region where this VPN tunnel is configured.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="remoteGateway")
    def remote_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        URI of a VPN gateway at remote end of the tunnel.
        """
        return pulumi.get(self, "remote_gateway")

    @remote_gateway.setter
    def remote_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gateway", value)

    @property
    @pulumi.getter(name="remoteGatewayIp")
    def remote_gateway_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Remote VPN gateway's IP address.
        """
        return pulumi.get(self, "remote_gateway_ip")

    @remote_gateway_ip.setter
    def remote_gateway_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gateway_ip", value)

    @property
    @pulumi.getter(name="routingType")
    def routing_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the routing policy.
        """
        return pulumi.get(self, "routing_type")

    @routing_type.setter
    def routing_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routing_type", value)

    @property
    @pulumi.getter(name="sourceGateway")
    def source_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        URI of the VPN gateway at local end of the tunnel.
        """
        return pulumi.get(self, "source_gateway")

    @source_gateway.setter
    def source_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_gateway", value)

    @property
    @pulumi.getter(name="sourceGatewayIp")
    def source_gateway_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Local VPN gateway's IP address.
        """
        return pulumi.get(self, "source_gateway_ip")

    @source_gateway_ip.setter
    def source_gateway_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_gateway_ip", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of a VPN tunnel.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


