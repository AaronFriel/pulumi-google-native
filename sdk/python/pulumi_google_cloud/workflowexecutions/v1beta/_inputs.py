# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'ErrorArgs',
]

@pulumi.input_type
class ErrorArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input[str]] = None,
                 payload: Optional[pulumi.Input[str]] = None):
        """
        Error describes why the execution was abnormally terminated.
        :param pulumi.Input[str] context: Human readable error context, helpful for debugging purposes.
        :param pulumi.Input[str] payload: Error payload returned by the execution, represented as a JSON string.
        """
        if context is not None:
            pulumi.set(__self__, "context", context)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[str]]:
        """
        Human readable error context, helpful for debugging purposes.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def payload(self) -> Optional[pulumi.Input[str]]:
        """
        Error payload returned by the execution, represented as a JSON string.
        """
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload", value)


