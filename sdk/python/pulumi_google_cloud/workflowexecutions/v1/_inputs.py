# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'ErrorArgs',
    'PositionArgs',
    'StackTraceArgs',
    'StackTraceElementArgs',
]

@pulumi.input_type
class ErrorArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input[str]] = None,
                 payload: Optional[pulumi.Input[str]] = None,
                 stack_trace: Optional[pulumi.Input['StackTraceArgs']] = None):
        """
        Error describes why the execution was abnormally terminated.
        :param pulumi.Input[str] context: Human readable stack trace string.
        :param pulumi.Input[str] payload: Error message and data returned represented as a JSON string.
        :param pulumi.Input['StackTraceArgs'] stack_trace: Stack trace with detailed information of where error was generated.
        """
        if context is not None:
            pulumi.set(__self__, "context", context)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)
        if stack_trace is not None:
            pulumi.set(__self__, "stack_trace", stack_trace)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[str]]:
        """
        Human readable stack trace string.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def payload(self) -> Optional[pulumi.Input[str]]:
        """
        Error message and data returned represented as a JSON string.
        """
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload", value)

    @property
    @pulumi.getter(name="stackTrace")
    def stack_trace(self) -> Optional[pulumi.Input['StackTraceArgs']]:
        """
        Stack trace with detailed information of where error was generated.
        """
        return pulumi.get(self, "stack_trace")

    @stack_trace.setter
    def stack_trace(self, value: Optional[pulumi.Input['StackTraceArgs']]):
        pulumi.set(self, "stack_trace", value)


@pulumi.input_type
class PositionArgs:
    def __init__(__self__, *,
                 column: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[str]] = None,
                 line: Optional[pulumi.Input[str]] = None):
        """
        Position contains source position information about the stack trace element such as line number, column number and length of the code block in bytes.
        :param pulumi.Input[str] column: The source code column position (of the line) the current instruction was generated from.
        :param pulumi.Input[str] length: The length in bytes of text in this character group, e.g. digits of a number, string length, or AST (abstract syntax tree) node.
        :param pulumi.Input[str] line: The source code line number the current instruction was generated from.
        """
        if column is not None:
            pulumi.set(__self__, "column", column)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if line is not None:
            pulumi.set(__self__, "line", line)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input[str]]:
        """
        The source code column position (of the line) the current instruction was generated from.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[str]]:
        """
        The length in bytes of text in this character group, e.g. digits of a number, string length, or AST (abstract syntax tree) node.
        """
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def line(self) -> Optional[pulumi.Input[str]]:
        """
        The source code line number the current instruction was generated from.
        """
        return pulumi.get(self, "line")

    @line.setter
    def line(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line", value)


@pulumi.input_type
class StackTraceArgs:
    def __init__(__self__, *,
                 elements: Optional[pulumi.Input[Sequence[pulumi.Input['StackTraceElementArgs']]]] = None):
        """
        A collection of stack elements (frames) where an error occurred.
        :param pulumi.Input[Sequence[pulumi.Input['StackTraceElementArgs']]] elements: An array of Stack elements.
        """
        if elements is not None:
            pulumi.set(__self__, "elements", elements)

    @property
    @pulumi.getter
    def elements(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StackTraceElementArgs']]]]:
        """
        An array of Stack elements.
        """
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StackTraceElementArgs']]]]):
        pulumi.set(self, "elements", value)


@pulumi.input_type
class StackTraceElementArgs:
    def __init__(__self__, *,
                 position: Optional[pulumi.Input['PositionArgs']] = None,
                 routine: Optional[pulumi.Input[str]] = None,
                 step: Optional[pulumi.Input[str]] = None):
        """
        A single stack element (frame) where an error occurred.
        :param pulumi.Input['PositionArgs'] position: The source position information of the stacktrace element.
        :param pulumi.Input[str] routine: The routine where the error occurred.
        :param pulumi.Input[str] step: The step the error occurred at.
        """
        if position is not None:
            pulumi.set(__self__, "position", position)
        if routine is not None:
            pulumi.set(__self__, "routine", routine)
        if step is not None:
            pulumi.set(__self__, "step", step)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input['PositionArgs']]:
        """
        The source position information of the stacktrace element.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input['PositionArgs']]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def routine(self) -> Optional[pulumi.Input[str]]:
        """
        The routine where the error occurred.
        """
        return pulumi.get(self, "routine")

    @routine.setter
    def routine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routine", value)

    @property
    @pulumi.getter
    def step(self) -> Optional[pulumi.Input[str]]:
        """
        The step the error occurred at.
        """
        return pulumi.get(self, "step")

    @step.setter
    def step(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "step", value)


