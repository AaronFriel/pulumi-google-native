# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .address import *
from .autoscaler import *
from .backend_bucket import *
from .backend_service import *
from .commitment import *
from .disk import *
from .external_vpn_gateway import *
from .firewall import *
from .forwarding_rule import *
from .health_check import *
from .health_check_service import *
from .http_health_check import *
from .https_health_check import *
from .image import *
from .instance import *
from .instance_group import *
from .instance_group_manager import *
from .instance_template import *
from .interconnect import *
from .interconnect_attachment import *
from .license import *
from .network import *
from .network_endpoint_group import *
from .node_group import *
from .node_template import *
from .notification_endpoint import *
from .packet_mirroring import *
from .policy import *
from .reservation import *
from .resource_policy import *
from .route import *
from .router import *
from .security_policy import *
from .ssl_certificate import *
from .ssl_policy import *
from .subnetwork import *
from .target_grpc_proxy import *
from .target_http_proxy import *
from .target_https_proxy import *
from .target_instance import *
from .target_pool import *
from .target_ssl_proxy import *
from .target_tcp_proxy import *
from .target_vpn_gateway import *
from .url_map import *
from .vpn_gateway import *
from .vpn_tunnel import *
from ._inputs import *

def _register_module():
    import pulumi
    from ... import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "google-cloud:compute/v1:Address":
                return Address(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:Autoscaler":
                return Autoscaler(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:BackendBucket":
                return BackendBucket(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:BackendService":
                return BackendService(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:Commitment":
                return Commitment(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:Disk":
                return Disk(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:ExternalVpnGateway":
                return ExternalVpnGateway(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:Firewall":
                return Firewall(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:ForwardingRule":
                return ForwardingRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:HealthCheck":
                return HealthCheck(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:HealthCheckService":
                return HealthCheckService(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:HttpHealthCheck":
                return HttpHealthCheck(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:HttpsHealthCheck":
                return HttpsHealthCheck(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:Image":
                return Image(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:Instance":
                return Instance(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:InstanceGroup":
                return InstanceGroup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:InstanceGroupManager":
                return InstanceGroupManager(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:InstanceTemplate":
                return InstanceTemplate(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:Interconnect":
                return Interconnect(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:InterconnectAttachment":
                return InterconnectAttachment(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:License":
                return License(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:Network":
                return Network(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:NetworkEndpointGroup":
                return NetworkEndpointGroup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:NodeGroup":
                return NodeGroup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:NodeTemplate":
                return NodeTemplate(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:NotificationEndpoint":
                return NotificationEndpoint(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:PacketMirroring":
                return PacketMirroring(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:Policy":
                return Policy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:Reservation":
                return Reservation(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:ResourcePolicy":
                return ResourcePolicy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:Route":
                return Route(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:Router":
                return Router(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:SecurityPolicy":
                return SecurityPolicy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:SslCertificate":
                return SslCertificate(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:SslPolicy":
                return SslPolicy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:Subnetwork":
                return Subnetwork(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:TargetGrpcProxy":
                return TargetGrpcProxy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:TargetHttpProxy":
                return TargetHttpProxy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:TargetHttpsProxy":
                return TargetHttpsProxy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:TargetInstance":
                return TargetInstance(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:TargetPool":
                return TargetPool(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:TargetSslProxy":
                return TargetSslProxy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:TargetTcpProxy":
                return TargetTcpProxy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:TargetVpnGateway":
                return TargetVpnGateway(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:UrlMap":
                return UrlMap(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:VpnGateway":
                return VpnGateway(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "google-cloud:compute/v1:VpnTunnel":
                return VpnTunnel(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("google-cloud", "compute/v1", _module_instance)

_register_module()
