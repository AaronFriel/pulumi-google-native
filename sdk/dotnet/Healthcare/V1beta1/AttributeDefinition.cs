// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleCloud.Healthcare.V1beta1
{
    /// <summary>
    /// Creates a new Attribute definition in the parent Consent store.
    /// </summary>
    [GoogleCloudResourceType("google-cloud:healthcare/v1beta1:AttributeDefinition")]
    public partial class AttributeDefinition : Pulumi.CustomResource
    {
        /// <summary>
        /// Create a AttributeDefinition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AttributeDefinition(string name, AttributeDefinitionArgs args, CustomResourceOptions? options = null)
            : base("google-cloud:healthcare/v1beta1:AttributeDefinition", name, args ?? new AttributeDefinitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AttributeDefinition(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-cloud:healthcare/v1beta1:AttributeDefinition", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AttributeDefinition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AttributeDefinition Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new AttributeDefinition(name, id, options);
        }
    }

    public sealed class AttributeDefinitionArgs : Pulumi.ResourceArgs
    {
        [Input("allowedValues")]
        private InputList<string>? _allowedValues;

        /// <summary>
        /// Required. Possible values for the attribute. The number of allowed values must not exceed 100. An empty list is invalid. The list can only be expanded after creation.
        /// </summary>
        public InputList<string> AllowedValues
        {
            get => _allowedValues ?? (_allowedValues = new InputList<string>());
            set => _allowedValues = value;
        }

        /// <summary>
        /// Required. The ID of the Attribute definition to create. The string must match the following regex: `_a-zA-Z{0,255}` and must not be a reserved keyword within the Common Expression Language as listed on https://github.com/google/cel-spec/blob/master/doc/langdef.md.
        /// </summary>
        [Input("attributeDefinitionId")]
        public Input<string>? AttributeDefinitionId { get; set; }

        /// <summary>
        /// Required. The category of the attribute. The value of this field cannot be changed after creation.
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        [Input("consentDefaultValues")]
        private InputList<string>? _consentDefaultValues;

        /// <summary>
        /// Default values of the attribute in consents. If no default values are specified, it defaults to an empty value.
        /// </summary>
        public InputList<string> ConsentDefaultValues
        {
            get => _consentDefaultValues ?? (_consentDefaultValues = new InputList<string>());
            set => _consentDefaultValues = value;
        }

        /// <summary>
        /// Default value of the attribute in user data mappings. If no default value is specified, it defaults to an empty value. This field is only applicable to attributes of the category `RESOURCE`.
        /// </summary>
        [Input("dataMappingDefaultValue")]
        public Input<string>? DataMappingDefaultValue { get; set; }

        /// <summary>
        /// A description of the attribute.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Resource name of the attribute definition, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/attributeDefinitions/{attribute_definition_id}`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Required. The name of the consent store that this Attribute definition belongs to.
        /// </summary>
        [Input("parent", required: true)]
        public Input<string> Parent { get; set; } = null!;

        public AttributeDefinitionArgs()
        {
        }
    }
}
