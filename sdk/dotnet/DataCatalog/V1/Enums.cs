// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.DataCatalog.V1
{
    /// <summary>
    /// The type of the entry. Only used for entries with types listed in the `EntryType` enum. Currently, only `FILESET` enum value is allowed. All other entries created in Data Catalog must use the `user_specified_type`.
    /// </summary>
    [EnumType]
    public readonly struct EntryType : IEquatable<EntryType>
    {
        private readonly string _value;

        private EntryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default unknown type.
        /// </summary>
        public static EntryType EntryTypeUnspecified { get; } = new EntryType("ENTRY_TYPE_UNSPECIFIED");
        /// <summary>
        /// Output only. The entry type that has a GoogleSQL schema, including logical views.
        /// </summary>
        public static EntryType Table { get; } = new EntryType("TABLE");
        /// <summary>
        /// Output only. The type of models. For more information, see [Supported models in BigQuery ML] (https://cloud.google.com/bigquery-ml/docs/introduction#supported_models_in).
        /// </summary>
        public static EntryType Model { get; } = new EntryType("MODEL");
        /// <summary>
        /// An entry type for streaming entries. For example, a Pub/Sub topic.
        /// </summary>
        public static EntryType DataStream { get; } = new EntryType("DATA_STREAM");
        /// <summary>
        /// An entry type for a set of files or objects. For example, a Cloud Storage fileset.
        /// </summary>
        public static EntryType Fileset { get; } = new EntryType("FILESET");
        /// <summary>
        /// A database.
        /// </summary>
        public static EntryType Database { get; } = new EntryType("DATABASE");
        /// <summary>
        /// A service, for example, a Dataproc Metastore service.
        /// </summary>
        public static EntryType Service { get; } = new EntryType("SERVICE");

        public static bool operator ==(EntryType left, EntryType right) => left.Equals(right);
        public static bool operator !=(EntryType left, EntryType right) => !left.Equals(right);

        public static explicit operator string(EntryType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EntryType other && Equals(other);
        public bool Equals(EntryType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of this table.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudDatacatalogV1DatabaseTableSpecType : IEquatable<GoogleCloudDatacatalogV1DatabaseTableSpecType>
    {
        private readonly string _value;

        private GoogleCloudDatacatalogV1DatabaseTableSpecType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default unknown table type.
        /// </summary>
        public static GoogleCloudDatacatalogV1DatabaseTableSpecType TableTypeUnspecified { get; } = new GoogleCloudDatacatalogV1DatabaseTableSpecType("TABLE_TYPE_UNSPECIFIED");
        /// <summary>
        /// Native table.
        /// </summary>
        public static GoogleCloudDatacatalogV1DatabaseTableSpecType Native { get; } = new GoogleCloudDatacatalogV1DatabaseTableSpecType("NATIVE");
        /// <summary>
        /// External table.
        /// </summary>
        public static GoogleCloudDatacatalogV1DatabaseTableSpecType External { get; } = new GoogleCloudDatacatalogV1DatabaseTableSpecType("EXTERNAL");

        public static bool operator ==(GoogleCloudDatacatalogV1DatabaseTableSpecType left, GoogleCloudDatacatalogV1DatabaseTableSpecType right) => left.Equals(right);
        public static bool operator !=(GoogleCloudDatacatalogV1DatabaseTableSpecType left, GoogleCloudDatacatalogV1DatabaseTableSpecType right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudDatacatalogV1DatabaseTableSpecType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudDatacatalogV1DatabaseTableSpecType other && Equals(other);
        public bool Equals(GoogleCloudDatacatalogV1DatabaseTableSpecType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TaxonomyActivatedPolicyTypesItem : IEquatable<TaxonomyActivatedPolicyTypesItem>
    {
        private readonly string _value;

        private TaxonomyActivatedPolicyTypesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified policy type.
        /// </summary>
        public static TaxonomyActivatedPolicyTypesItem PolicyTypeUnspecified { get; } = new TaxonomyActivatedPolicyTypesItem("POLICY_TYPE_UNSPECIFIED");
        /// <summary>
        /// Fine-grained access control policy that enables access control on tagged sub-resources.
        /// </summary>
        public static TaxonomyActivatedPolicyTypesItem FineGrainedAccessControl { get; } = new TaxonomyActivatedPolicyTypesItem("FINE_GRAINED_ACCESS_CONTROL");

        public static bool operator ==(TaxonomyActivatedPolicyTypesItem left, TaxonomyActivatedPolicyTypesItem right) => left.Equals(right);
        public static bool operator !=(TaxonomyActivatedPolicyTypesItem left, TaxonomyActivatedPolicyTypesItem right) => !left.Equals(right);

        public static explicit operator string(TaxonomyActivatedPolicyTypesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TaxonomyActivatedPolicyTypesItem other && Equals(other);
        public bool Equals(TaxonomyActivatedPolicyTypesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
