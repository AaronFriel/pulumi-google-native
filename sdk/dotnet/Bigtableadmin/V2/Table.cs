// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleCloud.Bigtableadmin.V2
{
    /// <summary>
    /// Creates a new table in the specified instance. The table can be created with a full set of initial column families, specified in the request.
    /// </summary>
    [GoogleCloudResourceType("google-cloud:bigtableadmin/v2:Table")]
    public partial class Table : Pulumi.CustomResource
    {
        /// <summary>
        /// Create a Table resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Table(string name, TableArgs args, CustomResourceOptions? options = null)
            : base("google-cloud:bigtableadmin/v2:Table", name, args ?? new TableArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Table(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-cloud:bigtableadmin/v2:Table", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Table resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Table Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Table(name, id, options);
        }
    }

    public sealed class TableArgs : Pulumi.ResourceArgs
    {
        [Input("initialSplits")]
        private InputList<Inputs.SplitArgs>? _initialSplits;

        /// <summary>
        /// The optional list of row keys that will be used to initially split the table into several tablets (tablets are similar to HBase regions). Given two split keys, `s1` and `s2`, three tablets will be created, spanning the key ranges: `[, s1), [s1, s2), [s2, )`. Example: * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",` `"other", "zz"]` * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]` * Key assignment: - Tablet 1 `[, apple) =&gt; {"a"}.` - Tablet 2 `[apple, customer_1) =&gt; {"apple", "custom"}.` - Tablet 3 `[customer_1, customer_2) =&gt; {"customer_1"}.` - Tablet 4 `[customer_2, other) =&gt; {"customer_2"}.` - Tablet 5 `[other, ) =&gt; {"other", "zz"}.`
        /// </summary>
        public InputList<Inputs.SplitArgs> InitialSplits
        {
            get => _initialSplits ?? (_initialSplits = new InputList<Inputs.SplitArgs>());
            set => _initialSplits = value;
        }

        /// <summary>
        /// Required. The unique name of the instance in which to create the table. Values are of the form `projects/{project}/instances/{instance}`.
        /// </summary>
        [Input("parent", required: true)]
        public Input<string> Parent { get; set; } = null!;

        /// <summary>
        /// Required. The Table to create.
        /// </summary>
        [Input("table")]
        public Input<Inputs.TableArgs>? Table { get; set; }

        /// <summary>
        /// Required. The name by which the new table should be referred to within the parent instance, e.g., `foobar` rather than `{parent}/tables/foobar`. Maximum 50 characters.
        /// </summary>
        [Input("tableId")]
        public Input<string>? TableId { get; set; }

        public TableArgs()
        {
        }
    }
}
