// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleCloud.Cloudbuild.V1.Inputs
{

    /// <summary>
    /// A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
    /// </summary>
    public sealed class BuildArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
        /// </summary>
        [Input("artifacts")]
        public Input<Inputs.ArtifactsArgs>? Artifacts { get; set; }

        /// <summary>
        /// Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
        /// </summary>
        [Input("buildTriggerId")]
        public Input<string>? BuildTriggerId { get; set; }

        /// <summary>
        /// Output only. Time at which the request to create the build was received.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
        /// </summary>
        [Input("finishTime")]
        public Input<string>? FinishTime { get; set; }

        /// <summary>
        /// Output only. Unique identifier of the build.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("images")]
        private InputList<string>? _images;

        /// <summary>
        /// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
        /// </summary>
        public InputList<string> Images
        {
            get => _images ?? (_images = new InputList<string>());
            set => _images = value;
        }

        /// <summary>
        /// Output only. URL to logs for this build in Google Cloud Console.
        /// </summary>
        [Input("logUrl")]
        public Input<string>? LogUrl { get; set; }

        /// <summary>
        /// Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
        /// </summary>
        [Input("logsBucket")]
        public Input<string>? LogsBucket { get; set; }

        /// <summary>
        /// Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Special options for this build.
        /// </summary>
        [Input("options")]
        public Input<Inputs.BuildOptionsArgs>? Options { get; set; }

        /// <summary>
        /// Output only. ID of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
        /// </summary>
        [Input("queueTtl")]
        public Input<string>? QueueTtl { get; set; }

        /// <summary>
        /// Output only. Results of the build.
        /// </summary>
        [Input("results")]
        public Input<Inputs.ResultsArgs>? Results { get; set; }

        [Input("secrets")]
        private InputList<Inputs.SecretArgs>? _secrets;

        /// <summary>
        /// Secrets to decrypt using Cloud Key Management Service.
        /// </summary>
        public InputList<Inputs.SecretArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.SecretArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. This field is in beta.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        /// <summary>
        /// The location of the source files to build.
        /// </summary>
        [Input("source")]
        public Input<Inputs.SourceArgs>? Source { get; set; }

        /// <summary>
        /// Output only. A permanent fixed identifier for source.
        /// </summary>
        [Input("sourceProvenance")]
        public Input<Inputs.SourceProvenanceArgs>? SourceProvenance { get; set; }

        /// <summary>
        /// Output only. Time at which execution of the build was started.
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        /// <summary>
        /// Output only. Status of the build.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Output only. Customer-readable message about the current status.
        /// </summary>
        [Input("statusDetail")]
        public Input<string>? StatusDetail { get; set; }

        [Input("steps")]
        private InputList<Inputs.BuildStepArgs>? _steps;

        /// <summary>
        /// Required. The operations to be performed on the workspace.
        /// </summary>
        public InputList<Inputs.BuildStepArgs> Steps
        {
            get => _steps ?? (_steps = new InputList<Inputs.BuildStepArgs>());
            set => _steps = value;
        }

        [Input("substitutions")]
        private InputMap<string>? _substitutions;

        /// <summary>
        /// Substitutions data for `Build` resource.
        /// </summary>
        public InputMap<string> Substitutions
        {
            get => _substitutions ?? (_substitutions = new InputMap<string>());
            set => _substitutions = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags for annotation of a `Build`. These are not docker tags.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.
        /// </summary>
        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        [Input("timing")]
        private InputMap<string>? _timing;

        /// <summary>
        /// Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps * PUSH: time to push all specified images. * FETCHSOURCE: time to fetch source. If the build does not specify source or images, these keys will not be included.
        /// </summary>
        public InputMap<string> Timing
        {
            get => _timing ?? (_timing = new InputMap<string>());
            set => _timing = value;
        }

        public BuildArgs()
        {
        }
    }
}
