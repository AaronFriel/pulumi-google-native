// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleCloud.Networkmanagement.V1beta1.Inputs
{

    /// <summary>
    /// Trace represents one simulated packet forwarding path. - Each trace contains multiple ordered steps. - Each step is in a particular state and has an associated configuration. - State is categorized as a final or non-final state. - Each final state has a reason associated with it. - Each trace must end with a final state (the last step). |---------------------Trace----------------------| Step1(State) Step2(State) --- StepN(State(final)) 
    /// </summary>
    public sealed class TraceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Derived from the source and destination endpoints definition, and validated by the data plane model. If there are multiple traces starting from different source locations, then the endpoint_info may be different between traces.
        /// </summary>
        [Input("endpointInfo")]
        public Input<Inputs.EndpointInfoArgs>? EndpointInfo { get; set; }

        [Input("steps")]
        private InputList<Inputs.StepArgs>? _steps;

        /// <summary>
        /// A trace of a test contains multiple steps from the initial state to the final state (delivered, dropped, forwarded, or aborted). The steps are ordered by the processing sequence within the simulated network state machine. It is critical to preserve the order of the steps and avoid reordering or sorting them.
        /// </summary>
        public InputList<Inputs.StepArgs> Steps
        {
            get => _steps ?? (_steps = new InputList<Inputs.StepArgs>());
            set => _steps = value;
        }

        public TraceArgs()
        {
        }
    }
}
