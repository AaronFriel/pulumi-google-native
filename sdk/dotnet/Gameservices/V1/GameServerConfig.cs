// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleCloud.Gameservices.V1
{
    /// <summary>
    /// Creates a new game server config in a given project, location, and game server deployment. Game server configs are immutable, and are not applied until referenced in the game server deployment rollout resource.
    /// </summary>
    [GoogleCloudResourceType("google-cloud:gameservices/v1:GameServerConfig")]
    public partial class GameServerConfig : Pulumi.CustomResource
    {
        /// <summary>
        /// Create a GameServerConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GameServerConfig(string name, GameServerConfigArgs args, CustomResourceOptions? options = null)
            : base("google-cloud:gameservices/v1:GameServerConfig", name, args ?? new GameServerConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GameServerConfig(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-cloud:gameservices/v1:GameServerConfig", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GameServerConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GameServerConfig Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new GameServerConfig(name, id, options);
        }
    }

    public sealed class GameServerConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required. The ID of the game server config resource to be created.
        /// </summary>
        [Input("configId")]
        public Input<string>? ConfigId { get; set; }

        /// <summary>
        /// Output only. The creation time.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The description of the game server config.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("fleetConfigs")]
        private InputList<Inputs.FleetConfigArgs>? _fleetConfigs;

        /// <summary>
        /// FleetConfig contains a list of Agones fleet specs. Only one FleetConfig is allowed.
        /// </summary>
        public InputList<Inputs.FleetConfigArgs> FleetConfigs
        {
            get => _fleetConfigs ?? (_fleetConfigs = new InputList<Inputs.FleetConfigArgs>());
            set => _fleetConfigs = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// The labels associated with this game server config. Each label is a key-value pair.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The resource name of the game server config, in the following form: `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/configs/{config}`. For example, `projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Required. The parent resource name, in the following form: `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/`.
        /// </summary>
        [Input("parent", required: true)]
        public Input<string> Parent { get; set; } = null!;

        [Input("scalingConfigs")]
        private InputList<Inputs.ScalingConfigArgs>? _scalingConfigs;

        /// <summary>
        /// The autoscaling settings.
        /// </summary>
        public InputList<Inputs.ScalingConfigArgs> ScalingConfigs
        {
            get => _scalingConfigs ?? (_scalingConfigs = new InputList<Inputs.ScalingConfigArgs>());
            set => _scalingConfigs = value;
        }

        /// <summary>
        /// Output only. The last-modified time.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public GameServerConfigArgs()
        {
        }
    }
}
