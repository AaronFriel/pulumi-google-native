// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new trigger.
type Trigger struct {
	pulumi.CustomResourceState
}

// NewTrigger registers a new resource with the given unique name, arguments, and options.
func NewTrigger(ctx *pulumi.Context,
	name string, args *TriggerArgs, opts ...pulumi.ResourceOption) (*Trigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	var resource Trigger
	err := ctx.RegisterResource("google-cloud:run/v1alpha1:Trigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrigger gets an existing Trigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TriggerState, opts ...pulumi.ResourceOption) (*Trigger, error) {
	var resource Trigger
	err := ctx.ReadResource("google-cloud:run/v1alpha1:Trigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Trigger resources.
type triggerState struct {
}

type TriggerState struct {
}

func (TriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerState)(nil)).Elem()
}

type triggerArgs struct {
	// The API version for this call such as "eventing.knative.dev/v1alpha1".
	ApiVersion *string `pulumi:"apiVersion"`
	// The kind of resource, in this case "Trigger".
	Kind *string `pulumi:"kind"`
	// Metadata associated with this Trigger.
	Metadata *ObjectMeta `pulumi:"metadata"`
	// The project ID or project number in which this trigger should be created.
	Parent string `pulumi:"parent"`
	// Spec defines the desired state of the Trigger.
	Spec *TriggerSpec `pulumi:"spec"`
	// Optional. Status represents the current state of the Trigger. This data may be out of date.
	Status *TriggerStatus `pulumi:"status"`
}

// The set of arguments for constructing a Trigger resource.
type TriggerArgs struct {
	// The API version for this call such as "eventing.knative.dev/v1alpha1".
	ApiVersion pulumi.StringPtrInput
	// The kind of resource, in this case "Trigger".
	Kind pulumi.StringPtrInput
	// Metadata associated with this Trigger.
	Metadata ObjectMetaPtrInput
	// The project ID or project number in which this trigger should be created.
	Parent pulumi.StringInput
	// Spec defines the desired state of the Trigger.
	Spec TriggerSpecPtrInput
	// Optional. Status represents the current state of the Trigger. This data may be out of date.
	Status TriggerStatusPtrInput
}

func (TriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerArgs)(nil)).Elem()
}

type TriggerInput interface {
	pulumi.Input

	ToTriggerOutput() TriggerOutput
	ToTriggerOutputWithContext(ctx context.Context) TriggerOutput
}

func (*Trigger) ElementType() reflect.Type {
	return reflect.TypeOf((*Trigger)(nil))
}

func (i *Trigger) ToTriggerOutput() TriggerOutput {
	return i.ToTriggerOutputWithContext(context.Background())
}

func (i *Trigger) ToTriggerOutputWithContext(ctx context.Context) TriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerOutput)
}

type TriggerOutput struct {
	*pulumi.OutputState
}

func (TriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Trigger)(nil))
}

func (o TriggerOutput) ToTriggerOutput() TriggerOutput {
	return o
}

func (o TriggerOutput) ToTriggerOutputWithContext(ctx context.Context) TriggerOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TriggerOutput{})
}
