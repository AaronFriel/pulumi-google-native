// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Identifies an account and how to log into it.
type Account struct {
	// An automatic google login account.
	GoogleAuto *GoogleAuto `pulumi:"googleAuto"`
}

// AccountInput is an input type that accepts AccountArgs and AccountOutput values.
// You can construct a concrete instance of `AccountInput` via:
//
//          AccountArgs{...}
type AccountInput interface {
	pulumi.Input

	ToAccountOutput() AccountOutput
	ToAccountOutputWithContext(context.Context) AccountOutput
}

// Identifies an account and how to log into it.
type AccountArgs struct {
	// An automatic google login account.
	GoogleAuto GoogleAutoPtrInput `pulumi:"googleAuto"`
}

func (AccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Account)(nil)).Elem()
}

func (i AccountArgs) ToAccountOutput() AccountOutput {
	return i.ToAccountOutputWithContext(context.Background())
}

func (i AccountArgs) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountOutput)
}

func (i AccountArgs) ToAccountPtrOutput() AccountPtrOutput {
	return i.ToAccountPtrOutputWithContext(context.Background())
}

func (i AccountArgs) ToAccountPtrOutputWithContext(ctx context.Context) AccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountOutput).ToAccountPtrOutputWithContext(ctx)
}

// AccountPtrInput is an input type that accepts AccountArgs, AccountPtr and AccountPtrOutput values.
// You can construct a concrete instance of `AccountPtrInput` via:
//
//          AccountArgs{...}
//
//  or:
//
//          nil
type AccountPtrInput interface {
	pulumi.Input

	ToAccountPtrOutput() AccountPtrOutput
	ToAccountPtrOutputWithContext(context.Context) AccountPtrOutput
}

type accountPtrType AccountArgs

func AccountPtr(v *AccountArgs) AccountPtrInput {
	return (*accountPtrType)(v)
}

func (*accountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil)).Elem()
}

func (i *accountPtrType) ToAccountPtrOutput() AccountPtrOutput {
	return i.ToAccountPtrOutputWithContext(context.Background())
}

func (i *accountPtrType) ToAccountPtrOutputWithContext(ctx context.Context) AccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountPtrOutput)
}

// Identifies an account and how to log into it.
type AccountOutput struct{ *pulumi.OutputState }

func (AccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Account)(nil)).Elem()
}

func (o AccountOutput) ToAccountOutput() AccountOutput {
	return o
}

func (o AccountOutput) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return o
}

func (o AccountOutput) ToAccountPtrOutput() AccountPtrOutput {
	return o.ToAccountPtrOutputWithContext(context.Background())
}

func (o AccountOutput) ToAccountPtrOutputWithContext(ctx context.Context) AccountPtrOutput {
	return o.ApplyT(func(v Account) *Account {
		return &v
	}).(AccountPtrOutput)
}

// An automatic google login account.
func (o AccountOutput) GoogleAuto() GoogleAutoPtrOutput {
	return o.ApplyT(func(v Account) *GoogleAuto { return v.GoogleAuto }).(GoogleAutoPtrOutput)
}

type AccountPtrOutput struct{ *pulumi.OutputState }

func (AccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil)).Elem()
}

func (o AccountPtrOutput) ToAccountPtrOutput() AccountPtrOutput {
	return o
}

func (o AccountPtrOutput) ToAccountPtrOutputWithContext(ctx context.Context) AccountPtrOutput {
	return o
}

func (o AccountPtrOutput) Elem() AccountOutput {
	return o.ApplyT(func(v *Account) Account { return *v }).(AccountOutput)
}

// An automatic google login account.
func (o AccountPtrOutput) GoogleAuto() GoogleAutoPtrOutput {
	return o.ApplyT(func(v *Account) *GoogleAuto {
		if v == nil {
			return nil
		}
		return v.GoogleAuto
	}).(GoogleAutoPtrOutput)
}

// A single Android device.
type AndroidDevice struct {
	// Required. The id of the Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
	AndroidModelId *string `pulumi:"androidModelId"`
	// Required. The id of the Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
	AndroidVersionId *string `pulumi:"androidVersionId"`
	// Required. The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.
	Locale *string `pulumi:"locale"`
	// Required. How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.
	Orientation *string `pulumi:"orientation"`
}

// AndroidDeviceInput is an input type that accepts AndroidDeviceArgs and AndroidDeviceOutput values.
// You can construct a concrete instance of `AndroidDeviceInput` via:
//
//          AndroidDeviceArgs{...}
type AndroidDeviceInput interface {
	pulumi.Input

	ToAndroidDeviceOutput() AndroidDeviceOutput
	ToAndroidDeviceOutputWithContext(context.Context) AndroidDeviceOutput
}

// A single Android device.
type AndroidDeviceArgs struct {
	// Required. The id of the Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
	AndroidModelId pulumi.StringPtrInput `pulumi:"androidModelId"`
	// Required. The id of the Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
	AndroidVersionId pulumi.StringPtrInput `pulumi:"androidVersionId"`
	// Required. The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.
	Locale pulumi.StringPtrInput `pulumi:"locale"`
	// Required. How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.
	Orientation pulumi.StringPtrInput `pulumi:"orientation"`
}

func (AndroidDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AndroidDevice)(nil)).Elem()
}

func (i AndroidDeviceArgs) ToAndroidDeviceOutput() AndroidDeviceOutput {
	return i.ToAndroidDeviceOutputWithContext(context.Background())
}

func (i AndroidDeviceArgs) ToAndroidDeviceOutputWithContext(ctx context.Context) AndroidDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidDeviceOutput)
}

func (i AndroidDeviceArgs) ToAndroidDevicePtrOutput() AndroidDevicePtrOutput {
	return i.ToAndroidDevicePtrOutputWithContext(context.Background())
}

func (i AndroidDeviceArgs) ToAndroidDevicePtrOutputWithContext(ctx context.Context) AndroidDevicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidDeviceOutput).ToAndroidDevicePtrOutputWithContext(ctx)
}

// AndroidDevicePtrInput is an input type that accepts AndroidDeviceArgs, AndroidDevicePtr and AndroidDevicePtrOutput values.
// You can construct a concrete instance of `AndroidDevicePtrInput` via:
//
//          AndroidDeviceArgs{...}
//
//  or:
//
//          nil
type AndroidDevicePtrInput interface {
	pulumi.Input

	ToAndroidDevicePtrOutput() AndroidDevicePtrOutput
	ToAndroidDevicePtrOutputWithContext(context.Context) AndroidDevicePtrOutput
}

type androidDevicePtrType AndroidDeviceArgs

func AndroidDevicePtr(v *AndroidDeviceArgs) AndroidDevicePtrInput {
	return (*androidDevicePtrType)(v)
}

func (*androidDevicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AndroidDevice)(nil)).Elem()
}

func (i *androidDevicePtrType) ToAndroidDevicePtrOutput() AndroidDevicePtrOutput {
	return i.ToAndroidDevicePtrOutputWithContext(context.Background())
}

func (i *androidDevicePtrType) ToAndroidDevicePtrOutputWithContext(ctx context.Context) AndroidDevicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidDevicePtrOutput)
}

// AndroidDeviceArrayInput is an input type that accepts AndroidDeviceArray and AndroidDeviceArrayOutput values.
// You can construct a concrete instance of `AndroidDeviceArrayInput` via:
//
//          AndroidDeviceArray{ AndroidDeviceArgs{...} }
type AndroidDeviceArrayInput interface {
	pulumi.Input

	ToAndroidDeviceArrayOutput() AndroidDeviceArrayOutput
	ToAndroidDeviceArrayOutputWithContext(context.Context) AndroidDeviceArrayOutput
}

type AndroidDeviceArray []AndroidDeviceInput

func (AndroidDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AndroidDevice)(nil)).Elem()
}

func (i AndroidDeviceArray) ToAndroidDeviceArrayOutput() AndroidDeviceArrayOutput {
	return i.ToAndroidDeviceArrayOutputWithContext(context.Background())
}

func (i AndroidDeviceArray) ToAndroidDeviceArrayOutputWithContext(ctx context.Context) AndroidDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidDeviceArrayOutput)
}

// A single Android device.
type AndroidDeviceOutput struct{ *pulumi.OutputState }

func (AndroidDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AndroidDevice)(nil)).Elem()
}

func (o AndroidDeviceOutput) ToAndroidDeviceOutput() AndroidDeviceOutput {
	return o
}

func (o AndroidDeviceOutput) ToAndroidDeviceOutputWithContext(ctx context.Context) AndroidDeviceOutput {
	return o
}

func (o AndroidDeviceOutput) ToAndroidDevicePtrOutput() AndroidDevicePtrOutput {
	return o.ToAndroidDevicePtrOutputWithContext(context.Background())
}

func (o AndroidDeviceOutput) ToAndroidDevicePtrOutputWithContext(ctx context.Context) AndroidDevicePtrOutput {
	return o.ApplyT(func(v AndroidDevice) *AndroidDevice {
		return &v
	}).(AndroidDevicePtrOutput)
}

// Required. The id of the Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
func (o AndroidDeviceOutput) AndroidModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AndroidDevice) *string { return v.AndroidModelId }).(pulumi.StringPtrOutput)
}

// Required. The id of the Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
func (o AndroidDeviceOutput) AndroidVersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AndroidDevice) *string { return v.AndroidVersionId }).(pulumi.StringPtrOutput)
}

// Required. The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.
func (o AndroidDeviceOutput) Locale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AndroidDevice) *string { return v.Locale }).(pulumi.StringPtrOutput)
}

// Required. How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.
func (o AndroidDeviceOutput) Orientation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AndroidDevice) *string { return v.Orientation }).(pulumi.StringPtrOutput)
}

type AndroidDevicePtrOutput struct{ *pulumi.OutputState }

func (AndroidDevicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AndroidDevice)(nil)).Elem()
}

func (o AndroidDevicePtrOutput) ToAndroidDevicePtrOutput() AndroidDevicePtrOutput {
	return o
}

func (o AndroidDevicePtrOutput) ToAndroidDevicePtrOutputWithContext(ctx context.Context) AndroidDevicePtrOutput {
	return o
}

func (o AndroidDevicePtrOutput) Elem() AndroidDeviceOutput {
	return o.ApplyT(func(v *AndroidDevice) AndroidDevice { return *v }).(AndroidDeviceOutput)
}

// Required. The id of the Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
func (o AndroidDevicePtrOutput) AndroidModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AndroidDevice) *string {
		if v == nil {
			return nil
		}
		return v.AndroidModelId
	}).(pulumi.StringPtrOutput)
}

// Required. The id of the Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
func (o AndroidDevicePtrOutput) AndroidVersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AndroidDevice) *string {
		if v == nil {
			return nil
		}
		return v.AndroidVersionId
	}).(pulumi.StringPtrOutput)
}

// Required. The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.
func (o AndroidDevicePtrOutput) Locale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AndroidDevice) *string {
		if v == nil {
			return nil
		}
		return v.Locale
	}).(pulumi.StringPtrOutput)
}

// Required. How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.
func (o AndroidDevicePtrOutput) Orientation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AndroidDevice) *string {
		if v == nil {
			return nil
		}
		return v.Orientation
	}).(pulumi.StringPtrOutput)
}

type AndroidDeviceArrayOutput struct{ *pulumi.OutputState }

func (AndroidDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AndroidDevice)(nil)).Elem()
}

func (o AndroidDeviceArrayOutput) ToAndroidDeviceArrayOutput() AndroidDeviceArrayOutput {
	return o
}

func (o AndroidDeviceArrayOutput) ToAndroidDeviceArrayOutputWithContext(ctx context.Context) AndroidDeviceArrayOutput {
	return o
}

func (o AndroidDeviceArrayOutput) Index(i pulumi.IntInput) AndroidDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AndroidDevice {
		return vs[0].([]AndroidDevice)[vs[1].(int)]
	}).(AndroidDeviceOutput)
}

// A list of Android device configurations in which the test is to be executed.
type AndroidDeviceList struct {
	// Required. A list of Android devices.
	AndroidDevices []AndroidDevice `pulumi:"androidDevices"`
}

// AndroidDeviceListInput is an input type that accepts AndroidDeviceListArgs and AndroidDeviceListOutput values.
// You can construct a concrete instance of `AndroidDeviceListInput` via:
//
//          AndroidDeviceListArgs{...}
type AndroidDeviceListInput interface {
	pulumi.Input

	ToAndroidDeviceListOutput() AndroidDeviceListOutput
	ToAndroidDeviceListOutputWithContext(context.Context) AndroidDeviceListOutput
}

// A list of Android device configurations in which the test is to be executed.
type AndroidDeviceListArgs struct {
	// Required. A list of Android devices.
	AndroidDevices AndroidDeviceArrayInput `pulumi:"androidDevices"`
}

func (AndroidDeviceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AndroidDeviceList)(nil)).Elem()
}

func (i AndroidDeviceListArgs) ToAndroidDeviceListOutput() AndroidDeviceListOutput {
	return i.ToAndroidDeviceListOutputWithContext(context.Background())
}

func (i AndroidDeviceListArgs) ToAndroidDeviceListOutputWithContext(ctx context.Context) AndroidDeviceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidDeviceListOutput)
}

func (i AndroidDeviceListArgs) ToAndroidDeviceListPtrOutput() AndroidDeviceListPtrOutput {
	return i.ToAndroidDeviceListPtrOutputWithContext(context.Background())
}

func (i AndroidDeviceListArgs) ToAndroidDeviceListPtrOutputWithContext(ctx context.Context) AndroidDeviceListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidDeviceListOutput).ToAndroidDeviceListPtrOutputWithContext(ctx)
}

// AndroidDeviceListPtrInput is an input type that accepts AndroidDeviceListArgs, AndroidDeviceListPtr and AndroidDeviceListPtrOutput values.
// You can construct a concrete instance of `AndroidDeviceListPtrInput` via:
//
//          AndroidDeviceListArgs{...}
//
//  or:
//
//          nil
type AndroidDeviceListPtrInput interface {
	pulumi.Input

	ToAndroidDeviceListPtrOutput() AndroidDeviceListPtrOutput
	ToAndroidDeviceListPtrOutputWithContext(context.Context) AndroidDeviceListPtrOutput
}

type androidDeviceListPtrType AndroidDeviceListArgs

func AndroidDeviceListPtr(v *AndroidDeviceListArgs) AndroidDeviceListPtrInput {
	return (*androidDeviceListPtrType)(v)
}

func (*androidDeviceListPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AndroidDeviceList)(nil)).Elem()
}

func (i *androidDeviceListPtrType) ToAndroidDeviceListPtrOutput() AndroidDeviceListPtrOutput {
	return i.ToAndroidDeviceListPtrOutputWithContext(context.Background())
}

func (i *androidDeviceListPtrType) ToAndroidDeviceListPtrOutputWithContext(ctx context.Context) AndroidDeviceListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidDeviceListPtrOutput)
}

// A list of Android device configurations in which the test is to be executed.
type AndroidDeviceListOutput struct{ *pulumi.OutputState }

func (AndroidDeviceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AndroidDeviceList)(nil)).Elem()
}

func (o AndroidDeviceListOutput) ToAndroidDeviceListOutput() AndroidDeviceListOutput {
	return o
}

func (o AndroidDeviceListOutput) ToAndroidDeviceListOutputWithContext(ctx context.Context) AndroidDeviceListOutput {
	return o
}

func (o AndroidDeviceListOutput) ToAndroidDeviceListPtrOutput() AndroidDeviceListPtrOutput {
	return o.ToAndroidDeviceListPtrOutputWithContext(context.Background())
}

func (o AndroidDeviceListOutput) ToAndroidDeviceListPtrOutputWithContext(ctx context.Context) AndroidDeviceListPtrOutput {
	return o.ApplyT(func(v AndroidDeviceList) *AndroidDeviceList {
		return &v
	}).(AndroidDeviceListPtrOutput)
}

// Required. A list of Android devices.
func (o AndroidDeviceListOutput) AndroidDevices() AndroidDeviceArrayOutput {
	return o.ApplyT(func(v AndroidDeviceList) []AndroidDevice { return v.AndroidDevices }).(AndroidDeviceArrayOutput)
}

type AndroidDeviceListPtrOutput struct{ *pulumi.OutputState }

func (AndroidDeviceListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AndroidDeviceList)(nil)).Elem()
}

func (o AndroidDeviceListPtrOutput) ToAndroidDeviceListPtrOutput() AndroidDeviceListPtrOutput {
	return o
}

func (o AndroidDeviceListPtrOutput) ToAndroidDeviceListPtrOutputWithContext(ctx context.Context) AndroidDeviceListPtrOutput {
	return o
}

func (o AndroidDeviceListPtrOutput) Elem() AndroidDeviceListOutput {
	return o.ApplyT(func(v *AndroidDeviceList) AndroidDeviceList { return *v }).(AndroidDeviceListOutput)
}

// Required. A list of Android devices.
func (o AndroidDeviceListPtrOutput) AndroidDevices() AndroidDeviceArrayOutput {
	return o.ApplyT(func(v *AndroidDeviceList) []AndroidDevice {
		if v == nil {
			return nil
		}
		return v.AndroidDevices
	}).(AndroidDeviceArrayOutput)
}

// A test of an Android application that can control an Android component independently of its normal lifecycle. Android instrumentation tests run an application APK and test APK inside the same process on a virtual or physical AndroidDevice. They also specify a test runner class, such as com.google.GoogleTestRunner, which can vary on the specific instrumentation framework chosen. See for more information on types of Android tests.
type AndroidInstrumentationTest struct {
	// The APK for the application under test.
	AppApk *FileReference `pulumi:"appApk"`
	// A multi-apk app bundle for the application under test.
	AppBundle *AppBundle `pulumi:"appBundle"`
	// The java package for the application under test. The default value is determined by examining the application's manifest.
	AppPackageId *string `pulumi:"appPackageId"`
	// The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
	OrchestratorOption *string `pulumi:"orchestratorOption"`
	// The option to run tests in multiple shards in parallel.
	ShardingOption *ShardingOption `pulumi:"shardingOption"`
	// Required. The APK containing the test code to be executed.
	TestApk *FileReference `pulumi:"testApk"`
	// The java package for the test to be executed. The default value is determined by examining the application's manifest.
	TestPackageId *string `pulumi:"testPackageId"`
	// The InstrumentationTestRunner class. The default value is determined by examining the application's manifest.
	TestRunnerClass *string `pulumi:"testRunnerClass"`
	// Each target must be fully qualified with the package name or class name, in one of these formats: - "package package_name" - "class package_name.class_name" - "class package_name.class_name#method_name" If empty, all targets in the module will be run.
	TestTargets []string `pulumi:"testTargets"`
}

// AndroidInstrumentationTestInput is an input type that accepts AndroidInstrumentationTestArgs and AndroidInstrumentationTestOutput values.
// You can construct a concrete instance of `AndroidInstrumentationTestInput` via:
//
//          AndroidInstrumentationTestArgs{...}
type AndroidInstrumentationTestInput interface {
	pulumi.Input

	ToAndroidInstrumentationTestOutput() AndroidInstrumentationTestOutput
	ToAndroidInstrumentationTestOutputWithContext(context.Context) AndroidInstrumentationTestOutput
}

// A test of an Android application that can control an Android component independently of its normal lifecycle. Android instrumentation tests run an application APK and test APK inside the same process on a virtual or physical AndroidDevice. They also specify a test runner class, such as com.google.GoogleTestRunner, which can vary on the specific instrumentation framework chosen. See for more information on types of Android tests.
type AndroidInstrumentationTestArgs struct {
	// The APK for the application under test.
	AppApk FileReferencePtrInput `pulumi:"appApk"`
	// A multi-apk app bundle for the application under test.
	AppBundle AppBundlePtrInput `pulumi:"appBundle"`
	// The java package for the application under test. The default value is determined by examining the application's manifest.
	AppPackageId pulumi.StringPtrInput `pulumi:"appPackageId"`
	// The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
	OrchestratorOption pulumi.StringPtrInput `pulumi:"orchestratorOption"`
	// The option to run tests in multiple shards in parallel.
	ShardingOption ShardingOptionPtrInput `pulumi:"shardingOption"`
	// Required. The APK containing the test code to be executed.
	TestApk FileReferencePtrInput `pulumi:"testApk"`
	// The java package for the test to be executed. The default value is determined by examining the application's manifest.
	TestPackageId pulumi.StringPtrInput `pulumi:"testPackageId"`
	// The InstrumentationTestRunner class. The default value is determined by examining the application's manifest.
	TestRunnerClass pulumi.StringPtrInput `pulumi:"testRunnerClass"`
	// Each target must be fully qualified with the package name or class name, in one of these formats: - "package package_name" - "class package_name.class_name" - "class package_name.class_name#method_name" If empty, all targets in the module will be run.
	TestTargets pulumi.StringArrayInput `pulumi:"testTargets"`
}

func (AndroidInstrumentationTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AndroidInstrumentationTest)(nil)).Elem()
}

func (i AndroidInstrumentationTestArgs) ToAndroidInstrumentationTestOutput() AndroidInstrumentationTestOutput {
	return i.ToAndroidInstrumentationTestOutputWithContext(context.Background())
}

func (i AndroidInstrumentationTestArgs) ToAndroidInstrumentationTestOutputWithContext(ctx context.Context) AndroidInstrumentationTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidInstrumentationTestOutput)
}

func (i AndroidInstrumentationTestArgs) ToAndroidInstrumentationTestPtrOutput() AndroidInstrumentationTestPtrOutput {
	return i.ToAndroidInstrumentationTestPtrOutputWithContext(context.Background())
}

func (i AndroidInstrumentationTestArgs) ToAndroidInstrumentationTestPtrOutputWithContext(ctx context.Context) AndroidInstrumentationTestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidInstrumentationTestOutput).ToAndroidInstrumentationTestPtrOutputWithContext(ctx)
}

// AndroidInstrumentationTestPtrInput is an input type that accepts AndroidInstrumentationTestArgs, AndroidInstrumentationTestPtr and AndroidInstrumentationTestPtrOutput values.
// You can construct a concrete instance of `AndroidInstrumentationTestPtrInput` via:
//
//          AndroidInstrumentationTestArgs{...}
//
//  or:
//
//          nil
type AndroidInstrumentationTestPtrInput interface {
	pulumi.Input

	ToAndroidInstrumentationTestPtrOutput() AndroidInstrumentationTestPtrOutput
	ToAndroidInstrumentationTestPtrOutputWithContext(context.Context) AndroidInstrumentationTestPtrOutput
}

type androidInstrumentationTestPtrType AndroidInstrumentationTestArgs

func AndroidInstrumentationTestPtr(v *AndroidInstrumentationTestArgs) AndroidInstrumentationTestPtrInput {
	return (*androidInstrumentationTestPtrType)(v)
}

func (*androidInstrumentationTestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AndroidInstrumentationTest)(nil)).Elem()
}

func (i *androidInstrumentationTestPtrType) ToAndroidInstrumentationTestPtrOutput() AndroidInstrumentationTestPtrOutput {
	return i.ToAndroidInstrumentationTestPtrOutputWithContext(context.Background())
}

func (i *androidInstrumentationTestPtrType) ToAndroidInstrumentationTestPtrOutputWithContext(ctx context.Context) AndroidInstrumentationTestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidInstrumentationTestPtrOutput)
}

// A test of an Android application that can control an Android component independently of its normal lifecycle. Android instrumentation tests run an application APK and test APK inside the same process on a virtual or physical AndroidDevice. They also specify a test runner class, such as com.google.GoogleTestRunner, which can vary on the specific instrumentation framework chosen. See for more information on types of Android tests.
type AndroidInstrumentationTestOutput struct{ *pulumi.OutputState }

func (AndroidInstrumentationTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AndroidInstrumentationTest)(nil)).Elem()
}

func (o AndroidInstrumentationTestOutput) ToAndroidInstrumentationTestOutput() AndroidInstrumentationTestOutput {
	return o
}

func (o AndroidInstrumentationTestOutput) ToAndroidInstrumentationTestOutputWithContext(ctx context.Context) AndroidInstrumentationTestOutput {
	return o
}

func (o AndroidInstrumentationTestOutput) ToAndroidInstrumentationTestPtrOutput() AndroidInstrumentationTestPtrOutput {
	return o.ToAndroidInstrumentationTestPtrOutputWithContext(context.Background())
}

func (o AndroidInstrumentationTestOutput) ToAndroidInstrumentationTestPtrOutputWithContext(ctx context.Context) AndroidInstrumentationTestPtrOutput {
	return o.ApplyT(func(v AndroidInstrumentationTest) *AndroidInstrumentationTest {
		return &v
	}).(AndroidInstrumentationTestPtrOutput)
}

// The APK for the application under test.
func (o AndroidInstrumentationTestOutput) AppApk() FileReferencePtrOutput {
	return o.ApplyT(func(v AndroidInstrumentationTest) *FileReference { return v.AppApk }).(FileReferencePtrOutput)
}

// A multi-apk app bundle for the application under test.
func (o AndroidInstrumentationTestOutput) AppBundle() AppBundlePtrOutput {
	return o.ApplyT(func(v AndroidInstrumentationTest) *AppBundle { return v.AppBundle }).(AppBundlePtrOutput)
}

// The java package for the application under test. The default value is determined by examining the application's manifest.
func (o AndroidInstrumentationTestOutput) AppPackageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AndroidInstrumentationTest) *string { return v.AppPackageId }).(pulumi.StringPtrOutput)
}

// The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
func (o AndroidInstrumentationTestOutput) OrchestratorOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AndroidInstrumentationTest) *string { return v.OrchestratorOption }).(pulumi.StringPtrOutput)
}

// The option to run tests in multiple shards in parallel.
func (o AndroidInstrumentationTestOutput) ShardingOption() ShardingOptionPtrOutput {
	return o.ApplyT(func(v AndroidInstrumentationTest) *ShardingOption { return v.ShardingOption }).(ShardingOptionPtrOutput)
}

// Required. The APK containing the test code to be executed.
func (o AndroidInstrumentationTestOutput) TestApk() FileReferencePtrOutput {
	return o.ApplyT(func(v AndroidInstrumentationTest) *FileReference { return v.TestApk }).(FileReferencePtrOutput)
}

// The java package for the test to be executed. The default value is determined by examining the application's manifest.
func (o AndroidInstrumentationTestOutput) TestPackageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AndroidInstrumentationTest) *string { return v.TestPackageId }).(pulumi.StringPtrOutput)
}

// The InstrumentationTestRunner class. The default value is determined by examining the application's manifest.
func (o AndroidInstrumentationTestOutput) TestRunnerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AndroidInstrumentationTest) *string { return v.TestRunnerClass }).(pulumi.StringPtrOutput)
}

// Each target must be fully qualified with the package name or class name, in one of these formats: - "package package_name" - "class package_name.class_name" - "class package_name.class_name#method_name" If empty, all targets in the module will be run.
func (o AndroidInstrumentationTestOutput) TestTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AndroidInstrumentationTest) []string { return v.TestTargets }).(pulumi.StringArrayOutput)
}

type AndroidInstrumentationTestPtrOutput struct{ *pulumi.OutputState }

func (AndroidInstrumentationTestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AndroidInstrumentationTest)(nil)).Elem()
}

func (o AndroidInstrumentationTestPtrOutput) ToAndroidInstrumentationTestPtrOutput() AndroidInstrumentationTestPtrOutput {
	return o
}

func (o AndroidInstrumentationTestPtrOutput) ToAndroidInstrumentationTestPtrOutputWithContext(ctx context.Context) AndroidInstrumentationTestPtrOutput {
	return o
}

func (o AndroidInstrumentationTestPtrOutput) Elem() AndroidInstrumentationTestOutput {
	return o.ApplyT(func(v *AndroidInstrumentationTest) AndroidInstrumentationTest { return *v }).(AndroidInstrumentationTestOutput)
}

// The APK for the application under test.
func (o AndroidInstrumentationTestPtrOutput) AppApk() FileReferencePtrOutput {
	return o.ApplyT(func(v *AndroidInstrumentationTest) *FileReference {
		if v == nil {
			return nil
		}
		return v.AppApk
	}).(FileReferencePtrOutput)
}

// A multi-apk app bundle for the application under test.
func (o AndroidInstrumentationTestPtrOutput) AppBundle() AppBundlePtrOutput {
	return o.ApplyT(func(v *AndroidInstrumentationTest) *AppBundle {
		if v == nil {
			return nil
		}
		return v.AppBundle
	}).(AppBundlePtrOutput)
}

// The java package for the application under test. The default value is determined by examining the application's manifest.
func (o AndroidInstrumentationTestPtrOutput) AppPackageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AndroidInstrumentationTest) *string {
		if v == nil {
			return nil
		}
		return v.AppPackageId
	}).(pulumi.StringPtrOutput)
}

// The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
func (o AndroidInstrumentationTestPtrOutput) OrchestratorOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AndroidInstrumentationTest) *string {
		if v == nil {
			return nil
		}
		return v.OrchestratorOption
	}).(pulumi.StringPtrOutput)
}

// The option to run tests in multiple shards in parallel.
func (o AndroidInstrumentationTestPtrOutput) ShardingOption() ShardingOptionPtrOutput {
	return o.ApplyT(func(v *AndroidInstrumentationTest) *ShardingOption {
		if v == nil {
			return nil
		}
		return v.ShardingOption
	}).(ShardingOptionPtrOutput)
}

// Required. The APK containing the test code to be executed.
func (o AndroidInstrumentationTestPtrOutput) TestApk() FileReferencePtrOutput {
	return o.ApplyT(func(v *AndroidInstrumentationTest) *FileReference {
		if v == nil {
			return nil
		}
		return v.TestApk
	}).(FileReferencePtrOutput)
}

// The java package for the test to be executed. The default value is determined by examining the application's manifest.
func (o AndroidInstrumentationTestPtrOutput) TestPackageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AndroidInstrumentationTest) *string {
		if v == nil {
			return nil
		}
		return v.TestPackageId
	}).(pulumi.StringPtrOutput)
}

// The InstrumentationTestRunner class. The default value is determined by examining the application's manifest.
func (o AndroidInstrumentationTestPtrOutput) TestRunnerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AndroidInstrumentationTest) *string {
		if v == nil {
			return nil
		}
		return v.TestRunnerClass
	}).(pulumi.StringPtrOutput)
}

// Each target must be fully qualified with the package name or class name, in one of these formats: - "package package_name" - "class package_name.class_name" - "class package_name.class_name#method_name" If empty, all targets in the module will be run.
func (o AndroidInstrumentationTestPtrOutput) TestTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AndroidInstrumentationTest) []string {
		if v == nil {
			return nil
		}
		return v.TestTargets
	}).(pulumi.StringArrayOutput)
}

// A set of Android device configuration permutations is defined by the the cross-product of the given axes. Internally, the given AndroidMatrix will be expanded into a set of AndroidDevices. Only supported permutations will be instantiated. Invalid permutations (e.g., incompatible models/versions) are ignored.
type AndroidMatrix struct {
	// Required. The ids of the set of Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
	AndroidModelIds []string `pulumi:"androidModelIds"`
	// Required. The ids of the set of Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
	AndroidVersionIds []string `pulumi:"androidVersionIds"`
	// Required. The set of locales the test device will enable for testing. Use the TestEnvironmentDiscoveryService to get supported options.
	Locales []string `pulumi:"locales"`
	// Required. The set of orientations to test with. Use the TestEnvironmentDiscoveryService to get supported options.
	Orientations []string `pulumi:"orientations"`
}

// AndroidMatrixInput is an input type that accepts AndroidMatrixArgs and AndroidMatrixOutput values.
// You can construct a concrete instance of `AndroidMatrixInput` via:
//
//          AndroidMatrixArgs{...}
type AndroidMatrixInput interface {
	pulumi.Input

	ToAndroidMatrixOutput() AndroidMatrixOutput
	ToAndroidMatrixOutputWithContext(context.Context) AndroidMatrixOutput
}

// A set of Android device configuration permutations is defined by the the cross-product of the given axes. Internally, the given AndroidMatrix will be expanded into a set of AndroidDevices. Only supported permutations will be instantiated. Invalid permutations (e.g., incompatible models/versions) are ignored.
type AndroidMatrixArgs struct {
	// Required. The ids of the set of Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
	AndroidModelIds pulumi.StringArrayInput `pulumi:"androidModelIds"`
	// Required. The ids of the set of Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
	AndroidVersionIds pulumi.StringArrayInput `pulumi:"androidVersionIds"`
	// Required. The set of locales the test device will enable for testing. Use the TestEnvironmentDiscoveryService to get supported options.
	Locales pulumi.StringArrayInput `pulumi:"locales"`
	// Required. The set of orientations to test with. Use the TestEnvironmentDiscoveryService to get supported options.
	Orientations pulumi.StringArrayInput `pulumi:"orientations"`
}

func (AndroidMatrixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AndroidMatrix)(nil)).Elem()
}

func (i AndroidMatrixArgs) ToAndroidMatrixOutput() AndroidMatrixOutput {
	return i.ToAndroidMatrixOutputWithContext(context.Background())
}

func (i AndroidMatrixArgs) ToAndroidMatrixOutputWithContext(ctx context.Context) AndroidMatrixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidMatrixOutput)
}

func (i AndroidMatrixArgs) ToAndroidMatrixPtrOutput() AndroidMatrixPtrOutput {
	return i.ToAndroidMatrixPtrOutputWithContext(context.Background())
}

func (i AndroidMatrixArgs) ToAndroidMatrixPtrOutputWithContext(ctx context.Context) AndroidMatrixPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidMatrixOutput).ToAndroidMatrixPtrOutputWithContext(ctx)
}

// AndroidMatrixPtrInput is an input type that accepts AndroidMatrixArgs, AndroidMatrixPtr and AndroidMatrixPtrOutput values.
// You can construct a concrete instance of `AndroidMatrixPtrInput` via:
//
//          AndroidMatrixArgs{...}
//
//  or:
//
//          nil
type AndroidMatrixPtrInput interface {
	pulumi.Input

	ToAndroidMatrixPtrOutput() AndroidMatrixPtrOutput
	ToAndroidMatrixPtrOutputWithContext(context.Context) AndroidMatrixPtrOutput
}

type androidMatrixPtrType AndroidMatrixArgs

func AndroidMatrixPtr(v *AndroidMatrixArgs) AndroidMatrixPtrInput {
	return (*androidMatrixPtrType)(v)
}

func (*androidMatrixPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AndroidMatrix)(nil)).Elem()
}

func (i *androidMatrixPtrType) ToAndroidMatrixPtrOutput() AndroidMatrixPtrOutput {
	return i.ToAndroidMatrixPtrOutputWithContext(context.Background())
}

func (i *androidMatrixPtrType) ToAndroidMatrixPtrOutputWithContext(ctx context.Context) AndroidMatrixPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidMatrixPtrOutput)
}

// A set of Android device configuration permutations is defined by the the cross-product of the given axes. Internally, the given AndroidMatrix will be expanded into a set of AndroidDevices. Only supported permutations will be instantiated. Invalid permutations (e.g., incompatible models/versions) are ignored.
type AndroidMatrixOutput struct{ *pulumi.OutputState }

func (AndroidMatrixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AndroidMatrix)(nil)).Elem()
}

func (o AndroidMatrixOutput) ToAndroidMatrixOutput() AndroidMatrixOutput {
	return o
}

func (o AndroidMatrixOutput) ToAndroidMatrixOutputWithContext(ctx context.Context) AndroidMatrixOutput {
	return o
}

func (o AndroidMatrixOutput) ToAndroidMatrixPtrOutput() AndroidMatrixPtrOutput {
	return o.ToAndroidMatrixPtrOutputWithContext(context.Background())
}

func (o AndroidMatrixOutput) ToAndroidMatrixPtrOutputWithContext(ctx context.Context) AndroidMatrixPtrOutput {
	return o.ApplyT(func(v AndroidMatrix) *AndroidMatrix {
		return &v
	}).(AndroidMatrixPtrOutput)
}

// Required. The ids of the set of Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
func (o AndroidMatrixOutput) AndroidModelIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AndroidMatrix) []string { return v.AndroidModelIds }).(pulumi.StringArrayOutput)
}

// Required. The ids of the set of Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
func (o AndroidMatrixOutput) AndroidVersionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AndroidMatrix) []string { return v.AndroidVersionIds }).(pulumi.StringArrayOutput)
}

// Required. The set of locales the test device will enable for testing. Use the TestEnvironmentDiscoveryService to get supported options.
func (o AndroidMatrixOutput) Locales() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AndroidMatrix) []string { return v.Locales }).(pulumi.StringArrayOutput)
}

// Required. The set of orientations to test with. Use the TestEnvironmentDiscoveryService to get supported options.
func (o AndroidMatrixOutput) Orientations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AndroidMatrix) []string { return v.Orientations }).(pulumi.StringArrayOutput)
}

type AndroidMatrixPtrOutput struct{ *pulumi.OutputState }

func (AndroidMatrixPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AndroidMatrix)(nil)).Elem()
}

func (o AndroidMatrixPtrOutput) ToAndroidMatrixPtrOutput() AndroidMatrixPtrOutput {
	return o
}

func (o AndroidMatrixPtrOutput) ToAndroidMatrixPtrOutputWithContext(ctx context.Context) AndroidMatrixPtrOutput {
	return o
}

func (o AndroidMatrixPtrOutput) Elem() AndroidMatrixOutput {
	return o.ApplyT(func(v *AndroidMatrix) AndroidMatrix { return *v }).(AndroidMatrixOutput)
}

// Required. The ids of the set of Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
func (o AndroidMatrixPtrOutput) AndroidModelIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AndroidMatrix) []string {
		if v == nil {
			return nil
		}
		return v.AndroidModelIds
	}).(pulumi.StringArrayOutput)
}

// Required. The ids of the set of Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
func (o AndroidMatrixPtrOutput) AndroidVersionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AndroidMatrix) []string {
		if v == nil {
			return nil
		}
		return v.AndroidVersionIds
	}).(pulumi.StringArrayOutput)
}

// Required. The set of locales the test device will enable for testing. Use the TestEnvironmentDiscoveryService to get supported options.
func (o AndroidMatrixPtrOutput) Locales() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AndroidMatrix) []string {
		if v == nil {
			return nil
		}
		return v.Locales
	}).(pulumi.StringArrayOutput)
}

// Required. The set of orientations to test with. Use the TestEnvironmentDiscoveryService to get supported options.
func (o AndroidMatrixPtrOutput) Orientations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AndroidMatrix) []string {
		if v == nil {
			return nil
		}
		return v.Orientations
	}).(pulumi.StringArrayOutput)
}

// A test of an android application that explores the application on a virtual or physical Android Device, finding culprits and crashes as it goes. Next tag: 30
type AndroidRoboTest struct {
	// The APK for the application under test.
	AppApk *FileReference `pulumi:"appApk"`
	// A multi-apk app bundle for the application under test.
	AppBundle *AppBundle `pulumi:"appBundle"`
	// The initial activity that should be used to start the app.
	AppInitialActivity *string `pulumi:"appInitialActivity"`
	// The java package for the application under test. The default value is determined by examining the application's manifest.
	AppPackageId *string `pulumi:"appPackageId"`
	// The max depth of the traversal stack Robo can explore. Needs to be at least 2 to make Robo explore the app beyond the first activity. Default is 50.
	MaxDepth *int `pulumi:"maxDepth"`
	// The max number of steps Robo can execute. Default is no limit.
	MaxSteps *int `pulumi:"maxSteps"`
	// A set of directives Robo should apply during the crawl. This allows users to customize the crawl. For example, the username and password for a test account can be provided.
	RoboDirectives []RoboDirective `pulumi:"roboDirectives"`
	// A JSON file with a sequence of actions Robo should perform as a prologue for the crawl.
	RoboScript *FileReference `pulumi:"roboScript"`
	// The intents used to launch the app for the crawl. If none are provided, then the main launcher activity is launched. If some are provided, then only those provided are launched (the main launcher activity must be provided explicitly).
	StartingIntents []RoboStartingIntent `pulumi:"startingIntents"`
}

// AndroidRoboTestInput is an input type that accepts AndroidRoboTestArgs and AndroidRoboTestOutput values.
// You can construct a concrete instance of `AndroidRoboTestInput` via:
//
//          AndroidRoboTestArgs{...}
type AndroidRoboTestInput interface {
	pulumi.Input

	ToAndroidRoboTestOutput() AndroidRoboTestOutput
	ToAndroidRoboTestOutputWithContext(context.Context) AndroidRoboTestOutput
}

// A test of an android application that explores the application on a virtual or physical Android Device, finding culprits and crashes as it goes. Next tag: 30
type AndroidRoboTestArgs struct {
	// The APK for the application under test.
	AppApk FileReferencePtrInput `pulumi:"appApk"`
	// A multi-apk app bundle for the application under test.
	AppBundle AppBundlePtrInput `pulumi:"appBundle"`
	// The initial activity that should be used to start the app.
	AppInitialActivity pulumi.StringPtrInput `pulumi:"appInitialActivity"`
	// The java package for the application under test. The default value is determined by examining the application's manifest.
	AppPackageId pulumi.StringPtrInput `pulumi:"appPackageId"`
	// The max depth of the traversal stack Robo can explore. Needs to be at least 2 to make Robo explore the app beyond the first activity. Default is 50.
	MaxDepth pulumi.IntPtrInput `pulumi:"maxDepth"`
	// The max number of steps Robo can execute. Default is no limit.
	MaxSteps pulumi.IntPtrInput `pulumi:"maxSteps"`
	// A set of directives Robo should apply during the crawl. This allows users to customize the crawl. For example, the username and password for a test account can be provided.
	RoboDirectives RoboDirectiveArrayInput `pulumi:"roboDirectives"`
	// A JSON file with a sequence of actions Robo should perform as a prologue for the crawl.
	RoboScript FileReferencePtrInput `pulumi:"roboScript"`
	// The intents used to launch the app for the crawl. If none are provided, then the main launcher activity is launched. If some are provided, then only those provided are launched (the main launcher activity must be provided explicitly).
	StartingIntents RoboStartingIntentArrayInput `pulumi:"startingIntents"`
}

func (AndroidRoboTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AndroidRoboTest)(nil)).Elem()
}

func (i AndroidRoboTestArgs) ToAndroidRoboTestOutput() AndroidRoboTestOutput {
	return i.ToAndroidRoboTestOutputWithContext(context.Background())
}

func (i AndroidRoboTestArgs) ToAndroidRoboTestOutputWithContext(ctx context.Context) AndroidRoboTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidRoboTestOutput)
}

func (i AndroidRoboTestArgs) ToAndroidRoboTestPtrOutput() AndroidRoboTestPtrOutput {
	return i.ToAndroidRoboTestPtrOutputWithContext(context.Background())
}

func (i AndroidRoboTestArgs) ToAndroidRoboTestPtrOutputWithContext(ctx context.Context) AndroidRoboTestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidRoboTestOutput).ToAndroidRoboTestPtrOutputWithContext(ctx)
}

// AndroidRoboTestPtrInput is an input type that accepts AndroidRoboTestArgs, AndroidRoboTestPtr and AndroidRoboTestPtrOutput values.
// You can construct a concrete instance of `AndroidRoboTestPtrInput` via:
//
//          AndroidRoboTestArgs{...}
//
//  or:
//
//          nil
type AndroidRoboTestPtrInput interface {
	pulumi.Input

	ToAndroidRoboTestPtrOutput() AndroidRoboTestPtrOutput
	ToAndroidRoboTestPtrOutputWithContext(context.Context) AndroidRoboTestPtrOutput
}

type androidRoboTestPtrType AndroidRoboTestArgs

func AndroidRoboTestPtr(v *AndroidRoboTestArgs) AndroidRoboTestPtrInput {
	return (*androidRoboTestPtrType)(v)
}

func (*androidRoboTestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AndroidRoboTest)(nil)).Elem()
}

func (i *androidRoboTestPtrType) ToAndroidRoboTestPtrOutput() AndroidRoboTestPtrOutput {
	return i.ToAndroidRoboTestPtrOutputWithContext(context.Background())
}

func (i *androidRoboTestPtrType) ToAndroidRoboTestPtrOutputWithContext(ctx context.Context) AndroidRoboTestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidRoboTestPtrOutput)
}

// A test of an android application that explores the application on a virtual or physical Android Device, finding culprits and crashes as it goes. Next tag: 30
type AndroidRoboTestOutput struct{ *pulumi.OutputState }

func (AndroidRoboTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AndroidRoboTest)(nil)).Elem()
}

func (o AndroidRoboTestOutput) ToAndroidRoboTestOutput() AndroidRoboTestOutput {
	return o
}

func (o AndroidRoboTestOutput) ToAndroidRoboTestOutputWithContext(ctx context.Context) AndroidRoboTestOutput {
	return o
}

func (o AndroidRoboTestOutput) ToAndroidRoboTestPtrOutput() AndroidRoboTestPtrOutput {
	return o.ToAndroidRoboTestPtrOutputWithContext(context.Background())
}

func (o AndroidRoboTestOutput) ToAndroidRoboTestPtrOutputWithContext(ctx context.Context) AndroidRoboTestPtrOutput {
	return o.ApplyT(func(v AndroidRoboTest) *AndroidRoboTest {
		return &v
	}).(AndroidRoboTestPtrOutput)
}

// The APK for the application under test.
func (o AndroidRoboTestOutput) AppApk() FileReferencePtrOutput {
	return o.ApplyT(func(v AndroidRoboTest) *FileReference { return v.AppApk }).(FileReferencePtrOutput)
}

// A multi-apk app bundle for the application under test.
func (o AndroidRoboTestOutput) AppBundle() AppBundlePtrOutput {
	return o.ApplyT(func(v AndroidRoboTest) *AppBundle { return v.AppBundle }).(AppBundlePtrOutput)
}

// The initial activity that should be used to start the app.
func (o AndroidRoboTestOutput) AppInitialActivity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AndroidRoboTest) *string { return v.AppInitialActivity }).(pulumi.StringPtrOutput)
}

// The java package for the application under test. The default value is determined by examining the application's manifest.
func (o AndroidRoboTestOutput) AppPackageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AndroidRoboTest) *string { return v.AppPackageId }).(pulumi.StringPtrOutput)
}

// The max depth of the traversal stack Robo can explore. Needs to be at least 2 to make Robo explore the app beyond the first activity. Default is 50.
func (o AndroidRoboTestOutput) MaxDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AndroidRoboTest) *int { return v.MaxDepth }).(pulumi.IntPtrOutput)
}

// The max number of steps Robo can execute. Default is no limit.
func (o AndroidRoboTestOutput) MaxSteps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AndroidRoboTest) *int { return v.MaxSteps }).(pulumi.IntPtrOutput)
}

// A set of directives Robo should apply during the crawl. This allows users to customize the crawl. For example, the username and password for a test account can be provided.
func (o AndroidRoboTestOutput) RoboDirectives() RoboDirectiveArrayOutput {
	return o.ApplyT(func(v AndroidRoboTest) []RoboDirective { return v.RoboDirectives }).(RoboDirectiveArrayOutput)
}

// A JSON file with a sequence of actions Robo should perform as a prologue for the crawl.
func (o AndroidRoboTestOutput) RoboScript() FileReferencePtrOutput {
	return o.ApplyT(func(v AndroidRoboTest) *FileReference { return v.RoboScript }).(FileReferencePtrOutput)
}

// The intents used to launch the app for the crawl. If none are provided, then the main launcher activity is launched. If some are provided, then only those provided are launched (the main launcher activity must be provided explicitly).
func (o AndroidRoboTestOutput) StartingIntents() RoboStartingIntentArrayOutput {
	return o.ApplyT(func(v AndroidRoboTest) []RoboStartingIntent { return v.StartingIntents }).(RoboStartingIntentArrayOutput)
}

type AndroidRoboTestPtrOutput struct{ *pulumi.OutputState }

func (AndroidRoboTestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AndroidRoboTest)(nil)).Elem()
}

func (o AndroidRoboTestPtrOutput) ToAndroidRoboTestPtrOutput() AndroidRoboTestPtrOutput {
	return o
}

func (o AndroidRoboTestPtrOutput) ToAndroidRoboTestPtrOutputWithContext(ctx context.Context) AndroidRoboTestPtrOutput {
	return o
}

func (o AndroidRoboTestPtrOutput) Elem() AndroidRoboTestOutput {
	return o.ApplyT(func(v *AndroidRoboTest) AndroidRoboTest { return *v }).(AndroidRoboTestOutput)
}

// The APK for the application under test.
func (o AndroidRoboTestPtrOutput) AppApk() FileReferencePtrOutput {
	return o.ApplyT(func(v *AndroidRoboTest) *FileReference {
		if v == nil {
			return nil
		}
		return v.AppApk
	}).(FileReferencePtrOutput)
}

// A multi-apk app bundle for the application under test.
func (o AndroidRoboTestPtrOutput) AppBundle() AppBundlePtrOutput {
	return o.ApplyT(func(v *AndroidRoboTest) *AppBundle {
		if v == nil {
			return nil
		}
		return v.AppBundle
	}).(AppBundlePtrOutput)
}

// The initial activity that should be used to start the app.
func (o AndroidRoboTestPtrOutput) AppInitialActivity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AndroidRoboTest) *string {
		if v == nil {
			return nil
		}
		return v.AppInitialActivity
	}).(pulumi.StringPtrOutput)
}

// The java package for the application under test. The default value is determined by examining the application's manifest.
func (o AndroidRoboTestPtrOutput) AppPackageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AndroidRoboTest) *string {
		if v == nil {
			return nil
		}
		return v.AppPackageId
	}).(pulumi.StringPtrOutput)
}

// The max depth of the traversal stack Robo can explore. Needs to be at least 2 to make Robo explore the app beyond the first activity. Default is 50.
func (o AndroidRoboTestPtrOutput) MaxDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AndroidRoboTest) *int {
		if v == nil {
			return nil
		}
		return v.MaxDepth
	}).(pulumi.IntPtrOutput)
}

// The max number of steps Robo can execute. Default is no limit.
func (o AndroidRoboTestPtrOutput) MaxSteps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AndroidRoboTest) *int {
		if v == nil {
			return nil
		}
		return v.MaxSteps
	}).(pulumi.IntPtrOutput)
}

// A set of directives Robo should apply during the crawl. This allows users to customize the crawl. For example, the username and password for a test account can be provided.
func (o AndroidRoboTestPtrOutput) RoboDirectives() RoboDirectiveArrayOutput {
	return o.ApplyT(func(v *AndroidRoboTest) []RoboDirective {
		if v == nil {
			return nil
		}
		return v.RoboDirectives
	}).(RoboDirectiveArrayOutput)
}

// A JSON file with a sequence of actions Robo should perform as a prologue for the crawl.
func (o AndroidRoboTestPtrOutput) RoboScript() FileReferencePtrOutput {
	return o.ApplyT(func(v *AndroidRoboTest) *FileReference {
		if v == nil {
			return nil
		}
		return v.RoboScript
	}).(FileReferencePtrOutput)
}

// The intents used to launch the app for the crawl. If none are provided, then the main launcher activity is launched. If some are provided, then only those provided are launched (the main launcher activity must be provided explicitly).
func (o AndroidRoboTestPtrOutput) StartingIntents() RoboStartingIntentArrayOutput {
	return o.ApplyT(func(v *AndroidRoboTest) []RoboStartingIntent {
		if v == nil {
			return nil
		}
		return v.StartingIntents
	}).(RoboStartingIntentArrayOutput)
}

// A test of an Android Application with a Test Loop. The intent \ will be implicitly added, since Games is the only user of this api, for the time being.
type AndroidTestLoop struct {
	// The APK for the application under test.
	AppApk *FileReference `pulumi:"appApk"`
	// A multi-apk app bundle for the application under test.
	AppBundle *AppBundle `pulumi:"appBundle"`
	// The java package for the application under test. The default is determined by examining the application's manifest.
	AppPackageId *string `pulumi:"appPackageId"`
	// The list of scenario labels that should be run during the test. The scenario labels should map to labels defined in the application's manifest. For example, player_experience and com.google.test.loops.player_experience add all of the loops labeled in the manifest with the com.google.test.loops.player_experience name to the execution. Scenarios can also be specified in the scenarios field.
	ScenarioLabels []string `pulumi:"scenarioLabels"`
	// The list of scenarios that should be run during the test. The default is all test loops, derived from the application's manifest.
	Scenarios []int `pulumi:"scenarios"`
}

// AndroidTestLoopInput is an input type that accepts AndroidTestLoopArgs and AndroidTestLoopOutput values.
// You can construct a concrete instance of `AndroidTestLoopInput` via:
//
//          AndroidTestLoopArgs{...}
type AndroidTestLoopInput interface {
	pulumi.Input

	ToAndroidTestLoopOutput() AndroidTestLoopOutput
	ToAndroidTestLoopOutputWithContext(context.Context) AndroidTestLoopOutput
}

// A test of an Android Application with a Test Loop. The intent \ will be implicitly added, since Games is the only user of this api, for the time being.
type AndroidTestLoopArgs struct {
	// The APK for the application under test.
	AppApk FileReferencePtrInput `pulumi:"appApk"`
	// A multi-apk app bundle for the application under test.
	AppBundle AppBundlePtrInput `pulumi:"appBundle"`
	// The java package for the application under test. The default is determined by examining the application's manifest.
	AppPackageId pulumi.StringPtrInput `pulumi:"appPackageId"`
	// The list of scenario labels that should be run during the test. The scenario labels should map to labels defined in the application's manifest. For example, player_experience and com.google.test.loops.player_experience add all of the loops labeled in the manifest with the com.google.test.loops.player_experience name to the execution. Scenarios can also be specified in the scenarios field.
	ScenarioLabels pulumi.StringArrayInput `pulumi:"scenarioLabels"`
	// The list of scenarios that should be run during the test. The default is all test loops, derived from the application's manifest.
	Scenarios pulumi.IntArrayInput `pulumi:"scenarios"`
}

func (AndroidTestLoopArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AndroidTestLoop)(nil)).Elem()
}

func (i AndroidTestLoopArgs) ToAndroidTestLoopOutput() AndroidTestLoopOutput {
	return i.ToAndroidTestLoopOutputWithContext(context.Background())
}

func (i AndroidTestLoopArgs) ToAndroidTestLoopOutputWithContext(ctx context.Context) AndroidTestLoopOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidTestLoopOutput)
}

func (i AndroidTestLoopArgs) ToAndroidTestLoopPtrOutput() AndroidTestLoopPtrOutput {
	return i.ToAndroidTestLoopPtrOutputWithContext(context.Background())
}

func (i AndroidTestLoopArgs) ToAndroidTestLoopPtrOutputWithContext(ctx context.Context) AndroidTestLoopPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidTestLoopOutput).ToAndroidTestLoopPtrOutputWithContext(ctx)
}

// AndroidTestLoopPtrInput is an input type that accepts AndroidTestLoopArgs, AndroidTestLoopPtr and AndroidTestLoopPtrOutput values.
// You can construct a concrete instance of `AndroidTestLoopPtrInput` via:
//
//          AndroidTestLoopArgs{...}
//
//  or:
//
//          nil
type AndroidTestLoopPtrInput interface {
	pulumi.Input

	ToAndroidTestLoopPtrOutput() AndroidTestLoopPtrOutput
	ToAndroidTestLoopPtrOutputWithContext(context.Context) AndroidTestLoopPtrOutput
}

type androidTestLoopPtrType AndroidTestLoopArgs

func AndroidTestLoopPtr(v *AndroidTestLoopArgs) AndroidTestLoopPtrInput {
	return (*androidTestLoopPtrType)(v)
}

func (*androidTestLoopPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AndroidTestLoop)(nil)).Elem()
}

func (i *androidTestLoopPtrType) ToAndroidTestLoopPtrOutput() AndroidTestLoopPtrOutput {
	return i.ToAndroidTestLoopPtrOutputWithContext(context.Background())
}

func (i *androidTestLoopPtrType) ToAndroidTestLoopPtrOutputWithContext(ctx context.Context) AndroidTestLoopPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidTestLoopPtrOutput)
}

// A test of an Android Application with a Test Loop. The intent \ will be implicitly added, since Games is the only user of this api, for the time being.
type AndroidTestLoopOutput struct{ *pulumi.OutputState }

func (AndroidTestLoopOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AndroidTestLoop)(nil)).Elem()
}

func (o AndroidTestLoopOutput) ToAndroidTestLoopOutput() AndroidTestLoopOutput {
	return o
}

func (o AndroidTestLoopOutput) ToAndroidTestLoopOutputWithContext(ctx context.Context) AndroidTestLoopOutput {
	return o
}

func (o AndroidTestLoopOutput) ToAndroidTestLoopPtrOutput() AndroidTestLoopPtrOutput {
	return o.ToAndroidTestLoopPtrOutputWithContext(context.Background())
}

func (o AndroidTestLoopOutput) ToAndroidTestLoopPtrOutputWithContext(ctx context.Context) AndroidTestLoopPtrOutput {
	return o.ApplyT(func(v AndroidTestLoop) *AndroidTestLoop {
		return &v
	}).(AndroidTestLoopPtrOutput)
}

// The APK for the application under test.
func (o AndroidTestLoopOutput) AppApk() FileReferencePtrOutput {
	return o.ApplyT(func(v AndroidTestLoop) *FileReference { return v.AppApk }).(FileReferencePtrOutput)
}

// A multi-apk app bundle for the application under test.
func (o AndroidTestLoopOutput) AppBundle() AppBundlePtrOutput {
	return o.ApplyT(func(v AndroidTestLoop) *AppBundle { return v.AppBundle }).(AppBundlePtrOutput)
}

// The java package for the application under test. The default is determined by examining the application's manifest.
func (o AndroidTestLoopOutput) AppPackageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AndroidTestLoop) *string { return v.AppPackageId }).(pulumi.StringPtrOutput)
}

// The list of scenario labels that should be run during the test. The scenario labels should map to labels defined in the application's manifest. For example, player_experience and com.google.test.loops.player_experience add all of the loops labeled in the manifest with the com.google.test.loops.player_experience name to the execution. Scenarios can also be specified in the scenarios field.
func (o AndroidTestLoopOutput) ScenarioLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AndroidTestLoop) []string { return v.ScenarioLabels }).(pulumi.StringArrayOutput)
}

// The list of scenarios that should be run during the test. The default is all test loops, derived from the application's manifest.
func (o AndroidTestLoopOutput) Scenarios() pulumi.IntArrayOutput {
	return o.ApplyT(func(v AndroidTestLoop) []int { return v.Scenarios }).(pulumi.IntArrayOutput)
}

type AndroidTestLoopPtrOutput struct{ *pulumi.OutputState }

func (AndroidTestLoopPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AndroidTestLoop)(nil)).Elem()
}

func (o AndroidTestLoopPtrOutput) ToAndroidTestLoopPtrOutput() AndroidTestLoopPtrOutput {
	return o
}

func (o AndroidTestLoopPtrOutput) ToAndroidTestLoopPtrOutputWithContext(ctx context.Context) AndroidTestLoopPtrOutput {
	return o
}

func (o AndroidTestLoopPtrOutput) Elem() AndroidTestLoopOutput {
	return o.ApplyT(func(v *AndroidTestLoop) AndroidTestLoop { return *v }).(AndroidTestLoopOutput)
}

// The APK for the application under test.
func (o AndroidTestLoopPtrOutput) AppApk() FileReferencePtrOutput {
	return o.ApplyT(func(v *AndroidTestLoop) *FileReference {
		if v == nil {
			return nil
		}
		return v.AppApk
	}).(FileReferencePtrOutput)
}

// A multi-apk app bundle for the application under test.
func (o AndroidTestLoopPtrOutput) AppBundle() AppBundlePtrOutput {
	return o.ApplyT(func(v *AndroidTestLoop) *AppBundle {
		if v == nil {
			return nil
		}
		return v.AppBundle
	}).(AppBundlePtrOutput)
}

// The java package for the application under test. The default is determined by examining the application's manifest.
func (o AndroidTestLoopPtrOutput) AppPackageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AndroidTestLoop) *string {
		if v == nil {
			return nil
		}
		return v.AppPackageId
	}).(pulumi.StringPtrOutput)
}

// The list of scenario labels that should be run during the test. The scenario labels should map to labels defined in the application's manifest. For example, player_experience and com.google.test.loops.player_experience add all of the loops labeled in the manifest with the com.google.test.loops.player_experience name to the execution. Scenarios can also be specified in the scenarios field.
func (o AndroidTestLoopPtrOutput) ScenarioLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AndroidTestLoop) []string {
		if v == nil {
			return nil
		}
		return v.ScenarioLabels
	}).(pulumi.StringArrayOutput)
}

// The list of scenarios that should be run during the test. The default is all test loops, derived from the application's manifest.
func (o AndroidTestLoopPtrOutput) Scenarios() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *AndroidTestLoop) []int {
		if v == nil {
			return nil
		}
		return v.Scenarios
	}).(pulumi.IntArrayOutput)
}

// An Android package file to install.
type Apk struct {
	// The path to an APK to be installed on the device before the test begins.
	Location *FileReference `pulumi:"location"`
	// The java package for the APK to be installed. Value is determined by examining the application's manifest.
	PackageName *string `pulumi:"packageName"`
}

// ApkInput is an input type that accepts ApkArgs and ApkOutput values.
// You can construct a concrete instance of `ApkInput` via:
//
//          ApkArgs{...}
type ApkInput interface {
	pulumi.Input

	ToApkOutput() ApkOutput
	ToApkOutputWithContext(context.Context) ApkOutput
}

// An Android package file to install.
type ApkArgs struct {
	// The path to an APK to be installed on the device before the test begins.
	Location FileReferencePtrInput `pulumi:"location"`
	// The java package for the APK to be installed. Value is determined by examining the application's manifest.
	PackageName pulumi.StringPtrInput `pulumi:"packageName"`
}

func (ApkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Apk)(nil)).Elem()
}

func (i ApkArgs) ToApkOutput() ApkOutput {
	return i.ToApkOutputWithContext(context.Background())
}

func (i ApkArgs) ToApkOutputWithContext(ctx context.Context) ApkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApkOutput)
}

// ApkArrayInput is an input type that accepts ApkArray and ApkArrayOutput values.
// You can construct a concrete instance of `ApkArrayInput` via:
//
//          ApkArray{ ApkArgs{...} }
type ApkArrayInput interface {
	pulumi.Input

	ToApkArrayOutput() ApkArrayOutput
	ToApkArrayOutputWithContext(context.Context) ApkArrayOutput
}

type ApkArray []ApkInput

func (ApkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Apk)(nil)).Elem()
}

func (i ApkArray) ToApkArrayOutput() ApkArrayOutput {
	return i.ToApkArrayOutputWithContext(context.Background())
}

func (i ApkArray) ToApkArrayOutputWithContext(ctx context.Context) ApkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApkArrayOutput)
}

// An Android package file to install.
type ApkOutput struct{ *pulumi.OutputState }

func (ApkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Apk)(nil)).Elem()
}

func (o ApkOutput) ToApkOutput() ApkOutput {
	return o
}

func (o ApkOutput) ToApkOutputWithContext(ctx context.Context) ApkOutput {
	return o
}

// The path to an APK to be installed on the device before the test begins.
func (o ApkOutput) Location() FileReferencePtrOutput {
	return o.ApplyT(func(v Apk) *FileReference { return v.Location }).(FileReferencePtrOutput)
}

// The java package for the APK to be installed. Value is determined by examining the application's manifest.
func (o ApkOutput) PackageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Apk) *string { return v.PackageName }).(pulumi.StringPtrOutput)
}

type ApkArrayOutput struct{ *pulumi.OutputState }

func (ApkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Apk)(nil)).Elem()
}

func (o ApkArrayOutput) ToApkArrayOutput() ApkArrayOutput {
	return o
}

func (o ApkArrayOutput) ToApkArrayOutputWithContext(ctx context.Context) ApkArrayOutput {
	return o
}

func (o ApkArrayOutput) Index(i pulumi.IntInput) ApkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Apk {
		return vs[0].([]Apk)[vs[1].(int)]
	}).(ApkOutput)
}

// An Android App Bundle file format, containing a BundleConfig.pb file, a base module directory, zero or more dynamic feature module directories. See https://developer.android.com/guide/app-bundle/build for guidance on building App Bundles.
type AppBundle struct {
	// .aab file representing the app bundle under test.
	BundleLocation *FileReference `pulumi:"bundleLocation"`
}

// AppBundleInput is an input type that accepts AppBundleArgs and AppBundleOutput values.
// You can construct a concrete instance of `AppBundleInput` via:
//
//          AppBundleArgs{...}
type AppBundleInput interface {
	pulumi.Input

	ToAppBundleOutput() AppBundleOutput
	ToAppBundleOutputWithContext(context.Context) AppBundleOutput
}

// An Android App Bundle file format, containing a BundleConfig.pb file, a base module directory, zero or more dynamic feature module directories. See https://developer.android.com/guide/app-bundle/build for guidance on building App Bundles.
type AppBundleArgs struct {
	// .aab file representing the app bundle under test.
	BundleLocation FileReferencePtrInput `pulumi:"bundleLocation"`
}

func (AppBundleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppBundle)(nil)).Elem()
}

func (i AppBundleArgs) ToAppBundleOutput() AppBundleOutput {
	return i.ToAppBundleOutputWithContext(context.Background())
}

func (i AppBundleArgs) ToAppBundleOutputWithContext(ctx context.Context) AppBundleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppBundleOutput)
}

func (i AppBundleArgs) ToAppBundlePtrOutput() AppBundlePtrOutput {
	return i.ToAppBundlePtrOutputWithContext(context.Background())
}

func (i AppBundleArgs) ToAppBundlePtrOutputWithContext(ctx context.Context) AppBundlePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppBundleOutput).ToAppBundlePtrOutputWithContext(ctx)
}

// AppBundlePtrInput is an input type that accepts AppBundleArgs, AppBundlePtr and AppBundlePtrOutput values.
// You can construct a concrete instance of `AppBundlePtrInput` via:
//
//          AppBundleArgs{...}
//
//  or:
//
//          nil
type AppBundlePtrInput interface {
	pulumi.Input

	ToAppBundlePtrOutput() AppBundlePtrOutput
	ToAppBundlePtrOutputWithContext(context.Context) AppBundlePtrOutput
}

type appBundlePtrType AppBundleArgs

func AppBundlePtr(v *AppBundleArgs) AppBundlePtrInput {
	return (*appBundlePtrType)(v)
}

func (*appBundlePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppBundle)(nil)).Elem()
}

func (i *appBundlePtrType) ToAppBundlePtrOutput() AppBundlePtrOutput {
	return i.ToAppBundlePtrOutputWithContext(context.Background())
}

func (i *appBundlePtrType) ToAppBundlePtrOutputWithContext(ctx context.Context) AppBundlePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppBundlePtrOutput)
}

// An Android App Bundle file format, containing a BundleConfig.pb file, a base module directory, zero or more dynamic feature module directories. See https://developer.android.com/guide/app-bundle/build for guidance on building App Bundles.
type AppBundleOutput struct{ *pulumi.OutputState }

func (AppBundleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppBundle)(nil)).Elem()
}

func (o AppBundleOutput) ToAppBundleOutput() AppBundleOutput {
	return o
}

func (o AppBundleOutput) ToAppBundleOutputWithContext(ctx context.Context) AppBundleOutput {
	return o
}

func (o AppBundleOutput) ToAppBundlePtrOutput() AppBundlePtrOutput {
	return o.ToAppBundlePtrOutputWithContext(context.Background())
}

func (o AppBundleOutput) ToAppBundlePtrOutputWithContext(ctx context.Context) AppBundlePtrOutput {
	return o.ApplyT(func(v AppBundle) *AppBundle {
		return &v
	}).(AppBundlePtrOutput)
}

// .aab file representing the app bundle under test.
func (o AppBundleOutput) BundleLocation() FileReferencePtrOutput {
	return o.ApplyT(func(v AppBundle) *FileReference { return v.BundleLocation }).(FileReferencePtrOutput)
}

type AppBundlePtrOutput struct{ *pulumi.OutputState }

func (AppBundlePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppBundle)(nil)).Elem()
}

func (o AppBundlePtrOutput) ToAppBundlePtrOutput() AppBundlePtrOutput {
	return o
}

func (o AppBundlePtrOutput) ToAppBundlePtrOutputWithContext(ctx context.Context) AppBundlePtrOutput {
	return o
}

func (o AppBundlePtrOutput) Elem() AppBundleOutput {
	return o.ApplyT(func(v *AppBundle) AppBundle { return *v }).(AppBundleOutput)
}

// .aab file representing the app bundle under test.
func (o AppBundlePtrOutput) BundleLocation() FileReferencePtrOutput {
	return o.ApplyT(func(v *AppBundle) *FileReference {
		if v == nil {
			return nil
		}
		return v.BundleLocation
	}).(FileReferencePtrOutput)
}

// Information about the client which invoked the test.
type ClientInfo struct {
	// The list of detailed information about client.
	ClientInfoDetails []ClientInfoDetail `pulumi:"clientInfoDetails"`
	// Required. Client name, such as gcloud.
	Name *string `pulumi:"name"`
}

// ClientInfoInput is an input type that accepts ClientInfoArgs and ClientInfoOutput values.
// You can construct a concrete instance of `ClientInfoInput` via:
//
//          ClientInfoArgs{...}
type ClientInfoInput interface {
	pulumi.Input

	ToClientInfoOutput() ClientInfoOutput
	ToClientInfoOutputWithContext(context.Context) ClientInfoOutput
}

// Information about the client which invoked the test.
type ClientInfoArgs struct {
	// The list of detailed information about client.
	ClientInfoDetails ClientInfoDetailArrayInput `pulumi:"clientInfoDetails"`
	// Required. Client name, such as gcloud.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ClientInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientInfo)(nil)).Elem()
}

func (i ClientInfoArgs) ToClientInfoOutput() ClientInfoOutput {
	return i.ToClientInfoOutputWithContext(context.Background())
}

func (i ClientInfoArgs) ToClientInfoOutputWithContext(ctx context.Context) ClientInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientInfoOutput)
}

func (i ClientInfoArgs) ToClientInfoPtrOutput() ClientInfoPtrOutput {
	return i.ToClientInfoPtrOutputWithContext(context.Background())
}

func (i ClientInfoArgs) ToClientInfoPtrOutputWithContext(ctx context.Context) ClientInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientInfoOutput).ToClientInfoPtrOutputWithContext(ctx)
}

// ClientInfoPtrInput is an input type that accepts ClientInfoArgs, ClientInfoPtr and ClientInfoPtrOutput values.
// You can construct a concrete instance of `ClientInfoPtrInput` via:
//
//          ClientInfoArgs{...}
//
//  or:
//
//          nil
type ClientInfoPtrInput interface {
	pulumi.Input

	ToClientInfoPtrOutput() ClientInfoPtrOutput
	ToClientInfoPtrOutputWithContext(context.Context) ClientInfoPtrOutput
}

type clientInfoPtrType ClientInfoArgs

func ClientInfoPtr(v *ClientInfoArgs) ClientInfoPtrInput {
	return (*clientInfoPtrType)(v)
}

func (*clientInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientInfo)(nil)).Elem()
}

func (i *clientInfoPtrType) ToClientInfoPtrOutput() ClientInfoPtrOutput {
	return i.ToClientInfoPtrOutputWithContext(context.Background())
}

func (i *clientInfoPtrType) ToClientInfoPtrOutputWithContext(ctx context.Context) ClientInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientInfoPtrOutput)
}

// Information about the client which invoked the test.
type ClientInfoOutput struct{ *pulumi.OutputState }

func (ClientInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientInfo)(nil)).Elem()
}

func (o ClientInfoOutput) ToClientInfoOutput() ClientInfoOutput {
	return o
}

func (o ClientInfoOutput) ToClientInfoOutputWithContext(ctx context.Context) ClientInfoOutput {
	return o
}

func (o ClientInfoOutput) ToClientInfoPtrOutput() ClientInfoPtrOutput {
	return o.ToClientInfoPtrOutputWithContext(context.Background())
}

func (o ClientInfoOutput) ToClientInfoPtrOutputWithContext(ctx context.Context) ClientInfoPtrOutput {
	return o.ApplyT(func(v ClientInfo) *ClientInfo {
		return &v
	}).(ClientInfoPtrOutput)
}

// The list of detailed information about client.
func (o ClientInfoOutput) ClientInfoDetails() ClientInfoDetailArrayOutput {
	return o.ApplyT(func(v ClientInfo) []ClientInfoDetail { return v.ClientInfoDetails }).(ClientInfoDetailArrayOutput)
}

// Required. Client name, such as gcloud.
func (o ClientInfoOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientInfo) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ClientInfoPtrOutput struct{ *pulumi.OutputState }

func (ClientInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientInfo)(nil)).Elem()
}

func (o ClientInfoPtrOutput) ToClientInfoPtrOutput() ClientInfoPtrOutput {
	return o
}

func (o ClientInfoPtrOutput) ToClientInfoPtrOutputWithContext(ctx context.Context) ClientInfoPtrOutput {
	return o
}

func (o ClientInfoPtrOutput) Elem() ClientInfoOutput {
	return o.ApplyT(func(v *ClientInfo) ClientInfo { return *v }).(ClientInfoOutput)
}

// The list of detailed information about client.
func (o ClientInfoPtrOutput) ClientInfoDetails() ClientInfoDetailArrayOutput {
	return o.ApplyT(func(v *ClientInfo) []ClientInfoDetail {
		if v == nil {
			return nil
		}
		return v.ClientInfoDetails
	}).(ClientInfoDetailArrayOutput)
}

// Required. Client name, such as gcloud.
func (o ClientInfoPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientInfo) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Key-value pair of detailed information about the client which invoked the test. Examples: {'Version', '1.0'}, {'Release Track', 'BETA'}.
type ClientInfoDetail struct {
	// Required. The key of detailed client information.
	Key *string `pulumi:"key"`
	// Required. The value of detailed client information.
	Value *string `pulumi:"value"`
}

// ClientInfoDetailInput is an input type that accepts ClientInfoDetailArgs and ClientInfoDetailOutput values.
// You can construct a concrete instance of `ClientInfoDetailInput` via:
//
//          ClientInfoDetailArgs{...}
type ClientInfoDetailInput interface {
	pulumi.Input

	ToClientInfoDetailOutput() ClientInfoDetailOutput
	ToClientInfoDetailOutputWithContext(context.Context) ClientInfoDetailOutput
}

// Key-value pair of detailed information about the client which invoked the test. Examples: {'Version', '1.0'}, {'Release Track', 'BETA'}.
type ClientInfoDetailArgs struct {
	// Required. The key of detailed client information.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Required. The value of detailed client information.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ClientInfoDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientInfoDetail)(nil)).Elem()
}

func (i ClientInfoDetailArgs) ToClientInfoDetailOutput() ClientInfoDetailOutput {
	return i.ToClientInfoDetailOutputWithContext(context.Background())
}

func (i ClientInfoDetailArgs) ToClientInfoDetailOutputWithContext(ctx context.Context) ClientInfoDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientInfoDetailOutput)
}

// ClientInfoDetailArrayInput is an input type that accepts ClientInfoDetailArray and ClientInfoDetailArrayOutput values.
// You can construct a concrete instance of `ClientInfoDetailArrayInput` via:
//
//          ClientInfoDetailArray{ ClientInfoDetailArgs{...} }
type ClientInfoDetailArrayInput interface {
	pulumi.Input

	ToClientInfoDetailArrayOutput() ClientInfoDetailArrayOutput
	ToClientInfoDetailArrayOutputWithContext(context.Context) ClientInfoDetailArrayOutput
}

type ClientInfoDetailArray []ClientInfoDetailInput

func (ClientInfoDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientInfoDetail)(nil)).Elem()
}

func (i ClientInfoDetailArray) ToClientInfoDetailArrayOutput() ClientInfoDetailArrayOutput {
	return i.ToClientInfoDetailArrayOutputWithContext(context.Background())
}

func (i ClientInfoDetailArray) ToClientInfoDetailArrayOutputWithContext(ctx context.Context) ClientInfoDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientInfoDetailArrayOutput)
}

// Key-value pair of detailed information about the client which invoked the test. Examples: {'Version', '1.0'}, {'Release Track', 'BETA'}.
type ClientInfoDetailOutput struct{ *pulumi.OutputState }

func (ClientInfoDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientInfoDetail)(nil)).Elem()
}

func (o ClientInfoDetailOutput) ToClientInfoDetailOutput() ClientInfoDetailOutput {
	return o
}

func (o ClientInfoDetailOutput) ToClientInfoDetailOutputWithContext(ctx context.Context) ClientInfoDetailOutput {
	return o
}

// Required. The key of detailed client information.
func (o ClientInfoDetailOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientInfoDetail) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Required. The value of detailed client information.
func (o ClientInfoDetailOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientInfoDetail) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ClientInfoDetailArrayOutput struct{ *pulumi.OutputState }

func (ClientInfoDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientInfoDetail)(nil)).Elem()
}

func (o ClientInfoDetailArrayOutput) ToClientInfoDetailArrayOutput() ClientInfoDetailArrayOutput {
	return o
}

func (o ClientInfoDetailArrayOutput) ToClientInfoDetailArrayOutputWithContext(ctx context.Context) ClientInfoDetailArrayOutput {
	return o
}

func (o ClientInfoDetailArrayOutput) Index(i pulumi.IntInput) ClientInfoDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClientInfoDetail {
		return vs[0].([]ClientInfoDetail)[vs[1].(int)]
	}).(ClientInfoDetailOutput)
}

// A single device file description.
type DeviceFile struct {
	// A reference to an opaque binary blob file.
	ObbFile *ObbFile `pulumi:"obbFile"`
	// A reference to a regular file.
	RegularFile *RegularFile `pulumi:"regularFile"`
}

// DeviceFileInput is an input type that accepts DeviceFileArgs and DeviceFileOutput values.
// You can construct a concrete instance of `DeviceFileInput` via:
//
//          DeviceFileArgs{...}
type DeviceFileInput interface {
	pulumi.Input

	ToDeviceFileOutput() DeviceFileOutput
	ToDeviceFileOutputWithContext(context.Context) DeviceFileOutput
}

// A single device file description.
type DeviceFileArgs struct {
	// A reference to an opaque binary blob file.
	ObbFile ObbFilePtrInput `pulumi:"obbFile"`
	// A reference to a regular file.
	RegularFile RegularFilePtrInput `pulumi:"regularFile"`
}

func (DeviceFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceFile)(nil)).Elem()
}

func (i DeviceFileArgs) ToDeviceFileOutput() DeviceFileOutput {
	return i.ToDeviceFileOutputWithContext(context.Background())
}

func (i DeviceFileArgs) ToDeviceFileOutputWithContext(ctx context.Context) DeviceFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceFileOutput)
}

// DeviceFileArrayInput is an input type that accepts DeviceFileArray and DeviceFileArrayOutput values.
// You can construct a concrete instance of `DeviceFileArrayInput` via:
//
//          DeviceFileArray{ DeviceFileArgs{...} }
type DeviceFileArrayInput interface {
	pulumi.Input

	ToDeviceFileArrayOutput() DeviceFileArrayOutput
	ToDeviceFileArrayOutputWithContext(context.Context) DeviceFileArrayOutput
}

type DeviceFileArray []DeviceFileInput

func (DeviceFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceFile)(nil)).Elem()
}

func (i DeviceFileArray) ToDeviceFileArrayOutput() DeviceFileArrayOutput {
	return i.ToDeviceFileArrayOutputWithContext(context.Background())
}

func (i DeviceFileArray) ToDeviceFileArrayOutputWithContext(ctx context.Context) DeviceFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceFileArrayOutput)
}

// A single device file description.
type DeviceFileOutput struct{ *pulumi.OutputState }

func (DeviceFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceFile)(nil)).Elem()
}

func (o DeviceFileOutput) ToDeviceFileOutput() DeviceFileOutput {
	return o
}

func (o DeviceFileOutput) ToDeviceFileOutputWithContext(ctx context.Context) DeviceFileOutput {
	return o
}

// A reference to an opaque binary blob file.
func (o DeviceFileOutput) ObbFile() ObbFilePtrOutput {
	return o.ApplyT(func(v DeviceFile) *ObbFile { return v.ObbFile }).(ObbFilePtrOutput)
}

// A reference to a regular file.
func (o DeviceFileOutput) RegularFile() RegularFilePtrOutput {
	return o.ApplyT(func(v DeviceFile) *RegularFile { return v.RegularFile }).(RegularFilePtrOutput)
}

type DeviceFileArrayOutput struct{ *pulumi.OutputState }

func (DeviceFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceFile)(nil)).Elem()
}

func (o DeviceFileArrayOutput) ToDeviceFileArrayOutput() DeviceFileArrayOutput {
	return o
}

func (o DeviceFileArrayOutput) ToDeviceFileArrayOutputWithContext(ctx context.Context) DeviceFileArrayOutput {
	return o
}

func (o DeviceFileArrayOutput) Index(i pulumi.IntInput) DeviceFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceFile {
		return vs[0].([]DeviceFile)[vs[1].(int)]
	}).(DeviceFileOutput)
}

// The environment in which the test is run.
type Environment struct {
	// An Android device which must be used with an Android test.
	AndroidDevice *AndroidDevice `pulumi:"androidDevice"`
	// An iOS device which must be used with an iOS test.
	IosDevice *IosDevice `pulumi:"iosDevice"`
}

// EnvironmentInput is an input type that accepts EnvironmentArgs and EnvironmentOutput values.
// You can construct a concrete instance of `EnvironmentInput` via:
//
//          EnvironmentArgs{...}
type EnvironmentInput interface {
	pulumi.Input

	ToEnvironmentOutput() EnvironmentOutput
	ToEnvironmentOutputWithContext(context.Context) EnvironmentOutput
}

// The environment in which the test is run.
type EnvironmentArgs struct {
	// An Android device which must be used with an Android test.
	AndroidDevice AndroidDevicePtrInput `pulumi:"androidDevice"`
	// An iOS device which must be used with an iOS test.
	IosDevice IosDevicePtrInput `pulumi:"iosDevice"`
}

func (EnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Environment)(nil)).Elem()
}

func (i EnvironmentArgs) ToEnvironmentOutput() EnvironmentOutput {
	return i.ToEnvironmentOutputWithContext(context.Background())
}

func (i EnvironmentArgs) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentOutput)
}

func (i EnvironmentArgs) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return i.ToEnvironmentPtrOutputWithContext(context.Background())
}

func (i EnvironmentArgs) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentOutput).ToEnvironmentPtrOutputWithContext(ctx)
}

// EnvironmentPtrInput is an input type that accepts EnvironmentArgs, EnvironmentPtr and EnvironmentPtrOutput values.
// You can construct a concrete instance of `EnvironmentPtrInput` via:
//
//          EnvironmentArgs{...}
//
//  or:
//
//          nil
type EnvironmentPtrInput interface {
	pulumi.Input

	ToEnvironmentPtrOutput() EnvironmentPtrOutput
	ToEnvironmentPtrOutputWithContext(context.Context) EnvironmentPtrOutput
}

type environmentPtrType EnvironmentArgs

func EnvironmentPtr(v *EnvironmentArgs) EnvironmentPtrInput {
	return (*environmentPtrType)(v)
}

func (*environmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (i *environmentPtrType) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return i.ToEnvironmentPtrOutputWithContext(context.Background())
}

func (i *environmentPtrType) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentPtrOutput)
}

// The environment in which the test is run.
type EnvironmentOutput struct{ *pulumi.OutputState }

func (EnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Environment)(nil)).Elem()
}

func (o EnvironmentOutput) ToEnvironmentOutput() EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return o.ToEnvironmentPtrOutputWithContext(context.Background())
}

func (o EnvironmentOutput) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return o.ApplyT(func(v Environment) *Environment {
		return &v
	}).(EnvironmentPtrOutput)
}

// An Android device which must be used with an Android test.
func (o EnvironmentOutput) AndroidDevice() AndroidDevicePtrOutput {
	return o.ApplyT(func(v Environment) *AndroidDevice { return v.AndroidDevice }).(AndroidDevicePtrOutput)
}

// An iOS device which must be used with an iOS test.
func (o EnvironmentOutput) IosDevice() IosDevicePtrOutput {
	return o.ApplyT(func(v Environment) *IosDevice { return v.IosDevice }).(IosDevicePtrOutput)
}

type EnvironmentPtrOutput struct{ *pulumi.OutputState }

func (EnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (o EnvironmentPtrOutput) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return o
}

func (o EnvironmentPtrOutput) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return o
}

func (o EnvironmentPtrOutput) Elem() EnvironmentOutput {
	return o.ApplyT(func(v *Environment) Environment { return *v }).(EnvironmentOutput)
}

// An Android device which must be used with an Android test.
func (o EnvironmentPtrOutput) AndroidDevice() AndroidDevicePtrOutput {
	return o.ApplyT(func(v *Environment) *AndroidDevice {
		if v == nil {
			return nil
		}
		return v.AndroidDevice
	}).(AndroidDevicePtrOutput)
}

// An iOS device which must be used with an iOS test.
func (o EnvironmentPtrOutput) IosDevice() IosDevicePtrOutput {
	return o.ApplyT(func(v *Environment) *IosDevice {
		if v == nil {
			return nil
		}
		return v.IosDevice
	}).(IosDevicePtrOutput)
}

// The matrix of environments in which the test is to be executed.
type EnvironmentMatrix struct {
	// A list of Android devices; the test will be run only on the specified devices.
	AndroidDeviceList *AndroidDeviceList `pulumi:"androidDeviceList"`
	// A matrix of Android devices.
	AndroidMatrix *AndroidMatrix `pulumi:"androidMatrix"`
	// A list of iOS devices.
	IosDeviceList *IosDeviceList `pulumi:"iosDeviceList"`
}

// EnvironmentMatrixInput is an input type that accepts EnvironmentMatrixArgs and EnvironmentMatrixOutput values.
// You can construct a concrete instance of `EnvironmentMatrixInput` via:
//
//          EnvironmentMatrixArgs{...}
type EnvironmentMatrixInput interface {
	pulumi.Input

	ToEnvironmentMatrixOutput() EnvironmentMatrixOutput
	ToEnvironmentMatrixOutputWithContext(context.Context) EnvironmentMatrixOutput
}

// The matrix of environments in which the test is to be executed.
type EnvironmentMatrixArgs struct {
	// A list of Android devices; the test will be run only on the specified devices.
	AndroidDeviceList AndroidDeviceListPtrInput `pulumi:"androidDeviceList"`
	// A matrix of Android devices.
	AndroidMatrix AndroidMatrixPtrInput `pulumi:"androidMatrix"`
	// A list of iOS devices.
	IosDeviceList IosDeviceListPtrInput `pulumi:"iosDeviceList"`
}

func (EnvironmentMatrixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentMatrix)(nil)).Elem()
}

func (i EnvironmentMatrixArgs) ToEnvironmentMatrixOutput() EnvironmentMatrixOutput {
	return i.ToEnvironmentMatrixOutputWithContext(context.Background())
}

func (i EnvironmentMatrixArgs) ToEnvironmentMatrixOutputWithContext(ctx context.Context) EnvironmentMatrixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentMatrixOutput)
}

func (i EnvironmentMatrixArgs) ToEnvironmentMatrixPtrOutput() EnvironmentMatrixPtrOutput {
	return i.ToEnvironmentMatrixPtrOutputWithContext(context.Background())
}

func (i EnvironmentMatrixArgs) ToEnvironmentMatrixPtrOutputWithContext(ctx context.Context) EnvironmentMatrixPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentMatrixOutput).ToEnvironmentMatrixPtrOutputWithContext(ctx)
}

// EnvironmentMatrixPtrInput is an input type that accepts EnvironmentMatrixArgs, EnvironmentMatrixPtr and EnvironmentMatrixPtrOutput values.
// You can construct a concrete instance of `EnvironmentMatrixPtrInput` via:
//
//          EnvironmentMatrixArgs{...}
//
//  or:
//
//          nil
type EnvironmentMatrixPtrInput interface {
	pulumi.Input

	ToEnvironmentMatrixPtrOutput() EnvironmentMatrixPtrOutput
	ToEnvironmentMatrixPtrOutputWithContext(context.Context) EnvironmentMatrixPtrOutput
}

type environmentMatrixPtrType EnvironmentMatrixArgs

func EnvironmentMatrixPtr(v *EnvironmentMatrixArgs) EnvironmentMatrixPtrInput {
	return (*environmentMatrixPtrType)(v)
}

func (*environmentMatrixPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentMatrix)(nil)).Elem()
}

func (i *environmentMatrixPtrType) ToEnvironmentMatrixPtrOutput() EnvironmentMatrixPtrOutput {
	return i.ToEnvironmentMatrixPtrOutputWithContext(context.Background())
}

func (i *environmentMatrixPtrType) ToEnvironmentMatrixPtrOutputWithContext(ctx context.Context) EnvironmentMatrixPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentMatrixPtrOutput)
}

// The matrix of environments in which the test is to be executed.
type EnvironmentMatrixOutput struct{ *pulumi.OutputState }

func (EnvironmentMatrixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentMatrix)(nil)).Elem()
}

func (o EnvironmentMatrixOutput) ToEnvironmentMatrixOutput() EnvironmentMatrixOutput {
	return o
}

func (o EnvironmentMatrixOutput) ToEnvironmentMatrixOutputWithContext(ctx context.Context) EnvironmentMatrixOutput {
	return o
}

func (o EnvironmentMatrixOutput) ToEnvironmentMatrixPtrOutput() EnvironmentMatrixPtrOutput {
	return o.ToEnvironmentMatrixPtrOutputWithContext(context.Background())
}

func (o EnvironmentMatrixOutput) ToEnvironmentMatrixPtrOutputWithContext(ctx context.Context) EnvironmentMatrixPtrOutput {
	return o.ApplyT(func(v EnvironmentMatrix) *EnvironmentMatrix {
		return &v
	}).(EnvironmentMatrixPtrOutput)
}

// A list of Android devices; the test will be run only on the specified devices.
func (o EnvironmentMatrixOutput) AndroidDeviceList() AndroidDeviceListPtrOutput {
	return o.ApplyT(func(v EnvironmentMatrix) *AndroidDeviceList { return v.AndroidDeviceList }).(AndroidDeviceListPtrOutput)
}

// A matrix of Android devices.
func (o EnvironmentMatrixOutput) AndroidMatrix() AndroidMatrixPtrOutput {
	return o.ApplyT(func(v EnvironmentMatrix) *AndroidMatrix { return v.AndroidMatrix }).(AndroidMatrixPtrOutput)
}

// A list of iOS devices.
func (o EnvironmentMatrixOutput) IosDeviceList() IosDeviceListPtrOutput {
	return o.ApplyT(func(v EnvironmentMatrix) *IosDeviceList { return v.IosDeviceList }).(IosDeviceListPtrOutput)
}

type EnvironmentMatrixPtrOutput struct{ *pulumi.OutputState }

func (EnvironmentMatrixPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentMatrix)(nil)).Elem()
}

func (o EnvironmentMatrixPtrOutput) ToEnvironmentMatrixPtrOutput() EnvironmentMatrixPtrOutput {
	return o
}

func (o EnvironmentMatrixPtrOutput) ToEnvironmentMatrixPtrOutputWithContext(ctx context.Context) EnvironmentMatrixPtrOutput {
	return o
}

func (o EnvironmentMatrixPtrOutput) Elem() EnvironmentMatrixOutput {
	return o.ApplyT(func(v *EnvironmentMatrix) EnvironmentMatrix { return *v }).(EnvironmentMatrixOutput)
}

// A list of Android devices; the test will be run only on the specified devices.
func (o EnvironmentMatrixPtrOutput) AndroidDeviceList() AndroidDeviceListPtrOutput {
	return o.ApplyT(func(v *EnvironmentMatrix) *AndroidDeviceList {
		if v == nil {
			return nil
		}
		return v.AndroidDeviceList
	}).(AndroidDeviceListPtrOutput)
}

// A matrix of Android devices.
func (o EnvironmentMatrixPtrOutput) AndroidMatrix() AndroidMatrixPtrOutput {
	return o.ApplyT(func(v *EnvironmentMatrix) *AndroidMatrix {
		if v == nil {
			return nil
		}
		return v.AndroidMatrix
	}).(AndroidMatrixPtrOutput)
}

// A list of iOS devices.
func (o EnvironmentMatrixPtrOutput) IosDeviceList() IosDeviceListPtrOutput {
	return o.ApplyT(func(v *EnvironmentMatrix) *IosDeviceList {
		if v == nil {
			return nil
		}
		return v.IosDeviceList
	}).(IosDeviceListPtrOutput)
}

// A key-value pair passed as an environment variable to the test.
type EnvironmentVariable struct {
	// Key for the environment variable.
	Key *string `pulumi:"key"`
	// Value for the environment variable.
	Value *string `pulumi:"value"`
}

// EnvironmentVariableInput is an input type that accepts EnvironmentVariableArgs and EnvironmentVariableOutput values.
// You can construct a concrete instance of `EnvironmentVariableInput` via:
//
//          EnvironmentVariableArgs{...}
type EnvironmentVariableInput interface {
	pulumi.Input

	ToEnvironmentVariableOutput() EnvironmentVariableOutput
	ToEnvironmentVariableOutputWithContext(context.Context) EnvironmentVariableOutput
}

// A key-value pair passed as an environment variable to the test.
type EnvironmentVariableArgs struct {
	// Key for the environment variable.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Value for the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariable)(nil)).Elem()
}

func (i EnvironmentVariableArgs) ToEnvironmentVariableOutput() EnvironmentVariableOutput {
	return i.ToEnvironmentVariableOutputWithContext(context.Background())
}

func (i EnvironmentVariableArgs) ToEnvironmentVariableOutputWithContext(ctx context.Context) EnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableOutput)
}

// EnvironmentVariableArrayInput is an input type that accepts EnvironmentVariableArray and EnvironmentVariableArrayOutput values.
// You can construct a concrete instance of `EnvironmentVariableArrayInput` via:
//
//          EnvironmentVariableArray{ EnvironmentVariableArgs{...} }
type EnvironmentVariableArrayInput interface {
	pulumi.Input

	ToEnvironmentVariableArrayOutput() EnvironmentVariableArrayOutput
	ToEnvironmentVariableArrayOutputWithContext(context.Context) EnvironmentVariableArrayOutput
}

type EnvironmentVariableArray []EnvironmentVariableInput

func (EnvironmentVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariable)(nil)).Elem()
}

func (i EnvironmentVariableArray) ToEnvironmentVariableArrayOutput() EnvironmentVariableArrayOutput {
	return i.ToEnvironmentVariableArrayOutputWithContext(context.Background())
}

func (i EnvironmentVariableArray) ToEnvironmentVariableArrayOutputWithContext(ctx context.Context) EnvironmentVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableArrayOutput)
}

// A key-value pair passed as an environment variable to the test.
type EnvironmentVariableOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariable)(nil)).Elem()
}

func (o EnvironmentVariableOutput) ToEnvironmentVariableOutput() EnvironmentVariableOutput {
	return o
}

func (o EnvironmentVariableOutput) ToEnvironmentVariableOutputWithContext(ctx context.Context) EnvironmentVariableOutput {
	return o
}

// Key for the environment variable.
func (o EnvironmentVariableOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariable) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Value for the environment variable.
func (o EnvironmentVariableOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariable) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EnvironmentVariableArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariable)(nil)).Elem()
}

func (o EnvironmentVariableArrayOutput) ToEnvironmentVariableArrayOutput() EnvironmentVariableArrayOutput {
	return o
}

func (o EnvironmentVariableArrayOutput) ToEnvironmentVariableArrayOutputWithContext(ctx context.Context) EnvironmentVariableArrayOutput {
	return o
}

func (o EnvironmentVariableArrayOutput) Index(i pulumi.IntInput) EnvironmentVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentVariable {
		return vs[0].([]EnvironmentVariable)[vs[1].(int)]
	}).(EnvironmentVariableOutput)
}

// A reference to a file, used for user inputs.
type FileReference struct {
	// A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding)
	GcsPath *string `pulumi:"gcsPath"`
}

// FileReferenceInput is an input type that accepts FileReferenceArgs and FileReferenceOutput values.
// You can construct a concrete instance of `FileReferenceInput` via:
//
//          FileReferenceArgs{...}
type FileReferenceInput interface {
	pulumi.Input

	ToFileReferenceOutput() FileReferenceOutput
	ToFileReferenceOutputWithContext(context.Context) FileReferenceOutput
}

// A reference to a file, used for user inputs.
type FileReferenceArgs struct {
	// A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding)
	GcsPath pulumi.StringPtrInput `pulumi:"gcsPath"`
}

func (FileReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileReference)(nil)).Elem()
}

func (i FileReferenceArgs) ToFileReferenceOutput() FileReferenceOutput {
	return i.ToFileReferenceOutputWithContext(context.Background())
}

func (i FileReferenceArgs) ToFileReferenceOutputWithContext(ctx context.Context) FileReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileReferenceOutput)
}

func (i FileReferenceArgs) ToFileReferencePtrOutput() FileReferencePtrOutput {
	return i.ToFileReferencePtrOutputWithContext(context.Background())
}

func (i FileReferenceArgs) ToFileReferencePtrOutputWithContext(ctx context.Context) FileReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileReferenceOutput).ToFileReferencePtrOutputWithContext(ctx)
}

// FileReferencePtrInput is an input type that accepts FileReferenceArgs, FileReferencePtr and FileReferencePtrOutput values.
// You can construct a concrete instance of `FileReferencePtrInput` via:
//
//          FileReferenceArgs{...}
//
//  or:
//
//          nil
type FileReferencePtrInput interface {
	pulumi.Input

	ToFileReferencePtrOutput() FileReferencePtrOutput
	ToFileReferencePtrOutputWithContext(context.Context) FileReferencePtrOutput
}

type fileReferencePtrType FileReferenceArgs

func FileReferencePtr(v *FileReferenceArgs) FileReferencePtrInput {
	return (*fileReferencePtrType)(v)
}

func (*fileReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileReference)(nil)).Elem()
}

func (i *fileReferencePtrType) ToFileReferencePtrOutput() FileReferencePtrOutput {
	return i.ToFileReferencePtrOutputWithContext(context.Background())
}

func (i *fileReferencePtrType) ToFileReferencePtrOutputWithContext(ctx context.Context) FileReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileReferencePtrOutput)
}

// FileReferenceArrayInput is an input type that accepts FileReferenceArray and FileReferenceArrayOutput values.
// You can construct a concrete instance of `FileReferenceArrayInput` via:
//
//          FileReferenceArray{ FileReferenceArgs{...} }
type FileReferenceArrayInput interface {
	pulumi.Input

	ToFileReferenceArrayOutput() FileReferenceArrayOutput
	ToFileReferenceArrayOutputWithContext(context.Context) FileReferenceArrayOutput
}

type FileReferenceArray []FileReferenceInput

func (FileReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileReference)(nil)).Elem()
}

func (i FileReferenceArray) ToFileReferenceArrayOutput() FileReferenceArrayOutput {
	return i.ToFileReferenceArrayOutputWithContext(context.Background())
}

func (i FileReferenceArray) ToFileReferenceArrayOutputWithContext(ctx context.Context) FileReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileReferenceArrayOutput)
}

// A reference to a file, used for user inputs.
type FileReferenceOutput struct{ *pulumi.OutputState }

func (FileReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileReference)(nil)).Elem()
}

func (o FileReferenceOutput) ToFileReferenceOutput() FileReferenceOutput {
	return o
}

func (o FileReferenceOutput) ToFileReferenceOutputWithContext(ctx context.Context) FileReferenceOutput {
	return o
}

func (o FileReferenceOutput) ToFileReferencePtrOutput() FileReferencePtrOutput {
	return o.ToFileReferencePtrOutputWithContext(context.Background())
}

func (o FileReferenceOutput) ToFileReferencePtrOutputWithContext(ctx context.Context) FileReferencePtrOutput {
	return o.ApplyT(func(v FileReference) *FileReference {
		return &v
	}).(FileReferencePtrOutput)
}

// A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding)
func (o FileReferenceOutput) GcsPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileReference) *string { return v.GcsPath }).(pulumi.StringPtrOutput)
}

type FileReferencePtrOutput struct{ *pulumi.OutputState }

func (FileReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileReference)(nil)).Elem()
}

func (o FileReferencePtrOutput) ToFileReferencePtrOutput() FileReferencePtrOutput {
	return o
}

func (o FileReferencePtrOutput) ToFileReferencePtrOutputWithContext(ctx context.Context) FileReferencePtrOutput {
	return o
}

func (o FileReferencePtrOutput) Elem() FileReferenceOutput {
	return o.ApplyT(func(v *FileReference) FileReference { return *v }).(FileReferenceOutput)
}

// A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding)
func (o FileReferencePtrOutput) GcsPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileReference) *string {
		if v == nil {
			return nil
		}
		return v.GcsPath
	}).(pulumi.StringPtrOutput)
}

type FileReferenceArrayOutput struct{ *pulumi.OutputState }

func (FileReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileReference)(nil)).Elem()
}

func (o FileReferenceArrayOutput) ToFileReferenceArrayOutput() FileReferenceArrayOutput {
	return o
}

func (o FileReferenceArrayOutput) ToFileReferenceArrayOutputWithContext(ctx context.Context) FileReferenceArrayOutput {
	return o
}

func (o FileReferenceArrayOutput) Index(i pulumi.IntInput) FileReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileReference {
		return vs[0].([]FileReference)[vs[1].(int)]
	}).(FileReferenceOutput)
}

// Enables automatic Google account login. If set, the service automatically generates a Google test account and adds it to the device, before executing the test. Note that test accounts might be reused. Many applications show their full set of functionalities when an account is present on the device. Logging into the device with these generated accounts allows testing more functionalities.
type GoogleAuto struct {
}

// GoogleAutoInput is an input type that accepts GoogleAutoArgs and GoogleAutoOutput values.
// You can construct a concrete instance of `GoogleAutoInput` via:
//
//          GoogleAutoArgs{...}
type GoogleAutoInput interface {
	pulumi.Input

	ToGoogleAutoOutput() GoogleAutoOutput
	ToGoogleAutoOutputWithContext(context.Context) GoogleAutoOutput
}

// Enables automatic Google account login. If set, the service automatically generates a Google test account and adds it to the device, before executing the test. Note that test accounts might be reused. Many applications show their full set of functionalities when an account is present on the device. Logging into the device with these generated accounts allows testing more functionalities.
type GoogleAutoArgs struct {
}

func (GoogleAutoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAuto)(nil)).Elem()
}

func (i GoogleAutoArgs) ToGoogleAutoOutput() GoogleAutoOutput {
	return i.ToGoogleAutoOutputWithContext(context.Background())
}

func (i GoogleAutoArgs) ToGoogleAutoOutputWithContext(ctx context.Context) GoogleAutoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleAutoOutput)
}

func (i GoogleAutoArgs) ToGoogleAutoPtrOutput() GoogleAutoPtrOutput {
	return i.ToGoogleAutoPtrOutputWithContext(context.Background())
}

func (i GoogleAutoArgs) ToGoogleAutoPtrOutputWithContext(ctx context.Context) GoogleAutoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleAutoOutput).ToGoogleAutoPtrOutputWithContext(ctx)
}

// GoogleAutoPtrInput is an input type that accepts GoogleAutoArgs, GoogleAutoPtr and GoogleAutoPtrOutput values.
// You can construct a concrete instance of `GoogleAutoPtrInput` via:
//
//          GoogleAutoArgs{...}
//
//  or:
//
//          nil
type GoogleAutoPtrInput interface {
	pulumi.Input

	ToGoogleAutoPtrOutput() GoogleAutoPtrOutput
	ToGoogleAutoPtrOutputWithContext(context.Context) GoogleAutoPtrOutput
}

type googleAutoPtrType GoogleAutoArgs

func GoogleAutoPtr(v *GoogleAutoArgs) GoogleAutoPtrInput {
	return (*googleAutoPtrType)(v)
}

func (*googleAutoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleAuto)(nil)).Elem()
}

func (i *googleAutoPtrType) ToGoogleAutoPtrOutput() GoogleAutoPtrOutput {
	return i.ToGoogleAutoPtrOutputWithContext(context.Background())
}

func (i *googleAutoPtrType) ToGoogleAutoPtrOutputWithContext(ctx context.Context) GoogleAutoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleAutoPtrOutput)
}

// Enables automatic Google account login. If set, the service automatically generates a Google test account and adds it to the device, before executing the test. Note that test accounts might be reused. Many applications show their full set of functionalities when an account is present on the device. Logging into the device with these generated accounts allows testing more functionalities.
type GoogleAutoOutput struct{ *pulumi.OutputState }

func (GoogleAutoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAuto)(nil)).Elem()
}

func (o GoogleAutoOutput) ToGoogleAutoOutput() GoogleAutoOutput {
	return o
}

func (o GoogleAutoOutput) ToGoogleAutoOutputWithContext(ctx context.Context) GoogleAutoOutput {
	return o
}

func (o GoogleAutoOutput) ToGoogleAutoPtrOutput() GoogleAutoPtrOutput {
	return o.ToGoogleAutoPtrOutputWithContext(context.Background())
}

func (o GoogleAutoOutput) ToGoogleAutoPtrOutputWithContext(ctx context.Context) GoogleAutoPtrOutput {
	return o.ApplyT(func(v GoogleAuto) *GoogleAuto {
		return &v
	}).(GoogleAutoPtrOutput)
}

type GoogleAutoPtrOutput struct{ *pulumi.OutputState }

func (GoogleAutoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleAuto)(nil)).Elem()
}

func (o GoogleAutoPtrOutput) ToGoogleAutoPtrOutput() GoogleAutoPtrOutput {
	return o
}

func (o GoogleAutoPtrOutput) ToGoogleAutoPtrOutputWithContext(ctx context.Context) GoogleAutoPtrOutput {
	return o
}

func (o GoogleAutoPtrOutput) Elem() GoogleAutoOutput {
	return o.ApplyT(func(v *GoogleAuto) GoogleAuto { return *v }).(GoogleAutoOutput)
}

// A storage location within Google cloud storage (GCS).
type GoogleCloudStorage struct {
	// Required. The path to a directory in GCS that will eventually contain the results for this test. The requesting user must have write access on the bucket in the supplied path.
	GcsPath *string `pulumi:"gcsPath"`
}

// GoogleCloudStorageInput is an input type that accepts GoogleCloudStorageArgs and GoogleCloudStorageOutput values.
// You can construct a concrete instance of `GoogleCloudStorageInput` via:
//
//          GoogleCloudStorageArgs{...}
type GoogleCloudStorageInput interface {
	pulumi.Input

	ToGoogleCloudStorageOutput() GoogleCloudStorageOutput
	ToGoogleCloudStorageOutputWithContext(context.Context) GoogleCloudStorageOutput
}

// A storage location within Google cloud storage (GCS).
type GoogleCloudStorageArgs struct {
	// Required. The path to a directory in GCS that will eventually contain the results for this test. The requesting user must have write access on the bucket in the supplied path.
	GcsPath pulumi.StringPtrInput `pulumi:"gcsPath"`
}

func (GoogleCloudStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudStorage)(nil)).Elem()
}

func (i GoogleCloudStorageArgs) ToGoogleCloudStorageOutput() GoogleCloudStorageOutput {
	return i.ToGoogleCloudStorageOutputWithContext(context.Background())
}

func (i GoogleCloudStorageArgs) ToGoogleCloudStorageOutputWithContext(ctx context.Context) GoogleCloudStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudStorageOutput)
}

func (i GoogleCloudStorageArgs) ToGoogleCloudStoragePtrOutput() GoogleCloudStoragePtrOutput {
	return i.ToGoogleCloudStoragePtrOutputWithContext(context.Background())
}

func (i GoogleCloudStorageArgs) ToGoogleCloudStoragePtrOutputWithContext(ctx context.Context) GoogleCloudStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudStorageOutput).ToGoogleCloudStoragePtrOutputWithContext(ctx)
}

// GoogleCloudStoragePtrInput is an input type that accepts GoogleCloudStorageArgs, GoogleCloudStoragePtr and GoogleCloudStoragePtrOutput values.
// You can construct a concrete instance of `GoogleCloudStoragePtrInput` via:
//
//          GoogleCloudStorageArgs{...}
//
//  or:
//
//          nil
type GoogleCloudStoragePtrInput interface {
	pulumi.Input

	ToGoogleCloudStoragePtrOutput() GoogleCloudStoragePtrOutput
	ToGoogleCloudStoragePtrOutputWithContext(context.Context) GoogleCloudStoragePtrOutput
}

type googleCloudStoragePtrType GoogleCloudStorageArgs

func GoogleCloudStoragePtr(v *GoogleCloudStorageArgs) GoogleCloudStoragePtrInput {
	return (*googleCloudStoragePtrType)(v)
}

func (*googleCloudStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudStorage)(nil)).Elem()
}

func (i *googleCloudStoragePtrType) ToGoogleCloudStoragePtrOutput() GoogleCloudStoragePtrOutput {
	return i.ToGoogleCloudStoragePtrOutputWithContext(context.Background())
}

func (i *googleCloudStoragePtrType) ToGoogleCloudStoragePtrOutputWithContext(ctx context.Context) GoogleCloudStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudStoragePtrOutput)
}

// A storage location within Google cloud storage (GCS).
type GoogleCloudStorageOutput struct{ *pulumi.OutputState }

func (GoogleCloudStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudStorage)(nil)).Elem()
}

func (o GoogleCloudStorageOutput) ToGoogleCloudStorageOutput() GoogleCloudStorageOutput {
	return o
}

func (o GoogleCloudStorageOutput) ToGoogleCloudStorageOutputWithContext(ctx context.Context) GoogleCloudStorageOutput {
	return o
}

func (o GoogleCloudStorageOutput) ToGoogleCloudStoragePtrOutput() GoogleCloudStoragePtrOutput {
	return o.ToGoogleCloudStoragePtrOutputWithContext(context.Background())
}

func (o GoogleCloudStorageOutput) ToGoogleCloudStoragePtrOutputWithContext(ctx context.Context) GoogleCloudStoragePtrOutput {
	return o.ApplyT(func(v GoogleCloudStorage) *GoogleCloudStorage {
		return &v
	}).(GoogleCloudStoragePtrOutput)
}

// Required. The path to a directory in GCS that will eventually contain the results for this test. The requesting user must have write access on the bucket in the supplied path.
func (o GoogleCloudStorageOutput) GcsPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudStorage) *string { return v.GcsPath }).(pulumi.StringPtrOutput)
}

type GoogleCloudStoragePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudStorage)(nil)).Elem()
}

func (o GoogleCloudStoragePtrOutput) ToGoogleCloudStoragePtrOutput() GoogleCloudStoragePtrOutput {
	return o
}

func (o GoogleCloudStoragePtrOutput) ToGoogleCloudStoragePtrOutputWithContext(ctx context.Context) GoogleCloudStoragePtrOutput {
	return o
}

func (o GoogleCloudStoragePtrOutput) Elem() GoogleCloudStorageOutput {
	return o.ApplyT(func(v *GoogleCloudStorage) GoogleCloudStorage { return *v }).(GoogleCloudStorageOutput)
}

// Required. The path to a directory in GCS that will eventually contain the results for this test. The requesting user must have write access on the bucket in the supplied path.
func (o GoogleCloudStoragePtrOutput) GcsPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudStorage) *string {
		if v == nil {
			return nil
		}
		return v.GcsPath
	}).(pulumi.StringPtrOutput)
}

// A single iOS device.
type IosDevice struct {
	// Required. The id of the iOS device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
	IosModelId *string `pulumi:"iosModelId"`
	// Required. The id of the iOS major software version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
	IosVersionId *string `pulumi:"iosVersionId"`
	// Required. The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.
	Locale *string `pulumi:"locale"`
	// Required. How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.
	Orientation *string `pulumi:"orientation"`
}

// IosDeviceInput is an input type that accepts IosDeviceArgs and IosDeviceOutput values.
// You can construct a concrete instance of `IosDeviceInput` via:
//
//          IosDeviceArgs{...}
type IosDeviceInput interface {
	pulumi.Input

	ToIosDeviceOutput() IosDeviceOutput
	ToIosDeviceOutputWithContext(context.Context) IosDeviceOutput
}

// A single iOS device.
type IosDeviceArgs struct {
	// Required. The id of the iOS device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
	IosModelId pulumi.StringPtrInput `pulumi:"iosModelId"`
	// Required. The id of the iOS major software version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
	IosVersionId pulumi.StringPtrInput `pulumi:"iosVersionId"`
	// Required. The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.
	Locale pulumi.StringPtrInput `pulumi:"locale"`
	// Required. How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.
	Orientation pulumi.StringPtrInput `pulumi:"orientation"`
}

func (IosDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IosDevice)(nil)).Elem()
}

func (i IosDeviceArgs) ToIosDeviceOutput() IosDeviceOutput {
	return i.ToIosDeviceOutputWithContext(context.Background())
}

func (i IosDeviceArgs) ToIosDeviceOutputWithContext(ctx context.Context) IosDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosDeviceOutput)
}

func (i IosDeviceArgs) ToIosDevicePtrOutput() IosDevicePtrOutput {
	return i.ToIosDevicePtrOutputWithContext(context.Background())
}

func (i IosDeviceArgs) ToIosDevicePtrOutputWithContext(ctx context.Context) IosDevicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosDeviceOutput).ToIosDevicePtrOutputWithContext(ctx)
}

// IosDevicePtrInput is an input type that accepts IosDeviceArgs, IosDevicePtr and IosDevicePtrOutput values.
// You can construct a concrete instance of `IosDevicePtrInput` via:
//
//          IosDeviceArgs{...}
//
//  or:
//
//          nil
type IosDevicePtrInput interface {
	pulumi.Input

	ToIosDevicePtrOutput() IosDevicePtrOutput
	ToIosDevicePtrOutputWithContext(context.Context) IosDevicePtrOutput
}

type iosDevicePtrType IosDeviceArgs

func IosDevicePtr(v *IosDeviceArgs) IosDevicePtrInput {
	return (*iosDevicePtrType)(v)
}

func (*iosDevicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IosDevice)(nil)).Elem()
}

func (i *iosDevicePtrType) ToIosDevicePtrOutput() IosDevicePtrOutput {
	return i.ToIosDevicePtrOutputWithContext(context.Background())
}

func (i *iosDevicePtrType) ToIosDevicePtrOutputWithContext(ctx context.Context) IosDevicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosDevicePtrOutput)
}

// IosDeviceArrayInput is an input type that accepts IosDeviceArray and IosDeviceArrayOutput values.
// You can construct a concrete instance of `IosDeviceArrayInput` via:
//
//          IosDeviceArray{ IosDeviceArgs{...} }
type IosDeviceArrayInput interface {
	pulumi.Input

	ToIosDeviceArrayOutput() IosDeviceArrayOutput
	ToIosDeviceArrayOutputWithContext(context.Context) IosDeviceArrayOutput
}

type IosDeviceArray []IosDeviceInput

func (IosDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IosDevice)(nil)).Elem()
}

func (i IosDeviceArray) ToIosDeviceArrayOutput() IosDeviceArrayOutput {
	return i.ToIosDeviceArrayOutputWithContext(context.Background())
}

func (i IosDeviceArray) ToIosDeviceArrayOutputWithContext(ctx context.Context) IosDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosDeviceArrayOutput)
}

// A single iOS device.
type IosDeviceOutput struct{ *pulumi.OutputState }

func (IosDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IosDevice)(nil)).Elem()
}

func (o IosDeviceOutput) ToIosDeviceOutput() IosDeviceOutput {
	return o
}

func (o IosDeviceOutput) ToIosDeviceOutputWithContext(ctx context.Context) IosDeviceOutput {
	return o
}

func (o IosDeviceOutput) ToIosDevicePtrOutput() IosDevicePtrOutput {
	return o.ToIosDevicePtrOutputWithContext(context.Background())
}

func (o IosDeviceOutput) ToIosDevicePtrOutputWithContext(ctx context.Context) IosDevicePtrOutput {
	return o.ApplyT(func(v IosDevice) *IosDevice {
		return &v
	}).(IosDevicePtrOutput)
}

// Required. The id of the iOS device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
func (o IosDeviceOutput) IosModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IosDevice) *string { return v.IosModelId }).(pulumi.StringPtrOutput)
}

// Required. The id of the iOS major software version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
func (o IosDeviceOutput) IosVersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IosDevice) *string { return v.IosVersionId }).(pulumi.StringPtrOutput)
}

// Required. The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.
func (o IosDeviceOutput) Locale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IosDevice) *string { return v.Locale }).(pulumi.StringPtrOutput)
}

// Required. How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.
func (o IosDeviceOutput) Orientation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IosDevice) *string { return v.Orientation }).(pulumi.StringPtrOutput)
}

type IosDevicePtrOutput struct{ *pulumi.OutputState }

func (IosDevicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IosDevice)(nil)).Elem()
}

func (o IosDevicePtrOutput) ToIosDevicePtrOutput() IosDevicePtrOutput {
	return o
}

func (o IosDevicePtrOutput) ToIosDevicePtrOutputWithContext(ctx context.Context) IosDevicePtrOutput {
	return o
}

func (o IosDevicePtrOutput) Elem() IosDeviceOutput {
	return o.ApplyT(func(v *IosDevice) IosDevice { return *v }).(IosDeviceOutput)
}

// Required. The id of the iOS device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
func (o IosDevicePtrOutput) IosModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IosDevice) *string {
		if v == nil {
			return nil
		}
		return v.IosModelId
	}).(pulumi.StringPtrOutput)
}

// Required. The id of the iOS major software version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
func (o IosDevicePtrOutput) IosVersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IosDevice) *string {
		if v == nil {
			return nil
		}
		return v.IosVersionId
	}).(pulumi.StringPtrOutput)
}

// Required. The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.
func (o IosDevicePtrOutput) Locale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IosDevice) *string {
		if v == nil {
			return nil
		}
		return v.Locale
	}).(pulumi.StringPtrOutput)
}

// Required. How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.
func (o IosDevicePtrOutput) Orientation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IosDevice) *string {
		if v == nil {
			return nil
		}
		return v.Orientation
	}).(pulumi.StringPtrOutput)
}

type IosDeviceArrayOutput struct{ *pulumi.OutputState }

func (IosDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IosDevice)(nil)).Elem()
}

func (o IosDeviceArrayOutput) ToIosDeviceArrayOutput() IosDeviceArrayOutput {
	return o
}

func (o IosDeviceArrayOutput) ToIosDeviceArrayOutputWithContext(ctx context.Context) IosDeviceArrayOutput {
	return o
}

func (o IosDeviceArrayOutput) Index(i pulumi.IntInput) IosDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IosDevice {
		return vs[0].([]IosDevice)[vs[1].(int)]
	}).(IosDeviceOutput)
}

// A file or directory to install on the device before the test starts.
type IosDeviceFile struct {
	// The bundle id of the app where this file lives. iOS apps sandbox their own filesystem, so app files must specify which app installed on the device.
	BundleId *string `pulumi:"bundleId"`
	// The source file
	Content *FileReference `pulumi:"content"`
	// Location of the file on the device, inside the app's sandboxed filesystem
	DevicePath *string `pulumi:"devicePath"`
}

// IosDeviceFileInput is an input type that accepts IosDeviceFileArgs and IosDeviceFileOutput values.
// You can construct a concrete instance of `IosDeviceFileInput` via:
//
//          IosDeviceFileArgs{...}
type IosDeviceFileInput interface {
	pulumi.Input

	ToIosDeviceFileOutput() IosDeviceFileOutput
	ToIosDeviceFileOutputWithContext(context.Context) IosDeviceFileOutput
}

// A file or directory to install on the device before the test starts.
type IosDeviceFileArgs struct {
	// The bundle id of the app where this file lives. iOS apps sandbox their own filesystem, so app files must specify which app installed on the device.
	BundleId pulumi.StringPtrInput `pulumi:"bundleId"`
	// The source file
	Content FileReferencePtrInput `pulumi:"content"`
	// Location of the file on the device, inside the app's sandboxed filesystem
	DevicePath pulumi.StringPtrInput `pulumi:"devicePath"`
}

func (IosDeviceFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IosDeviceFile)(nil)).Elem()
}

func (i IosDeviceFileArgs) ToIosDeviceFileOutput() IosDeviceFileOutput {
	return i.ToIosDeviceFileOutputWithContext(context.Background())
}

func (i IosDeviceFileArgs) ToIosDeviceFileOutputWithContext(ctx context.Context) IosDeviceFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosDeviceFileOutput)
}

// IosDeviceFileArrayInput is an input type that accepts IosDeviceFileArray and IosDeviceFileArrayOutput values.
// You can construct a concrete instance of `IosDeviceFileArrayInput` via:
//
//          IosDeviceFileArray{ IosDeviceFileArgs{...} }
type IosDeviceFileArrayInput interface {
	pulumi.Input

	ToIosDeviceFileArrayOutput() IosDeviceFileArrayOutput
	ToIosDeviceFileArrayOutputWithContext(context.Context) IosDeviceFileArrayOutput
}

type IosDeviceFileArray []IosDeviceFileInput

func (IosDeviceFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IosDeviceFile)(nil)).Elem()
}

func (i IosDeviceFileArray) ToIosDeviceFileArrayOutput() IosDeviceFileArrayOutput {
	return i.ToIosDeviceFileArrayOutputWithContext(context.Background())
}

func (i IosDeviceFileArray) ToIosDeviceFileArrayOutputWithContext(ctx context.Context) IosDeviceFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosDeviceFileArrayOutput)
}

// A file or directory to install on the device before the test starts.
type IosDeviceFileOutput struct{ *pulumi.OutputState }

func (IosDeviceFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IosDeviceFile)(nil)).Elem()
}

func (o IosDeviceFileOutput) ToIosDeviceFileOutput() IosDeviceFileOutput {
	return o
}

func (o IosDeviceFileOutput) ToIosDeviceFileOutputWithContext(ctx context.Context) IosDeviceFileOutput {
	return o
}

// The bundle id of the app where this file lives. iOS apps sandbox their own filesystem, so app files must specify which app installed on the device.
func (o IosDeviceFileOutput) BundleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IosDeviceFile) *string { return v.BundleId }).(pulumi.StringPtrOutput)
}

// The source file
func (o IosDeviceFileOutput) Content() FileReferencePtrOutput {
	return o.ApplyT(func(v IosDeviceFile) *FileReference { return v.Content }).(FileReferencePtrOutput)
}

// Location of the file on the device, inside the app's sandboxed filesystem
func (o IosDeviceFileOutput) DevicePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IosDeviceFile) *string { return v.DevicePath }).(pulumi.StringPtrOutput)
}

type IosDeviceFileArrayOutput struct{ *pulumi.OutputState }

func (IosDeviceFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IosDeviceFile)(nil)).Elem()
}

func (o IosDeviceFileArrayOutput) ToIosDeviceFileArrayOutput() IosDeviceFileArrayOutput {
	return o
}

func (o IosDeviceFileArrayOutput) ToIosDeviceFileArrayOutputWithContext(ctx context.Context) IosDeviceFileArrayOutput {
	return o
}

func (o IosDeviceFileArrayOutput) Index(i pulumi.IntInput) IosDeviceFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IosDeviceFile {
		return vs[0].([]IosDeviceFile)[vs[1].(int)]
	}).(IosDeviceFileOutput)
}

// A list of iOS device configurations in which the test is to be executed.
type IosDeviceList struct {
	// Required. A list of iOS devices.
	IosDevices []IosDevice `pulumi:"iosDevices"`
}

// IosDeviceListInput is an input type that accepts IosDeviceListArgs and IosDeviceListOutput values.
// You can construct a concrete instance of `IosDeviceListInput` via:
//
//          IosDeviceListArgs{...}
type IosDeviceListInput interface {
	pulumi.Input

	ToIosDeviceListOutput() IosDeviceListOutput
	ToIosDeviceListOutputWithContext(context.Context) IosDeviceListOutput
}

// A list of iOS device configurations in which the test is to be executed.
type IosDeviceListArgs struct {
	// Required. A list of iOS devices.
	IosDevices IosDeviceArrayInput `pulumi:"iosDevices"`
}

func (IosDeviceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IosDeviceList)(nil)).Elem()
}

func (i IosDeviceListArgs) ToIosDeviceListOutput() IosDeviceListOutput {
	return i.ToIosDeviceListOutputWithContext(context.Background())
}

func (i IosDeviceListArgs) ToIosDeviceListOutputWithContext(ctx context.Context) IosDeviceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosDeviceListOutput)
}

func (i IosDeviceListArgs) ToIosDeviceListPtrOutput() IosDeviceListPtrOutput {
	return i.ToIosDeviceListPtrOutputWithContext(context.Background())
}

func (i IosDeviceListArgs) ToIosDeviceListPtrOutputWithContext(ctx context.Context) IosDeviceListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosDeviceListOutput).ToIosDeviceListPtrOutputWithContext(ctx)
}

// IosDeviceListPtrInput is an input type that accepts IosDeviceListArgs, IosDeviceListPtr and IosDeviceListPtrOutput values.
// You can construct a concrete instance of `IosDeviceListPtrInput` via:
//
//          IosDeviceListArgs{...}
//
//  or:
//
//          nil
type IosDeviceListPtrInput interface {
	pulumi.Input

	ToIosDeviceListPtrOutput() IosDeviceListPtrOutput
	ToIosDeviceListPtrOutputWithContext(context.Context) IosDeviceListPtrOutput
}

type iosDeviceListPtrType IosDeviceListArgs

func IosDeviceListPtr(v *IosDeviceListArgs) IosDeviceListPtrInput {
	return (*iosDeviceListPtrType)(v)
}

func (*iosDeviceListPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IosDeviceList)(nil)).Elem()
}

func (i *iosDeviceListPtrType) ToIosDeviceListPtrOutput() IosDeviceListPtrOutput {
	return i.ToIosDeviceListPtrOutputWithContext(context.Background())
}

func (i *iosDeviceListPtrType) ToIosDeviceListPtrOutputWithContext(ctx context.Context) IosDeviceListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosDeviceListPtrOutput)
}

// A list of iOS device configurations in which the test is to be executed.
type IosDeviceListOutput struct{ *pulumi.OutputState }

func (IosDeviceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IosDeviceList)(nil)).Elem()
}

func (o IosDeviceListOutput) ToIosDeviceListOutput() IosDeviceListOutput {
	return o
}

func (o IosDeviceListOutput) ToIosDeviceListOutputWithContext(ctx context.Context) IosDeviceListOutput {
	return o
}

func (o IosDeviceListOutput) ToIosDeviceListPtrOutput() IosDeviceListPtrOutput {
	return o.ToIosDeviceListPtrOutputWithContext(context.Background())
}

func (o IosDeviceListOutput) ToIosDeviceListPtrOutputWithContext(ctx context.Context) IosDeviceListPtrOutput {
	return o.ApplyT(func(v IosDeviceList) *IosDeviceList {
		return &v
	}).(IosDeviceListPtrOutput)
}

// Required. A list of iOS devices.
func (o IosDeviceListOutput) IosDevices() IosDeviceArrayOutput {
	return o.ApplyT(func(v IosDeviceList) []IosDevice { return v.IosDevices }).(IosDeviceArrayOutput)
}

type IosDeviceListPtrOutput struct{ *pulumi.OutputState }

func (IosDeviceListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IosDeviceList)(nil)).Elem()
}

func (o IosDeviceListPtrOutput) ToIosDeviceListPtrOutput() IosDeviceListPtrOutput {
	return o
}

func (o IosDeviceListPtrOutput) ToIosDeviceListPtrOutputWithContext(ctx context.Context) IosDeviceListPtrOutput {
	return o
}

func (o IosDeviceListPtrOutput) Elem() IosDeviceListOutput {
	return o.ApplyT(func(v *IosDeviceList) IosDeviceList { return *v }).(IosDeviceListOutput)
}

// Required. A list of iOS devices.
func (o IosDeviceListPtrOutput) IosDevices() IosDeviceArrayOutput {
	return o.ApplyT(func(v *IosDeviceList) []IosDevice {
		if v == nil {
			return nil
		}
		return v.IosDevices
	}).(IosDeviceArrayOutput)
}

// A test of an iOS application that implements one or more game loop scenarios. This test type accepts an archived application (.ipa file) and a list of integer scenarios that will be executed on the app sequentially.
type IosTestLoop struct {
	// Output only. The bundle id for the application under test.
	AppBundleId *string `pulumi:"appBundleId"`
	// Required. The .ipa of the application to test.
	AppIpa *FileReference `pulumi:"appIpa"`
	// The list of scenarios that should be run during the test. Defaults to the single scenario 0 if unspecified.
	Scenarios []int `pulumi:"scenarios"`
}

// IosTestLoopInput is an input type that accepts IosTestLoopArgs and IosTestLoopOutput values.
// You can construct a concrete instance of `IosTestLoopInput` via:
//
//          IosTestLoopArgs{...}
type IosTestLoopInput interface {
	pulumi.Input

	ToIosTestLoopOutput() IosTestLoopOutput
	ToIosTestLoopOutputWithContext(context.Context) IosTestLoopOutput
}

// A test of an iOS application that implements one or more game loop scenarios. This test type accepts an archived application (.ipa file) and a list of integer scenarios that will be executed on the app sequentially.
type IosTestLoopArgs struct {
	// Output only. The bundle id for the application under test.
	AppBundleId pulumi.StringPtrInput `pulumi:"appBundleId"`
	// Required. The .ipa of the application to test.
	AppIpa FileReferencePtrInput `pulumi:"appIpa"`
	// The list of scenarios that should be run during the test. Defaults to the single scenario 0 if unspecified.
	Scenarios pulumi.IntArrayInput `pulumi:"scenarios"`
}

func (IosTestLoopArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IosTestLoop)(nil)).Elem()
}

func (i IosTestLoopArgs) ToIosTestLoopOutput() IosTestLoopOutput {
	return i.ToIosTestLoopOutputWithContext(context.Background())
}

func (i IosTestLoopArgs) ToIosTestLoopOutputWithContext(ctx context.Context) IosTestLoopOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosTestLoopOutput)
}

func (i IosTestLoopArgs) ToIosTestLoopPtrOutput() IosTestLoopPtrOutput {
	return i.ToIosTestLoopPtrOutputWithContext(context.Background())
}

func (i IosTestLoopArgs) ToIosTestLoopPtrOutputWithContext(ctx context.Context) IosTestLoopPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosTestLoopOutput).ToIosTestLoopPtrOutputWithContext(ctx)
}

// IosTestLoopPtrInput is an input type that accepts IosTestLoopArgs, IosTestLoopPtr and IosTestLoopPtrOutput values.
// You can construct a concrete instance of `IosTestLoopPtrInput` via:
//
//          IosTestLoopArgs{...}
//
//  or:
//
//          nil
type IosTestLoopPtrInput interface {
	pulumi.Input

	ToIosTestLoopPtrOutput() IosTestLoopPtrOutput
	ToIosTestLoopPtrOutputWithContext(context.Context) IosTestLoopPtrOutput
}

type iosTestLoopPtrType IosTestLoopArgs

func IosTestLoopPtr(v *IosTestLoopArgs) IosTestLoopPtrInput {
	return (*iosTestLoopPtrType)(v)
}

func (*iosTestLoopPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IosTestLoop)(nil)).Elem()
}

func (i *iosTestLoopPtrType) ToIosTestLoopPtrOutput() IosTestLoopPtrOutput {
	return i.ToIosTestLoopPtrOutputWithContext(context.Background())
}

func (i *iosTestLoopPtrType) ToIosTestLoopPtrOutputWithContext(ctx context.Context) IosTestLoopPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosTestLoopPtrOutput)
}

// A test of an iOS application that implements one or more game loop scenarios. This test type accepts an archived application (.ipa file) and a list of integer scenarios that will be executed on the app sequentially.
type IosTestLoopOutput struct{ *pulumi.OutputState }

func (IosTestLoopOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IosTestLoop)(nil)).Elem()
}

func (o IosTestLoopOutput) ToIosTestLoopOutput() IosTestLoopOutput {
	return o
}

func (o IosTestLoopOutput) ToIosTestLoopOutputWithContext(ctx context.Context) IosTestLoopOutput {
	return o
}

func (o IosTestLoopOutput) ToIosTestLoopPtrOutput() IosTestLoopPtrOutput {
	return o.ToIosTestLoopPtrOutputWithContext(context.Background())
}

func (o IosTestLoopOutput) ToIosTestLoopPtrOutputWithContext(ctx context.Context) IosTestLoopPtrOutput {
	return o.ApplyT(func(v IosTestLoop) *IosTestLoop {
		return &v
	}).(IosTestLoopPtrOutput)
}

// Output only. The bundle id for the application under test.
func (o IosTestLoopOutput) AppBundleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IosTestLoop) *string { return v.AppBundleId }).(pulumi.StringPtrOutput)
}

// Required. The .ipa of the application to test.
func (o IosTestLoopOutput) AppIpa() FileReferencePtrOutput {
	return o.ApplyT(func(v IosTestLoop) *FileReference { return v.AppIpa }).(FileReferencePtrOutput)
}

// The list of scenarios that should be run during the test. Defaults to the single scenario 0 if unspecified.
func (o IosTestLoopOutput) Scenarios() pulumi.IntArrayOutput {
	return o.ApplyT(func(v IosTestLoop) []int { return v.Scenarios }).(pulumi.IntArrayOutput)
}

type IosTestLoopPtrOutput struct{ *pulumi.OutputState }

func (IosTestLoopPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IosTestLoop)(nil)).Elem()
}

func (o IosTestLoopPtrOutput) ToIosTestLoopPtrOutput() IosTestLoopPtrOutput {
	return o
}

func (o IosTestLoopPtrOutput) ToIosTestLoopPtrOutputWithContext(ctx context.Context) IosTestLoopPtrOutput {
	return o
}

func (o IosTestLoopPtrOutput) Elem() IosTestLoopOutput {
	return o.ApplyT(func(v *IosTestLoop) IosTestLoop { return *v }).(IosTestLoopOutput)
}

// Output only. The bundle id for the application under test.
func (o IosTestLoopPtrOutput) AppBundleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IosTestLoop) *string {
		if v == nil {
			return nil
		}
		return v.AppBundleId
	}).(pulumi.StringPtrOutput)
}

// Required. The .ipa of the application to test.
func (o IosTestLoopPtrOutput) AppIpa() FileReferencePtrOutput {
	return o.ApplyT(func(v *IosTestLoop) *FileReference {
		if v == nil {
			return nil
		}
		return v.AppIpa
	}).(FileReferencePtrOutput)
}

// The list of scenarios that should be run during the test. Defaults to the single scenario 0 if unspecified.
func (o IosTestLoopPtrOutput) Scenarios() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *IosTestLoop) []int {
		if v == nil {
			return nil
		}
		return v.Scenarios
	}).(pulumi.IntArrayOutput)
}

// A description of how to set up an iOS device prior to running the test.
type IosTestSetup struct {
	// iOS apps to install in addition to those being directly tested.
	AdditionalIpas []FileReference `pulumi:"additionalIpas"`
	// The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
	NetworkProfile *string `pulumi:"networkProfile"`
	// List of directories on the device to upload to Cloud Storage at the end of the test. Directories should either be in a shared directory (e.g. /private/var/mobile/Media) or within an accessible directory inside the app's filesystem (e.g. /Documents) by specifying the bundle id.
	PullDirectories []IosDeviceFile `pulumi:"pullDirectories"`
	// List of files to push to the device before starting the test.
	PushFiles []IosDeviceFile `pulumi:"pushFiles"`
}

// IosTestSetupInput is an input type that accepts IosTestSetupArgs and IosTestSetupOutput values.
// You can construct a concrete instance of `IosTestSetupInput` via:
//
//          IosTestSetupArgs{...}
type IosTestSetupInput interface {
	pulumi.Input

	ToIosTestSetupOutput() IosTestSetupOutput
	ToIosTestSetupOutputWithContext(context.Context) IosTestSetupOutput
}

// A description of how to set up an iOS device prior to running the test.
type IosTestSetupArgs struct {
	// iOS apps to install in addition to those being directly tested.
	AdditionalIpas FileReferenceArrayInput `pulumi:"additionalIpas"`
	// The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
	NetworkProfile pulumi.StringPtrInput `pulumi:"networkProfile"`
	// List of directories on the device to upload to Cloud Storage at the end of the test. Directories should either be in a shared directory (e.g. /private/var/mobile/Media) or within an accessible directory inside the app's filesystem (e.g. /Documents) by specifying the bundle id.
	PullDirectories IosDeviceFileArrayInput `pulumi:"pullDirectories"`
	// List of files to push to the device before starting the test.
	PushFiles IosDeviceFileArrayInput `pulumi:"pushFiles"`
}

func (IosTestSetupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IosTestSetup)(nil)).Elem()
}

func (i IosTestSetupArgs) ToIosTestSetupOutput() IosTestSetupOutput {
	return i.ToIosTestSetupOutputWithContext(context.Background())
}

func (i IosTestSetupArgs) ToIosTestSetupOutputWithContext(ctx context.Context) IosTestSetupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosTestSetupOutput)
}

func (i IosTestSetupArgs) ToIosTestSetupPtrOutput() IosTestSetupPtrOutput {
	return i.ToIosTestSetupPtrOutputWithContext(context.Background())
}

func (i IosTestSetupArgs) ToIosTestSetupPtrOutputWithContext(ctx context.Context) IosTestSetupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosTestSetupOutput).ToIosTestSetupPtrOutputWithContext(ctx)
}

// IosTestSetupPtrInput is an input type that accepts IosTestSetupArgs, IosTestSetupPtr and IosTestSetupPtrOutput values.
// You can construct a concrete instance of `IosTestSetupPtrInput` via:
//
//          IosTestSetupArgs{...}
//
//  or:
//
//          nil
type IosTestSetupPtrInput interface {
	pulumi.Input

	ToIosTestSetupPtrOutput() IosTestSetupPtrOutput
	ToIosTestSetupPtrOutputWithContext(context.Context) IosTestSetupPtrOutput
}

type iosTestSetupPtrType IosTestSetupArgs

func IosTestSetupPtr(v *IosTestSetupArgs) IosTestSetupPtrInput {
	return (*iosTestSetupPtrType)(v)
}

func (*iosTestSetupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IosTestSetup)(nil)).Elem()
}

func (i *iosTestSetupPtrType) ToIosTestSetupPtrOutput() IosTestSetupPtrOutput {
	return i.ToIosTestSetupPtrOutputWithContext(context.Background())
}

func (i *iosTestSetupPtrType) ToIosTestSetupPtrOutputWithContext(ctx context.Context) IosTestSetupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosTestSetupPtrOutput)
}

// A description of how to set up an iOS device prior to running the test.
type IosTestSetupOutput struct{ *pulumi.OutputState }

func (IosTestSetupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IosTestSetup)(nil)).Elem()
}

func (o IosTestSetupOutput) ToIosTestSetupOutput() IosTestSetupOutput {
	return o
}

func (o IosTestSetupOutput) ToIosTestSetupOutputWithContext(ctx context.Context) IosTestSetupOutput {
	return o
}

func (o IosTestSetupOutput) ToIosTestSetupPtrOutput() IosTestSetupPtrOutput {
	return o.ToIosTestSetupPtrOutputWithContext(context.Background())
}

func (o IosTestSetupOutput) ToIosTestSetupPtrOutputWithContext(ctx context.Context) IosTestSetupPtrOutput {
	return o.ApplyT(func(v IosTestSetup) *IosTestSetup {
		return &v
	}).(IosTestSetupPtrOutput)
}

// iOS apps to install in addition to those being directly tested.
func (o IosTestSetupOutput) AdditionalIpas() FileReferenceArrayOutput {
	return o.ApplyT(func(v IosTestSetup) []FileReference { return v.AdditionalIpas }).(FileReferenceArrayOutput)
}

// The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
func (o IosTestSetupOutput) NetworkProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IosTestSetup) *string { return v.NetworkProfile }).(pulumi.StringPtrOutput)
}

// List of directories on the device to upload to Cloud Storage at the end of the test. Directories should either be in a shared directory (e.g. /private/var/mobile/Media) or within an accessible directory inside the app's filesystem (e.g. /Documents) by specifying the bundle id.
func (o IosTestSetupOutput) PullDirectories() IosDeviceFileArrayOutput {
	return o.ApplyT(func(v IosTestSetup) []IosDeviceFile { return v.PullDirectories }).(IosDeviceFileArrayOutput)
}

// List of files to push to the device before starting the test.
func (o IosTestSetupOutput) PushFiles() IosDeviceFileArrayOutput {
	return o.ApplyT(func(v IosTestSetup) []IosDeviceFile { return v.PushFiles }).(IosDeviceFileArrayOutput)
}

type IosTestSetupPtrOutput struct{ *pulumi.OutputState }

func (IosTestSetupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IosTestSetup)(nil)).Elem()
}

func (o IosTestSetupPtrOutput) ToIosTestSetupPtrOutput() IosTestSetupPtrOutput {
	return o
}

func (o IosTestSetupPtrOutput) ToIosTestSetupPtrOutputWithContext(ctx context.Context) IosTestSetupPtrOutput {
	return o
}

func (o IosTestSetupPtrOutput) Elem() IosTestSetupOutput {
	return o.ApplyT(func(v *IosTestSetup) IosTestSetup { return *v }).(IosTestSetupOutput)
}

// iOS apps to install in addition to those being directly tested.
func (o IosTestSetupPtrOutput) AdditionalIpas() FileReferenceArrayOutput {
	return o.ApplyT(func(v *IosTestSetup) []FileReference {
		if v == nil {
			return nil
		}
		return v.AdditionalIpas
	}).(FileReferenceArrayOutput)
}

// The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
func (o IosTestSetupPtrOutput) NetworkProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IosTestSetup) *string {
		if v == nil {
			return nil
		}
		return v.NetworkProfile
	}).(pulumi.StringPtrOutput)
}

// List of directories on the device to upload to Cloud Storage at the end of the test. Directories should either be in a shared directory (e.g. /private/var/mobile/Media) or within an accessible directory inside the app's filesystem (e.g. /Documents) by specifying the bundle id.
func (o IosTestSetupPtrOutput) PullDirectories() IosDeviceFileArrayOutput {
	return o.ApplyT(func(v *IosTestSetup) []IosDeviceFile {
		if v == nil {
			return nil
		}
		return v.PullDirectories
	}).(IosDeviceFileArrayOutput)
}

// List of files to push to the device before starting the test.
func (o IosTestSetupPtrOutput) PushFiles() IosDeviceFileArrayOutput {
	return o.ApplyT(func(v *IosTestSetup) []IosDeviceFile {
		if v == nil {
			return nil
		}
		return v.PushFiles
	}).(IosDeviceFileArrayOutput)
}

// A test of an iOS application that uses the XCTest framework. Xcode supports the option to "build for testing", which generates an .xctestrun file that contains a test specification (arguments, test methods, etc). This test type accepts a zip file containing the .xctestrun file and the corresponding contents of the Build/Products directory that contains all the binaries needed to run the tests.
type IosXcTest struct {
	// Output only. The bundle id for the application under test.
	AppBundleId *string `pulumi:"appBundleId"`
	// The option to test special app entitlements. Setting this would re-sign the app having special entitlements with an explicit application-identifier. Currently supports testing aps-environment entitlement.
	TestSpecialEntitlements *bool `pulumi:"testSpecialEntitlements"`
	// Required. The .zip containing the .xctestrun file and the contents of the DerivedData/Build/Products directory. The .xctestrun file in this zip is ignored if the xctestrun field is specified.
	TestsZip *FileReference `pulumi:"testsZip"`
	// The Xcode version that should be used for the test. Use the TestEnvironmentDiscoveryService to get supported options. Defaults to the latest Xcode version Firebase Test Lab supports.
	XcodeVersion *string `pulumi:"xcodeVersion"`
	// An .xctestrun file that will override the .xctestrun file in the tests zip. Because the .xctestrun file contains environment variables along with test methods to run and/or ignore, this can be useful for sharding tests. Default is taken from the tests zip.
	Xctestrun *FileReference `pulumi:"xctestrun"`
}

// IosXcTestInput is an input type that accepts IosXcTestArgs and IosXcTestOutput values.
// You can construct a concrete instance of `IosXcTestInput` via:
//
//          IosXcTestArgs{...}
type IosXcTestInput interface {
	pulumi.Input

	ToIosXcTestOutput() IosXcTestOutput
	ToIosXcTestOutputWithContext(context.Context) IosXcTestOutput
}

// A test of an iOS application that uses the XCTest framework. Xcode supports the option to "build for testing", which generates an .xctestrun file that contains a test specification (arguments, test methods, etc). This test type accepts a zip file containing the .xctestrun file and the corresponding contents of the Build/Products directory that contains all the binaries needed to run the tests.
type IosXcTestArgs struct {
	// Output only. The bundle id for the application under test.
	AppBundleId pulumi.StringPtrInput `pulumi:"appBundleId"`
	// The option to test special app entitlements. Setting this would re-sign the app having special entitlements with an explicit application-identifier. Currently supports testing aps-environment entitlement.
	TestSpecialEntitlements pulumi.BoolPtrInput `pulumi:"testSpecialEntitlements"`
	// Required. The .zip containing the .xctestrun file and the contents of the DerivedData/Build/Products directory. The .xctestrun file in this zip is ignored if the xctestrun field is specified.
	TestsZip FileReferencePtrInput `pulumi:"testsZip"`
	// The Xcode version that should be used for the test. Use the TestEnvironmentDiscoveryService to get supported options. Defaults to the latest Xcode version Firebase Test Lab supports.
	XcodeVersion pulumi.StringPtrInput `pulumi:"xcodeVersion"`
	// An .xctestrun file that will override the .xctestrun file in the tests zip. Because the .xctestrun file contains environment variables along with test methods to run and/or ignore, this can be useful for sharding tests. Default is taken from the tests zip.
	Xctestrun FileReferencePtrInput `pulumi:"xctestrun"`
}

func (IosXcTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IosXcTest)(nil)).Elem()
}

func (i IosXcTestArgs) ToIosXcTestOutput() IosXcTestOutput {
	return i.ToIosXcTestOutputWithContext(context.Background())
}

func (i IosXcTestArgs) ToIosXcTestOutputWithContext(ctx context.Context) IosXcTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosXcTestOutput)
}

func (i IosXcTestArgs) ToIosXcTestPtrOutput() IosXcTestPtrOutput {
	return i.ToIosXcTestPtrOutputWithContext(context.Background())
}

func (i IosXcTestArgs) ToIosXcTestPtrOutputWithContext(ctx context.Context) IosXcTestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosXcTestOutput).ToIosXcTestPtrOutputWithContext(ctx)
}

// IosXcTestPtrInput is an input type that accepts IosXcTestArgs, IosXcTestPtr and IosXcTestPtrOutput values.
// You can construct a concrete instance of `IosXcTestPtrInput` via:
//
//          IosXcTestArgs{...}
//
//  or:
//
//          nil
type IosXcTestPtrInput interface {
	pulumi.Input

	ToIosXcTestPtrOutput() IosXcTestPtrOutput
	ToIosXcTestPtrOutputWithContext(context.Context) IosXcTestPtrOutput
}

type iosXcTestPtrType IosXcTestArgs

func IosXcTestPtr(v *IosXcTestArgs) IosXcTestPtrInput {
	return (*iosXcTestPtrType)(v)
}

func (*iosXcTestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IosXcTest)(nil)).Elem()
}

func (i *iosXcTestPtrType) ToIosXcTestPtrOutput() IosXcTestPtrOutput {
	return i.ToIosXcTestPtrOutputWithContext(context.Background())
}

func (i *iosXcTestPtrType) ToIosXcTestPtrOutputWithContext(ctx context.Context) IosXcTestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosXcTestPtrOutput)
}

// A test of an iOS application that uses the XCTest framework. Xcode supports the option to "build for testing", which generates an .xctestrun file that contains a test specification (arguments, test methods, etc). This test type accepts a zip file containing the .xctestrun file and the corresponding contents of the Build/Products directory that contains all the binaries needed to run the tests.
type IosXcTestOutput struct{ *pulumi.OutputState }

func (IosXcTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IosXcTest)(nil)).Elem()
}

func (o IosXcTestOutput) ToIosXcTestOutput() IosXcTestOutput {
	return o
}

func (o IosXcTestOutput) ToIosXcTestOutputWithContext(ctx context.Context) IosXcTestOutput {
	return o
}

func (o IosXcTestOutput) ToIosXcTestPtrOutput() IosXcTestPtrOutput {
	return o.ToIosXcTestPtrOutputWithContext(context.Background())
}

func (o IosXcTestOutput) ToIosXcTestPtrOutputWithContext(ctx context.Context) IosXcTestPtrOutput {
	return o.ApplyT(func(v IosXcTest) *IosXcTest {
		return &v
	}).(IosXcTestPtrOutput)
}

// Output only. The bundle id for the application under test.
func (o IosXcTestOutput) AppBundleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IosXcTest) *string { return v.AppBundleId }).(pulumi.StringPtrOutput)
}

// The option to test special app entitlements. Setting this would re-sign the app having special entitlements with an explicit application-identifier. Currently supports testing aps-environment entitlement.
func (o IosXcTestOutput) TestSpecialEntitlements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IosXcTest) *bool { return v.TestSpecialEntitlements }).(pulumi.BoolPtrOutput)
}

// Required. The .zip containing the .xctestrun file and the contents of the DerivedData/Build/Products directory. The .xctestrun file in this zip is ignored if the xctestrun field is specified.
func (o IosXcTestOutput) TestsZip() FileReferencePtrOutput {
	return o.ApplyT(func(v IosXcTest) *FileReference { return v.TestsZip }).(FileReferencePtrOutput)
}

// The Xcode version that should be used for the test. Use the TestEnvironmentDiscoveryService to get supported options. Defaults to the latest Xcode version Firebase Test Lab supports.
func (o IosXcTestOutput) XcodeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IosXcTest) *string { return v.XcodeVersion }).(pulumi.StringPtrOutput)
}

// An .xctestrun file that will override the .xctestrun file in the tests zip. Because the .xctestrun file contains environment variables along with test methods to run and/or ignore, this can be useful for sharding tests. Default is taken from the tests zip.
func (o IosXcTestOutput) Xctestrun() FileReferencePtrOutput {
	return o.ApplyT(func(v IosXcTest) *FileReference { return v.Xctestrun }).(FileReferencePtrOutput)
}

type IosXcTestPtrOutput struct{ *pulumi.OutputState }

func (IosXcTestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IosXcTest)(nil)).Elem()
}

func (o IosXcTestPtrOutput) ToIosXcTestPtrOutput() IosXcTestPtrOutput {
	return o
}

func (o IosXcTestPtrOutput) ToIosXcTestPtrOutputWithContext(ctx context.Context) IosXcTestPtrOutput {
	return o
}

func (o IosXcTestPtrOutput) Elem() IosXcTestOutput {
	return o.ApplyT(func(v *IosXcTest) IosXcTest { return *v }).(IosXcTestOutput)
}

// Output only. The bundle id for the application under test.
func (o IosXcTestPtrOutput) AppBundleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IosXcTest) *string {
		if v == nil {
			return nil
		}
		return v.AppBundleId
	}).(pulumi.StringPtrOutput)
}

// The option to test special app entitlements. Setting this would re-sign the app having special entitlements with an explicit application-identifier. Currently supports testing aps-environment entitlement.
func (o IosXcTestPtrOutput) TestSpecialEntitlements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IosXcTest) *bool {
		if v == nil {
			return nil
		}
		return v.TestSpecialEntitlements
	}).(pulumi.BoolPtrOutput)
}

// Required. The .zip containing the .xctestrun file and the contents of the DerivedData/Build/Products directory. The .xctestrun file in this zip is ignored if the xctestrun field is specified.
func (o IosXcTestPtrOutput) TestsZip() FileReferencePtrOutput {
	return o.ApplyT(func(v *IosXcTest) *FileReference {
		if v == nil {
			return nil
		}
		return v.TestsZip
	}).(FileReferencePtrOutput)
}

// The Xcode version that should be used for the test. Use the TestEnvironmentDiscoveryService to get supported options. Defaults to the latest Xcode version Firebase Test Lab supports.
func (o IosXcTestPtrOutput) XcodeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IosXcTest) *string {
		if v == nil {
			return nil
		}
		return v.XcodeVersion
	}).(pulumi.StringPtrOutput)
}

// An .xctestrun file that will override the .xctestrun file in the tests zip. Because the .xctestrun file contains environment variables along with test methods to run and/or ignore, this can be useful for sharding tests. Default is taken from the tests zip.
func (o IosXcTestPtrOutput) Xctestrun() FileReferencePtrOutput {
	return o.ApplyT(func(v *IosXcTest) *FileReference {
		if v == nil {
			return nil
		}
		return v.Xctestrun
	}).(FileReferencePtrOutput)
}

// Specifies an intent that starts the main launcher activity.
type LauncherActivityIntent struct {
}

// LauncherActivityIntentInput is an input type that accepts LauncherActivityIntentArgs and LauncherActivityIntentOutput values.
// You can construct a concrete instance of `LauncherActivityIntentInput` via:
//
//          LauncherActivityIntentArgs{...}
type LauncherActivityIntentInput interface {
	pulumi.Input

	ToLauncherActivityIntentOutput() LauncherActivityIntentOutput
	ToLauncherActivityIntentOutputWithContext(context.Context) LauncherActivityIntentOutput
}

// Specifies an intent that starts the main launcher activity.
type LauncherActivityIntentArgs struct {
}

func (LauncherActivityIntentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LauncherActivityIntent)(nil)).Elem()
}

func (i LauncherActivityIntentArgs) ToLauncherActivityIntentOutput() LauncherActivityIntentOutput {
	return i.ToLauncherActivityIntentOutputWithContext(context.Background())
}

func (i LauncherActivityIntentArgs) ToLauncherActivityIntentOutputWithContext(ctx context.Context) LauncherActivityIntentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LauncherActivityIntentOutput)
}

func (i LauncherActivityIntentArgs) ToLauncherActivityIntentPtrOutput() LauncherActivityIntentPtrOutput {
	return i.ToLauncherActivityIntentPtrOutputWithContext(context.Background())
}

func (i LauncherActivityIntentArgs) ToLauncherActivityIntentPtrOutputWithContext(ctx context.Context) LauncherActivityIntentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LauncherActivityIntentOutput).ToLauncherActivityIntentPtrOutputWithContext(ctx)
}

// LauncherActivityIntentPtrInput is an input type that accepts LauncherActivityIntentArgs, LauncherActivityIntentPtr and LauncherActivityIntentPtrOutput values.
// You can construct a concrete instance of `LauncherActivityIntentPtrInput` via:
//
//          LauncherActivityIntentArgs{...}
//
//  or:
//
//          nil
type LauncherActivityIntentPtrInput interface {
	pulumi.Input

	ToLauncherActivityIntentPtrOutput() LauncherActivityIntentPtrOutput
	ToLauncherActivityIntentPtrOutputWithContext(context.Context) LauncherActivityIntentPtrOutput
}

type launcherActivityIntentPtrType LauncherActivityIntentArgs

func LauncherActivityIntentPtr(v *LauncherActivityIntentArgs) LauncherActivityIntentPtrInput {
	return (*launcherActivityIntentPtrType)(v)
}

func (*launcherActivityIntentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LauncherActivityIntent)(nil)).Elem()
}

func (i *launcherActivityIntentPtrType) ToLauncherActivityIntentPtrOutput() LauncherActivityIntentPtrOutput {
	return i.ToLauncherActivityIntentPtrOutputWithContext(context.Background())
}

func (i *launcherActivityIntentPtrType) ToLauncherActivityIntentPtrOutputWithContext(ctx context.Context) LauncherActivityIntentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LauncherActivityIntentPtrOutput)
}

// Specifies an intent that starts the main launcher activity.
type LauncherActivityIntentOutput struct{ *pulumi.OutputState }

func (LauncherActivityIntentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LauncherActivityIntent)(nil)).Elem()
}

func (o LauncherActivityIntentOutput) ToLauncherActivityIntentOutput() LauncherActivityIntentOutput {
	return o
}

func (o LauncherActivityIntentOutput) ToLauncherActivityIntentOutputWithContext(ctx context.Context) LauncherActivityIntentOutput {
	return o
}

func (o LauncherActivityIntentOutput) ToLauncherActivityIntentPtrOutput() LauncherActivityIntentPtrOutput {
	return o.ToLauncherActivityIntentPtrOutputWithContext(context.Background())
}

func (o LauncherActivityIntentOutput) ToLauncherActivityIntentPtrOutputWithContext(ctx context.Context) LauncherActivityIntentPtrOutput {
	return o.ApplyT(func(v LauncherActivityIntent) *LauncherActivityIntent {
		return &v
	}).(LauncherActivityIntentPtrOutput)
}

type LauncherActivityIntentPtrOutput struct{ *pulumi.OutputState }

func (LauncherActivityIntentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LauncherActivityIntent)(nil)).Elem()
}

func (o LauncherActivityIntentPtrOutput) ToLauncherActivityIntentPtrOutput() LauncherActivityIntentPtrOutput {
	return o
}

func (o LauncherActivityIntentPtrOutput) ToLauncherActivityIntentPtrOutputWithContext(ctx context.Context) LauncherActivityIntentPtrOutput {
	return o
}

func (o LauncherActivityIntentPtrOutput) Elem() LauncherActivityIntentOutput {
	return o.ApplyT(func(v *LauncherActivityIntent) LauncherActivityIntent { return *v }).(LauncherActivityIntentOutput)
}

// Shards test cases into the specified groups of packages, classes, and/or methods. With manual sharding enabled, specifying test targets via environment_variables or in InstrumentationTest is invalid.
type ManualSharding struct {
	// Required. Group of packages, classes, and/or test methods to be run for each shard. When any physical devices are selected, the number of test_targets_for_shard must be >= 1 and <= 50. When no physical devices are selected, the number must be >= 1 and <= 500.
	TestTargetsForShard []TestTargetsForShard `pulumi:"testTargetsForShard"`
}

// ManualShardingInput is an input type that accepts ManualShardingArgs and ManualShardingOutput values.
// You can construct a concrete instance of `ManualShardingInput` via:
//
//          ManualShardingArgs{...}
type ManualShardingInput interface {
	pulumi.Input

	ToManualShardingOutput() ManualShardingOutput
	ToManualShardingOutputWithContext(context.Context) ManualShardingOutput
}

// Shards test cases into the specified groups of packages, classes, and/or methods. With manual sharding enabled, specifying test targets via environment_variables or in InstrumentationTest is invalid.
type ManualShardingArgs struct {
	// Required. Group of packages, classes, and/or test methods to be run for each shard. When any physical devices are selected, the number of test_targets_for_shard must be >= 1 and <= 50. When no physical devices are selected, the number must be >= 1 and <= 500.
	TestTargetsForShard TestTargetsForShardArrayInput `pulumi:"testTargetsForShard"`
}

func (ManualShardingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManualSharding)(nil)).Elem()
}

func (i ManualShardingArgs) ToManualShardingOutput() ManualShardingOutput {
	return i.ToManualShardingOutputWithContext(context.Background())
}

func (i ManualShardingArgs) ToManualShardingOutputWithContext(ctx context.Context) ManualShardingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualShardingOutput)
}

func (i ManualShardingArgs) ToManualShardingPtrOutput() ManualShardingPtrOutput {
	return i.ToManualShardingPtrOutputWithContext(context.Background())
}

func (i ManualShardingArgs) ToManualShardingPtrOutputWithContext(ctx context.Context) ManualShardingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualShardingOutput).ToManualShardingPtrOutputWithContext(ctx)
}

// ManualShardingPtrInput is an input type that accepts ManualShardingArgs, ManualShardingPtr and ManualShardingPtrOutput values.
// You can construct a concrete instance of `ManualShardingPtrInput` via:
//
//          ManualShardingArgs{...}
//
//  or:
//
//          nil
type ManualShardingPtrInput interface {
	pulumi.Input

	ToManualShardingPtrOutput() ManualShardingPtrOutput
	ToManualShardingPtrOutputWithContext(context.Context) ManualShardingPtrOutput
}

type manualShardingPtrType ManualShardingArgs

func ManualShardingPtr(v *ManualShardingArgs) ManualShardingPtrInput {
	return (*manualShardingPtrType)(v)
}

func (*manualShardingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManualSharding)(nil)).Elem()
}

func (i *manualShardingPtrType) ToManualShardingPtrOutput() ManualShardingPtrOutput {
	return i.ToManualShardingPtrOutputWithContext(context.Background())
}

func (i *manualShardingPtrType) ToManualShardingPtrOutputWithContext(ctx context.Context) ManualShardingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualShardingPtrOutput)
}

// Shards test cases into the specified groups of packages, classes, and/or methods. With manual sharding enabled, specifying test targets via environment_variables or in InstrumentationTest is invalid.
type ManualShardingOutput struct{ *pulumi.OutputState }

func (ManualShardingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManualSharding)(nil)).Elem()
}

func (o ManualShardingOutput) ToManualShardingOutput() ManualShardingOutput {
	return o
}

func (o ManualShardingOutput) ToManualShardingOutputWithContext(ctx context.Context) ManualShardingOutput {
	return o
}

func (o ManualShardingOutput) ToManualShardingPtrOutput() ManualShardingPtrOutput {
	return o.ToManualShardingPtrOutputWithContext(context.Background())
}

func (o ManualShardingOutput) ToManualShardingPtrOutputWithContext(ctx context.Context) ManualShardingPtrOutput {
	return o.ApplyT(func(v ManualSharding) *ManualSharding {
		return &v
	}).(ManualShardingPtrOutput)
}

// Required. Group of packages, classes, and/or test methods to be run for each shard. When any physical devices are selected, the number of test_targets_for_shard must be >= 1 and <= 50. When no physical devices are selected, the number must be >= 1 and <= 500.
func (o ManualShardingOutput) TestTargetsForShard() TestTargetsForShardArrayOutput {
	return o.ApplyT(func(v ManualSharding) []TestTargetsForShard { return v.TestTargetsForShard }).(TestTargetsForShardArrayOutput)
}

type ManualShardingPtrOutput struct{ *pulumi.OutputState }

func (ManualShardingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManualSharding)(nil)).Elem()
}

func (o ManualShardingPtrOutput) ToManualShardingPtrOutput() ManualShardingPtrOutput {
	return o
}

func (o ManualShardingPtrOutput) ToManualShardingPtrOutputWithContext(ctx context.Context) ManualShardingPtrOutput {
	return o
}

func (o ManualShardingPtrOutput) Elem() ManualShardingOutput {
	return o.ApplyT(func(v *ManualSharding) ManualSharding { return *v }).(ManualShardingOutput)
}

// Required. Group of packages, classes, and/or test methods to be run for each shard. When any physical devices are selected, the number of test_targets_for_shard must be >= 1 and <= 50. When no physical devices are selected, the number must be >= 1 and <= 500.
func (o ManualShardingPtrOutput) TestTargetsForShard() TestTargetsForShardArrayOutput {
	return o.ApplyT(func(v *ManualSharding) []TestTargetsForShard {
		if v == nil {
			return nil
		}
		return v.TestTargetsForShard
	}).(TestTargetsForShardArrayOutput)
}

// An opaque binary blob file to install on the device before the test starts.
type ObbFile struct {
	// Required. Opaque Binary Blob (OBB) file(s) to install on the device.
	Obb *FileReference `pulumi:"obb"`
	// Required. OBB file name which must conform to the format as specified by Android e.g. [main|patch].0300110.com.example.android.obb which will be installed into \/Android/obb/\/ on the device.
	ObbFileName *string `pulumi:"obbFileName"`
}

// ObbFileInput is an input type that accepts ObbFileArgs and ObbFileOutput values.
// You can construct a concrete instance of `ObbFileInput` via:
//
//          ObbFileArgs{...}
type ObbFileInput interface {
	pulumi.Input

	ToObbFileOutput() ObbFileOutput
	ToObbFileOutputWithContext(context.Context) ObbFileOutput
}

// An opaque binary blob file to install on the device before the test starts.
type ObbFileArgs struct {
	// Required. Opaque Binary Blob (OBB) file(s) to install on the device.
	Obb FileReferencePtrInput `pulumi:"obb"`
	// Required. OBB file name which must conform to the format as specified by Android e.g. [main|patch].0300110.com.example.android.obb which will be installed into \/Android/obb/\/ on the device.
	ObbFileName pulumi.StringPtrInput `pulumi:"obbFileName"`
}

func (ObbFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObbFile)(nil)).Elem()
}

func (i ObbFileArgs) ToObbFileOutput() ObbFileOutput {
	return i.ToObbFileOutputWithContext(context.Background())
}

func (i ObbFileArgs) ToObbFileOutputWithContext(ctx context.Context) ObbFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObbFileOutput)
}

func (i ObbFileArgs) ToObbFilePtrOutput() ObbFilePtrOutput {
	return i.ToObbFilePtrOutputWithContext(context.Background())
}

func (i ObbFileArgs) ToObbFilePtrOutputWithContext(ctx context.Context) ObbFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObbFileOutput).ToObbFilePtrOutputWithContext(ctx)
}

// ObbFilePtrInput is an input type that accepts ObbFileArgs, ObbFilePtr and ObbFilePtrOutput values.
// You can construct a concrete instance of `ObbFilePtrInput` via:
//
//          ObbFileArgs{...}
//
//  or:
//
//          nil
type ObbFilePtrInput interface {
	pulumi.Input

	ToObbFilePtrOutput() ObbFilePtrOutput
	ToObbFilePtrOutputWithContext(context.Context) ObbFilePtrOutput
}

type obbFilePtrType ObbFileArgs

func ObbFilePtr(v *ObbFileArgs) ObbFilePtrInput {
	return (*obbFilePtrType)(v)
}

func (*obbFilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObbFile)(nil)).Elem()
}

func (i *obbFilePtrType) ToObbFilePtrOutput() ObbFilePtrOutput {
	return i.ToObbFilePtrOutputWithContext(context.Background())
}

func (i *obbFilePtrType) ToObbFilePtrOutputWithContext(ctx context.Context) ObbFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObbFilePtrOutput)
}

// An opaque binary blob file to install on the device before the test starts.
type ObbFileOutput struct{ *pulumi.OutputState }

func (ObbFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObbFile)(nil)).Elem()
}

func (o ObbFileOutput) ToObbFileOutput() ObbFileOutput {
	return o
}

func (o ObbFileOutput) ToObbFileOutputWithContext(ctx context.Context) ObbFileOutput {
	return o
}

func (o ObbFileOutput) ToObbFilePtrOutput() ObbFilePtrOutput {
	return o.ToObbFilePtrOutputWithContext(context.Background())
}

func (o ObbFileOutput) ToObbFilePtrOutputWithContext(ctx context.Context) ObbFilePtrOutput {
	return o.ApplyT(func(v ObbFile) *ObbFile {
		return &v
	}).(ObbFilePtrOutput)
}

// Required. Opaque Binary Blob (OBB) file(s) to install on the device.
func (o ObbFileOutput) Obb() FileReferencePtrOutput {
	return o.ApplyT(func(v ObbFile) *FileReference { return v.Obb }).(FileReferencePtrOutput)
}

// Required. OBB file name which must conform to the format as specified by Android e.g. [main|patch].0300110.com.example.android.obb which will be installed into \/Android/obb/\/ on the device.
func (o ObbFileOutput) ObbFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObbFile) *string { return v.ObbFileName }).(pulumi.StringPtrOutput)
}

type ObbFilePtrOutput struct{ *pulumi.OutputState }

func (ObbFilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObbFile)(nil)).Elem()
}

func (o ObbFilePtrOutput) ToObbFilePtrOutput() ObbFilePtrOutput {
	return o
}

func (o ObbFilePtrOutput) ToObbFilePtrOutputWithContext(ctx context.Context) ObbFilePtrOutput {
	return o
}

func (o ObbFilePtrOutput) Elem() ObbFileOutput {
	return o.ApplyT(func(v *ObbFile) ObbFile { return *v }).(ObbFileOutput)
}

// Required. Opaque Binary Blob (OBB) file(s) to install on the device.
func (o ObbFilePtrOutput) Obb() FileReferencePtrOutput {
	return o.ApplyT(func(v *ObbFile) *FileReference {
		if v == nil {
			return nil
		}
		return v.Obb
	}).(FileReferencePtrOutput)
}

// Required. OBB file name which must conform to the format as specified by Android e.g. [main|patch].0300110.com.example.android.obb which will be installed into \/Android/obb/\/ on the device.
func (o ObbFilePtrOutput) ObbFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObbFile) *string {
		if v == nil {
			return nil
		}
		return v.ObbFileName
	}).(pulumi.StringPtrOutput)
}

// A file or directory to install on the device before the test starts.
type RegularFile struct {
	// Required. The source file.
	Content *FileReference `pulumi:"content"`
	// Required. Where to put the content on the device. Must be an absolute, allowlisted path. If the file exists, it will be replaced. The following device-side directories and any of their subdirectories are allowlisted: ${EXTERNAL_STORAGE}, /sdcard, or /storage ${ANDROID_DATA}/local/tmp, or /data/local/tmp Specifying a path outside of these directory trees is invalid. The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device and copy the file there. It is strongly advised to use the Environment API in app and test code to access files on the device in a portable way.
	DevicePath *string `pulumi:"devicePath"`
}

// RegularFileInput is an input type that accepts RegularFileArgs and RegularFileOutput values.
// You can construct a concrete instance of `RegularFileInput` via:
//
//          RegularFileArgs{...}
type RegularFileInput interface {
	pulumi.Input

	ToRegularFileOutput() RegularFileOutput
	ToRegularFileOutputWithContext(context.Context) RegularFileOutput
}

// A file or directory to install on the device before the test starts.
type RegularFileArgs struct {
	// Required. The source file.
	Content FileReferencePtrInput `pulumi:"content"`
	// Required. Where to put the content on the device. Must be an absolute, allowlisted path. If the file exists, it will be replaced. The following device-side directories and any of their subdirectories are allowlisted: ${EXTERNAL_STORAGE}, /sdcard, or /storage ${ANDROID_DATA}/local/tmp, or /data/local/tmp Specifying a path outside of these directory trees is invalid. The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device and copy the file there. It is strongly advised to use the Environment API in app and test code to access files on the device in a portable way.
	DevicePath pulumi.StringPtrInput `pulumi:"devicePath"`
}

func (RegularFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegularFile)(nil)).Elem()
}

func (i RegularFileArgs) ToRegularFileOutput() RegularFileOutput {
	return i.ToRegularFileOutputWithContext(context.Background())
}

func (i RegularFileArgs) ToRegularFileOutputWithContext(ctx context.Context) RegularFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegularFileOutput)
}

func (i RegularFileArgs) ToRegularFilePtrOutput() RegularFilePtrOutput {
	return i.ToRegularFilePtrOutputWithContext(context.Background())
}

func (i RegularFileArgs) ToRegularFilePtrOutputWithContext(ctx context.Context) RegularFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegularFileOutput).ToRegularFilePtrOutputWithContext(ctx)
}

// RegularFilePtrInput is an input type that accepts RegularFileArgs, RegularFilePtr and RegularFilePtrOutput values.
// You can construct a concrete instance of `RegularFilePtrInput` via:
//
//          RegularFileArgs{...}
//
//  or:
//
//          nil
type RegularFilePtrInput interface {
	pulumi.Input

	ToRegularFilePtrOutput() RegularFilePtrOutput
	ToRegularFilePtrOutputWithContext(context.Context) RegularFilePtrOutput
}

type regularFilePtrType RegularFileArgs

func RegularFilePtr(v *RegularFileArgs) RegularFilePtrInput {
	return (*regularFilePtrType)(v)
}

func (*regularFilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegularFile)(nil)).Elem()
}

func (i *regularFilePtrType) ToRegularFilePtrOutput() RegularFilePtrOutput {
	return i.ToRegularFilePtrOutputWithContext(context.Background())
}

func (i *regularFilePtrType) ToRegularFilePtrOutputWithContext(ctx context.Context) RegularFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegularFilePtrOutput)
}

// A file or directory to install on the device before the test starts.
type RegularFileOutput struct{ *pulumi.OutputState }

func (RegularFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegularFile)(nil)).Elem()
}

func (o RegularFileOutput) ToRegularFileOutput() RegularFileOutput {
	return o
}

func (o RegularFileOutput) ToRegularFileOutputWithContext(ctx context.Context) RegularFileOutput {
	return o
}

func (o RegularFileOutput) ToRegularFilePtrOutput() RegularFilePtrOutput {
	return o.ToRegularFilePtrOutputWithContext(context.Background())
}

func (o RegularFileOutput) ToRegularFilePtrOutputWithContext(ctx context.Context) RegularFilePtrOutput {
	return o.ApplyT(func(v RegularFile) *RegularFile {
		return &v
	}).(RegularFilePtrOutput)
}

// Required. The source file.
func (o RegularFileOutput) Content() FileReferencePtrOutput {
	return o.ApplyT(func(v RegularFile) *FileReference { return v.Content }).(FileReferencePtrOutput)
}

// Required. Where to put the content on the device. Must be an absolute, allowlisted path. If the file exists, it will be replaced. The following device-side directories and any of their subdirectories are allowlisted: ${EXTERNAL_STORAGE}, /sdcard, or /storage ${ANDROID_DATA}/local/tmp, or /data/local/tmp Specifying a path outside of these directory trees is invalid. The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device and copy the file there. It is strongly advised to use the Environment API in app and test code to access files on the device in a portable way.
func (o RegularFileOutput) DevicePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegularFile) *string { return v.DevicePath }).(pulumi.StringPtrOutput)
}

type RegularFilePtrOutput struct{ *pulumi.OutputState }

func (RegularFilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegularFile)(nil)).Elem()
}

func (o RegularFilePtrOutput) ToRegularFilePtrOutput() RegularFilePtrOutput {
	return o
}

func (o RegularFilePtrOutput) ToRegularFilePtrOutputWithContext(ctx context.Context) RegularFilePtrOutput {
	return o
}

func (o RegularFilePtrOutput) Elem() RegularFileOutput {
	return o.ApplyT(func(v *RegularFile) RegularFile { return *v }).(RegularFileOutput)
}

// Required. The source file.
func (o RegularFilePtrOutput) Content() FileReferencePtrOutput {
	return o.ApplyT(func(v *RegularFile) *FileReference {
		if v == nil {
			return nil
		}
		return v.Content
	}).(FileReferencePtrOutput)
}

// Required. Where to put the content on the device. Must be an absolute, allowlisted path. If the file exists, it will be replaced. The following device-side directories and any of their subdirectories are allowlisted: ${EXTERNAL_STORAGE}, /sdcard, or /storage ${ANDROID_DATA}/local/tmp, or /data/local/tmp Specifying a path outside of these directory trees is invalid. The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device and copy the file there. It is strongly advised to use the Environment API in app and test code to access files on the device in a portable way.
func (o RegularFilePtrOutput) DevicePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegularFile) *string {
		if v == nil {
			return nil
		}
		return v.DevicePath
	}).(pulumi.StringPtrOutput)
}

// Locations where the results of running the test are stored.
type ResultStorage struct {
	// Required.
	GoogleCloudStorage *GoogleCloudStorage `pulumi:"googleCloudStorage"`
	// Output only. URL to the results in the Firebase Web Console.
	ResultsUrl *string `pulumi:"resultsUrl"`
	// Output only. The tool results execution that results are written to.
	ToolResultsExecution *ToolResultsExecution `pulumi:"toolResultsExecution"`
	// The tool results history that contains the tool results execution that results are written to. If not provided, the service will choose an appropriate value.
	ToolResultsHistory *ToolResultsHistory `pulumi:"toolResultsHistory"`
}

// ResultStorageInput is an input type that accepts ResultStorageArgs and ResultStorageOutput values.
// You can construct a concrete instance of `ResultStorageInput` via:
//
//          ResultStorageArgs{...}
type ResultStorageInput interface {
	pulumi.Input

	ToResultStorageOutput() ResultStorageOutput
	ToResultStorageOutputWithContext(context.Context) ResultStorageOutput
}

// Locations where the results of running the test are stored.
type ResultStorageArgs struct {
	// Required.
	GoogleCloudStorage GoogleCloudStoragePtrInput `pulumi:"googleCloudStorage"`
	// Output only. URL to the results in the Firebase Web Console.
	ResultsUrl pulumi.StringPtrInput `pulumi:"resultsUrl"`
	// Output only. The tool results execution that results are written to.
	ToolResultsExecution ToolResultsExecutionPtrInput `pulumi:"toolResultsExecution"`
	// The tool results history that contains the tool results execution that results are written to. If not provided, the service will choose an appropriate value.
	ToolResultsHistory ToolResultsHistoryPtrInput `pulumi:"toolResultsHistory"`
}

func (ResultStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResultStorage)(nil)).Elem()
}

func (i ResultStorageArgs) ToResultStorageOutput() ResultStorageOutput {
	return i.ToResultStorageOutputWithContext(context.Background())
}

func (i ResultStorageArgs) ToResultStorageOutputWithContext(ctx context.Context) ResultStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResultStorageOutput)
}

func (i ResultStorageArgs) ToResultStoragePtrOutput() ResultStoragePtrOutput {
	return i.ToResultStoragePtrOutputWithContext(context.Background())
}

func (i ResultStorageArgs) ToResultStoragePtrOutputWithContext(ctx context.Context) ResultStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResultStorageOutput).ToResultStoragePtrOutputWithContext(ctx)
}

// ResultStoragePtrInput is an input type that accepts ResultStorageArgs, ResultStoragePtr and ResultStoragePtrOutput values.
// You can construct a concrete instance of `ResultStoragePtrInput` via:
//
//          ResultStorageArgs{...}
//
//  or:
//
//          nil
type ResultStoragePtrInput interface {
	pulumi.Input

	ToResultStoragePtrOutput() ResultStoragePtrOutput
	ToResultStoragePtrOutputWithContext(context.Context) ResultStoragePtrOutput
}

type resultStoragePtrType ResultStorageArgs

func ResultStoragePtr(v *ResultStorageArgs) ResultStoragePtrInput {
	return (*resultStoragePtrType)(v)
}

func (*resultStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResultStorage)(nil)).Elem()
}

func (i *resultStoragePtrType) ToResultStoragePtrOutput() ResultStoragePtrOutput {
	return i.ToResultStoragePtrOutputWithContext(context.Background())
}

func (i *resultStoragePtrType) ToResultStoragePtrOutputWithContext(ctx context.Context) ResultStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResultStoragePtrOutput)
}

// Locations where the results of running the test are stored.
type ResultStorageOutput struct{ *pulumi.OutputState }

func (ResultStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResultStorage)(nil)).Elem()
}

func (o ResultStorageOutput) ToResultStorageOutput() ResultStorageOutput {
	return o
}

func (o ResultStorageOutput) ToResultStorageOutputWithContext(ctx context.Context) ResultStorageOutput {
	return o
}

func (o ResultStorageOutput) ToResultStoragePtrOutput() ResultStoragePtrOutput {
	return o.ToResultStoragePtrOutputWithContext(context.Background())
}

func (o ResultStorageOutput) ToResultStoragePtrOutputWithContext(ctx context.Context) ResultStoragePtrOutput {
	return o.ApplyT(func(v ResultStorage) *ResultStorage {
		return &v
	}).(ResultStoragePtrOutput)
}

// Required.
func (o ResultStorageOutput) GoogleCloudStorage() GoogleCloudStoragePtrOutput {
	return o.ApplyT(func(v ResultStorage) *GoogleCloudStorage { return v.GoogleCloudStorage }).(GoogleCloudStoragePtrOutput)
}

// Output only. URL to the results in the Firebase Web Console.
func (o ResultStorageOutput) ResultsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResultStorage) *string { return v.ResultsUrl }).(pulumi.StringPtrOutput)
}

// Output only. The tool results execution that results are written to.
func (o ResultStorageOutput) ToolResultsExecution() ToolResultsExecutionPtrOutput {
	return o.ApplyT(func(v ResultStorage) *ToolResultsExecution { return v.ToolResultsExecution }).(ToolResultsExecutionPtrOutput)
}

// The tool results history that contains the tool results execution that results are written to. If not provided, the service will choose an appropriate value.
func (o ResultStorageOutput) ToolResultsHistory() ToolResultsHistoryPtrOutput {
	return o.ApplyT(func(v ResultStorage) *ToolResultsHistory { return v.ToolResultsHistory }).(ToolResultsHistoryPtrOutput)
}

type ResultStoragePtrOutput struct{ *pulumi.OutputState }

func (ResultStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResultStorage)(nil)).Elem()
}

func (o ResultStoragePtrOutput) ToResultStoragePtrOutput() ResultStoragePtrOutput {
	return o
}

func (o ResultStoragePtrOutput) ToResultStoragePtrOutputWithContext(ctx context.Context) ResultStoragePtrOutput {
	return o
}

func (o ResultStoragePtrOutput) Elem() ResultStorageOutput {
	return o.ApplyT(func(v *ResultStorage) ResultStorage { return *v }).(ResultStorageOutput)
}

// Required.
func (o ResultStoragePtrOutput) GoogleCloudStorage() GoogleCloudStoragePtrOutput {
	return o.ApplyT(func(v *ResultStorage) *GoogleCloudStorage {
		if v == nil {
			return nil
		}
		return v.GoogleCloudStorage
	}).(GoogleCloudStoragePtrOutput)
}

// Output only. URL to the results in the Firebase Web Console.
func (o ResultStoragePtrOutput) ResultsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResultStorage) *string {
		if v == nil {
			return nil
		}
		return v.ResultsUrl
	}).(pulumi.StringPtrOutput)
}

// Output only. The tool results execution that results are written to.
func (o ResultStoragePtrOutput) ToolResultsExecution() ToolResultsExecutionPtrOutput {
	return o.ApplyT(func(v *ResultStorage) *ToolResultsExecution {
		if v == nil {
			return nil
		}
		return v.ToolResultsExecution
	}).(ToolResultsExecutionPtrOutput)
}

// The tool results history that contains the tool results execution that results are written to. If not provided, the service will choose an appropriate value.
func (o ResultStoragePtrOutput) ToolResultsHistory() ToolResultsHistoryPtrOutput {
	return o.ApplyT(func(v *ResultStorage) *ToolResultsHistory {
		if v == nil {
			return nil
		}
		return v.ToolResultsHistory
	}).(ToolResultsHistoryPtrOutput)
}

// Directs Robo to interact with a specific UI element if it is encountered during the crawl. Currently, Robo can perform text entry or element click.
type RoboDirective struct {
	// Required. The type of action that Robo should perform on the specified element.
	ActionType *string `pulumi:"actionType"`
	// The text that Robo is directed to set. If left empty, the directive will be treated as a CLICK on the element matching the resource_name.
	InputText *string `pulumi:"inputText"`
	// Required. The android resource name of the target UI element. For example, in Java: R.string.foo in xml: @string/foo Only the "foo" part is needed. Reference doc: https://developer.android.com/guide/topics/resources/accessing-resources.html
	ResourceName *string `pulumi:"resourceName"`
}

// RoboDirectiveInput is an input type that accepts RoboDirectiveArgs and RoboDirectiveOutput values.
// You can construct a concrete instance of `RoboDirectiveInput` via:
//
//          RoboDirectiveArgs{...}
type RoboDirectiveInput interface {
	pulumi.Input

	ToRoboDirectiveOutput() RoboDirectiveOutput
	ToRoboDirectiveOutputWithContext(context.Context) RoboDirectiveOutput
}

// Directs Robo to interact with a specific UI element if it is encountered during the crawl. Currently, Robo can perform text entry or element click.
type RoboDirectiveArgs struct {
	// Required. The type of action that Robo should perform on the specified element.
	ActionType pulumi.StringPtrInput `pulumi:"actionType"`
	// The text that Robo is directed to set. If left empty, the directive will be treated as a CLICK on the element matching the resource_name.
	InputText pulumi.StringPtrInput `pulumi:"inputText"`
	// Required. The android resource name of the target UI element. For example, in Java: R.string.foo in xml: @string/foo Only the "foo" part is needed. Reference doc: https://developer.android.com/guide/topics/resources/accessing-resources.html
	ResourceName pulumi.StringPtrInput `pulumi:"resourceName"`
}

func (RoboDirectiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoboDirective)(nil)).Elem()
}

func (i RoboDirectiveArgs) ToRoboDirectiveOutput() RoboDirectiveOutput {
	return i.ToRoboDirectiveOutputWithContext(context.Background())
}

func (i RoboDirectiveArgs) ToRoboDirectiveOutputWithContext(ctx context.Context) RoboDirectiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoboDirectiveOutput)
}

// RoboDirectiveArrayInput is an input type that accepts RoboDirectiveArray and RoboDirectiveArrayOutput values.
// You can construct a concrete instance of `RoboDirectiveArrayInput` via:
//
//          RoboDirectiveArray{ RoboDirectiveArgs{...} }
type RoboDirectiveArrayInput interface {
	pulumi.Input

	ToRoboDirectiveArrayOutput() RoboDirectiveArrayOutput
	ToRoboDirectiveArrayOutputWithContext(context.Context) RoboDirectiveArrayOutput
}

type RoboDirectiveArray []RoboDirectiveInput

func (RoboDirectiveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoboDirective)(nil)).Elem()
}

func (i RoboDirectiveArray) ToRoboDirectiveArrayOutput() RoboDirectiveArrayOutput {
	return i.ToRoboDirectiveArrayOutputWithContext(context.Background())
}

func (i RoboDirectiveArray) ToRoboDirectiveArrayOutputWithContext(ctx context.Context) RoboDirectiveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoboDirectiveArrayOutput)
}

// Directs Robo to interact with a specific UI element if it is encountered during the crawl. Currently, Robo can perform text entry or element click.
type RoboDirectiveOutput struct{ *pulumi.OutputState }

func (RoboDirectiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoboDirective)(nil)).Elem()
}

func (o RoboDirectiveOutput) ToRoboDirectiveOutput() RoboDirectiveOutput {
	return o
}

func (o RoboDirectiveOutput) ToRoboDirectiveOutputWithContext(ctx context.Context) RoboDirectiveOutput {
	return o
}

// Required. The type of action that Robo should perform on the specified element.
func (o RoboDirectiveOutput) ActionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoboDirective) *string { return v.ActionType }).(pulumi.StringPtrOutput)
}

// The text that Robo is directed to set. If left empty, the directive will be treated as a CLICK on the element matching the resource_name.
func (o RoboDirectiveOutput) InputText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoboDirective) *string { return v.InputText }).(pulumi.StringPtrOutput)
}

// Required. The android resource name of the target UI element. For example, in Java: R.string.foo in xml: @string/foo Only the "foo" part is needed. Reference doc: https://developer.android.com/guide/topics/resources/accessing-resources.html
func (o RoboDirectiveOutput) ResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoboDirective) *string { return v.ResourceName }).(pulumi.StringPtrOutput)
}

type RoboDirectiveArrayOutput struct{ *pulumi.OutputState }

func (RoboDirectiveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoboDirective)(nil)).Elem()
}

func (o RoboDirectiveArrayOutput) ToRoboDirectiveArrayOutput() RoboDirectiveArrayOutput {
	return o
}

func (o RoboDirectiveArrayOutput) ToRoboDirectiveArrayOutputWithContext(ctx context.Context) RoboDirectiveArrayOutput {
	return o
}

func (o RoboDirectiveArrayOutput) Index(i pulumi.IntInput) RoboDirectiveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoboDirective {
		return vs[0].([]RoboDirective)[vs[1].(int)]
	}).(RoboDirectiveOutput)
}

// Message for specifying the start activities to crawl.
type RoboStartingIntent struct {
	// An intent that starts the main launcher activity.
	LauncherActivity *LauncherActivityIntent `pulumi:"launcherActivity"`
	// An intent that starts an activity with specific details.
	StartActivity *StartActivityIntent `pulumi:"startActivity"`
	// Timeout in seconds for each intent.
	Timeout *string `pulumi:"timeout"`
}

// RoboStartingIntentInput is an input type that accepts RoboStartingIntentArgs and RoboStartingIntentOutput values.
// You can construct a concrete instance of `RoboStartingIntentInput` via:
//
//          RoboStartingIntentArgs{...}
type RoboStartingIntentInput interface {
	pulumi.Input

	ToRoboStartingIntentOutput() RoboStartingIntentOutput
	ToRoboStartingIntentOutputWithContext(context.Context) RoboStartingIntentOutput
}

// Message for specifying the start activities to crawl.
type RoboStartingIntentArgs struct {
	// An intent that starts the main launcher activity.
	LauncherActivity LauncherActivityIntentPtrInput `pulumi:"launcherActivity"`
	// An intent that starts an activity with specific details.
	StartActivity StartActivityIntentPtrInput `pulumi:"startActivity"`
	// Timeout in seconds for each intent.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (RoboStartingIntentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoboStartingIntent)(nil)).Elem()
}

func (i RoboStartingIntentArgs) ToRoboStartingIntentOutput() RoboStartingIntentOutput {
	return i.ToRoboStartingIntentOutputWithContext(context.Background())
}

func (i RoboStartingIntentArgs) ToRoboStartingIntentOutputWithContext(ctx context.Context) RoboStartingIntentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoboStartingIntentOutput)
}

// RoboStartingIntentArrayInput is an input type that accepts RoboStartingIntentArray and RoboStartingIntentArrayOutput values.
// You can construct a concrete instance of `RoboStartingIntentArrayInput` via:
//
//          RoboStartingIntentArray{ RoboStartingIntentArgs{...} }
type RoboStartingIntentArrayInput interface {
	pulumi.Input

	ToRoboStartingIntentArrayOutput() RoboStartingIntentArrayOutput
	ToRoboStartingIntentArrayOutputWithContext(context.Context) RoboStartingIntentArrayOutput
}

type RoboStartingIntentArray []RoboStartingIntentInput

func (RoboStartingIntentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoboStartingIntent)(nil)).Elem()
}

func (i RoboStartingIntentArray) ToRoboStartingIntentArrayOutput() RoboStartingIntentArrayOutput {
	return i.ToRoboStartingIntentArrayOutputWithContext(context.Background())
}

func (i RoboStartingIntentArray) ToRoboStartingIntentArrayOutputWithContext(ctx context.Context) RoboStartingIntentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoboStartingIntentArrayOutput)
}

// Message for specifying the start activities to crawl.
type RoboStartingIntentOutput struct{ *pulumi.OutputState }

func (RoboStartingIntentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoboStartingIntent)(nil)).Elem()
}

func (o RoboStartingIntentOutput) ToRoboStartingIntentOutput() RoboStartingIntentOutput {
	return o
}

func (o RoboStartingIntentOutput) ToRoboStartingIntentOutputWithContext(ctx context.Context) RoboStartingIntentOutput {
	return o
}

// An intent that starts the main launcher activity.
func (o RoboStartingIntentOutput) LauncherActivity() LauncherActivityIntentPtrOutput {
	return o.ApplyT(func(v RoboStartingIntent) *LauncherActivityIntent { return v.LauncherActivity }).(LauncherActivityIntentPtrOutput)
}

// An intent that starts an activity with specific details.
func (o RoboStartingIntentOutput) StartActivity() StartActivityIntentPtrOutput {
	return o.ApplyT(func(v RoboStartingIntent) *StartActivityIntent { return v.StartActivity }).(StartActivityIntentPtrOutput)
}

// Timeout in seconds for each intent.
func (o RoboStartingIntentOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoboStartingIntent) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type RoboStartingIntentArrayOutput struct{ *pulumi.OutputState }

func (RoboStartingIntentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoboStartingIntent)(nil)).Elem()
}

func (o RoboStartingIntentArrayOutput) ToRoboStartingIntentArrayOutput() RoboStartingIntentArrayOutput {
	return o
}

func (o RoboStartingIntentArrayOutput) ToRoboStartingIntentArrayOutputWithContext(ctx context.Context) RoboStartingIntentArrayOutput {
	return o
}

func (o RoboStartingIntentArrayOutput) Index(i pulumi.IntInput) RoboStartingIntentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoboStartingIntent {
		return vs[0].([]RoboStartingIntent)[vs[1].(int)]
	}).(RoboStartingIntentOutput)
}

// Output only. Details about the shard.
type Shard struct {
	// Output only. The total number of shards.
	NumShards *int `pulumi:"numShards"`
	// Output only. The index of the shard among all the shards.
	ShardIndex *int `pulumi:"shardIndex"`
	// Output only. Test targets for each shard.
	TestTargetsForShard *TestTargetsForShard `pulumi:"testTargetsForShard"`
}

// ShardInput is an input type that accepts ShardArgs and ShardOutput values.
// You can construct a concrete instance of `ShardInput` via:
//
//          ShardArgs{...}
type ShardInput interface {
	pulumi.Input

	ToShardOutput() ShardOutput
	ToShardOutputWithContext(context.Context) ShardOutput
}

// Output only. Details about the shard.
type ShardArgs struct {
	// Output only. The total number of shards.
	NumShards pulumi.IntPtrInput `pulumi:"numShards"`
	// Output only. The index of the shard among all the shards.
	ShardIndex pulumi.IntPtrInput `pulumi:"shardIndex"`
	// Output only. Test targets for each shard.
	TestTargetsForShard TestTargetsForShardPtrInput `pulumi:"testTargetsForShard"`
}

func (ShardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Shard)(nil)).Elem()
}

func (i ShardArgs) ToShardOutput() ShardOutput {
	return i.ToShardOutputWithContext(context.Background())
}

func (i ShardArgs) ToShardOutputWithContext(ctx context.Context) ShardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShardOutput)
}

func (i ShardArgs) ToShardPtrOutput() ShardPtrOutput {
	return i.ToShardPtrOutputWithContext(context.Background())
}

func (i ShardArgs) ToShardPtrOutputWithContext(ctx context.Context) ShardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShardOutput).ToShardPtrOutputWithContext(ctx)
}

// ShardPtrInput is an input type that accepts ShardArgs, ShardPtr and ShardPtrOutput values.
// You can construct a concrete instance of `ShardPtrInput` via:
//
//          ShardArgs{...}
//
//  or:
//
//          nil
type ShardPtrInput interface {
	pulumi.Input

	ToShardPtrOutput() ShardPtrOutput
	ToShardPtrOutputWithContext(context.Context) ShardPtrOutput
}

type shardPtrType ShardArgs

func ShardPtr(v *ShardArgs) ShardPtrInput {
	return (*shardPtrType)(v)
}

func (*shardPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Shard)(nil)).Elem()
}

func (i *shardPtrType) ToShardPtrOutput() ShardPtrOutput {
	return i.ToShardPtrOutputWithContext(context.Background())
}

func (i *shardPtrType) ToShardPtrOutputWithContext(ctx context.Context) ShardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShardPtrOutput)
}

// Output only. Details about the shard.
type ShardOutput struct{ *pulumi.OutputState }

func (ShardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Shard)(nil)).Elem()
}

func (o ShardOutput) ToShardOutput() ShardOutput {
	return o
}

func (o ShardOutput) ToShardOutputWithContext(ctx context.Context) ShardOutput {
	return o
}

func (o ShardOutput) ToShardPtrOutput() ShardPtrOutput {
	return o.ToShardPtrOutputWithContext(context.Background())
}

func (o ShardOutput) ToShardPtrOutputWithContext(ctx context.Context) ShardPtrOutput {
	return o.ApplyT(func(v Shard) *Shard {
		return &v
	}).(ShardPtrOutput)
}

// Output only. The total number of shards.
func (o ShardOutput) NumShards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Shard) *int { return v.NumShards }).(pulumi.IntPtrOutput)
}

// Output only. The index of the shard among all the shards.
func (o ShardOutput) ShardIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Shard) *int { return v.ShardIndex }).(pulumi.IntPtrOutput)
}

// Output only. Test targets for each shard.
func (o ShardOutput) TestTargetsForShard() TestTargetsForShardPtrOutput {
	return o.ApplyT(func(v Shard) *TestTargetsForShard { return v.TestTargetsForShard }).(TestTargetsForShardPtrOutput)
}

type ShardPtrOutput struct{ *pulumi.OutputState }

func (ShardPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Shard)(nil)).Elem()
}

func (o ShardPtrOutput) ToShardPtrOutput() ShardPtrOutput {
	return o
}

func (o ShardPtrOutput) ToShardPtrOutputWithContext(ctx context.Context) ShardPtrOutput {
	return o
}

func (o ShardPtrOutput) Elem() ShardOutput {
	return o.ApplyT(func(v *Shard) Shard { return *v }).(ShardOutput)
}

// Output only. The total number of shards.
func (o ShardPtrOutput) NumShards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Shard) *int {
		if v == nil {
			return nil
		}
		return v.NumShards
	}).(pulumi.IntPtrOutput)
}

// Output only. The index of the shard among all the shards.
func (o ShardPtrOutput) ShardIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Shard) *int {
		if v == nil {
			return nil
		}
		return v.ShardIndex
	}).(pulumi.IntPtrOutput)
}

// Output only. Test targets for each shard.
func (o ShardPtrOutput) TestTargetsForShard() TestTargetsForShardPtrOutput {
	return o.ApplyT(func(v *Shard) *TestTargetsForShard {
		if v == nil {
			return nil
		}
		return v.TestTargetsForShard
	}).(TestTargetsForShardPtrOutput)
}

// Options for enabling sharding.
type ShardingOption struct {
	// Shards test cases into the specified groups of packages, classes, and/or methods.
	ManualSharding *ManualSharding `pulumi:"manualSharding"`
	// Uniformly shards test cases given a total number of shards.
	UniformSharding *UniformSharding `pulumi:"uniformSharding"`
}

// ShardingOptionInput is an input type that accepts ShardingOptionArgs and ShardingOptionOutput values.
// You can construct a concrete instance of `ShardingOptionInput` via:
//
//          ShardingOptionArgs{...}
type ShardingOptionInput interface {
	pulumi.Input

	ToShardingOptionOutput() ShardingOptionOutput
	ToShardingOptionOutputWithContext(context.Context) ShardingOptionOutput
}

// Options for enabling sharding.
type ShardingOptionArgs struct {
	// Shards test cases into the specified groups of packages, classes, and/or methods.
	ManualSharding ManualShardingPtrInput `pulumi:"manualSharding"`
	// Uniformly shards test cases given a total number of shards.
	UniformSharding UniformShardingPtrInput `pulumi:"uniformSharding"`
}

func (ShardingOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShardingOption)(nil)).Elem()
}

func (i ShardingOptionArgs) ToShardingOptionOutput() ShardingOptionOutput {
	return i.ToShardingOptionOutputWithContext(context.Background())
}

func (i ShardingOptionArgs) ToShardingOptionOutputWithContext(ctx context.Context) ShardingOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShardingOptionOutput)
}

func (i ShardingOptionArgs) ToShardingOptionPtrOutput() ShardingOptionPtrOutput {
	return i.ToShardingOptionPtrOutputWithContext(context.Background())
}

func (i ShardingOptionArgs) ToShardingOptionPtrOutputWithContext(ctx context.Context) ShardingOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShardingOptionOutput).ToShardingOptionPtrOutputWithContext(ctx)
}

// ShardingOptionPtrInput is an input type that accepts ShardingOptionArgs, ShardingOptionPtr and ShardingOptionPtrOutput values.
// You can construct a concrete instance of `ShardingOptionPtrInput` via:
//
//          ShardingOptionArgs{...}
//
//  or:
//
//          nil
type ShardingOptionPtrInput interface {
	pulumi.Input

	ToShardingOptionPtrOutput() ShardingOptionPtrOutput
	ToShardingOptionPtrOutputWithContext(context.Context) ShardingOptionPtrOutput
}

type shardingOptionPtrType ShardingOptionArgs

func ShardingOptionPtr(v *ShardingOptionArgs) ShardingOptionPtrInput {
	return (*shardingOptionPtrType)(v)
}

func (*shardingOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShardingOption)(nil)).Elem()
}

func (i *shardingOptionPtrType) ToShardingOptionPtrOutput() ShardingOptionPtrOutput {
	return i.ToShardingOptionPtrOutputWithContext(context.Background())
}

func (i *shardingOptionPtrType) ToShardingOptionPtrOutputWithContext(ctx context.Context) ShardingOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShardingOptionPtrOutput)
}

// Options for enabling sharding.
type ShardingOptionOutput struct{ *pulumi.OutputState }

func (ShardingOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShardingOption)(nil)).Elem()
}

func (o ShardingOptionOutput) ToShardingOptionOutput() ShardingOptionOutput {
	return o
}

func (o ShardingOptionOutput) ToShardingOptionOutputWithContext(ctx context.Context) ShardingOptionOutput {
	return o
}

func (o ShardingOptionOutput) ToShardingOptionPtrOutput() ShardingOptionPtrOutput {
	return o.ToShardingOptionPtrOutputWithContext(context.Background())
}

func (o ShardingOptionOutput) ToShardingOptionPtrOutputWithContext(ctx context.Context) ShardingOptionPtrOutput {
	return o.ApplyT(func(v ShardingOption) *ShardingOption {
		return &v
	}).(ShardingOptionPtrOutput)
}

// Shards test cases into the specified groups of packages, classes, and/or methods.
func (o ShardingOptionOutput) ManualSharding() ManualShardingPtrOutput {
	return o.ApplyT(func(v ShardingOption) *ManualSharding { return v.ManualSharding }).(ManualShardingPtrOutput)
}

// Uniformly shards test cases given a total number of shards.
func (o ShardingOptionOutput) UniformSharding() UniformShardingPtrOutput {
	return o.ApplyT(func(v ShardingOption) *UniformSharding { return v.UniformSharding }).(UniformShardingPtrOutput)
}

type ShardingOptionPtrOutput struct{ *pulumi.OutputState }

func (ShardingOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShardingOption)(nil)).Elem()
}

func (o ShardingOptionPtrOutput) ToShardingOptionPtrOutput() ShardingOptionPtrOutput {
	return o
}

func (o ShardingOptionPtrOutput) ToShardingOptionPtrOutputWithContext(ctx context.Context) ShardingOptionPtrOutput {
	return o
}

func (o ShardingOptionPtrOutput) Elem() ShardingOptionOutput {
	return o.ApplyT(func(v *ShardingOption) ShardingOption { return *v }).(ShardingOptionOutput)
}

// Shards test cases into the specified groups of packages, classes, and/or methods.
func (o ShardingOptionPtrOutput) ManualSharding() ManualShardingPtrOutput {
	return o.ApplyT(func(v *ShardingOption) *ManualSharding {
		if v == nil {
			return nil
		}
		return v.ManualSharding
	}).(ManualShardingPtrOutput)
}

// Uniformly shards test cases given a total number of shards.
func (o ShardingOptionPtrOutput) UniformSharding() UniformShardingPtrOutput {
	return o.ApplyT(func(v *ShardingOption) *UniformSharding {
		if v == nil {
			return nil
		}
		return v.UniformSharding
	}).(UniformShardingPtrOutput)
}

// A starting intent specified by an action, uri, and categories.
type StartActivityIntent struct {
	// Action name. Required for START_ACTIVITY.
	Action *string `pulumi:"action"`
	// Intent categories to set on the intent.
	Categories []string `pulumi:"categories"`
	// URI for the action.
	Uri *string `pulumi:"uri"`
}

// StartActivityIntentInput is an input type that accepts StartActivityIntentArgs and StartActivityIntentOutput values.
// You can construct a concrete instance of `StartActivityIntentInput` via:
//
//          StartActivityIntentArgs{...}
type StartActivityIntentInput interface {
	pulumi.Input

	ToStartActivityIntentOutput() StartActivityIntentOutput
	ToStartActivityIntentOutputWithContext(context.Context) StartActivityIntentOutput
}

// A starting intent specified by an action, uri, and categories.
type StartActivityIntentArgs struct {
	// Action name. Required for START_ACTIVITY.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Intent categories to set on the intent.
	Categories pulumi.StringArrayInput `pulumi:"categories"`
	// URI for the action.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (StartActivityIntentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StartActivityIntent)(nil)).Elem()
}

func (i StartActivityIntentArgs) ToStartActivityIntentOutput() StartActivityIntentOutput {
	return i.ToStartActivityIntentOutputWithContext(context.Background())
}

func (i StartActivityIntentArgs) ToStartActivityIntentOutputWithContext(ctx context.Context) StartActivityIntentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartActivityIntentOutput)
}

func (i StartActivityIntentArgs) ToStartActivityIntentPtrOutput() StartActivityIntentPtrOutput {
	return i.ToStartActivityIntentPtrOutputWithContext(context.Background())
}

func (i StartActivityIntentArgs) ToStartActivityIntentPtrOutputWithContext(ctx context.Context) StartActivityIntentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartActivityIntentOutput).ToStartActivityIntentPtrOutputWithContext(ctx)
}

// StartActivityIntentPtrInput is an input type that accepts StartActivityIntentArgs, StartActivityIntentPtr and StartActivityIntentPtrOutput values.
// You can construct a concrete instance of `StartActivityIntentPtrInput` via:
//
//          StartActivityIntentArgs{...}
//
//  or:
//
//          nil
type StartActivityIntentPtrInput interface {
	pulumi.Input

	ToStartActivityIntentPtrOutput() StartActivityIntentPtrOutput
	ToStartActivityIntentPtrOutputWithContext(context.Context) StartActivityIntentPtrOutput
}

type startActivityIntentPtrType StartActivityIntentArgs

func StartActivityIntentPtr(v *StartActivityIntentArgs) StartActivityIntentPtrInput {
	return (*startActivityIntentPtrType)(v)
}

func (*startActivityIntentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StartActivityIntent)(nil)).Elem()
}

func (i *startActivityIntentPtrType) ToStartActivityIntentPtrOutput() StartActivityIntentPtrOutput {
	return i.ToStartActivityIntentPtrOutputWithContext(context.Background())
}

func (i *startActivityIntentPtrType) ToStartActivityIntentPtrOutputWithContext(ctx context.Context) StartActivityIntentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartActivityIntentPtrOutput)
}

// A starting intent specified by an action, uri, and categories.
type StartActivityIntentOutput struct{ *pulumi.OutputState }

func (StartActivityIntentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StartActivityIntent)(nil)).Elem()
}

func (o StartActivityIntentOutput) ToStartActivityIntentOutput() StartActivityIntentOutput {
	return o
}

func (o StartActivityIntentOutput) ToStartActivityIntentOutputWithContext(ctx context.Context) StartActivityIntentOutput {
	return o
}

func (o StartActivityIntentOutput) ToStartActivityIntentPtrOutput() StartActivityIntentPtrOutput {
	return o.ToStartActivityIntentPtrOutputWithContext(context.Background())
}

func (o StartActivityIntentOutput) ToStartActivityIntentPtrOutputWithContext(ctx context.Context) StartActivityIntentPtrOutput {
	return o.ApplyT(func(v StartActivityIntent) *StartActivityIntent {
		return &v
	}).(StartActivityIntentPtrOutput)
}

// Action name. Required for START_ACTIVITY.
func (o StartActivityIntentOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StartActivityIntent) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Intent categories to set on the intent.
func (o StartActivityIntentOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StartActivityIntent) []string { return v.Categories }).(pulumi.StringArrayOutput)
}

// URI for the action.
func (o StartActivityIntentOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StartActivityIntent) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type StartActivityIntentPtrOutput struct{ *pulumi.OutputState }

func (StartActivityIntentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StartActivityIntent)(nil)).Elem()
}

func (o StartActivityIntentPtrOutput) ToStartActivityIntentPtrOutput() StartActivityIntentPtrOutput {
	return o
}

func (o StartActivityIntentPtrOutput) ToStartActivityIntentPtrOutputWithContext(ctx context.Context) StartActivityIntentPtrOutput {
	return o
}

func (o StartActivityIntentPtrOutput) Elem() StartActivityIntentOutput {
	return o.ApplyT(func(v *StartActivityIntent) StartActivityIntent { return *v }).(StartActivityIntentOutput)
}

// Action name. Required for START_ACTIVITY.
func (o StartActivityIntentPtrOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StartActivityIntent) *string {
		if v == nil {
			return nil
		}
		return v.Action
	}).(pulumi.StringPtrOutput)
}

// Intent categories to set on the intent.
func (o StartActivityIntentPtrOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StartActivityIntent) []string {
		if v == nil {
			return nil
		}
		return v.Categories
	}).(pulumi.StringArrayOutput)
}

// URI for the action.
func (o StartActivityIntentPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StartActivityIntent) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type SystraceSetup struct {
	// Systrace duration in seconds. Should be between 1 and 30 seconds. 0 disables systrace.
	DurationSeconds *int `pulumi:"durationSeconds"`
}

// SystraceSetupInput is an input type that accepts SystraceSetupArgs and SystraceSetupOutput values.
// You can construct a concrete instance of `SystraceSetupInput` via:
//
//          SystraceSetupArgs{...}
type SystraceSetupInput interface {
	pulumi.Input

	ToSystraceSetupOutput() SystraceSetupOutput
	ToSystraceSetupOutputWithContext(context.Context) SystraceSetupOutput
}

type SystraceSetupArgs struct {
	// Systrace duration in seconds. Should be between 1 and 30 seconds. 0 disables systrace.
	DurationSeconds pulumi.IntPtrInput `pulumi:"durationSeconds"`
}

func (SystraceSetupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystraceSetup)(nil)).Elem()
}

func (i SystraceSetupArgs) ToSystraceSetupOutput() SystraceSetupOutput {
	return i.ToSystraceSetupOutputWithContext(context.Background())
}

func (i SystraceSetupArgs) ToSystraceSetupOutputWithContext(ctx context.Context) SystraceSetupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystraceSetupOutput)
}

func (i SystraceSetupArgs) ToSystraceSetupPtrOutput() SystraceSetupPtrOutput {
	return i.ToSystraceSetupPtrOutputWithContext(context.Background())
}

func (i SystraceSetupArgs) ToSystraceSetupPtrOutputWithContext(ctx context.Context) SystraceSetupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystraceSetupOutput).ToSystraceSetupPtrOutputWithContext(ctx)
}

// SystraceSetupPtrInput is an input type that accepts SystraceSetupArgs, SystraceSetupPtr and SystraceSetupPtrOutput values.
// You can construct a concrete instance of `SystraceSetupPtrInput` via:
//
//          SystraceSetupArgs{...}
//
//  or:
//
//          nil
type SystraceSetupPtrInput interface {
	pulumi.Input

	ToSystraceSetupPtrOutput() SystraceSetupPtrOutput
	ToSystraceSetupPtrOutputWithContext(context.Context) SystraceSetupPtrOutput
}

type systraceSetupPtrType SystraceSetupArgs

func SystraceSetupPtr(v *SystraceSetupArgs) SystraceSetupPtrInput {
	return (*systraceSetupPtrType)(v)
}

func (*systraceSetupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystraceSetup)(nil)).Elem()
}

func (i *systraceSetupPtrType) ToSystraceSetupPtrOutput() SystraceSetupPtrOutput {
	return i.ToSystraceSetupPtrOutputWithContext(context.Background())
}

func (i *systraceSetupPtrType) ToSystraceSetupPtrOutputWithContext(ctx context.Context) SystraceSetupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystraceSetupPtrOutput)
}

type SystraceSetupOutput struct{ *pulumi.OutputState }

func (SystraceSetupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystraceSetup)(nil)).Elem()
}

func (o SystraceSetupOutput) ToSystraceSetupOutput() SystraceSetupOutput {
	return o
}

func (o SystraceSetupOutput) ToSystraceSetupOutputWithContext(ctx context.Context) SystraceSetupOutput {
	return o
}

func (o SystraceSetupOutput) ToSystraceSetupPtrOutput() SystraceSetupPtrOutput {
	return o.ToSystraceSetupPtrOutputWithContext(context.Background())
}

func (o SystraceSetupOutput) ToSystraceSetupPtrOutputWithContext(ctx context.Context) SystraceSetupPtrOutput {
	return o.ApplyT(func(v SystraceSetup) *SystraceSetup {
		return &v
	}).(SystraceSetupPtrOutput)
}

// Systrace duration in seconds. Should be between 1 and 30 seconds. 0 disables systrace.
func (o SystraceSetupOutput) DurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SystraceSetup) *int { return v.DurationSeconds }).(pulumi.IntPtrOutput)
}

type SystraceSetupPtrOutput struct{ *pulumi.OutputState }

func (SystraceSetupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystraceSetup)(nil)).Elem()
}

func (o SystraceSetupPtrOutput) ToSystraceSetupPtrOutput() SystraceSetupPtrOutput {
	return o
}

func (o SystraceSetupPtrOutput) ToSystraceSetupPtrOutputWithContext(ctx context.Context) SystraceSetupPtrOutput {
	return o
}

func (o SystraceSetupPtrOutput) Elem() SystraceSetupOutput {
	return o.ApplyT(func(v *SystraceSetup) SystraceSetup { return *v }).(SystraceSetupOutput)
}

// Systrace duration in seconds. Should be between 1 and 30 seconds. 0 disables systrace.
func (o SystraceSetupPtrOutput) DurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SystraceSetup) *int {
		if v == nil {
			return nil
		}
		return v.DurationSeconds
	}).(pulumi.IntPtrOutput)
}

// Additional details about the progress of the running test.
type TestDetails struct {
	// Output only. If the TestState is ERROR, then this string will contain human-readable details about the error.
	ErrorMessage *string `pulumi:"errorMessage"`
	// Output only. Human-readable, detailed descriptions of the test's progress. For example: "Provisioning a device", "Starting Test". During the course of execution new data may be appended to the end of progress_messages.
	ProgressMessages []string `pulumi:"progressMessages"`
}

// TestDetailsInput is an input type that accepts TestDetailsArgs and TestDetailsOutput values.
// You can construct a concrete instance of `TestDetailsInput` via:
//
//          TestDetailsArgs{...}
type TestDetailsInput interface {
	pulumi.Input

	ToTestDetailsOutput() TestDetailsOutput
	ToTestDetailsOutputWithContext(context.Context) TestDetailsOutput
}

// Additional details about the progress of the running test.
type TestDetailsArgs struct {
	// Output only. If the TestState is ERROR, then this string will contain human-readable details about the error.
	ErrorMessage pulumi.StringPtrInput `pulumi:"errorMessage"`
	// Output only. Human-readable, detailed descriptions of the test's progress. For example: "Provisioning a device", "Starting Test". During the course of execution new data may be appended to the end of progress_messages.
	ProgressMessages pulumi.StringArrayInput `pulumi:"progressMessages"`
}

func (TestDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestDetails)(nil)).Elem()
}

func (i TestDetailsArgs) ToTestDetailsOutput() TestDetailsOutput {
	return i.ToTestDetailsOutputWithContext(context.Background())
}

func (i TestDetailsArgs) ToTestDetailsOutputWithContext(ctx context.Context) TestDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestDetailsOutput)
}

func (i TestDetailsArgs) ToTestDetailsPtrOutput() TestDetailsPtrOutput {
	return i.ToTestDetailsPtrOutputWithContext(context.Background())
}

func (i TestDetailsArgs) ToTestDetailsPtrOutputWithContext(ctx context.Context) TestDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestDetailsOutput).ToTestDetailsPtrOutputWithContext(ctx)
}

// TestDetailsPtrInput is an input type that accepts TestDetailsArgs, TestDetailsPtr and TestDetailsPtrOutput values.
// You can construct a concrete instance of `TestDetailsPtrInput` via:
//
//          TestDetailsArgs{...}
//
//  or:
//
//          nil
type TestDetailsPtrInput interface {
	pulumi.Input

	ToTestDetailsPtrOutput() TestDetailsPtrOutput
	ToTestDetailsPtrOutputWithContext(context.Context) TestDetailsPtrOutput
}

type testDetailsPtrType TestDetailsArgs

func TestDetailsPtr(v *TestDetailsArgs) TestDetailsPtrInput {
	return (*testDetailsPtrType)(v)
}

func (*testDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TestDetails)(nil)).Elem()
}

func (i *testDetailsPtrType) ToTestDetailsPtrOutput() TestDetailsPtrOutput {
	return i.ToTestDetailsPtrOutputWithContext(context.Background())
}

func (i *testDetailsPtrType) ToTestDetailsPtrOutputWithContext(ctx context.Context) TestDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestDetailsPtrOutput)
}

// Additional details about the progress of the running test.
type TestDetailsOutput struct{ *pulumi.OutputState }

func (TestDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestDetails)(nil)).Elem()
}

func (o TestDetailsOutput) ToTestDetailsOutput() TestDetailsOutput {
	return o
}

func (o TestDetailsOutput) ToTestDetailsOutputWithContext(ctx context.Context) TestDetailsOutput {
	return o
}

func (o TestDetailsOutput) ToTestDetailsPtrOutput() TestDetailsPtrOutput {
	return o.ToTestDetailsPtrOutputWithContext(context.Background())
}

func (o TestDetailsOutput) ToTestDetailsPtrOutputWithContext(ctx context.Context) TestDetailsPtrOutput {
	return o.ApplyT(func(v TestDetails) *TestDetails {
		return &v
	}).(TestDetailsPtrOutput)
}

// Output only. If the TestState is ERROR, then this string will contain human-readable details about the error.
func (o TestDetailsOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestDetails) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// Output only. Human-readable, detailed descriptions of the test's progress. For example: "Provisioning a device", "Starting Test". During the course of execution new data may be appended to the end of progress_messages.
func (o TestDetailsOutput) ProgressMessages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TestDetails) []string { return v.ProgressMessages }).(pulumi.StringArrayOutput)
}

type TestDetailsPtrOutput struct{ *pulumi.OutputState }

func (TestDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestDetails)(nil)).Elem()
}

func (o TestDetailsPtrOutput) ToTestDetailsPtrOutput() TestDetailsPtrOutput {
	return o
}

func (o TestDetailsPtrOutput) ToTestDetailsPtrOutputWithContext(ctx context.Context) TestDetailsPtrOutput {
	return o
}

func (o TestDetailsPtrOutput) Elem() TestDetailsOutput {
	return o.ApplyT(func(v *TestDetails) TestDetails { return *v }).(TestDetailsOutput)
}

// Output only. If the TestState is ERROR, then this string will contain human-readable details about the error.
func (o TestDetailsPtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestDetails) *string {
		if v == nil {
			return nil
		}
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// Output only. Human-readable, detailed descriptions of the test's progress. For example: "Provisioning a device", "Starting Test". During the course of execution new data may be appended to the end of progress_messages.
func (o TestDetailsPtrOutput) ProgressMessages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TestDetails) []string {
		if v == nil {
			return nil
		}
		return v.ProgressMessages
	}).(pulumi.StringArrayOutput)
}

// A single test executed in a single environment.
type TestExecution struct {
	// Output only. How the host machine(s) are configured.
	Environment *Environment `pulumi:"environment"`
	// Output only. Unique id set by the service.
	Id *string `pulumi:"id"`
	// Output only. Id of the containing TestMatrix.
	MatrixId *string `pulumi:"matrixId"`
	// Output only. The cloud project that owns the test execution.
	ProjectId *string `pulumi:"projectId"`
	// Output only. Details about the shard.
	Shard *Shard `pulumi:"shard"`
	// Output only. Indicates the current progress of the test execution (e.g., FINISHED).
	State *string `pulumi:"state"`
	// Output only. Additional details about the running test.
	TestDetails *TestDetails `pulumi:"testDetails"`
	// Output only. How to run the test.
	TestSpecification *TestSpecification `pulumi:"testSpecification"`
	// Output only. The time this test execution was initially created.
	Timestamp *string `pulumi:"timestamp"`
	// Output only. Where the results for this execution are written.
	ToolResultsStep *ToolResultsStep `pulumi:"toolResultsStep"`
}

// TestExecutionInput is an input type that accepts TestExecutionArgs and TestExecutionOutput values.
// You can construct a concrete instance of `TestExecutionInput` via:
//
//          TestExecutionArgs{...}
type TestExecutionInput interface {
	pulumi.Input

	ToTestExecutionOutput() TestExecutionOutput
	ToTestExecutionOutputWithContext(context.Context) TestExecutionOutput
}

// A single test executed in a single environment.
type TestExecutionArgs struct {
	// Output only. How the host machine(s) are configured.
	Environment EnvironmentPtrInput `pulumi:"environment"`
	// Output only. Unique id set by the service.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Output only. Id of the containing TestMatrix.
	MatrixId pulumi.StringPtrInput `pulumi:"matrixId"`
	// Output only. The cloud project that owns the test execution.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Output only. Details about the shard.
	Shard ShardPtrInput `pulumi:"shard"`
	// Output only. Indicates the current progress of the test execution (e.g., FINISHED).
	State pulumi.StringPtrInput `pulumi:"state"`
	// Output only. Additional details about the running test.
	TestDetails TestDetailsPtrInput `pulumi:"testDetails"`
	// Output only. How to run the test.
	TestSpecification TestSpecificationPtrInput `pulumi:"testSpecification"`
	// Output only. The time this test execution was initially created.
	Timestamp pulumi.StringPtrInput `pulumi:"timestamp"`
	// Output only. Where the results for this execution are written.
	ToolResultsStep ToolResultsStepPtrInput `pulumi:"toolResultsStep"`
}

func (TestExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestExecution)(nil)).Elem()
}

func (i TestExecutionArgs) ToTestExecutionOutput() TestExecutionOutput {
	return i.ToTestExecutionOutputWithContext(context.Background())
}

func (i TestExecutionArgs) ToTestExecutionOutputWithContext(ctx context.Context) TestExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestExecutionOutput)
}

// TestExecutionArrayInput is an input type that accepts TestExecutionArray and TestExecutionArrayOutput values.
// You can construct a concrete instance of `TestExecutionArrayInput` via:
//
//          TestExecutionArray{ TestExecutionArgs{...} }
type TestExecutionArrayInput interface {
	pulumi.Input

	ToTestExecutionArrayOutput() TestExecutionArrayOutput
	ToTestExecutionArrayOutputWithContext(context.Context) TestExecutionArrayOutput
}

type TestExecutionArray []TestExecutionInput

func (TestExecutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TestExecution)(nil)).Elem()
}

func (i TestExecutionArray) ToTestExecutionArrayOutput() TestExecutionArrayOutput {
	return i.ToTestExecutionArrayOutputWithContext(context.Background())
}

func (i TestExecutionArray) ToTestExecutionArrayOutputWithContext(ctx context.Context) TestExecutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestExecutionArrayOutput)
}

// A single test executed in a single environment.
type TestExecutionOutput struct{ *pulumi.OutputState }

func (TestExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestExecution)(nil)).Elem()
}

func (o TestExecutionOutput) ToTestExecutionOutput() TestExecutionOutput {
	return o
}

func (o TestExecutionOutput) ToTestExecutionOutputWithContext(ctx context.Context) TestExecutionOutput {
	return o
}

// Output only. How the host machine(s) are configured.
func (o TestExecutionOutput) Environment() EnvironmentPtrOutput {
	return o.ApplyT(func(v TestExecution) *Environment { return v.Environment }).(EnvironmentPtrOutput)
}

// Output only. Unique id set by the service.
func (o TestExecutionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestExecution) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Output only. Id of the containing TestMatrix.
func (o TestExecutionOutput) MatrixId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestExecution) *string { return v.MatrixId }).(pulumi.StringPtrOutput)
}

// Output only. The cloud project that owns the test execution.
func (o TestExecutionOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestExecution) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Output only. Details about the shard.
func (o TestExecutionOutput) Shard() ShardPtrOutput {
	return o.ApplyT(func(v TestExecution) *Shard { return v.Shard }).(ShardPtrOutput)
}

// Output only. Indicates the current progress of the test execution (e.g., FINISHED).
func (o TestExecutionOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestExecution) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Output only. Additional details about the running test.
func (o TestExecutionOutput) TestDetails() TestDetailsPtrOutput {
	return o.ApplyT(func(v TestExecution) *TestDetails { return v.TestDetails }).(TestDetailsPtrOutput)
}

// Output only. How to run the test.
func (o TestExecutionOutput) TestSpecification() TestSpecificationPtrOutput {
	return o.ApplyT(func(v TestExecution) *TestSpecification { return v.TestSpecification }).(TestSpecificationPtrOutput)
}

// Output only. The time this test execution was initially created.
func (o TestExecutionOutput) Timestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestExecution) *string { return v.Timestamp }).(pulumi.StringPtrOutput)
}

// Output only. Where the results for this execution are written.
func (o TestExecutionOutput) ToolResultsStep() ToolResultsStepPtrOutput {
	return o.ApplyT(func(v TestExecution) *ToolResultsStep { return v.ToolResultsStep }).(ToolResultsStepPtrOutput)
}

type TestExecutionArrayOutput struct{ *pulumi.OutputState }

func (TestExecutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TestExecution)(nil)).Elem()
}

func (o TestExecutionArrayOutput) ToTestExecutionArrayOutput() TestExecutionArrayOutput {
	return o
}

func (o TestExecutionArrayOutput) ToTestExecutionArrayOutputWithContext(ctx context.Context) TestExecutionArrayOutput {
	return o
}

func (o TestExecutionArrayOutput) Index(i pulumi.IntInput) TestExecutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TestExecution {
		return vs[0].([]TestExecution)[vs[1].(int)]
	}).(TestExecutionOutput)
}

// A description of how to set up the Android device prior to running the test.
type TestSetup struct {
	// The device will be logged in on this account for the duration of the test.
	Account *Account `pulumi:"account"`
	// APKs to install in addition to those being directly tested. Currently capped at 100.
	AdditionalApks []Apk `pulumi:"additionalApks"`
	// List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.
	DirectoriesToPull []string `pulumi:"directoriesToPull"`
	// Whether to prevent all runtime permissions to be granted at app install
	DontAutograntPermissions *bool `pulumi:"dontAutograntPermissions"`
	// Environment variables to set for the test (only applicable for instrumentation tests).
	EnvironmentVariables []EnvironmentVariable `pulumi:"environmentVariables"`
	// List of files to push to the device before starting the test.
	FilesToPush []DeviceFile `pulumi:"filesToPush"`
	// The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
	NetworkProfile *string `pulumi:"networkProfile"`
	// Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run.
	Systrace *SystraceSetup `pulumi:"systrace"`
}

// TestSetupInput is an input type that accepts TestSetupArgs and TestSetupOutput values.
// You can construct a concrete instance of `TestSetupInput` via:
//
//          TestSetupArgs{...}
type TestSetupInput interface {
	pulumi.Input

	ToTestSetupOutput() TestSetupOutput
	ToTestSetupOutputWithContext(context.Context) TestSetupOutput
}

// A description of how to set up the Android device prior to running the test.
type TestSetupArgs struct {
	// The device will be logged in on this account for the duration of the test.
	Account AccountPtrInput `pulumi:"account"`
	// APKs to install in addition to those being directly tested. Currently capped at 100.
	AdditionalApks ApkArrayInput `pulumi:"additionalApks"`
	// List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.
	DirectoriesToPull pulumi.StringArrayInput `pulumi:"directoriesToPull"`
	// Whether to prevent all runtime permissions to be granted at app install
	DontAutograntPermissions pulumi.BoolPtrInput `pulumi:"dontAutograntPermissions"`
	// Environment variables to set for the test (only applicable for instrumentation tests).
	EnvironmentVariables EnvironmentVariableArrayInput `pulumi:"environmentVariables"`
	// List of files to push to the device before starting the test.
	FilesToPush DeviceFileArrayInput `pulumi:"filesToPush"`
	// The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
	NetworkProfile pulumi.StringPtrInput `pulumi:"networkProfile"`
	// Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run.
	Systrace SystraceSetupPtrInput `pulumi:"systrace"`
}

func (TestSetupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestSetup)(nil)).Elem()
}

func (i TestSetupArgs) ToTestSetupOutput() TestSetupOutput {
	return i.ToTestSetupOutputWithContext(context.Background())
}

func (i TestSetupArgs) ToTestSetupOutputWithContext(ctx context.Context) TestSetupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestSetupOutput)
}

func (i TestSetupArgs) ToTestSetupPtrOutput() TestSetupPtrOutput {
	return i.ToTestSetupPtrOutputWithContext(context.Background())
}

func (i TestSetupArgs) ToTestSetupPtrOutputWithContext(ctx context.Context) TestSetupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestSetupOutput).ToTestSetupPtrOutputWithContext(ctx)
}

// TestSetupPtrInput is an input type that accepts TestSetupArgs, TestSetupPtr and TestSetupPtrOutput values.
// You can construct a concrete instance of `TestSetupPtrInput` via:
//
//          TestSetupArgs{...}
//
//  or:
//
//          nil
type TestSetupPtrInput interface {
	pulumi.Input

	ToTestSetupPtrOutput() TestSetupPtrOutput
	ToTestSetupPtrOutputWithContext(context.Context) TestSetupPtrOutput
}

type testSetupPtrType TestSetupArgs

func TestSetupPtr(v *TestSetupArgs) TestSetupPtrInput {
	return (*testSetupPtrType)(v)
}

func (*testSetupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TestSetup)(nil)).Elem()
}

func (i *testSetupPtrType) ToTestSetupPtrOutput() TestSetupPtrOutput {
	return i.ToTestSetupPtrOutputWithContext(context.Background())
}

func (i *testSetupPtrType) ToTestSetupPtrOutputWithContext(ctx context.Context) TestSetupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestSetupPtrOutput)
}

// A description of how to set up the Android device prior to running the test.
type TestSetupOutput struct{ *pulumi.OutputState }

func (TestSetupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestSetup)(nil)).Elem()
}

func (o TestSetupOutput) ToTestSetupOutput() TestSetupOutput {
	return o
}

func (o TestSetupOutput) ToTestSetupOutputWithContext(ctx context.Context) TestSetupOutput {
	return o
}

func (o TestSetupOutput) ToTestSetupPtrOutput() TestSetupPtrOutput {
	return o.ToTestSetupPtrOutputWithContext(context.Background())
}

func (o TestSetupOutput) ToTestSetupPtrOutputWithContext(ctx context.Context) TestSetupPtrOutput {
	return o.ApplyT(func(v TestSetup) *TestSetup {
		return &v
	}).(TestSetupPtrOutput)
}

// The device will be logged in on this account for the duration of the test.
func (o TestSetupOutput) Account() AccountPtrOutput {
	return o.ApplyT(func(v TestSetup) *Account { return v.Account }).(AccountPtrOutput)
}

// APKs to install in addition to those being directly tested. Currently capped at 100.
func (o TestSetupOutput) AdditionalApks() ApkArrayOutput {
	return o.ApplyT(func(v TestSetup) []Apk { return v.AdditionalApks }).(ApkArrayOutput)
}

// List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.
func (o TestSetupOutput) DirectoriesToPull() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TestSetup) []string { return v.DirectoriesToPull }).(pulumi.StringArrayOutput)
}

// Whether to prevent all runtime permissions to be granted at app install
func (o TestSetupOutput) DontAutograntPermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TestSetup) *bool { return v.DontAutograntPermissions }).(pulumi.BoolPtrOutput)
}

// Environment variables to set for the test (only applicable for instrumentation tests).
func (o TestSetupOutput) EnvironmentVariables() EnvironmentVariableArrayOutput {
	return o.ApplyT(func(v TestSetup) []EnvironmentVariable { return v.EnvironmentVariables }).(EnvironmentVariableArrayOutput)
}

// List of files to push to the device before starting the test.
func (o TestSetupOutput) FilesToPush() DeviceFileArrayOutput {
	return o.ApplyT(func(v TestSetup) []DeviceFile { return v.FilesToPush }).(DeviceFileArrayOutput)
}

// The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
func (o TestSetupOutput) NetworkProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestSetup) *string { return v.NetworkProfile }).(pulumi.StringPtrOutput)
}

// Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run.
func (o TestSetupOutput) Systrace() SystraceSetupPtrOutput {
	return o.ApplyT(func(v TestSetup) *SystraceSetup { return v.Systrace }).(SystraceSetupPtrOutput)
}

type TestSetupPtrOutput struct{ *pulumi.OutputState }

func (TestSetupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestSetup)(nil)).Elem()
}

func (o TestSetupPtrOutput) ToTestSetupPtrOutput() TestSetupPtrOutput {
	return o
}

func (o TestSetupPtrOutput) ToTestSetupPtrOutputWithContext(ctx context.Context) TestSetupPtrOutput {
	return o
}

func (o TestSetupPtrOutput) Elem() TestSetupOutput {
	return o.ApplyT(func(v *TestSetup) TestSetup { return *v }).(TestSetupOutput)
}

// The device will be logged in on this account for the duration of the test.
func (o TestSetupPtrOutput) Account() AccountPtrOutput {
	return o.ApplyT(func(v *TestSetup) *Account {
		if v == nil {
			return nil
		}
		return v.Account
	}).(AccountPtrOutput)
}

// APKs to install in addition to those being directly tested. Currently capped at 100.
func (o TestSetupPtrOutput) AdditionalApks() ApkArrayOutput {
	return o.ApplyT(func(v *TestSetup) []Apk {
		if v == nil {
			return nil
		}
		return v.AdditionalApks
	}).(ApkArrayOutput)
}

// List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.
func (o TestSetupPtrOutput) DirectoriesToPull() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TestSetup) []string {
		if v == nil {
			return nil
		}
		return v.DirectoriesToPull
	}).(pulumi.StringArrayOutput)
}

// Whether to prevent all runtime permissions to be granted at app install
func (o TestSetupPtrOutput) DontAutograntPermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TestSetup) *bool {
		if v == nil {
			return nil
		}
		return v.DontAutograntPermissions
	}).(pulumi.BoolPtrOutput)
}

// Environment variables to set for the test (only applicable for instrumentation tests).
func (o TestSetupPtrOutput) EnvironmentVariables() EnvironmentVariableArrayOutput {
	return o.ApplyT(func(v *TestSetup) []EnvironmentVariable {
		if v == nil {
			return nil
		}
		return v.EnvironmentVariables
	}).(EnvironmentVariableArrayOutput)
}

// List of files to push to the device before starting the test.
func (o TestSetupPtrOutput) FilesToPush() DeviceFileArrayOutput {
	return o.ApplyT(func(v *TestSetup) []DeviceFile {
		if v == nil {
			return nil
		}
		return v.FilesToPush
	}).(DeviceFileArrayOutput)
}

// The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
func (o TestSetupPtrOutput) NetworkProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestSetup) *string {
		if v == nil {
			return nil
		}
		return v.NetworkProfile
	}).(pulumi.StringPtrOutput)
}

// Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run.
func (o TestSetupPtrOutput) Systrace() SystraceSetupPtrOutput {
	return o.ApplyT(func(v *TestSetup) *SystraceSetup {
		if v == nil {
			return nil
		}
		return v.Systrace
	}).(SystraceSetupPtrOutput)
}

// A description of how to run the test.
type TestSpecification struct {
	// An Android instrumentation test.
	AndroidInstrumentationTest *AndroidInstrumentationTest `pulumi:"androidInstrumentationTest"`
	// An Android robo test.
	AndroidRoboTest *AndroidRoboTest `pulumi:"androidRoboTest"`
	// An Android Application with a Test Loop.
	AndroidTestLoop *AndroidTestLoop `pulumi:"androidTestLoop"`
	// Disables performance metrics recording. May reduce test latency.
	DisablePerformanceMetrics *bool `pulumi:"disablePerformanceMetrics"`
	// Disables video recording. May reduce test latency.
	DisableVideoRecording *bool `pulumi:"disableVideoRecording"`
	// An iOS application with a test loop.
	IosTestLoop *IosTestLoop `pulumi:"iosTestLoop"`
	// Test setup requirements for iOS.
	IosTestSetup *IosTestSetup `pulumi:"iosTestSetup"`
	// An iOS XCTest, via an .xctestrun file.
	IosXcTest *IosXcTest `pulumi:"iosXcTest"`
	// Test setup requirements for Android e.g. files to install, bootstrap scripts.
	TestSetup *TestSetup `pulumi:"testSetup"`
	// Max time a test execution is allowed to run before it is automatically cancelled. The default value is 5 min.
	TestTimeout *string `pulumi:"testTimeout"`
}

// TestSpecificationInput is an input type that accepts TestSpecificationArgs and TestSpecificationOutput values.
// You can construct a concrete instance of `TestSpecificationInput` via:
//
//          TestSpecificationArgs{...}
type TestSpecificationInput interface {
	pulumi.Input

	ToTestSpecificationOutput() TestSpecificationOutput
	ToTestSpecificationOutputWithContext(context.Context) TestSpecificationOutput
}

// A description of how to run the test.
type TestSpecificationArgs struct {
	// An Android instrumentation test.
	AndroidInstrumentationTest AndroidInstrumentationTestPtrInput `pulumi:"androidInstrumentationTest"`
	// An Android robo test.
	AndroidRoboTest AndroidRoboTestPtrInput `pulumi:"androidRoboTest"`
	// An Android Application with a Test Loop.
	AndroidTestLoop AndroidTestLoopPtrInput `pulumi:"androidTestLoop"`
	// Disables performance metrics recording. May reduce test latency.
	DisablePerformanceMetrics pulumi.BoolPtrInput `pulumi:"disablePerformanceMetrics"`
	// Disables video recording. May reduce test latency.
	DisableVideoRecording pulumi.BoolPtrInput `pulumi:"disableVideoRecording"`
	// An iOS application with a test loop.
	IosTestLoop IosTestLoopPtrInput `pulumi:"iosTestLoop"`
	// Test setup requirements for iOS.
	IosTestSetup IosTestSetupPtrInput `pulumi:"iosTestSetup"`
	// An iOS XCTest, via an .xctestrun file.
	IosXcTest IosXcTestPtrInput `pulumi:"iosXcTest"`
	// Test setup requirements for Android e.g. files to install, bootstrap scripts.
	TestSetup TestSetupPtrInput `pulumi:"testSetup"`
	// Max time a test execution is allowed to run before it is automatically cancelled. The default value is 5 min.
	TestTimeout pulumi.StringPtrInput `pulumi:"testTimeout"`
}

func (TestSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestSpecification)(nil)).Elem()
}

func (i TestSpecificationArgs) ToTestSpecificationOutput() TestSpecificationOutput {
	return i.ToTestSpecificationOutputWithContext(context.Background())
}

func (i TestSpecificationArgs) ToTestSpecificationOutputWithContext(ctx context.Context) TestSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestSpecificationOutput)
}

func (i TestSpecificationArgs) ToTestSpecificationPtrOutput() TestSpecificationPtrOutput {
	return i.ToTestSpecificationPtrOutputWithContext(context.Background())
}

func (i TestSpecificationArgs) ToTestSpecificationPtrOutputWithContext(ctx context.Context) TestSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestSpecificationOutput).ToTestSpecificationPtrOutputWithContext(ctx)
}

// TestSpecificationPtrInput is an input type that accepts TestSpecificationArgs, TestSpecificationPtr and TestSpecificationPtrOutput values.
// You can construct a concrete instance of `TestSpecificationPtrInput` via:
//
//          TestSpecificationArgs{...}
//
//  or:
//
//          nil
type TestSpecificationPtrInput interface {
	pulumi.Input

	ToTestSpecificationPtrOutput() TestSpecificationPtrOutput
	ToTestSpecificationPtrOutputWithContext(context.Context) TestSpecificationPtrOutput
}

type testSpecificationPtrType TestSpecificationArgs

func TestSpecificationPtr(v *TestSpecificationArgs) TestSpecificationPtrInput {
	return (*testSpecificationPtrType)(v)
}

func (*testSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TestSpecification)(nil)).Elem()
}

func (i *testSpecificationPtrType) ToTestSpecificationPtrOutput() TestSpecificationPtrOutput {
	return i.ToTestSpecificationPtrOutputWithContext(context.Background())
}

func (i *testSpecificationPtrType) ToTestSpecificationPtrOutputWithContext(ctx context.Context) TestSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestSpecificationPtrOutput)
}

// A description of how to run the test.
type TestSpecificationOutput struct{ *pulumi.OutputState }

func (TestSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestSpecification)(nil)).Elem()
}

func (o TestSpecificationOutput) ToTestSpecificationOutput() TestSpecificationOutput {
	return o
}

func (o TestSpecificationOutput) ToTestSpecificationOutputWithContext(ctx context.Context) TestSpecificationOutput {
	return o
}

func (o TestSpecificationOutput) ToTestSpecificationPtrOutput() TestSpecificationPtrOutput {
	return o.ToTestSpecificationPtrOutputWithContext(context.Background())
}

func (o TestSpecificationOutput) ToTestSpecificationPtrOutputWithContext(ctx context.Context) TestSpecificationPtrOutput {
	return o.ApplyT(func(v TestSpecification) *TestSpecification {
		return &v
	}).(TestSpecificationPtrOutput)
}

// An Android instrumentation test.
func (o TestSpecificationOutput) AndroidInstrumentationTest() AndroidInstrumentationTestPtrOutput {
	return o.ApplyT(func(v TestSpecification) *AndroidInstrumentationTest { return v.AndroidInstrumentationTest }).(AndroidInstrumentationTestPtrOutput)
}

// An Android robo test.
func (o TestSpecificationOutput) AndroidRoboTest() AndroidRoboTestPtrOutput {
	return o.ApplyT(func(v TestSpecification) *AndroidRoboTest { return v.AndroidRoboTest }).(AndroidRoboTestPtrOutput)
}

// An Android Application with a Test Loop.
func (o TestSpecificationOutput) AndroidTestLoop() AndroidTestLoopPtrOutput {
	return o.ApplyT(func(v TestSpecification) *AndroidTestLoop { return v.AndroidTestLoop }).(AndroidTestLoopPtrOutput)
}

// Disables performance metrics recording. May reduce test latency.
func (o TestSpecificationOutput) DisablePerformanceMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TestSpecification) *bool { return v.DisablePerformanceMetrics }).(pulumi.BoolPtrOutput)
}

// Disables video recording. May reduce test latency.
func (o TestSpecificationOutput) DisableVideoRecording() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TestSpecification) *bool { return v.DisableVideoRecording }).(pulumi.BoolPtrOutput)
}

// An iOS application with a test loop.
func (o TestSpecificationOutput) IosTestLoop() IosTestLoopPtrOutput {
	return o.ApplyT(func(v TestSpecification) *IosTestLoop { return v.IosTestLoop }).(IosTestLoopPtrOutput)
}

// Test setup requirements for iOS.
func (o TestSpecificationOutput) IosTestSetup() IosTestSetupPtrOutput {
	return o.ApplyT(func(v TestSpecification) *IosTestSetup { return v.IosTestSetup }).(IosTestSetupPtrOutput)
}

// An iOS XCTest, via an .xctestrun file.
func (o TestSpecificationOutput) IosXcTest() IosXcTestPtrOutput {
	return o.ApplyT(func(v TestSpecification) *IosXcTest { return v.IosXcTest }).(IosXcTestPtrOutput)
}

// Test setup requirements for Android e.g. files to install, bootstrap scripts.
func (o TestSpecificationOutput) TestSetup() TestSetupPtrOutput {
	return o.ApplyT(func(v TestSpecification) *TestSetup { return v.TestSetup }).(TestSetupPtrOutput)
}

// Max time a test execution is allowed to run before it is automatically cancelled. The default value is 5 min.
func (o TestSpecificationOutput) TestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestSpecification) *string { return v.TestTimeout }).(pulumi.StringPtrOutput)
}

type TestSpecificationPtrOutput struct{ *pulumi.OutputState }

func (TestSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestSpecification)(nil)).Elem()
}

func (o TestSpecificationPtrOutput) ToTestSpecificationPtrOutput() TestSpecificationPtrOutput {
	return o
}

func (o TestSpecificationPtrOutput) ToTestSpecificationPtrOutputWithContext(ctx context.Context) TestSpecificationPtrOutput {
	return o
}

func (o TestSpecificationPtrOutput) Elem() TestSpecificationOutput {
	return o.ApplyT(func(v *TestSpecification) TestSpecification { return *v }).(TestSpecificationOutput)
}

// An Android instrumentation test.
func (o TestSpecificationPtrOutput) AndroidInstrumentationTest() AndroidInstrumentationTestPtrOutput {
	return o.ApplyT(func(v *TestSpecification) *AndroidInstrumentationTest {
		if v == nil {
			return nil
		}
		return v.AndroidInstrumentationTest
	}).(AndroidInstrumentationTestPtrOutput)
}

// An Android robo test.
func (o TestSpecificationPtrOutput) AndroidRoboTest() AndroidRoboTestPtrOutput {
	return o.ApplyT(func(v *TestSpecification) *AndroidRoboTest {
		if v == nil {
			return nil
		}
		return v.AndroidRoboTest
	}).(AndroidRoboTestPtrOutput)
}

// An Android Application with a Test Loop.
func (o TestSpecificationPtrOutput) AndroidTestLoop() AndroidTestLoopPtrOutput {
	return o.ApplyT(func(v *TestSpecification) *AndroidTestLoop {
		if v == nil {
			return nil
		}
		return v.AndroidTestLoop
	}).(AndroidTestLoopPtrOutput)
}

// Disables performance metrics recording. May reduce test latency.
func (o TestSpecificationPtrOutput) DisablePerformanceMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TestSpecification) *bool {
		if v == nil {
			return nil
		}
		return v.DisablePerformanceMetrics
	}).(pulumi.BoolPtrOutput)
}

// Disables video recording. May reduce test latency.
func (o TestSpecificationPtrOutput) DisableVideoRecording() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TestSpecification) *bool {
		if v == nil {
			return nil
		}
		return v.DisableVideoRecording
	}).(pulumi.BoolPtrOutput)
}

// An iOS application with a test loop.
func (o TestSpecificationPtrOutput) IosTestLoop() IosTestLoopPtrOutput {
	return o.ApplyT(func(v *TestSpecification) *IosTestLoop {
		if v == nil {
			return nil
		}
		return v.IosTestLoop
	}).(IosTestLoopPtrOutput)
}

// Test setup requirements for iOS.
func (o TestSpecificationPtrOutput) IosTestSetup() IosTestSetupPtrOutput {
	return o.ApplyT(func(v *TestSpecification) *IosTestSetup {
		if v == nil {
			return nil
		}
		return v.IosTestSetup
	}).(IosTestSetupPtrOutput)
}

// An iOS XCTest, via an .xctestrun file.
func (o TestSpecificationPtrOutput) IosXcTest() IosXcTestPtrOutput {
	return o.ApplyT(func(v *TestSpecification) *IosXcTest {
		if v == nil {
			return nil
		}
		return v.IosXcTest
	}).(IosXcTestPtrOutput)
}

// Test setup requirements for Android e.g. files to install, bootstrap scripts.
func (o TestSpecificationPtrOutput) TestSetup() TestSetupPtrOutput {
	return o.ApplyT(func(v *TestSpecification) *TestSetup {
		if v == nil {
			return nil
		}
		return v.TestSetup
	}).(TestSetupPtrOutput)
}

// Max time a test execution is allowed to run before it is automatically cancelled. The default value is 5 min.
func (o TestSpecificationPtrOutput) TestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestSpecification) *string {
		if v == nil {
			return nil
		}
		return v.TestTimeout
	}).(pulumi.StringPtrOutput)
}

// Test targets for a shard.
type TestTargetsForShard struct {
	// Group of packages, classes, and/or test methods to be run for each shard. The targets need to be specified in AndroidJUnitRunner argument format. For example, "package com.my.packages" "class com.my.package.MyClass". The number of shard_test_targets must be greater than 0.
	TestTargets []string `pulumi:"testTargets"`
}

// TestTargetsForShardInput is an input type that accepts TestTargetsForShardArgs and TestTargetsForShardOutput values.
// You can construct a concrete instance of `TestTargetsForShardInput` via:
//
//          TestTargetsForShardArgs{...}
type TestTargetsForShardInput interface {
	pulumi.Input

	ToTestTargetsForShardOutput() TestTargetsForShardOutput
	ToTestTargetsForShardOutputWithContext(context.Context) TestTargetsForShardOutput
}

// Test targets for a shard.
type TestTargetsForShardArgs struct {
	// Group of packages, classes, and/or test methods to be run for each shard. The targets need to be specified in AndroidJUnitRunner argument format. For example, "package com.my.packages" "class com.my.package.MyClass". The number of shard_test_targets must be greater than 0.
	TestTargets pulumi.StringArrayInput `pulumi:"testTargets"`
}

func (TestTargetsForShardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestTargetsForShard)(nil)).Elem()
}

func (i TestTargetsForShardArgs) ToTestTargetsForShardOutput() TestTargetsForShardOutput {
	return i.ToTestTargetsForShardOutputWithContext(context.Background())
}

func (i TestTargetsForShardArgs) ToTestTargetsForShardOutputWithContext(ctx context.Context) TestTargetsForShardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestTargetsForShardOutput)
}

func (i TestTargetsForShardArgs) ToTestTargetsForShardPtrOutput() TestTargetsForShardPtrOutput {
	return i.ToTestTargetsForShardPtrOutputWithContext(context.Background())
}

func (i TestTargetsForShardArgs) ToTestTargetsForShardPtrOutputWithContext(ctx context.Context) TestTargetsForShardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestTargetsForShardOutput).ToTestTargetsForShardPtrOutputWithContext(ctx)
}

// TestTargetsForShardPtrInput is an input type that accepts TestTargetsForShardArgs, TestTargetsForShardPtr and TestTargetsForShardPtrOutput values.
// You can construct a concrete instance of `TestTargetsForShardPtrInput` via:
//
//          TestTargetsForShardArgs{...}
//
//  or:
//
//          nil
type TestTargetsForShardPtrInput interface {
	pulumi.Input

	ToTestTargetsForShardPtrOutput() TestTargetsForShardPtrOutput
	ToTestTargetsForShardPtrOutputWithContext(context.Context) TestTargetsForShardPtrOutput
}

type testTargetsForShardPtrType TestTargetsForShardArgs

func TestTargetsForShardPtr(v *TestTargetsForShardArgs) TestTargetsForShardPtrInput {
	return (*testTargetsForShardPtrType)(v)
}

func (*testTargetsForShardPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TestTargetsForShard)(nil)).Elem()
}

func (i *testTargetsForShardPtrType) ToTestTargetsForShardPtrOutput() TestTargetsForShardPtrOutput {
	return i.ToTestTargetsForShardPtrOutputWithContext(context.Background())
}

func (i *testTargetsForShardPtrType) ToTestTargetsForShardPtrOutputWithContext(ctx context.Context) TestTargetsForShardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestTargetsForShardPtrOutput)
}

// TestTargetsForShardArrayInput is an input type that accepts TestTargetsForShardArray and TestTargetsForShardArrayOutput values.
// You can construct a concrete instance of `TestTargetsForShardArrayInput` via:
//
//          TestTargetsForShardArray{ TestTargetsForShardArgs{...} }
type TestTargetsForShardArrayInput interface {
	pulumi.Input

	ToTestTargetsForShardArrayOutput() TestTargetsForShardArrayOutput
	ToTestTargetsForShardArrayOutputWithContext(context.Context) TestTargetsForShardArrayOutput
}

type TestTargetsForShardArray []TestTargetsForShardInput

func (TestTargetsForShardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TestTargetsForShard)(nil)).Elem()
}

func (i TestTargetsForShardArray) ToTestTargetsForShardArrayOutput() TestTargetsForShardArrayOutput {
	return i.ToTestTargetsForShardArrayOutputWithContext(context.Background())
}

func (i TestTargetsForShardArray) ToTestTargetsForShardArrayOutputWithContext(ctx context.Context) TestTargetsForShardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestTargetsForShardArrayOutput)
}

// Test targets for a shard.
type TestTargetsForShardOutput struct{ *pulumi.OutputState }

func (TestTargetsForShardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestTargetsForShard)(nil)).Elem()
}

func (o TestTargetsForShardOutput) ToTestTargetsForShardOutput() TestTargetsForShardOutput {
	return o
}

func (o TestTargetsForShardOutput) ToTestTargetsForShardOutputWithContext(ctx context.Context) TestTargetsForShardOutput {
	return o
}

func (o TestTargetsForShardOutput) ToTestTargetsForShardPtrOutput() TestTargetsForShardPtrOutput {
	return o.ToTestTargetsForShardPtrOutputWithContext(context.Background())
}

func (o TestTargetsForShardOutput) ToTestTargetsForShardPtrOutputWithContext(ctx context.Context) TestTargetsForShardPtrOutput {
	return o.ApplyT(func(v TestTargetsForShard) *TestTargetsForShard {
		return &v
	}).(TestTargetsForShardPtrOutput)
}

// Group of packages, classes, and/or test methods to be run for each shard. The targets need to be specified in AndroidJUnitRunner argument format. For example, "package com.my.packages" "class com.my.package.MyClass". The number of shard_test_targets must be greater than 0.
func (o TestTargetsForShardOutput) TestTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TestTargetsForShard) []string { return v.TestTargets }).(pulumi.StringArrayOutput)
}

type TestTargetsForShardPtrOutput struct{ *pulumi.OutputState }

func (TestTargetsForShardPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestTargetsForShard)(nil)).Elem()
}

func (o TestTargetsForShardPtrOutput) ToTestTargetsForShardPtrOutput() TestTargetsForShardPtrOutput {
	return o
}

func (o TestTargetsForShardPtrOutput) ToTestTargetsForShardPtrOutputWithContext(ctx context.Context) TestTargetsForShardPtrOutput {
	return o
}

func (o TestTargetsForShardPtrOutput) Elem() TestTargetsForShardOutput {
	return o.ApplyT(func(v *TestTargetsForShard) TestTargetsForShard { return *v }).(TestTargetsForShardOutput)
}

// Group of packages, classes, and/or test methods to be run for each shard. The targets need to be specified in AndroidJUnitRunner argument format. For example, "package com.my.packages" "class com.my.package.MyClass". The number of shard_test_targets must be greater than 0.
func (o TestTargetsForShardPtrOutput) TestTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TestTargetsForShard) []string {
		if v == nil {
			return nil
		}
		return v.TestTargets
	}).(pulumi.StringArrayOutput)
}

type TestTargetsForShardArrayOutput struct{ *pulumi.OutputState }

func (TestTargetsForShardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TestTargetsForShard)(nil)).Elem()
}

func (o TestTargetsForShardArrayOutput) ToTestTargetsForShardArrayOutput() TestTargetsForShardArrayOutput {
	return o
}

func (o TestTargetsForShardArrayOutput) ToTestTargetsForShardArrayOutputWithContext(ctx context.Context) TestTargetsForShardArrayOutput {
	return o
}

func (o TestTargetsForShardArrayOutput) Index(i pulumi.IntInput) TestTargetsForShardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TestTargetsForShard {
		return vs[0].([]TestTargetsForShard)[vs[1].(int)]
	}).(TestTargetsForShardOutput)
}

// Represents a tool results execution resource. This has the results of a TestMatrix.
type ToolResultsExecution struct {
	// Output only. A tool results execution ID.
	ExecutionId *string `pulumi:"executionId"`
	// Output only. A tool results history ID.
	HistoryId *string `pulumi:"historyId"`
	// Output only. The cloud project that owns the tool results execution.
	ProjectId *string `pulumi:"projectId"`
}

// ToolResultsExecutionInput is an input type that accepts ToolResultsExecutionArgs and ToolResultsExecutionOutput values.
// You can construct a concrete instance of `ToolResultsExecutionInput` via:
//
//          ToolResultsExecutionArgs{...}
type ToolResultsExecutionInput interface {
	pulumi.Input

	ToToolResultsExecutionOutput() ToolResultsExecutionOutput
	ToToolResultsExecutionOutputWithContext(context.Context) ToolResultsExecutionOutput
}

// Represents a tool results execution resource. This has the results of a TestMatrix.
type ToolResultsExecutionArgs struct {
	// Output only. A tool results execution ID.
	ExecutionId pulumi.StringPtrInput `pulumi:"executionId"`
	// Output only. A tool results history ID.
	HistoryId pulumi.StringPtrInput `pulumi:"historyId"`
	// Output only. The cloud project that owns the tool results execution.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (ToolResultsExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ToolResultsExecution)(nil)).Elem()
}

func (i ToolResultsExecutionArgs) ToToolResultsExecutionOutput() ToolResultsExecutionOutput {
	return i.ToToolResultsExecutionOutputWithContext(context.Background())
}

func (i ToolResultsExecutionArgs) ToToolResultsExecutionOutputWithContext(ctx context.Context) ToolResultsExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ToolResultsExecutionOutput)
}

func (i ToolResultsExecutionArgs) ToToolResultsExecutionPtrOutput() ToolResultsExecutionPtrOutput {
	return i.ToToolResultsExecutionPtrOutputWithContext(context.Background())
}

func (i ToolResultsExecutionArgs) ToToolResultsExecutionPtrOutputWithContext(ctx context.Context) ToolResultsExecutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ToolResultsExecutionOutput).ToToolResultsExecutionPtrOutputWithContext(ctx)
}

// ToolResultsExecutionPtrInput is an input type that accepts ToolResultsExecutionArgs, ToolResultsExecutionPtr and ToolResultsExecutionPtrOutput values.
// You can construct a concrete instance of `ToolResultsExecutionPtrInput` via:
//
//          ToolResultsExecutionArgs{...}
//
//  or:
//
//          nil
type ToolResultsExecutionPtrInput interface {
	pulumi.Input

	ToToolResultsExecutionPtrOutput() ToolResultsExecutionPtrOutput
	ToToolResultsExecutionPtrOutputWithContext(context.Context) ToolResultsExecutionPtrOutput
}

type toolResultsExecutionPtrType ToolResultsExecutionArgs

func ToolResultsExecutionPtr(v *ToolResultsExecutionArgs) ToolResultsExecutionPtrInput {
	return (*toolResultsExecutionPtrType)(v)
}

func (*toolResultsExecutionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ToolResultsExecution)(nil)).Elem()
}

func (i *toolResultsExecutionPtrType) ToToolResultsExecutionPtrOutput() ToolResultsExecutionPtrOutput {
	return i.ToToolResultsExecutionPtrOutputWithContext(context.Background())
}

func (i *toolResultsExecutionPtrType) ToToolResultsExecutionPtrOutputWithContext(ctx context.Context) ToolResultsExecutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ToolResultsExecutionPtrOutput)
}

// Represents a tool results execution resource. This has the results of a TestMatrix.
type ToolResultsExecutionOutput struct{ *pulumi.OutputState }

func (ToolResultsExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ToolResultsExecution)(nil)).Elem()
}

func (o ToolResultsExecutionOutput) ToToolResultsExecutionOutput() ToolResultsExecutionOutput {
	return o
}

func (o ToolResultsExecutionOutput) ToToolResultsExecutionOutputWithContext(ctx context.Context) ToolResultsExecutionOutput {
	return o
}

func (o ToolResultsExecutionOutput) ToToolResultsExecutionPtrOutput() ToolResultsExecutionPtrOutput {
	return o.ToToolResultsExecutionPtrOutputWithContext(context.Background())
}

func (o ToolResultsExecutionOutput) ToToolResultsExecutionPtrOutputWithContext(ctx context.Context) ToolResultsExecutionPtrOutput {
	return o.ApplyT(func(v ToolResultsExecution) *ToolResultsExecution {
		return &v
	}).(ToolResultsExecutionPtrOutput)
}

// Output only. A tool results execution ID.
func (o ToolResultsExecutionOutput) ExecutionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ToolResultsExecution) *string { return v.ExecutionId }).(pulumi.StringPtrOutput)
}

// Output only. A tool results history ID.
func (o ToolResultsExecutionOutput) HistoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ToolResultsExecution) *string { return v.HistoryId }).(pulumi.StringPtrOutput)
}

// Output only. The cloud project that owns the tool results execution.
func (o ToolResultsExecutionOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ToolResultsExecution) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

type ToolResultsExecutionPtrOutput struct{ *pulumi.OutputState }

func (ToolResultsExecutionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ToolResultsExecution)(nil)).Elem()
}

func (o ToolResultsExecutionPtrOutput) ToToolResultsExecutionPtrOutput() ToolResultsExecutionPtrOutput {
	return o
}

func (o ToolResultsExecutionPtrOutput) ToToolResultsExecutionPtrOutputWithContext(ctx context.Context) ToolResultsExecutionPtrOutput {
	return o
}

func (o ToolResultsExecutionPtrOutput) Elem() ToolResultsExecutionOutput {
	return o.ApplyT(func(v *ToolResultsExecution) ToolResultsExecution { return *v }).(ToolResultsExecutionOutput)
}

// Output only. A tool results execution ID.
func (o ToolResultsExecutionPtrOutput) ExecutionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ToolResultsExecution) *string {
		if v == nil {
			return nil
		}
		return v.ExecutionId
	}).(pulumi.StringPtrOutput)
}

// Output only. A tool results history ID.
func (o ToolResultsExecutionPtrOutput) HistoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ToolResultsExecution) *string {
		if v == nil {
			return nil
		}
		return v.HistoryId
	}).(pulumi.StringPtrOutput)
}

// Output only. The cloud project that owns the tool results execution.
func (o ToolResultsExecutionPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ToolResultsExecution) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Represents a tool results history resource.
type ToolResultsHistory struct {
	// Required. A tool results history ID.
	HistoryId *string `pulumi:"historyId"`
	// Required. The cloud project that owns the tool results history.
	ProjectId *string `pulumi:"projectId"`
}

// ToolResultsHistoryInput is an input type that accepts ToolResultsHistoryArgs and ToolResultsHistoryOutput values.
// You can construct a concrete instance of `ToolResultsHistoryInput` via:
//
//          ToolResultsHistoryArgs{...}
type ToolResultsHistoryInput interface {
	pulumi.Input

	ToToolResultsHistoryOutput() ToolResultsHistoryOutput
	ToToolResultsHistoryOutputWithContext(context.Context) ToolResultsHistoryOutput
}

// Represents a tool results history resource.
type ToolResultsHistoryArgs struct {
	// Required. A tool results history ID.
	HistoryId pulumi.StringPtrInput `pulumi:"historyId"`
	// Required. The cloud project that owns the tool results history.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (ToolResultsHistoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ToolResultsHistory)(nil)).Elem()
}

func (i ToolResultsHistoryArgs) ToToolResultsHistoryOutput() ToolResultsHistoryOutput {
	return i.ToToolResultsHistoryOutputWithContext(context.Background())
}

func (i ToolResultsHistoryArgs) ToToolResultsHistoryOutputWithContext(ctx context.Context) ToolResultsHistoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ToolResultsHistoryOutput)
}

func (i ToolResultsHistoryArgs) ToToolResultsHistoryPtrOutput() ToolResultsHistoryPtrOutput {
	return i.ToToolResultsHistoryPtrOutputWithContext(context.Background())
}

func (i ToolResultsHistoryArgs) ToToolResultsHistoryPtrOutputWithContext(ctx context.Context) ToolResultsHistoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ToolResultsHistoryOutput).ToToolResultsHistoryPtrOutputWithContext(ctx)
}

// ToolResultsHistoryPtrInput is an input type that accepts ToolResultsHistoryArgs, ToolResultsHistoryPtr and ToolResultsHistoryPtrOutput values.
// You can construct a concrete instance of `ToolResultsHistoryPtrInput` via:
//
//          ToolResultsHistoryArgs{...}
//
//  or:
//
//          nil
type ToolResultsHistoryPtrInput interface {
	pulumi.Input

	ToToolResultsHistoryPtrOutput() ToolResultsHistoryPtrOutput
	ToToolResultsHistoryPtrOutputWithContext(context.Context) ToolResultsHistoryPtrOutput
}

type toolResultsHistoryPtrType ToolResultsHistoryArgs

func ToolResultsHistoryPtr(v *ToolResultsHistoryArgs) ToolResultsHistoryPtrInput {
	return (*toolResultsHistoryPtrType)(v)
}

func (*toolResultsHistoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ToolResultsHistory)(nil)).Elem()
}

func (i *toolResultsHistoryPtrType) ToToolResultsHistoryPtrOutput() ToolResultsHistoryPtrOutput {
	return i.ToToolResultsHistoryPtrOutputWithContext(context.Background())
}

func (i *toolResultsHistoryPtrType) ToToolResultsHistoryPtrOutputWithContext(ctx context.Context) ToolResultsHistoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ToolResultsHistoryPtrOutput)
}

// Represents a tool results history resource.
type ToolResultsHistoryOutput struct{ *pulumi.OutputState }

func (ToolResultsHistoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ToolResultsHistory)(nil)).Elem()
}

func (o ToolResultsHistoryOutput) ToToolResultsHistoryOutput() ToolResultsHistoryOutput {
	return o
}

func (o ToolResultsHistoryOutput) ToToolResultsHistoryOutputWithContext(ctx context.Context) ToolResultsHistoryOutput {
	return o
}

func (o ToolResultsHistoryOutput) ToToolResultsHistoryPtrOutput() ToolResultsHistoryPtrOutput {
	return o.ToToolResultsHistoryPtrOutputWithContext(context.Background())
}

func (o ToolResultsHistoryOutput) ToToolResultsHistoryPtrOutputWithContext(ctx context.Context) ToolResultsHistoryPtrOutput {
	return o.ApplyT(func(v ToolResultsHistory) *ToolResultsHistory {
		return &v
	}).(ToolResultsHistoryPtrOutput)
}

// Required. A tool results history ID.
func (o ToolResultsHistoryOutput) HistoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ToolResultsHistory) *string { return v.HistoryId }).(pulumi.StringPtrOutput)
}

// Required. The cloud project that owns the tool results history.
func (o ToolResultsHistoryOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ToolResultsHistory) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

type ToolResultsHistoryPtrOutput struct{ *pulumi.OutputState }

func (ToolResultsHistoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ToolResultsHistory)(nil)).Elem()
}

func (o ToolResultsHistoryPtrOutput) ToToolResultsHistoryPtrOutput() ToolResultsHistoryPtrOutput {
	return o
}

func (o ToolResultsHistoryPtrOutput) ToToolResultsHistoryPtrOutputWithContext(ctx context.Context) ToolResultsHistoryPtrOutput {
	return o
}

func (o ToolResultsHistoryPtrOutput) Elem() ToolResultsHistoryOutput {
	return o.ApplyT(func(v *ToolResultsHistory) ToolResultsHistory { return *v }).(ToolResultsHistoryOutput)
}

// Required. A tool results history ID.
func (o ToolResultsHistoryPtrOutput) HistoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ToolResultsHistory) *string {
		if v == nil {
			return nil
		}
		return v.HistoryId
	}).(pulumi.StringPtrOutput)
}

// Required. The cloud project that owns the tool results history.
func (o ToolResultsHistoryPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ToolResultsHistory) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Represents a tool results step resource. This has the results of a TestExecution.
type ToolResultsStep struct {
	// Output only. A tool results execution ID.
	ExecutionId *string `pulumi:"executionId"`
	// Output only. A tool results history ID.
	HistoryId *string `pulumi:"historyId"`
	// Output only. The cloud project that owns the tool results step.
	ProjectId *string `pulumi:"projectId"`
	// Output only. A tool results step ID.
	StepId *string `pulumi:"stepId"`
}

// ToolResultsStepInput is an input type that accepts ToolResultsStepArgs and ToolResultsStepOutput values.
// You can construct a concrete instance of `ToolResultsStepInput` via:
//
//          ToolResultsStepArgs{...}
type ToolResultsStepInput interface {
	pulumi.Input

	ToToolResultsStepOutput() ToolResultsStepOutput
	ToToolResultsStepOutputWithContext(context.Context) ToolResultsStepOutput
}

// Represents a tool results step resource. This has the results of a TestExecution.
type ToolResultsStepArgs struct {
	// Output only. A tool results execution ID.
	ExecutionId pulumi.StringPtrInput `pulumi:"executionId"`
	// Output only. A tool results history ID.
	HistoryId pulumi.StringPtrInput `pulumi:"historyId"`
	// Output only. The cloud project that owns the tool results step.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Output only. A tool results step ID.
	StepId pulumi.StringPtrInput `pulumi:"stepId"`
}

func (ToolResultsStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ToolResultsStep)(nil)).Elem()
}

func (i ToolResultsStepArgs) ToToolResultsStepOutput() ToolResultsStepOutput {
	return i.ToToolResultsStepOutputWithContext(context.Background())
}

func (i ToolResultsStepArgs) ToToolResultsStepOutputWithContext(ctx context.Context) ToolResultsStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ToolResultsStepOutput)
}

func (i ToolResultsStepArgs) ToToolResultsStepPtrOutput() ToolResultsStepPtrOutput {
	return i.ToToolResultsStepPtrOutputWithContext(context.Background())
}

func (i ToolResultsStepArgs) ToToolResultsStepPtrOutputWithContext(ctx context.Context) ToolResultsStepPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ToolResultsStepOutput).ToToolResultsStepPtrOutputWithContext(ctx)
}

// ToolResultsStepPtrInput is an input type that accepts ToolResultsStepArgs, ToolResultsStepPtr and ToolResultsStepPtrOutput values.
// You can construct a concrete instance of `ToolResultsStepPtrInput` via:
//
//          ToolResultsStepArgs{...}
//
//  or:
//
//          nil
type ToolResultsStepPtrInput interface {
	pulumi.Input

	ToToolResultsStepPtrOutput() ToolResultsStepPtrOutput
	ToToolResultsStepPtrOutputWithContext(context.Context) ToolResultsStepPtrOutput
}

type toolResultsStepPtrType ToolResultsStepArgs

func ToolResultsStepPtr(v *ToolResultsStepArgs) ToolResultsStepPtrInput {
	return (*toolResultsStepPtrType)(v)
}

func (*toolResultsStepPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ToolResultsStep)(nil)).Elem()
}

func (i *toolResultsStepPtrType) ToToolResultsStepPtrOutput() ToolResultsStepPtrOutput {
	return i.ToToolResultsStepPtrOutputWithContext(context.Background())
}

func (i *toolResultsStepPtrType) ToToolResultsStepPtrOutputWithContext(ctx context.Context) ToolResultsStepPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ToolResultsStepPtrOutput)
}

// Represents a tool results step resource. This has the results of a TestExecution.
type ToolResultsStepOutput struct{ *pulumi.OutputState }

func (ToolResultsStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ToolResultsStep)(nil)).Elem()
}

func (o ToolResultsStepOutput) ToToolResultsStepOutput() ToolResultsStepOutput {
	return o
}

func (o ToolResultsStepOutput) ToToolResultsStepOutputWithContext(ctx context.Context) ToolResultsStepOutput {
	return o
}

func (o ToolResultsStepOutput) ToToolResultsStepPtrOutput() ToolResultsStepPtrOutput {
	return o.ToToolResultsStepPtrOutputWithContext(context.Background())
}

func (o ToolResultsStepOutput) ToToolResultsStepPtrOutputWithContext(ctx context.Context) ToolResultsStepPtrOutput {
	return o.ApplyT(func(v ToolResultsStep) *ToolResultsStep {
		return &v
	}).(ToolResultsStepPtrOutput)
}

// Output only. A tool results execution ID.
func (o ToolResultsStepOutput) ExecutionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ToolResultsStep) *string { return v.ExecutionId }).(pulumi.StringPtrOutput)
}

// Output only. A tool results history ID.
func (o ToolResultsStepOutput) HistoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ToolResultsStep) *string { return v.HistoryId }).(pulumi.StringPtrOutput)
}

// Output only. The cloud project that owns the tool results step.
func (o ToolResultsStepOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ToolResultsStep) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Output only. A tool results step ID.
func (o ToolResultsStepOutput) StepId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ToolResultsStep) *string { return v.StepId }).(pulumi.StringPtrOutput)
}

type ToolResultsStepPtrOutput struct{ *pulumi.OutputState }

func (ToolResultsStepPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ToolResultsStep)(nil)).Elem()
}

func (o ToolResultsStepPtrOutput) ToToolResultsStepPtrOutput() ToolResultsStepPtrOutput {
	return o
}

func (o ToolResultsStepPtrOutput) ToToolResultsStepPtrOutputWithContext(ctx context.Context) ToolResultsStepPtrOutput {
	return o
}

func (o ToolResultsStepPtrOutput) Elem() ToolResultsStepOutput {
	return o.ApplyT(func(v *ToolResultsStep) ToolResultsStep { return *v }).(ToolResultsStepOutput)
}

// Output only. A tool results execution ID.
func (o ToolResultsStepPtrOutput) ExecutionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ToolResultsStep) *string {
		if v == nil {
			return nil
		}
		return v.ExecutionId
	}).(pulumi.StringPtrOutput)
}

// Output only. A tool results history ID.
func (o ToolResultsStepPtrOutput) HistoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ToolResultsStep) *string {
		if v == nil {
			return nil
		}
		return v.HistoryId
	}).(pulumi.StringPtrOutput)
}

// Output only. The cloud project that owns the tool results step.
func (o ToolResultsStepPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ToolResultsStep) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Output only. A tool results step ID.
func (o ToolResultsStepPtrOutput) StepId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ToolResultsStep) *string {
		if v == nil {
			return nil
		}
		return v.StepId
	}).(pulumi.StringPtrOutput)
}

// Uniformly shards test cases given a total number of shards. For Instrumentation test, it will be translated to "-e numShard" "-e shardIndex" AndroidJUnitRunner arguments. With uniform sharding enabled, specifying these sharding arguments via environment_variables is invalid.
type UniformSharding struct {
	// Required. Total number of shards. When any physical devices are selected, the number must be >= 1 and <= 50. When no physical devices are selected, the number must be >= 1 and <= 500.
	NumShards *int `pulumi:"numShards"`
}

// UniformShardingInput is an input type that accepts UniformShardingArgs and UniformShardingOutput values.
// You can construct a concrete instance of `UniformShardingInput` via:
//
//          UniformShardingArgs{...}
type UniformShardingInput interface {
	pulumi.Input

	ToUniformShardingOutput() UniformShardingOutput
	ToUniformShardingOutputWithContext(context.Context) UniformShardingOutput
}

// Uniformly shards test cases given a total number of shards. For Instrumentation test, it will be translated to "-e numShard" "-e shardIndex" AndroidJUnitRunner arguments. With uniform sharding enabled, specifying these sharding arguments via environment_variables is invalid.
type UniformShardingArgs struct {
	// Required. Total number of shards. When any physical devices are selected, the number must be >= 1 and <= 50. When no physical devices are selected, the number must be >= 1 and <= 500.
	NumShards pulumi.IntPtrInput `pulumi:"numShards"`
}

func (UniformShardingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UniformSharding)(nil)).Elem()
}

func (i UniformShardingArgs) ToUniformShardingOutput() UniformShardingOutput {
	return i.ToUniformShardingOutputWithContext(context.Background())
}

func (i UniformShardingArgs) ToUniformShardingOutputWithContext(ctx context.Context) UniformShardingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UniformShardingOutput)
}

func (i UniformShardingArgs) ToUniformShardingPtrOutput() UniformShardingPtrOutput {
	return i.ToUniformShardingPtrOutputWithContext(context.Background())
}

func (i UniformShardingArgs) ToUniformShardingPtrOutputWithContext(ctx context.Context) UniformShardingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UniformShardingOutput).ToUniformShardingPtrOutputWithContext(ctx)
}

// UniformShardingPtrInput is an input type that accepts UniformShardingArgs, UniformShardingPtr and UniformShardingPtrOutput values.
// You can construct a concrete instance of `UniformShardingPtrInput` via:
//
//          UniformShardingArgs{...}
//
//  or:
//
//          nil
type UniformShardingPtrInput interface {
	pulumi.Input

	ToUniformShardingPtrOutput() UniformShardingPtrOutput
	ToUniformShardingPtrOutputWithContext(context.Context) UniformShardingPtrOutput
}

type uniformShardingPtrType UniformShardingArgs

func UniformShardingPtr(v *UniformShardingArgs) UniformShardingPtrInput {
	return (*uniformShardingPtrType)(v)
}

func (*uniformShardingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UniformSharding)(nil)).Elem()
}

func (i *uniformShardingPtrType) ToUniformShardingPtrOutput() UniformShardingPtrOutput {
	return i.ToUniformShardingPtrOutputWithContext(context.Background())
}

func (i *uniformShardingPtrType) ToUniformShardingPtrOutputWithContext(ctx context.Context) UniformShardingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UniformShardingPtrOutput)
}

// Uniformly shards test cases given a total number of shards. For Instrumentation test, it will be translated to "-e numShard" "-e shardIndex" AndroidJUnitRunner arguments. With uniform sharding enabled, specifying these sharding arguments via environment_variables is invalid.
type UniformShardingOutput struct{ *pulumi.OutputState }

func (UniformShardingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UniformSharding)(nil)).Elem()
}

func (o UniformShardingOutput) ToUniformShardingOutput() UniformShardingOutput {
	return o
}

func (o UniformShardingOutput) ToUniformShardingOutputWithContext(ctx context.Context) UniformShardingOutput {
	return o
}

func (o UniformShardingOutput) ToUniformShardingPtrOutput() UniformShardingPtrOutput {
	return o.ToUniformShardingPtrOutputWithContext(context.Background())
}

func (o UniformShardingOutput) ToUniformShardingPtrOutputWithContext(ctx context.Context) UniformShardingPtrOutput {
	return o.ApplyT(func(v UniformSharding) *UniformSharding {
		return &v
	}).(UniformShardingPtrOutput)
}

// Required. Total number of shards. When any physical devices are selected, the number must be >= 1 and <= 50. When no physical devices are selected, the number must be >= 1 and <= 500.
func (o UniformShardingOutput) NumShards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UniformSharding) *int { return v.NumShards }).(pulumi.IntPtrOutput)
}

type UniformShardingPtrOutput struct{ *pulumi.OutputState }

func (UniformShardingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UniformSharding)(nil)).Elem()
}

func (o UniformShardingPtrOutput) ToUniformShardingPtrOutput() UniformShardingPtrOutput {
	return o
}

func (o UniformShardingPtrOutput) ToUniformShardingPtrOutputWithContext(ctx context.Context) UniformShardingPtrOutput {
	return o
}

func (o UniformShardingPtrOutput) Elem() UniformShardingOutput {
	return o.ApplyT(func(v *UniformSharding) UniformSharding { return *v }).(UniformShardingOutput)
}

// Required. Total number of shards. When any physical devices are selected, the number must be >= 1 and <= 50. When no physical devices are selected, the number must be >= 1 and <= 500.
func (o UniformShardingPtrOutput) NumShards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UniformSharding) *int {
		if v == nil {
			return nil
		}
		return v.NumShards
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AccountOutput{})
	pulumi.RegisterOutputType(AccountPtrOutput{})
	pulumi.RegisterOutputType(AndroidDeviceOutput{})
	pulumi.RegisterOutputType(AndroidDevicePtrOutput{})
	pulumi.RegisterOutputType(AndroidDeviceArrayOutput{})
	pulumi.RegisterOutputType(AndroidDeviceListOutput{})
	pulumi.RegisterOutputType(AndroidDeviceListPtrOutput{})
	pulumi.RegisterOutputType(AndroidInstrumentationTestOutput{})
	pulumi.RegisterOutputType(AndroidInstrumentationTestPtrOutput{})
	pulumi.RegisterOutputType(AndroidMatrixOutput{})
	pulumi.RegisterOutputType(AndroidMatrixPtrOutput{})
	pulumi.RegisterOutputType(AndroidRoboTestOutput{})
	pulumi.RegisterOutputType(AndroidRoboTestPtrOutput{})
	pulumi.RegisterOutputType(AndroidTestLoopOutput{})
	pulumi.RegisterOutputType(AndroidTestLoopPtrOutput{})
	pulumi.RegisterOutputType(ApkOutput{})
	pulumi.RegisterOutputType(ApkArrayOutput{})
	pulumi.RegisterOutputType(AppBundleOutput{})
	pulumi.RegisterOutputType(AppBundlePtrOutput{})
	pulumi.RegisterOutputType(ClientInfoOutput{})
	pulumi.RegisterOutputType(ClientInfoPtrOutput{})
	pulumi.RegisterOutputType(ClientInfoDetailOutput{})
	pulumi.RegisterOutputType(ClientInfoDetailArrayOutput{})
	pulumi.RegisterOutputType(DeviceFileOutput{})
	pulumi.RegisterOutputType(DeviceFileArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentOutput{})
	pulumi.RegisterOutputType(EnvironmentPtrOutput{})
	pulumi.RegisterOutputType(EnvironmentMatrixOutput{})
	pulumi.RegisterOutputType(EnvironmentMatrixPtrOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableArrayOutput{})
	pulumi.RegisterOutputType(FileReferenceOutput{})
	pulumi.RegisterOutputType(FileReferencePtrOutput{})
	pulumi.RegisterOutputType(FileReferenceArrayOutput{})
	pulumi.RegisterOutputType(GoogleAutoOutput{})
	pulumi.RegisterOutputType(GoogleAutoPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudStorageOutput{})
	pulumi.RegisterOutputType(GoogleCloudStoragePtrOutput{})
	pulumi.RegisterOutputType(IosDeviceOutput{})
	pulumi.RegisterOutputType(IosDevicePtrOutput{})
	pulumi.RegisterOutputType(IosDeviceArrayOutput{})
	pulumi.RegisterOutputType(IosDeviceFileOutput{})
	pulumi.RegisterOutputType(IosDeviceFileArrayOutput{})
	pulumi.RegisterOutputType(IosDeviceListOutput{})
	pulumi.RegisterOutputType(IosDeviceListPtrOutput{})
	pulumi.RegisterOutputType(IosTestLoopOutput{})
	pulumi.RegisterOutputType(IosTestLoopPtrOutput{})
	pulumi.RegisterOutputType(IosTestSetupOutput{})
	pulumi.RegisterOutputType(IosTestSetupPtrOutput{})
	pulumi.RegisterOutputType(IosXcTestOutput{})
	pulumi.RegisterOutputType(IosXcTestPtrOutput{})
	pulumi.RegisterOutputType(LauncherActivityIntentOutput{})
	pulumi.RegisterOutputType(LauncherActivityIntentPtrOutput{})
	pulumi.RegisterOutputType(ManualShardingOutput{})
	pulumi.RegisterOutputType(ManualShardingPtrOutput{})
	pulumi.RegisterOutputType(ObbFileOutput{})
	pulumi.RegisterOutputType(ObbFilePtrOutput{})
	pulumi.RegisterOutputType(RegularFileOutput{})
	pulumi.RegisterOutputType(RegularFilePtrOutput{})
	pulumi.RegisterOutputType(ResultStorageOutput{})
	pulumi.RegisterOutputType(ResultStoragePtrOutput{})
	pulumi.RegisterOutputType(RoboDirectiveOutput{})
	pulumi.RegisterOutputType(RoboDirectiveArrayOutput{})
	pulumi.RegisterOutputType(RoboStartingIntentOutput{})
	pulumi.RegisterOutputType(RoboStartingIntentArrayOutput{})
	pulumi.RegisterOutputType(ShardOutput{})
	pulumi.RegisterOutputType(ShardPtrOutput{})
	pulumi.RegisterOutputType(ShardingOptionOutput{})
	pulumi.RegisterOutputType(ShardingOptionPtrOutput{})
	pulumi.RegisterOutputType(StartActivityIntentOutput{})
	pulumi.RegisterOutputType(StartActivityIntentPtrOutput{})
	pulumi.RegisterOutputType(SystraceSetupOutput{})
	pulumi.RegisterOutputType(SystraceSetupPtrOutput{})
	pulumi.RegisterOutputType(TestDetailsOutput{})
	pulumi.RegisterOutputType(TestDetailsPtrOutput{})
	pulumi.RegisterOutputType(TestExecutionOutput{})
	pulumi.RegisterOutputType(TestExecutionArrayOutput{})
	pulumi.RegisterOutputType(TestSetupOutput{})
	pulumi.RegisterOutputType(TestSetupPtrOutput{})
	pulumi.RegisterOutputType(TestSpecificationOutput{})
	pulumi.RegisterOutputType(TestSpecificationPtrOutput{})
	pulumi.RegisterOutputType(TestTargetsForShardOutput{})
	pulumi.RegisterOutputType(TestTargetsForShardPtrOutput{})
	pulumi.RegisterOutputType(TestTargetsForShardArrayOutput{})
	pulumi.RegisterOutputType(ToolResultsExecutionOutput{})
	pulumi.RegisterOutputType(ToolResultsExecutionPtrOutput{})
	pulumi.RegisterOutputType(ToolResultsHistoryOutput{})
	pulumi.RegisterOutputType(ToolResultsHistoryPtrOutput{})
	pulumi.RegisterOutputType(ToolResultsStepOutput{})
	pulumi.RegisterOutputType(ToolResultsStepPtrOutput{})
	pulumi.RegisterOutputType(UniformShardingOutput{})
	pulumi.RegisterOutputType(UniformShardingPtrOutput{})
}
