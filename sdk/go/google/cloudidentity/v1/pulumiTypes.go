// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Dynamic group metadata like queries and status.
type DynamicGroupMetadata struct {
	// Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
	Queries []DynamicGroupQuery `pulumi:"queries"`
	// Output only. Status of the dynamic group.
	Status *DynamicGroupStatus `pulumi:"status"`
}

// DynamicGroupMetadataInput is an input type that accepts DynamicGroupMetadataArgs and DynamicGroupMetadataOutput values.
// You can construct a concrete instance of `DynamicGroupMetadataInput` via:
//
//          DynamicGroupMetadataArgs{...}
type DynamicGroupMetadataInput interface {
	pulumi.Input

	ToDynamicGroupMetadataOutput() DynamicGroupMetadataOutput
	ToDynamicGroupMetadataOutputWithContext(context.Context) DynamicGroupMetadataOutput
}

// Dynamic group metadata like queries and status.
type DynamicGroupMetadataArgs struct {
	// Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
	Queries DynamicGroupQueryArrayInput `pulumi:"queries"`
	// Output only. Status of the dynamic group.
	Status DynamicGroupStatusPtrInput `pulumi:"status"`
}

func (DynamicGroupMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupMetadata)(nil)).Elem()
}

func (i DynamicGroupMetadataArgs) ToDynamicGroupMetadataOutput() DynamicGroupMetadataOutput {
	return i.ToDynamicGroupMetadataOutputWithContext(context.Background())
}

func (i DynamicGroupMetadataArgs) ToDynamicGroupMetadataOutputWithContext(ctx context.Context) DynamicGroupMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupMetadataOutput)
}

func (i DynamicGroupMetadataArgs) ToDynamicGroupMetadataPtrOutput() DynamicGroupMetadataPtrOutput {
	return i.ToDynamicGroupMetadataPtrOutputWithContext(context.Background())
}

func (i DynamicGroupMetadataArgs) ToDynamicGroupMetadataPtrOutputWithContext(ctx context.Context) DynamicGroupMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupMetadataOutput).ToDynamicGroupMetadataPtrOutputWithContext(ctx)
}

// DynamicGroupMetadataPtrInput is an input type that accepts DynamicGroupMetadataArgs, DynamicGroupMetadataPtr and DynamicGroupMetadataPtrOutput values.
// You can construct a concrete instance of `DynamicGroupMetadataPtrInput` via:
//
//          DynamicGroupMetadataArgs{...}
//
//  or:
//
//          nil
type DynamicGroupMetadataPtrInput interface {
	pulumi.Input

	ToDynamicGroupMetadataPtrOutput() DynamicGroupMetadataPtrOutput
	ToDynamicGroupMetadataPtrOutputWithContext(context.Context) DynamicGroupMetadataPtrOutput
}

type dynamicGroupMetadataPtrType DynamicGroupMetadataArgs

func DynamicGroupMetadataPtr(v *DynamicGroupMetadataArgs) DynamicGroupMetadataPtrInput {
	return (*dynamicGroupMetadataPtrType)(v)
}

func (*dynamicGroupMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicGroupMetadata)(nil)).Elem()
}

func (i *dynamicGroupMetadataPtrType) ToDynamicGroupMetadataPtrOutput() DynamicGroupMetadataPtrOutput {
	return i.ToDynamicGroupMetadataPtrOutputWithContext(context.Background())
}

func (i *dynamicGroupMetadataPtrType) ToDynamicGroupMetadataPtrOutputWithContext(ctx context.Context) DynamicGroupMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupMetadataPtrOutput)
}

// Dynamic group metadata like queries and status.
type DynamicGroupMetadataOutput struct{ *pulumi.OutputState }

func (DynamicGroupMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupMetadata)(nil)).Elem()
}

func (o DynamicGroupMetadataOutput) ToDynamicGroupMetadataOutput() DynamicGroupMetadataOutput {
	return o
}

func (o DynamicGroupMetadataOutput) ToDynamicGroupMetadataOutputWithContext(ctx context.Context) DynamicGroupMetadataOutput {
	return o
}

func (o DynamicGroupMetadataOutput) ToDynamicGroupMetadataPtrOutput() DynamicGroupMetadataPtrOutput {
	return o.ToDynamicGroupMetadataPtrOutputWithContext(context.Background())
}

func (o DynamicGroupMetadataOutput) ToDynamicGroupMetadataPtrOutputWithContext(ctx context.Context) DynamicGroupMetadataPtrOutput {
	return o.ApplyT(func(v DynamicGroupMetadata) *DynamicGroupMetadata {
		return &v
	}).(DynamicGroupMetadataPtrOutput)
}

// Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
func (o DynamicGroupMetadataOutput) Queries() DynamicGroupQueryArrayOutput {
	return o.ApplyT(func(v DynamicGroupMetadata) []DynamicGroupQuery { return v.Queries }).(DynamicGroupQueryArrayOutput)
}

// Output only. Status of the dynamic group.
func (o DynamicGroupMetadataOutput) Status() DynamicGroupStatusPtrOutput {
	return o.ApplyT(func(v DynamicGroupMetadata) *DynamicGroupStatus { return v.Status }).(DynamicGroupStatusPtrOutput)
}

type DynamicGroupMetadataPtrOutput struct{ *pulumi.OutputState }

func (DynamicGroupMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicGroupMetadata)(nil)).Elem()
}

func (o DynamicGroupMetadataPtrOutput) ToDynamicGroupMetadataPtrOutput() DynamicGroupMetadataPtrOutput {
	return o
}

func (o DynamicGroupMetadataPtrOutput) ToDynamicGroupMetadataPtrOutputWithContext(ctx context.Context) DynamicGroupMetadataPtrOutput {
	return o
}

func (o DynamicGroupMetadataPtrOutput) Elem() DynamicGroupMetadataOutput {
	return o.ApplyT(func(v *DynamicGroupMetadata) DynamicGroupMetadata { return *v }).(DynamicGroupMetadataOutput)
}

// Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
func (o DynamicGroupMetadataPtrOutput) Queries() DynamicGroupQueryArrayOutput {
	return o.ApplyT(func(v *DynamicGroupMetadata) []DynamicGroupQuery {
		if v == nil {
			return nil
		}
		return v.Queries
	}).(DynamicGroupQueryArrayOutput)
}

// Output only. Status of the dynamic group.
func (o DynamicGroupMetadataPtrOutput) Status() DynamicGroupStatusPtrOutput {
	return o.ApplyT(func(v *DynamicGroupMetadata) *DynamicGroupStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(DynamicGroupStatusPtrOutput)
}

// Defines a query on a resource.
type DynamicGroupQuery struct {
	// Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')`
	Query *string `pulumi:"query"`
	// Resource type for the Dynamic Group Query
	ResourceType *string `pulumi:"resourceType"`
}

// DynamicGroupQueryInput is an input type that accepts DynamicGroupQueryArgs and DynamicGroupQueryOutput values.
// You can construct a concrete instance of `DynamicGroupQueryInput` via:
//
//          DynamicGroupQueryArgs{...}
type DynamicGroupQueryInput interface {
	pulumi.Input

	ToDynamicGroupQueryOutput() DynamicGroupQueryOutput
	ToDynamicGroupQueryOutputWithContext(context.Context) DynamicGroupQueryOutput
}

// Defines a query on a resource.
type DynamicGroupQueryArgs struct {
	// Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')`
	Query pulumi.StringPtrInput `pulumi:"query"`
	// Resource type for the Dynamic Group Query
	ResourceType pulumi.StringPtrInput `pulumi:"resourceType"`
}

func (DynamicGroupQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupQuery)(nil)).Elem()
}

func (i DynamicGroupQueryArgs) ToDynamicGroupQueryOutput() DynamicGroupQueryOutput {
	return i.ToDynamicGroupQueryOutputWithContext(context.Background())
}

func (i DynamicGroupQueryArgs) ToDynamicGroupQueryOutputWithContext(ctx context.Context) DynamicGroupQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupQueryOutput)
}

// DynamicGroupQueryArrayInput is an input type that accepts DynamicGroupQueryArray and DynamicGroupQueryArrayOutput values.
// You can construct a concrete instance of `DynamicGroupQueryArrayInput` via:
//
//          DynamicGroupQueryArray{ DynamicGroupQueryArgs{...} }
type DynamicGroupQueryArrayInput interface {
	pulumi.Input

	ToDynamicGroupQueryArrayOutput() DynamicGroupQueryArrayOutput
	ToDynamicGroupQueryArrayOutputWithContext(context.Context) DynamicGroupQueryArrayOutput
}

type DynamicGroupQueryArray []DynamicGroupQueryInput

func (DynamicGroupQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicGroupQuery)(nil)).Elem()
}

func (i DynamicGroupQueryArray) ToDynamicGroupQueryArrayOutput() DynamicGroupQueryArrayOutput {
	return i.ToDynamicGroupQueryArrayOutputWithContext(context.Background())
}

func (i DynamicGroupQueryArray) ToDynamicGroupQueryArrayOutputWithContext(ctx context.Context) DynamicGroupQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupQueryArrayOutput)
}

// Defines a query on a resource.
type DynamicGroupQueryOutput struct{ *pulumi.OutputState }

func (DynamicGroupQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupQuery)(nil)).Elem()
}

func (o DynamicGroupQueryOutput) ToDynamicGroupQueryOutput() DynamicGroupQueryOutput {
	return o
}

func (o DynamicGroupQueryOutput) ToDynamicGroupQueryOutputWithContext(ctx context.Context) DynamicGroupQueryOutput {
	return o
}

// Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')`
func (o DynamicGroupQueryOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicGroupQuery) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// Resource type for the Dynamic Group Query
func (o DynamicGroupQueryOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicGroupQuery) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

type DynamicGroupQueryArrayOutput struct{ *pulumi.OutputState }

func (DynamicGroupQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicGroupQuery)(nil)).Elem()
}

func (o DynamicGroupQueryArrayOutput) ToDynamicGroupQueryArrayOutput() DynamicGroupQueryArrayOutput {
	return o
}

func (o DynamicGroupQueryArrayOutput) ToDynamicGroupQueryArrayOutputWithContext(ctx context.Context) DynamicGroupQueryArrayOutput {
	return o
}

func (o DynamicGroupQueryArrayOutput) Index(i pulumi.IntInput) DynamicGroupQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DynamicGroupQuery {
		return vs[0].([]DynamicGroupQuery)[vs[1].(int)]
	}).(DynamicGroupQueryOutput)
}

// The current status of a dynamic group along with timestamp.
type DynamicGroupStatus struct {
	// Status of the dynamic group.
	Status *string `pulumi:"status"`
	// The latest time at which the dynamic group is guaranteed to be in the given status. If status is `UP_TO_DATE`, the latest time at which the dynamic group was confirmed to be up-to-date. If status is `UPDATING_MEMBERSHIPS`, the time at which dynamic group was created.
	StatusTime *string `pulumi:"statusTime"`
}

// DynamicGroupStatusInput is an input type that accepts DynamicGroupStatusArgs and DynamicGroupStatusOutput values.
// You can construct a concrete instance of `DynamicGroupStatusInput` via:
//
//          DynamicGroupStatusArgs{...}
type DynamicGroupStatusInput interface {
	pulumi.Input

	ToDynamicGroupStatusOutput() DynamicGroupStatusOutput
	ToDynamicGroupStatusOutputWithContext(context.Context) DynamicGroupStatusOutput
}

// The current status of a dynamic group along with timestamp.
type DynamicGroupStatusArgs struct {
	// Status of the dynamic group.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The latest time at which the dynamic group is guaranteed to be in the given status. If status is `UP_TO_DATE`, the latest time at which the dynamic group was confirmed to be up-to-date. If status is `UPDATING_MEMBERSHIPS`, the time at which dynamic group was created.
	StatusTime pulumi.StringPtrInput `pulumi:"statusTime"`
}

func (DynamicGroupStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupStatus)(nil)).Elem()
}

func (i DynamicGroupStatusArgs) ToDynamicGroupStatusOutput() DynamicGroupStatusOutput {
	return i.ToDynamicGroupStatusOutputWithContext(context.Background())
}

func (i DynamicGroupStatusArgs) ToDynamicGroupStatusOutputWithContext(ctx context.Context) DynamicGroupStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupStatusOutput)
}

func (i DynamicGroupStatusArgs) ToDynamicGroupStatusPtrOutput() DynamicGroupStatusPtrOutput {
	return i.ToDynamicGroupStatusPtrOutputWithContext(context.Background())
}

func (i DynamicGroupStatusArgs) ToDynamicGroupStatusPtrOutputWithContext(ctx context.Context) DynamicGroupStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupStatusOutput).ToDynamicGroupStatusPtrOutputWithContext(ctx)
}

// DynamicGroupStatusPtrInput is an input type that accepts DynamicGroupStatusArgs, DynamicGroupStatusPtr and DynamicGroupStatusPtrOutput values.
// You can construct a concrete instance of `DynamicGroupStatusPtrInput` via:
//
//          DynamicGroupStatusArgs{...}
//
//  or:
//
//          nil
type DynamicGroupStatusPtrInput interface {
	pulumi.Input

	ToDynamicGroupStatusPtrOutput() DynamicGroupStatusPtrOutput
	ToDynamicGroupStatusPtrOutputWithContext(context.Context) DynamicGroupStatusPtrOutput
}

type dynamicGroupStatusPtrType DynamicGroupStatusArgs

func DynamicGroupStatusPtr(v *DynamicGroupStatusArgs) DynamicGroupStatusPtrInput {
	return (*dynamicGroupStatusPtrType)(v)
}

func (*dynamicGroupStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicGroupStatus)(nil)).Elem()
}

func (i *dynamicGroupStatusPtrType) ToDynamicGroupStatusPtrOutput() DynamicGroupStatusPtrOutput {
	return i.ToDynamicGroupStatusPtrOutputWithContext(context.Background())
}

func (i *dynamicGroupStatusPtrType) ToDynamicGroupStatusPtrOutputWithContext(ctx context.Context) DynamicGroupStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupStatusPtrOutput)
}

// The current status of a dynamic group along with timestamp.
type DynamicGroupStatusOutput struct{ *pulumi.OutputState }

func (DynamicGroupStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupStatus)(nil)).Elem()
}

func (o DynamicGroupStatusOutput) ToDynamicGroupStatusOutput() DynamicGroupStatusOutput {
	return o
}

func (o DynamicGroupStatusOutput) ToDynamicGroupStatusOutputWithContext(ctx context.Context) DynamicGroupStatusOutput {
	return o
}

func (o DynamicGroupStatusOutput) ToDynamicGroupStatusPtrOutput() DynamicGroupStatusPtrOutput {
	return o.ToDynamicGroupStatusPtrOutputWithContext(context.Background())
}

func (o DynamicGroupStatusOutput) ToDynamicGroupStatusPtrOutputWithContext(ctx context.Context) DynamicGroupStatusPtrOutput {
	return o.ApplyT(func(v DynamicGroupStatus) *DynamicGroupStatus {
		return &v
	}).(DynamicGroupStatusPtrOutput)
}

// Status of the dynamic group.
func (o DynamicGroupStatusOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicGroupStatus) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The latest time at which the dynamic group is guaranteed to be in the given status. If status is `UP_TO_DATE`, the latest time at which the dynamic group was confirmed to be up-to-date. If status is `UPDATING_MEMBERSHIPS`, the time at which dynamic group was created.
func (o DynamicGroupStatusOutput) StatusTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicGroupStatus) *string { return v.StatusTime }).(pulumi.StringPtrOutput)
}

type DynamicGroupStatusPtrOutput struct{ *pulumi.OutputState }

func (DynamicGroupStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicGroupStatus)(nil)).Elem()
}

func (o DynamicGroupStatusPtrOutput) ToDynamicGroupStatusPtrOutput() DynamicGroupStatusPtrOutput {
	return o
}

func (o DynamicGroupStatusPtrOutput) ToDynamicGroupStatusPtrOutputWithContext(ctx context.Context) DynamicGroupStatusPtrOutput {
	return o
}

func (o DynamicGroupStatusPtrOutput) Elem() DynamicGroupStatusOutput {
	return o.ApplyT(func(v *DynamicGroupStatus) DynamicGroupStatus { return *v }).(DynamicGroupStatusOutput)
}

// Status of the dynamic group.
func (o DynamicGroupStatusPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicGroupStatus) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The latest time at which the dynamic group is guaranteed to be in the given status. If status is `UP_TO_DATE`, the latest time at which the dynamic group was confirmed to be up-to-date. If status is `UPDATING_MEMBERSHIPS`, the time at which dynamic group was created.
func (o DynamicGroupStatusPtrOutput) StatusTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicGroupStatus) *string {
		if v == nil {
			return nil
		}
		return v.StatusTime
	}).(pulumi.StringPtrOutput)
}

// A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s.
type EntityKey struct {
	// The ID of the entity. For Google-managed entities, the `id` should be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.
	Id *string `pulumi:"id"`
	// The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}.
	Namespace *string `pulumi:"namespace"`
}

// EntityKeyInput is an input type that accepts EntityKeyArgs and EntityKeyOutput values.
// You can construct a concrete instance of `EntityKeyInput` via:
//
//          EntityKeyArgs{...}
type EntityKeyInput interface {
	pulumi.Input

	ToEntityKeyOutput() EntityKeyOutput
	ToEntityKeyOutputWithContext(context.Context) EntityKeyOutput
}

// A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s.
type EntityKeyArgs struct {
	// The ID of the entity. For Google-managed entities, the `id` should be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (EntityKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityKey)(nil)).Elem()
}

func (i EntityKeyArgs) ToEntityKeyOutput() EntityKeyOutput {
	return i.ToEntityKeyOutputWithContext(context.Background())
}

func (i EntityKeyArgs) ToEntityKeyOutputWithContext(ctx context.Context) EntityKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityKeyOutput)
}

func (i EntityKeyArgs) ToEntityKeyPtrOutput() EntityKeyPtrOutput {
	return i.ToEntityKeyPtrOutputWithContext(context.Background())
}

func (i EntityKeyArgs) ToEntityKeyPtrOutputWithContext(ctx context.Context) EntityKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityKeyOutput).ToEntityKeyPtrOutputWithContext(ctx)
}

// EntityKeyPtrInput is an input type that accepts EntityKeyArgs, EntityKeyPtr and EntityKeyPtrOutput values.
// You can construct a concrete instance of `EntityKeyPtrInput` via:
//
//          EntityKeyArgs{...}
//
//  or:
//
//          nil
type EntityKeyPtrInput interface {
	pulumi.Input

	ToEntityKeyPtrOutput() EntityKeyPtrOutput
	ToEntityKeyPtrOutputWithContext(context.Context) EntityKeyPtrOutput
}

type entityKeyPtrType EntityKeyArgs

func EntityKeyPtr(v *EntityKeyArgs) EntityKeyPtrInput {
	return (*entityKeyPtrType)(v)
}

func (*entityKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityKey)(nil)).Elem()
}

func (i *entityKeyPtrType) ToEntityKeyPtrOutput() EntityKeyPtrOutput {
	return i.ToEntityKeyPtrOutputWithContext(context.Background())
}

func (i *entityKeyPtrType) ToEntityKeyPtrOutputWithContext(ctx context.Context) EntityKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityKeyPtrOutput)
}

// A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s.
type EntityKeyOutput struct{ *pulumi.OutputState }

func (EntityKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityKey)(nil)).Elem()
}

func (o EntityKeyOutput) ToEntityKeyOutput() EntityKeyOutput {
	return o
}

func (o EntityKeyOutput) ToEntityKeyOutputWithContext(ctx context.Context) EntityKeyOutput {
	return o
}

func (o EntityKeyOutput) ToEntityKeyPtrOutput() EntityKeyPtrOutput {
	return o.ToEntityKeyPtrOutputWithContext(context.Background())
}

func (o EntityKeyOutput) ToEntityKeyPtrOutputWithContext(ctx context.Context) EntityKeyPtrOutput {
	return o.ApplyT(func(v EntityKey) *EntityKey {
		return &v
	}).(EntityKeyPtrOutput)
}

// The ID of the entity. For Google-managed entities, the `id` should be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.
func (o EntityKeyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityKey) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}.
func (o EntityKeyOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityKey) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type EntityKeyPtrOutput struct{ *pulumi.OutputState }

func (EntityKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityKey)(nil)).Elem()
}

func (o EntityKeyPtrOutput) ToEntityKeyPtrOutput() EntityKeyPtrOutput {
	return o
}

func (o EntityKeyPtrOutput) ToEntityKeyPtrOutputWithContext(ctx context.Context) EntityKeyPtrOutput {
	return o
}

func (o EntityKeyPtrOutput) Elem() EntityKeyOutput {
	return o.ApplyT(func(v *EntityKey) EntityKey { return *v }).(EntityKeyOutput)
}

// The ID of the entity. For Google-managed entities, the `id` should be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.
func (o EntityKeyPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityKey) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}.
func (o EntityKeyPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityKey) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The `MembershipRole` expiry details.
type ExpiryDetail struct {
	// The time at which the `MembershipRole` will expire.
	ExpireTime *string `pulumi:"expireTime"`
}

// ExpiryDetailInput is an input type that accepts ExpiryDetailArgs and ExpiryDetailOutput values.
// You can construct a concrete instance of `ExpiryDetailInput` via:
//
//          ExpiryDetailArgs{...}
type ExpiryDetailInput interface {
	pulumi.Input

	ToExpiryDetailOutput() ExpiryDetailOutput
	ToExpiryDetailOutputWithContext(context.Context) ExpiryDetailOutput
}

// The `MembershipRole` expiry details.
type ExpiryDetailArgs struct {
	// The time at which the `MembershipRole` will expire.
	ExpireTime pulumi.StringPtrInput `pulumi:"expireTime"`
}

func (ExpiryDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpiryDetail)(nil)).Elem()
}

func (i ExpiryDetailArgs) ToExpiryDetailOutput() ExpiryDetailOutput {
	return i.ToExpiryDetailOutputWithContext(context.Background())
}

func (i ExpiryDetailArgs) ToExpiryDetailOutputWithContext(ctx context.Context) ExpiryDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpiryDetailOutput)
}

func (i ExpiryDetailArgs) ToExpiryDetailPtrOutput() ExpiryDetailPtrOutput {
	return i.ToExpiryDetailPtrOutputWithContext(context.Background())
}

func (i ExpiryDetailArgs) ToExpiryDetailPtrOutputWithContext(ctx context.Context) ExpiryDetailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpiryDetailOutput).ToExpiryDetailPtrOutputWithContext(ctx)
}

// ExpiryDetailPtrInput is an input type that accepts ExpiryDetailArgs, ExpiryDetailPtr and ExpiryDetailPtrOutput values.
// You can construct a concrete instance of `ExpiryDetailPtrInput` via:
//
//          ExpiryDetailArgs{...}
//
//  or:
//
//          nil
type ExpiryDetailPtrInput interface {
	pulumi.Input

	ToExpiryDetailPtrOutput() ExpiryDetailPtrOutput
	ToExpiryDetailPtrOutputWithContext(context.Context) ExpiryDetailPtrOutput
}

type expiryDetailPtrType ExpiryDetailArgs

func ExpiryDetailPtr(v *ExpiryDetailArgs) ExpiryDetailPtrInput {
	return (*expiryDetailPtrType)(v)
}

func (*expiryDetailPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpiryDetail)(nil)).Elem()
}

func (i *expiryDetailPtrType) ToExpiryDetailPtrOutput() ExpiryDetailPtrOutput {
	return i.ToExpiryDetailPtrOutputWithContext(context.Background())
}

func (i *expiryDetailPtrType) ToExpiryDetailPtrOutputWithContext(ctx context.Context) ExpiryDetailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpiryDetailPtrOutput)
}

// The `MembershipRole` expiry details.
type ExpiryDetailOutput struct{ *pulumi.OutputState }

func (ExpiryDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpiryDetail)(nil)).Elem()
}

func (o ExpiryDetailOutput) ToExpiryDetailOutput() ExpiryDetailOutput {
	return o
}

func (o ExpiryDetailOutput) ToExpiryDetailOutputWithContext(ctx context.Context) ExpiryDetailOutput {
	return o
}

func (o ExpiryDetailOutput) ToExpiryDetailPtrOutput() ExpiryDetailPtrOutput {
	return o.ToExpiryDetailPtrOutputWithContext(context.Background())
}

func (o ExpiryDetailOutput) ToExpiryDetailPtrOutputWithContext(ctx context.Context) ExpiryDetailPtrOutput {
	return o.ApplyT(func(v ExpiryDetail) *ExpiryDetail {
		return &v
	}).(ExpiryDetailPtrOutput)
}

// The time at which the `MembershipRole` will expire.
func (o ExpiryDetailOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpiryDetail) *string { return v.ExpireTime }).(pulumi.StringPtrOutput)
}

type ExpiryDetailPtrOutput struct{ *pulumi.OutputState }

func (ExpiryDetailPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpiryDetail)(nil)).Elem()
}

func (o ExpiryDetailPtrOutput) ToExpiryDetailPtrOutput() ExpiryDetailPtrOutput {
	return o
}

func (o ExpiryDetailPtrOutput) ToExpiryDetailPtrOutputWithContext(ctx context.Context) ExpiryDetailPtrOutput {
	return o
}

func (o ExpiryDetailPtrOutput) Elem() ExpiryDetailOutput {
	return o.ApplyT(func(v *ExpiryDetail) ExpiryDetail { return *v }).(ExpiryDetailOutput)
}

// The time at which the `MembershipRole` will expire.
func (o ExpiryDetailPtrOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpiryDetail) *string {
		if v == nil {
			return nil
		}
		return v.ExpireTime
	}).(pulumi.StringPtrOutput)
}

// Resource representing the Android specific attributes of a Device.
type GoogleAppsCloudidentityDevicesV1AndroidAttributes struct {
	// Whether applications from unknown sources can be installed on device.
	EnabledUnknownSources *bool `pulumi:"enabledUnknownSources"`
	// Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.
	OwnerProfileAccount *bool `pulumi:"ownerProfileAccount"`
	// Ownership privileges on device.
	OwnershipPrivilege *string `pulumi:"ownershipPrivilege"`
	// Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the "Enforce Work Profile" policy.
	SupportsWorkProfile *bool `pulumi:"supportsWorkProfile"`
}

// GoogleAppsCloudidentityDevicesV1AndroidAttributesInput is an input type that accepts GoogleAppsCloudidentityDevicesV1AndroidAttributesArgs and GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput values.
// You can construct a concrete instance of `GoogleAppsCloudidentityDevicesV1AndroidAttributesInput` via:
//
//          GoogleAppsCloudidentityDevicesV1AndroidAttributesArgs{...}
type GoogleAppsCloudidentityDevicesV1AndroidAttributesInput interface {
	pulumi.Input

	ToGoogleAppsCloudidentityDevicesV1AndroidAttributesOutput() GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput
	ToGoogleAppsCloudidentityDevicesV1AndroidAttributesOutputWithContext(context.Context) GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput
}

// Resource representing the Android specific attributes of a Device.
type GoogleAppsCloudidentityDevicesV1AndroidAttributesArgs struct {
	// Whether applications from unknown sources can be installed on device.
	EnabledUnknownSources pulumi.BoolPtrInput `pulumi:"enabledUnknownSources"`
	// Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.
	OwnerProfileAccount pulumi.BoolPtrInput `pulumi:"ownerProfileAccount"`
	// Ownership privileges on device.
	OwnershipPrivilege pulumi.StringPtrInput `pulumi:"ownershipPrivilege"`
	// Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the "Enforce Work Profile" policy.
	SupportsWorkProfile pulumi.BoolPtrInput `pulumi:"supportsWorkProfile"`
}

func (GoogleAppsCloudidentityDevicesV1AndroidAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAppsCloudidentityDevicesV1AndroidAttributes)(nil)).Elem()
}

func (i GoogleAppsCloudidentityDevicesV1AndroidAttributesArgs) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesOutput() GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput {
	return i.ToGoogleAppsCloudidentityDevicesV1AndroidAttributesOutputWithContext(context.Background())
}

func (i GoogleAppsCloudidentityDevicesV1AndroidAttributesArgs) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesOutputWithContext(ctx context.Context) GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput)
}

func (i GoogleAppsCloudidentityDevicesV1AndroidAttributesArgs) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput() GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput {
	return i.ToGoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutputWithContext(context.Background())
}

func (i GoogleAppsCloudidentityDevicesV1AndroidAttributesArgs) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutputWithContext(ctx context.Context) GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput).ToGoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutputWithContext(ctx)
}

// GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrInput is an input type that accepts GoogleAppsCloudidentityDevicesV1AndroidAttributesArgs, GoogleAppsCloudidentityDevicesV1AndroidAttributesPtr and GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput values.
// You can construct a concrete instance of `GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrInput` via:
//
//          GoogleAppsCloudidentityDevicesV1AndroidAttributesArgs{...}
//
//  or:
//
//          nil
type GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrInput interface {
	pulumi.Input

	ToGoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput() GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput
	ToGoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutputWithContext(context.Context) GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput
}

type googleAppsCloudidentityDevicesV1AndroidAttributesPtrType GoogleAppsCloudidentityDevicesV1AndroidAttributesArgs

func GoogleAppsCloudidentityDevicesV1AndroidAttributesPtr(v *GoogleAppsCloudidentityDevicesV1AndroidAttributesArgs) GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrInput {
	return (*googleAppsCloudidentityDevicesV1AndroidAttributesPtrType)(v)
}

func (*googleAppsCloudidentityDevicesV1AndroidAttributesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleAppsCloudidentityDevicesV1AndroidAttributes)(nil)).Elem()
}

func (i *googleAppsCloudidentityDevicesV1AndroidAttributesPtrType) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput() GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput {
	return i.ToGoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutputWithContext(context.Background())
}

func (i *googleAppsCloudidentityDevicesV1AndroidAttributesPtrType) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutputWithContext(ctx context.Context) GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput)
}

// Resource representing the Android specific attributes of a Device.
type GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput struct{ *pulumi.OutputState }

func (GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAppsCloudidentityDevicesV1AndroidAttributes)(nil)).Elem()
}

func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesOutput() GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput {
	return o
}

func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesOutputWithContext(ctx context.Context) GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput {
	return o
}

func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput() GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput {
	return o.ToGoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutputWithContext(context.Background())
}

func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutputWithContext(ctx context.Context) GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput {
	return o.ApplyT(func(v GoogleAppsCloudidentityDevicesV1AndroidAttributes) *GoogleAppsCloudidentityDevicesV1AndroidAttributes {
		return &v
	}).(GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput)
}

// Whether applications from unknown sources can be installed on device.
func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput) EnabledUnknownSources() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleAppsCloudidentityDevicesV1AndroidAttributes) *bool { return v.EnabledUnknownSources }).(pulumi.BoolPtrOutput)
}

// Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.
func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput) OwnerProfileAccount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleAppsCloudidentityDevicesV1AndroidAttributes) *bool { return v.OwnerProfileAccount }).(pulumi.BoolPtrOutput)
}

// Ownership privileges on device.
func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput) OwnershipPrivilege() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleAppsCloudidentityDevicesV1AndroidAttributes) *string { return v.OwnershipPrivilege }).(pulumi.StringPtrOutput)
}

// Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the "Enforce Work Profile" policy.
func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput) SupportsWorkProfile() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleAppsCloudidentityDevicesV1AndroidAttributes) *bool { return v.SupportsWorkProfile }).(pulumi.BoolPtrOutput)
}

type GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput struct{ *pulumi.OutputState }

func (GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleAppsCloudidentityDevicesV1AndroidAttributes)(nil)).Elem()
}

func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput() GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput {
	return o
}

func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutputWithContext(ctx context.Context) GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput {
	return o
}

func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput) Elem() GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput {
	return o.ApplyT(func(v *GoogleAppsCloudidentityDevicesV1AndroidAttributes) GoogleAppsCloudidentityDevicesV1AndroidAttributes {
		return *v
	}).(GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput)
}

// Whether applications from unknown sources can be installed on device.
func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput) EnabledUnknownSources() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleAppsCloudidentityDevicesV1AndroidAttributes) *bool {
		if v == nil {
			return nil
		}
		return v.EnabledUnknownSources
	}).(pulumi.BoolPtrOutput)
}

// Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.
func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput) OwnerProfileAccount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleAppsCloudidentityDevicesV1AndroidAttributes) *bool {
		if v == nil {
			return nil
		}
		return v.OwnerProfileAccount
	}).(pulumi.BoolPtrOutput)
}

// Ownership privileges on device.
func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput) OwnershipPrivilege() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleAppsCloudidentityDevicesV1AndroidAttributes) *string {
		if v == nil {
			return nil
		}
		return v.OwnershipPrivilege
	}).(pulumi.StringPtrOutput)
}

// Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the "Enforce Work Profile" policy.
func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput) SupportsWorkProfile() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleAppsCloudidentityDevicesV1AndroidAttributes) *bool {
		if v == nil {
			return nil
		}
		return v.SupportsWorkProfile
	}).(pulumi.BoolPtrOutput)
}

// A membership role within the Cloud Identity Groups API. A `MembershipRole` defines the privileges granted to a `Membership`.
type MembershipRole struct {
	// The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value.
	ExpiryDetail *ExpiryDetail `pulumi:"expiryDetail"`
	// The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`.
	Name *string `pulumi:"name"`
}

// MembershipRoleInput is an input type that accepts MembershipRoleArgs and MembershipRoleOutput values.
// You can construct a concrete instance of `MembershipRoleInput` via:
//
//          MembershipRoleArgs{...}
type MembershipRoleInput interface {
	pulumi.Input

	ToMembershipRoleOutput() MembershipRoleOutput
	ToMembershipRoleOutputWithContext(context.Context) MembershipRoleOutput
}

// A membership role within the Cloud Identity Groups API. A `MembershipRole` defines the privileges granted to a `Membership`.
type MembershipRoleArgs struct {
	// The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value.
	ExpiryDetail ExpiryDetailPtrInput `pulumi:"expiryDetail"`
	// The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (MembershipRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipRole)(nil)).Elem()
}

func (i MembershipRoleArgs) ToMembershipRoleOutput() MembershipRoleOutput {
	return i.ToMembershipRoleOutputWithContext(context.Background())
}

func (i MembershipRoleArgs) ToMembershipRoleOutputWithContext(ctx context.Context) MembershipRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipRoleOutput)
}

// MembershipRoleArrayInput is an input type that accepts MembershipRoleArray and MembershipRoleArrayOutput values.
// You can construct a concrete instance of `MembershipRoleArrayInput` via:
//
//          MembershipRoleArray{ MembershipRoleArgs{...} }
type MembershipRoleArrayInput interface {
	pulumi.Input

	ToMembershipRoleArrayOutput() MembershipRoleArrayOutput
	ToMembershipRoleArrayOutputWithContext(context.Context) MembershipRoleArrayOutput
}

type MembershipRoleArray []MembershipRoleInput

func (MembershipRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MembershipRole)(nil)).Elem()
}

func (i MembershipRoleArray) ToMembershipRoleArrayOutput() MembershipRoleArrayOutput {
	return i.ToMembershipRoleArrayOutputWithContext(context.Background())
}

func (i MembershipRoleArray) ToMembershipRoleArrayOutputWithContext(ctx context.Context) MembershipRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipRoleArrayOutput)
}

// A membership role within the Cloud Identity Groups API. A `MembershipRole` defines the privileges granted to a `Membership`.
type MembershipRoleOutput struct{ *pulumi.OutputState }

func (MembershipRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipRole)(nil)).Elem()
}

func (o MembershipRoleOutput) ToMembershipRoleOutput() MembershipRoleOutput {
	return o
}

func (o MembershipRoleOutput) ToMembershipRoleOutputWithContext(ctx context.Context) MembershipRoleOutput {
	return o
}

// The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value.
func (o MembershipRoleOutput) ExpiryDetail() ExpiryDetailPtrOutput {
	return o.ApplyT(func(v MembershipRole) *ExpiryDetail { return v.ExpiryDetail }).(ExpiryDetailPtrOutput)
}

// The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`.
func (o MembershipRoleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MembershipRole) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MembershipRoleArrayOutput struct{ *pulumi.OutputState }

func (MembershipRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MembershipRole)(nil)).Elem()
}

func (o MembershipRoleArrayOutput) ToMembershipRoleArrayOutput() MembershipRoleArrayOutput {
	return o
}

func (o MembershipRoleArrayOutput) ToMembershipRoleArrayOutputWithContext(ctx context.Context) MembershipRoleArrayOutput {
	return o
}

func (o MembershipRoleArrayOutput) Index(i pulumi.IntInput) MembershipRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MembershipRole {
		return vs[0].([]MembershipRole)[vs[1].(int)]
	}).(MembershipRoleOutput)
}

func init() {
	pulumi.RegisterOutputType(DynamicGroupMetadataOutput{})
	pulumi.RegisterOutputType(DynamicGroupMetadataPtrOutput{})
	pulumi.RegisterOutputType(DynamicGroupQueryOutput{})
	pulumi.RegisterOutputType(DynamicGroupQueryArrayOutput{})
	pulumi.RegisterOutputType(DynamicGroupStatusOutput{})
	pulumi.RegisterOutputType(DynamicGroupStatusPtrOutput{})
	pulumi.RegisterOutputType(EntityKeyOutput{})
	pulumi.RegisterOutputType(EntityKeyPtrOutput{})
	pulumi.RegisterOutputType(ExpiryDetailOutput{})
	pulumi.RegisterOutputType(ExpiryDetailPtrOutput{})
	pulumi.RegisterOutputType(GoogleAppsCloudidentityDevicesV1AndroidAttributesOutput{})
	pulumi.RegisterOutputType(GoogleAppsCloudidentityDevicesV1AndroidAttributesPtrOutput{})
	pulumi.RegisterOutputType(MembershipRoleOutput{})
	pulumi.RegisterOutputType(MembershipRoleArrayOutput{})
}
