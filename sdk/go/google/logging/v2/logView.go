// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views.
type LogView struct {
	pulumi.CustomResourceState
}

// NewLogView registers a new resource with the given unique name, arguments, and options.
func NewLogView(ctx *pulumi.Context,
	name string, args *LogViewArgs, opts ...pulumi.ResourceOption) (*LogView, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	var resource LogView
	err := ctx.RegisterResource("google-cloud:logging/v2:LogView", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogView gets an existing LogView resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogViewState, opts ...pulumi.ResourceOption) (*LogView, error) {
	var resource LogView
	err := ctx.ReadResource("google-cloud:logging/v2:LogView", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogView resources.
type logViewState struct {
}

type LogViewState struct {
}

func (LogViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*logViewState)(nil)).Elem()
}

type logViewArgs struct {
	// Output only. The creation timestamp of the view.
	CreateTime *string `pulumi:"createTime"`
	// Describes this view.
	Description *string `pulumi:"description"`
	// Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: originating project/folder/organization/billing account. resource type log id Example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
	Filter *string `pulumi:"filter"`
	// The resource name of the view. For example "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view
	Name *string `pulumi:"name"`
	// Required. The bucket in which to create the view "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example: "projects/my-logging-project/locations/my-location/buckets/my-bucket"
	Parent string `pulumi:"parent"`
	// Output only. The last update timestamp of the view.
	UpdateTime *string `pulumi:"updateTime"`
	// Required. The id to use for this view.
	ViewId *string `pulumi:"viewId"`
}

// The set of arguments for constructing a LogView resource.
type LogViewArgs struct {
	// Output only. The creation timestamp of the view.
	CreateTime pulumi.StringPtrInput
	// Describes this view.
	Description pulumi.StringPtrInput
	// Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: originating project/folder/organization/billing account. resource type log id Example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
	Filter pulumi.StringPtrInput
	// The resource name of the view. For example "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view
	Name pulumi.StringPtrInput
	// Required. The bucket in which to create the view "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]" Example: "projects/my-logging-project/locations/my-location/buckets/my-bucket"
	Parent pulumi.StringInput
	// Output only. The last update timestamp of the view.
	UpdateTime pulumi.StringPtrInput
	// Required. The id to use for this view.
	ViewId pulumi.StringPtrInput
}

func (LogViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logViewArgs)(nil)).Elem()
}

type LogViewInput interface {
	pulumi.Input

	ToLogViewOutput() LogViewOutput
	ToLogViewOutputWithContext(ctx context.Context) LogViewOutput
}

func (*LogView) ElementType() reflect.Type {
	return reflect.TypeOf((*LogView)(nil))
}

func (i *LogView) ToLogViewOutput() LogViewOutput {
	return i.ToLogViewOutputWithContext(context.Background())
}

func (i *LogView) ToLogViewOutputWithContext(ctx context.Context) LogViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogViewOutput)
}

type LogViewOutput struct {
	*pulumi.OutputState
}

func (LogViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogView)(nil))
}

func (o LogViewOutput) ToLogViewOutput() LogViewOutput {
	return o
}

func (o LogViewOutput) ToLogViewOutputWithContext(ctx context.Context) LogViewOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LogViewOutput{})
}
