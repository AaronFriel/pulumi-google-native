// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a bucket that can be used to store log entries. Once a bucket has been created, the region cannot be changed.
type LogBucket struct {
	pulumi.CustomResourceState
}

// NewLogBucket registers a new resource with the given unique name, arguments, and options.
func NewLogBucket(ctx *pulumi.Context,
	name string, args *LogBucketArgs, opts ...pulumi.ResourceOption) (*LogBucket, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	var resource LogBucket
	err := ctx.RegisterResource("google-cloud:logging/v2:LogBucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogBucket gets an existing LogBucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogBucket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogBucketState, opts ...pulumi.ResourceOption) (*LogBucket, error) {
	var resource LogBucket
	err := ctx.ReadResource("google-cloud:logging/v2:LogBucket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogBucket resources.
type logBucketState struct {
}

type LogBucketState struct {
}

func (LogBucketState) ElementType() reflect.Type {
	return reflect.TypeOf((*logBucketState)(nil)).Elem()
}

type logBucketArgs struct {
	// Required. A client-assigned identifier such as "my-bucket". Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods.
	BucketId *string `pulumi:"bucketId"`
	// Output only. The creation timestamp of the bucket. This is not set for any of the default buckets.
	CreateTime *string `pulumi:"createTime"`
	// Describes this bucket.
	Description *string `pulumi:"description"`
	// Output only. The bucket lifecycle state.
	LifecycleState *string `pulumi:"lifecycleState"`
	// Whether the bucket has been locked. The retention period on a locked bucket may not be changed. Locked buckets may only be deleted if they are empty.
	Locked *bool `pulumi:"locked"`
	// Output only. The resource name of the bucket. For example: "projects/my-project-id/locations/my-location/buckets/my-bucket-id" The supported locations are: global, us-central1, us-east1, us-west1, asia-east1, europe-west1.For the location of global it is unspecified where logs are actually stored. Once a bucket has been created, the location can not be changed.
	Name *string `pulumi:"name"`
	// Required. The resource in which to create the bucket: "projects/[PROJECT_ID]/locations/[LOCATION_ID]" Example: "projects/my-logging-project/locations/global"
	Parent string `pulumi:"parent"`
	// Logs will be retained by default for this amount of time, after which they will automatically be deleted. The minimum retention period is 1 day. If this value is set to zero at bucket creation time, the default time of 30 days will be used.
	RetentionDays *int `pulumi:"retentionDays"`
	// Output only. The last update timestamp of the bucket.
	UpdateTime *string `pulumi:"updateTime"`
}

// The set of arguments for constructing a LogBucket resource.
type LogBucketArgs struct {
	// Required. A client-assigned identifier such as "my-bucket". Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods.
	BucketId pulumi.StringPtrInput
	// Output only. The creation timestamp of the bucket. This is not set for any of the default buckets.
	CreateTime pulumi.StringPtrInput
	// Describes this bucket.
	Description pulumi.StringPtrInput
	// Output only. The bucket lifecycle state.
	LifecycleState pulumi.StringPtrInput
	// Whether the bucket has been locked. The retention period on a locked bucket may not be changed. Locked buckets may only be deleted if they are empty.
	Locked pulumi.BoolPtrInput
	// Output only. The resource name of the bucket. For example: "projects/my-project-id/locations/my-location/buckets/my-bucket-id" The supported locations are: global, us-central1, us-east1, us-west1, asia-east1, europe-west1.For the location of global it is unspecified where logs are actually stored. Once a bucket has been created, the location can not be changed.
	Name pulumi.StringPtrInput
	// Required. The resource in which to create the bucket: "projects/[PROJECT_ID]/locations/[LOCATION_ID]" Example: "projects/my-logging-project/locations/global"
	Parent pulumi.StringInput
	// Logs will be retained by default for this amount of time, after which they will automatically be deleted. The minimum retention period is 1 day. If this value is set to zero at bucket creation time, the default time of 30 days will be used.
	RetentionDays pulumi.IntPtrInput
	// Output only. The last update timestamp of the bucket.
	UpdateTime pulumi.StringPtrInput
}

func (LogBucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logBucketArgs)(nil)).Elem()
}

type LogBucketInput interface {
	pulumi.Input

	ToLogBucketOutput() LogBucketOutput
	ToLogBucketOutputWithContext(ctx context.Context) LogBucketOutput
}

func (*LogBucket) ElementType() reflect.Type {
	return reflect.TypeOf((*LogBucket)(nil))
}

func (i *LogBucket) ToLogBucketOutput() LogBucketOutput {
	return i.ToLogBucketOutputWithContext(context.Background())
}

func (i *LogBucket) ToLogBucketOutputWithContext(ctx context.Context) LogBucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogBucketOutput)
}

type LogBucketOutput struct {
	*pulumi.OutputState
}

func (LogBucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogBucket)(nil))
}

func (o LogBucketOutput) ToLogBucketOutput() LogBucketOutput {
	return o
}

func (o LogBucketOutput) ToLogBucketOutputWithContext(ctx context.Context) LogBucketOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LogBucketOutput{})
}
