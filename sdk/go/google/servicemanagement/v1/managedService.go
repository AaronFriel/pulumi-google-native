// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new managed service. A managed service is immutable, and is subject to mandatory 30-day data retention. You cannot move a service or recreate it within 30 days after deletion. One producer project can own no more than 500 services. For security and reliability purposes, a production service should be hosted in a dedicated producer project. Operation
type ManagedService struct {
	pulumi.CustomResourceState
}

// NewManagedService registers a new resource with the given unique name, arguments, and options.
func NewManagedService(ctx *pulumi.Context,
	name string, args *ManagedServiceArgs, opts ...pulumi.ResourceOption) (*ManagedService, error) {
	if args == nil {
		args = &ManagedServiceArgs{}
	}

	var resource ManagedService
	err := ctx.RegisterResource("google-cloud:servicemanagement/v1:ManagedService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedService gets an existing ManagedService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedServiceState, opts ...pulumi.ResourceOption) (*ManagedService, error) {
	var resource ManagedService
	err := ctx.ReadResource("google-cloud:servicemanagement/v1:ManagedService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedService resources.
type managedServiceState struct {
}

type ManagedServiceState struct {
}

func (ManagedServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedServiceState)(nil)).Elem()
}

type managedServiceArgs struct {
	// ID of the project that produces and owns this service.
	ProducerProjectId *string `pulumi:"producerProjectId"`
	// The name of the service. See the [overview](/service-management/overview) for naming requirements.
	ServiceName *string `pulumi:"serviceName"`
}

// The set of arguments for constructing a ManagedService resource.
type ManagedServiceArgs struct {
	// ID of the project that produces and owns this service.
	ProducerProjectId pulumi.StringPtrInput
	// The name of the service. See the [overview](/service-management/overview) for naming requirements.
	ServiceName pulumi.StringPtrInput
}

func (ManagedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedServiceArgs)(nil)).Elem()
}

type ManagedServiceInput interface {
	pulumi.Input

	ToManagedServiceOutput() ManagedServiceOutput
	ToManagedServiceOutputWithContext(ctx context.Context) ManagedServiceOutput
}

func (*ManagedService) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedService)(nil))
}

func (i *ManagedService) ToManagedServiceOutput() ManagedServiceOutput {
	return i.ToManagedServiceOutputWithContext(context.Background())
}

func (i *ManagedService) ToManagedServiceOutputWithContext(ctx context.Context) ManagedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceOutput)
}

type ManagedServiceOutput struct {
	*pulumi.OutputState
}

func (ManagedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedService)(nil))
}

func (o ManagedServiceOutput) ToManagedServiceOutput() ManagedServiceOutput {
	return o
}

func (o ManagedServiceOutput) ToManagedServiceOutputWithContext(ctx context.Context) ManagedServiceOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ManagedServiceOutput{})
}
