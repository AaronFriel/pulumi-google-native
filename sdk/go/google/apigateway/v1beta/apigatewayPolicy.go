// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
type ApigatewayPolicy struct {
	pulumi.CustomResourceState
}

// NewApigatewayPolicy registers a new resource with the given unique name, arguments, and options.
func NewApigatewayPolicy(ctx *pulumi.Context,
	name string, args *ApigatewayPolicyArgs, opts ...pulumi.ResourceOption) (*ApigatewayPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Resource == nil {
		return nil, errors.New("invalid value for required argument 'Resource'")
	}
	var resource ApigatewayPolicy
	err := ctx.RegisterResource("google-cloud:apigateway/v1beta:ApigatewayPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApigatewayPolicy gets an existing ApigatewayPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApigatewayPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApigatewayPolicyState, opts ...pulumi.ResourceOption) (*ApigatewayPolicy, error) {
	var resource ApigatewayPolicy
	err := ctx.ReadResource("google-cloud:apigateway/v1beta:ApigatewayPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApigatewayPolicy resources.
type apigatewayPolicyState struct {
}

type ApigatewayPolicyState struct {
}

func (ApigatewayPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*apigatewayPolicyState)(nil)).Elem()
}

type apigatewayPolicyArgs struct {
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy *ApigatewayPolicyType `pulumi:"policy"`
	// REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.
	Resource string `pulumi:"resource"`
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask *string `pulumi:"updateMask"`
}

// The set of arguments for constructing a ApigatewayPolicy resource.
type ApigatewayPolicyArgs struct {
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy ApigatewayPolicyTypePtrInput
	// REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.
	Resource pulumi.StringInput
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask pulumi.StringPtrInput
}

func (ApigatewayPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apigatewayPolicyArgs)(nil)).Elem()
}

type ApigatewayPolicyInput interface {
	pulumi.Input

	ToApigatewayPolicyOutput() ApigatewayPolicyOutput
	ToApigatewayPolicyOutputWithContext(ctx context.Context) ApigatewayPolicyOutput
}

func (*ApigatewayPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*ApigatewayPolicy)(nil))
}

func (i *ApigatewayPolicy) ToApigatewayPolicyOutput() ApigatewayPolicyOutput {
	return i.ToApigatewayPolicyOutputWithContext(context.Background())
}

func (i *ApigatewayPolicy) ToApigatewayPolicyOutputWithContext(ctx context.Context) ApigatewayPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigatewayPolicyOutput)
}

type ApigatewayPolicyOutput struct {
	*pulumi.OutputState
}

func (ApigatewayPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApigatewayPolicy)(nil))
}

func (o ApigatewayPolicyOutput) ToApigatewayPolicyOutput() ApigatewayPolicyOutput {
	return o
}

func (o ApigatewayPolicyOutput) ToApigatewayPolicyOutputWithContext(ctx context.Context) ApigatewayPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ApigatewayPolicyOutput{})
}
