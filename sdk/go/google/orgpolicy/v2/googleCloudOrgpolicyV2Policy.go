// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a Policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the policy already exists on the given Cloud resource.
type GoogleCloudOrgpolicyV2Policy struct {
	pulumi.CustomResourceState
}

// NewGoogleCloudOrgpolicyV2Policy registers a new resource with the given unique name, arguments, and options.
func NewGoogleCloudOrgpolicyV2Policy(ctx *pulumi.Context,
	name string, args *GoogleCloudOrgpolicyV2PolicyArgs, opts ...pulumi.ResourceOption) (*GoogleCloudOrgpolicyV2Policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	var resource GoogleCloudOrgpolicyV2Policy
	err := ctx.RegisterResource("google-cloud:orgpolicy/v2:GoogleCloudOrgpolicyV2Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGoogleCloudOrgpolicyV2Policy gets an existing GoogleCloudOrgpolicyV2Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGoogleCloudOrgpolicyV2Policy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GoogleCloudOrgpolicyV2PolicyState, opts ...pulumi.ResourceOption) (*GoogleCloudOrgpolicyV2Policy, error) {
	var resource GoogleCloudOrgpolicyV2Policy
	err := ctx.ReadResource("google-cloud:orgpolicy/v2:GoogleCloudOrgpolicyV2Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GoogleCloudOrgpolicyV2Policy resources.
type googleCloudOrgpolicyV2PolicyState struct {
}

type GoogleCloudOrgpolicyV2PolicyState struct {
}

func (GoogleCloudOrgpolicyV2PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*googleCloudOrgpolicyV2PolicyState)(nil)).Elem()
}

type googleCloudOrgpolicyV2PolicyArgs struct {
	// Immutable. The resource name of the Policy. Must be one of the following forms, where constraint_name is the name of the constraint which this Policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, "projects/123/policies/compute.disableSerialPortAccess". Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number.
	Name *string `pulumi:"name"`
	// Required. The Cloud resource that will parent the new Policy. Must be in one of the following forms: * `projects/{project_number}` * `projects/{project_id}` * `folders/{folder_id}` * `organizations/{organization_id}`
	Parent string `pulumi:"parent"`
	// Basic information about the Organization Policy.
	Spec *GoogleCloudOrgpolicyV2PolicySpec `pulumi:"spec"`
}

// The set of arguments for constructing a GoogleCloudOrgpolicyV2Policy resource.
type GoogleCloudOrgpolicyV2PolicyArgs struct {
	// Immutable. The resource name of the Policy. Must be one of the following forms, where constraint_name is the name of the constraint which this Policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, "projects/123/policies/compute.disableSerialPortAccess". Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number.
	Name pulumi.StringPtrInput
	// Required. The Cloud resource that will parent the new Policy. Must be in one of the following forms: * `projects/{project_number}` * `projects/{project_id}` * `folders/{folder_id}` * `organizations/{organization_id}`
	Parent pulumi.StringInput
	// Basic information about the Organization Policy.
	Spec GoogleCloudOrgpolicyV2PolicySpecPtrInput
}

func (GoogleCloudOrgpolicyV2PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*googleCloudOrgpolicyV2PolicyArgs)(nil)).Elem()
}

type GoogleCloudOrgpolicyV2PolicyInput interface {
	pulumi.Input

	ToGoogleCloudOrgpolicyV2PolicyOutput() GoogleCloudOrgpolicyV2PolicyOutput
	ToGoogleCloudOrgpolicyV2PolicyOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicyOutput
}

func (*GoogleCloudOrgpolicyV2Policy) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudOrgpolicyV2Policy)(nil))
}

func (i *GoogleCloudOrgpolicyV2Policy) ToGoogleCloudOrgpolicyV2PolicyOutput() GoogleCloudOrgpolicyV2PolicyOutput {
	return i.ToGoogleCloudOrgpolicyV2PolicyOutputWithContext(context.Background())
}

func (i *GoogleCloudOrgpolicyV2Policy) ToGoogleCloudOrgpolicyV2PolicyOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudOrgpolicyV2PolicyOutput)
}

type GoogleCloudOrgpolicyV2PolicyOutput struct {
	*pulumi.OutputState
}

func (GoogleCloudOrgpolicyV2PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudOrgpolicyV2Policy)(nil))
}

func (o GoogleCloudOrgpolicyV2PolicyOutput) ToGoogleCloudOrgpolicyV2PolicyOutput() GoogleCloudOrgpolicyV2PolicyOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2PolicyOutput) ToGoogleCloudOrgpolicyV2PolicyOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GoogleCloudOrgpolicyV2PolicyOutput{})
}
