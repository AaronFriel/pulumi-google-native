// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1b3

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new Template with TemplateVersion. Requires project_id(projects) and template display_name(catalogTemplates). The template display_name is set by the user.
type TemplateVersion struct {
	pulumi.CustomResourceState
}

// NewTemplateVersion registers a new resource with the given unique name, arguments, and options.
func NewTemplateVersion(ctx *pulumi.Context,
	name string, args *TemplateVersionArgs, opts ...pulumi.ResourceOption) (*TemplateVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	var resource TemplateVersion
	err := ctx.RegisterResource("google-cloud:dataflow/v1b3:TemplateVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTemplateVersion gets an existing TemplateVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTemplateVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TemplateVersionState, opts ...pulumi.ResourceOption) (*TemplateVersion, error) {
	var resource TemplateVersion
	err := ctx.ReadResource("google-cloud:dataflow/v1b3:TemplateVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TemplateVersion resources.
type templateVersionState struct {
}

type TemplateVersionState struct {
}

func (TemplateVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*templateVersionState)(nil)).Elem()
}

type templateVersionArgs struct {
	// The parent project and template that the TemplateVersion will be created under. Create using project_id(pid1) and display_name(tid1). Format: projects/{pid1}/catalogTemplates/{tid1}
	Parent string `pulumi:"parent"`
	// The TemplateVersion object to create.
	TemplateVersion *TemplateVersionType `pulumi:"templateVersion"`
}

// The set of arguments for constructing a TemplateVersion resource.
type TemplateVersionArgs struct {
	// The parent project and template that the TemplateVersion will be created under. Create using project_id(pid1) and display_name(tid1). Format: projects/{pid1}/catalogTemplates/{tid1}
	Parent pulumi.StringInput
	// The TemplateVersion object to create.
	TemplateVersion TemplateVersionTypePtrInput
}

func (TemplateVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*templateVersionArgs)(nil)).Elem()
}

type TemplateVersionInput interface {
	pulumi.Input

	ToTemplateVersionOutput() TemplateVersionOutput
	ToTemplateVersionOutputWithContext(ctx context.Context) TemplateVersionOutput
}

func (*TemplateVersion) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVersion)(nil))
}

func (i *TemplateVersion) ToTemplateVersionOutput() TemplateVersionOutput {
	return i.ToTemplateVersionOutputWithContext(context.Background())
}

func (i *TemplateVersion) ToTemplateVersionOutputWithContext(ctx context.Context) TemplateVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVersionOutput)
}

type TemplateVersionOutput struct {
	*pulumi.OutputState
}

func (TemplateVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVersion)(nil))
}

func (o TemplateVersionOutput) ToTemplateVersionOutput() TemplateVersionOutput {
	return o
}

func (o TemplateVersionOutput) ToTemplateVersionOutputWithContext(ctx context.Context) TemplateVersionOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TemplateVersionOutput{})
}
