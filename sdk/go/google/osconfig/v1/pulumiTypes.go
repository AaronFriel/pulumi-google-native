// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Apt patching is completed by executing `apt-get update && apt-get upgrade`. Additional options can be set to control how this is executed.
type AptSettings struct {
	// List of packages to exclude from update. These packages will be excluded
	Excludes []string `pulumi:"excludes"`
	// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
	ExclusivePackages []string `pulumi:"exclusivePackages"`
	// By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
	Type *string `pulumi:"type"`
}

// AptSettingsInput is an input type that accepts AptSettingsArgs and AptSettingsOutput values.
// You can construct a concrete instance of `AptSettingsInput` via:
//
//          AptSettingsArgs{...}
type AptSettingsInput interface {
	pulumi.Input

	ToAptSettingsOutput() AptSettingsOutput
	ToAptSettingsOutputWithContext(context.Context) AptSettingsOutput
}

// Apt patching is completed by executing `apt-get update && apt-get upgrade`. Additional options can be set to control how this is executed.
type AptSettingsArgs struct {
	// List of packages to exclude from update. These packages will be excluded
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
	ExclusivePackages pulumi.StringArrayInput `pulumi:"exclusivePackages"`
	// By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (AptSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AptSettings)(nil)).Elem()
}

func (i AptSettingsArgs) ToAptSettingsOutput() AptSettingsOutput {
	return i.ToAptSettingsOutputWithContext(context.Background())
}

func (i AptSettingsArgs) ToAptSettingsOutputWithContext(ctx context.Context) AptSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AptSettingsOutput)
}

func (i AptSettingsArgs) ToAptSettingsPtrOutput() AptSettingsPtrOutput {
	return i.ToAptSettingsPtrOutputWithContext(context.Background())
}

func (i AptSettingsArgs) ToAptSettingsPtrOutputWithContext(ctx context.Context) AptSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AptSettingsOutput).ToAptSettingsPtrOutputWithContext(ctx)
}

// AptSettingsPtrInput is an input type that accepts AptSettingsArgs, AptSettingsPtr and AptSettingsPtrOutput values.
// You can construct a concrete instance of `AptSettingsPtrInput` via:
//
//          AptSettingsArgs{...}
//
//  or:
//
//          nil
type AptSettingsPtrInput interface {
	pulumi.Input

	ToAptSettingsPtrOutput() AptSettingsPtrOutput
	ToAptSettingsPtrOutputWithContext(context.Context) AptSettingsPtrOutput
}

type aptSettingsPtrType AptSettingsArgs

func AptSettingsPtr(v *AptSettingsArgs) AptSettingsPtrInput {
	return (*aptSettingsPtrType)(v)
}

func (*aptSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AptSettings)(nil)).Elem()
}

func (i *aptSettingsPtrType) ToAptSettingsPtrOutput() AptSettingsPtrOutput {
	return i.ToAptSettingsPtrOutputWithContext(context.Background())
}

func (i *aptSettingsPtrType) ToAptSettingsPtrOutputWithContext(ctx context.Context) AptSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AptSettingsPtrOutput)
}

// Apt patching is completed by executing `apt-get update && apt-get upgrade`. Additional options can be set to control how this is executed.
type AptSettingsOutput struct{ *pulumi.OutputState }

func (AptSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AptSettings)(nil)).Elem()
}

func (o AptSettingsOutput) ToAptSettingsOutput() AptSettingsOutput {
	return o
}

func (o AptSettingsOutput) ToAptSettingsOutputWithContext(ctx context.Context) AptSettingsOutput {
	return o
}

func (o AptSettingsOutput) ToAptSettingsPtrOutput() AptSettingsPtrOutput {
	return o.ToAptSettingsPtrOutputWithContext(context.Background())
}

func (o AptSettingsOutput) ToAptSettingsPtrOutputWithContext(ctx context.Context) AptSettingsPtrOutput {
	return o.ApplyT(func(v AptSettings) *AptSettings {
		return &v
	}).(AptSettingsPtrOutput)
}

// List of packages to exclude from update. These packages will be excluded
func (o AptSettingsOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AptSettings) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
func (o AptSettingsOutput) ExclusivePackages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AptSettings) []string { return v.ExclusivePackages }).(pulumi.StringArrayOutput)
}

// By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
func (o AptSettingsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AptSettings) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type AptSettingsPtrOutput struct{ *pulumi.OutputState }

func (AptSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AptSettings)(nil)).Elem()
}

func (o AptSettingsPtrOutput) ToAptSettingsPtrOutput() AptSettingsPtrOutput {
	return o
}

func (o AptSettingsPtrOutput) ToAptSettingsPtrOutputWithContext(ctx context.Context) AptSettingsPtrOutput {
	return o
}

func (o AptSettingsPtrOutput) Elem() AptSettingsOutput {
	return o.ApplyT(func(v *AptSettings) AptSettings { return *v }).(AptSettingsOutput)
}

// List of packages to exclude from update. These packages will be excluded
func (o AptSettingsPtrOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AptSettings) []string {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(pulumi.StringArrayOutput)
}

// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
func (o AptSettingsPtrOutput) ExclusivePackages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AptSettings) []string {
		if v == nil {
			return nil
		}
		return v.ExclusivePackages
	}).(pulumi.StringArrayOutput)
}

// By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
func (o AptSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AptSettings) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// A step that runs an executable for a PatchJob.
type ExecStep struct {
	// The ExecStepConfig for all Linux VMs targeted by the PatchJob.
	LinuxExecStepConfig *ExecStepConfig `pulumi:"linuxExecStepConfig"`
	// The ExecStepConfig for all Windows VMs targeted by the PatchJob.
	WindowsExecStepConfig *ExecStepConfig `pulumi:"windowsExecStepConfig"`
}

// ExecStepInput is an input type that accepts ExecStepArgs and ExecStepOutput values.
// You can construct a concrete instance of `ExecStepInput` via:
//
//          ExecStepArgs{...}
type ExecStepInput interface {
	pulumi.Input

	ToExecStepOutput() ExecStepOutput
	ToExecStepOutputWithContext(context.Context) ExecStepOutput
}

// A step that runs an executable for a PatchJob.
type ExecStepArgs struct {
	// The ExecStepConfig for all Linux VMs targeted by the PatchJob.
	LinuxExecStepConfig ExecStepConfigPtrInput `pulumi:"linuxExecStepConfig"`
	// The ExecStepConfig for all Windows VMs targeted by the PatchJob.
	WindowsExecStepConfig ExecStepConfigPtrInput `pulumi:"windowsExecStepConfig"`
}

func (ExecStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecStep)(nil)).Elem()
}

func (i ExecStepArgs) ToExecStepOutput() ExecStepOutput {
	return i.ToExecStepOutputWithContext(context.Background())
}

func (i ExecStepArgs) ToExecStepOutputWithContext(ctx context.Context) ExecStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecStepOutput)
}

func (i ExecStepArgs) ToExecStepPtrOutput() ExecStepPtrOutput {
	return i.ToExecStepPtrOutputWithContext(context.Background())
}

func (i ExecStepArgs) ToExecStepPtrOutputWithContext(ctx context.Context) ExecStepPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecStepOutput).ToExecStepPtrOutputWithContext(ctx)
}

// ExecStepPtrInput is an input type that accepts ExecStepArgs, ExecStepPtr and ExecStepPtrOutput values.
// You can construct a concrete instance of `ExecStepPtrInput` via:
//
//          ExecStepArgs{...}
//
//  or:
//
//          nil
type ExecStepPtrInput interface {
	pulumi.Input

	ToExecStepPtrOutput() ExecStepPtrOutput
	ToExecStepPtrOutputWithContext(context.Context) ExecStepPtrOutput
}

type execStepPtrType ExecStepArgs

func ExecStepPtr(v *ExecStepArgs) ExecStepPtrInput {
	return (*execStepPtrType)(v)
}

func (*execStepPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecStep)(nil)).Elem()
}

func (i *execStepPtrType) ToExecStepPtrOutput() ExecStepPtrOutput {
	return i.ToExecStepPtrOutputWithContext(context.Background())
}

func (i *execStepPtrType) ToExecStepPtrOutputWithContext(ctx context.Context) ExecStepPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecStepPtrOutput)
}

// A step that runs an executable for a PatchJob.
type ExecStepOutput struct{ *pulumi.OutputState }

func (ExecStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecStep)(nil)).Elem()
}

func (o ExecStepOutput) ToExecStepOutput() ExecStepOutput {
	return o
}

func (o ExecStepOutput) ToExecStepOutputWithContext(ctx context.Context) ExecStepOutput {
	return o
}

func (o ExecStepOutput) ToExecStepPtrOutput() ExecStepPtrOutput {
	return o.ToExecStepPtrOutputWithContext(context.Background())
}

func (o ExecStepOutput) ToExecStepPtrOutputWithContext(ctx context.Context) ExecStepPtrOutput {
	return o.ApplyT(func(v ExecStep) *ExecStep {
		return &v
	}).(ExecStepPtrOutput)
}

// The ExecStepConfig for all Linux VMs targeted by the PatchJob.
func (o ExecStepOutput) LinuxExecStepConfig() ExecStepConfigPtrOutput {
	return o.ApplyT(func(v ExecStep) *ExecStepConfig { return v.LinuxExecStepConfig }).(ExecStepConfigPtrOutput)
}

// The ExecStepConfig for all Windows VMs targeted by the PatchJob.
func (o ExecStepOutput) WindowsExecStepConfig() ExecStepConfigPtrOutput {
	return o.ApplyT(func(v ExecStep) *ExecStepConfig { return v.WindowsExecStepConfig }).(ExecStepConfigPtrOutput)
}

type ExecStepPtrOutput struct{ *pulumi.OutputState }

func (ExecStepPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecStep)(nil)).Elem()
}

func (o ExecStepPtrOutput) ToExecStepPtrOutput() ExecStepPtrOutput {
	return o
}

func (o ExecStepPtrOutput) ToExecStepPtrOutputWithContext(ctx context.Context) ExecStepPtrOutput {
	return o
}

func (o ExecStepPtrOutput) Elem() ExecStepOutput {
	return o.ApplyT(func(v *ExecStep) ExecStep { return *v }).(ExecStepOutput)
}

// The ExecStepConfig for all Linux VMs targeted by the PatchJob.
func (o ExecStepPtrOutput) LinuxExecStepConfig() ExecStepConfigPtrOutput {
	return o.ApplyT(func(v *ExecStep) *ExecStepConfig {
		if v == nil {
			return nil
		}
		return v.LinuxExecStepConfig
	}).(ExecStepConfigPtrOutput)
}

// The ExecStepConfig for all Windows VMs targeted by the PatchJob.
func (o ExecStepPtrOutput) WindowsExecStepConfig() ExecStepConfigPtrOutput {
	return o.ApplyT(func(v *ExecStep) *ExecStepConfig {
		if v == nil {
			return nil
		}
		return v.WindowsExecStepConfig
	}).(ExecStepConfigPtrOutput)
}

// Common configurations for an ExecStep.
type ExecStepConfig struct {
	// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
	AllowedSuccessCodes []int `pulumi:"allowedSuccessCodes"`
	// A Cloud Storage object containing the executable.
	GcsObject *GcsObject `pulumi:"gcsObject"`
	// The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
	Interpreter *string `pulumi:"interpreter"`
	// An absolute path to the executable on the VM.
	LocalPath *string `pulumi:"localPath"`
}

// ExecStepConfigInput is an input type that accepts ExecStepConfigArgs and ExecStepConfigOutput values.
// You can construct a concrete instance of `ExecStepConfigInput` via:
//
//          ExecStepConfigArgs{...}
type ExecStepConfigInput interface {
	pulumi.Input

	ToExecStepConfigOutput() ExecStepConfigOutput
	ToExecStepConfigOutputWithContext(context.Context) ExecStepConfigOutput
}

// Common configurations for an ExecStep.
type ExecStepConfigArgs struct {
	// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
	AllowedSuccessCodes pulumi.IntArrayInput `pulumi:"allowedSuccessCodes"`
	// A Cloud Storage object containing the executable.
	GcsObject GcsObjectPtrInput `pulumi:"gcsObject"`
	// The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
	Interpreter pulumi.StringPtrInput `pulumi:"interpreter"`
	// An absolute path to the executable on the VM.
	LocalPath pulumi.StringPtrInput `pulumi:"localPath"`
}

func (ExecStepConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecStepConfig)(nil)).Elem()
}

func (i ExecStepConfigArgs) ToExecStepConfigOutput() ExecStepConfigOutput {
	return i.ToExecStepConfigOutputWithContext(context.Background())
}

func (i ExecStepConfigArgs) ToExecStepConfigOutputWithContext(ctx context.Context) ExecStepConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecStepConfigOutput)
}

func (i ExecStepConfigArgs) ToExecStepConfigPtrOutput() ExecStepConfigPtrOutput {
	return i.ToExecStepConfigPtrOutputWithContext(context.Background())
}

func (i ExecStepConfigArgs) ToExecStepConfigPtrOutputWithContext(ctx context.Context) ExecStepConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecStepConfigOutput).ToExecStepConfigPtrOutputWithContext(ctx)
}

// ExecStepConfigPtrInput is an input type that accepts ExecStepConfigArgs, ExecStepConfigPtr and ExecStepConfigPtrOutput values.
// You can construct a concrete instance of `ExecStepConfigPtrInput` via:
//
//          ExecStepConfigArgs{...}
//
//  or:
//
//          nil
type ExecStepConfigPtrInput interface {
	pulumi.Input

	ToExecStepConfigPtrOutput() ExecStepConfigPtrOutput
	ToExecStepConfigPtrOutputWithContext(context.Context) ExecStepConfigPtrOutput
}

type execStepConfigPtrType ExecStepConfigArgs

func ExecStepConfigPtr(v *ExecStepConfigArgs) ExecStepConfigPtrInput {
	return (*execStepConfigPtrType)(v)
}

func (*execStepConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecStepConfig)(nil)).Elem()
}

func (i *execStepConfigPtrType) ToExecStepConfigPtrOutput() ExecStepConfigPtrOutput {
	return i.ToExecStepConfigPtrOutputWithContext(context.Background())
}

func (i *execStepConfigPtrType) ToExecStepConfigPtrOutputWithContext(ctx context.Context) ExecStepConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecStepConfigPtrOutput)
}

// Common configurations for an ExecStep.
type ExecStepConfigOutput struct{ *pulumi.OutputState }

func (ExecStepConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecStepConfig)(nil)).Elem()
}

func (o ExecStepConfigOutput) ToExecStepConfigOutput() ExecStepConfigOutput {
	return o
}

func (o ExecStepConfigOutput) ToExecStepConfigOutputWithContext(ctx context.Context) ExecStepConfigOutput {
	return o
}

func (o ExecStepConfigOutput) ToExecStepConfigPtrOutput() ExecStepConfigPtrOutput {
	return o.ToExecStepConfigPtrOutputWithContext(context.Background())
}

func (o ExecStepConfigOutput) ToExecStepConfigPtrOutputWithContext(ctx context.Context) ExecStepConfigPtrOutput {
	return o.ApplyT(func(v ExecStepConfig) *ExecStepConfig {
		return &v
	}).(ExecStepConfigPtrOutput)
}

// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
func (o ExecStepConfigOutput) AllowedSuccessCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ExecStepConfig) []int { return v.AllowedSuccessCodes }).(pulumi.IntArrayOutput)
}

// A Cloud Storage object containing the executable.
func (o ExecStepConfigOutput) GcsObject() GcsObjectPtrOutput {
	return o.ApplyT(func(v ExecStepConfig) *GcsObject { return v.GcsObject }).(GcsObjectPtrOutput)
}

// The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
func (o ExecStepConfigOutput) Interpreter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecStepConfig) *string { return v.Interpreter }).(pulumi.StringPtrOutput)
}

// An absolute path to the executable on the VM.
func (o ExecStepConfigOutput) LocalPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecStepConfig) *string { return v.LocalPath }).(pulumi.StringPtrOutput)
}

type ExecStepConfigPtrOutput struct{ *pulumi.OutputState }

func (ExecStepConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecStepConfig)(nil)).Elem()
}

func (o ExecStepConfigPtrOutput) ToExecStepConfigPtrOutput() ExecStepConfigPtrOutput {
	return o
}

func (o ExecStepConfigPtrOutput) ToExecStepConfigPtrOutputWithContext(ctx context.Context) ExecStepConfigPtrOutput {
	return o
}

func (o ExecStepConfigPtrOutput) Elem() ExecStepConfigOutput {
	return o.ApplyT(func(v *ExecStepConfig) ExecStepConfig { return *v }).(ExecStepConfigOutput)
}

// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
func (o ExecStepConfigPtrOutput) AllowedSuccessCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ExecStepConfig) []int {
		if v == nil {
			return nil
		}
		return v.AllowedSuccessCodes
	}).(pulumi.IntArrayOutput)
}

// A Cloud Storage object containing the executable.
func (o ExecStepConfigPtrOutput) GcsObject() GcsObjectPtrOutput {
	return o.ApplyT(func(v *ExecStepConfig) *GcsObject {
		if v == nil {
			return nil
		}
		return v.GcsObject
	}).(GcsObjectPtrOutput)
}

// The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
func (o ExecStepConfigPtrOutput) Interpreter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecStepConfig) *string {
		if v == nil {
			return nil
		}
		return v.Interpreter
	}).(pulumi.StringPtrOutput)
}

// An absolute path to the executable on the VM.
func (o ExecStepConfigPtrOutput) LocalPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecStepConfig) *string {
		if v == nil {
			return nil
		}
		return v.LocalPath
	}).(pulumi.StringPtrOutput)
}

// Message encapsulating a value that can be either absolute ("fixed") or relative ("percent") to a value.
type FixedOrPercent struct {
	// Specifies a fixed value.
	Fixed *int `pulumi:"fixed"`
	// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
	Percent *int `pulumi:"percent"`
}

// FixedOrPercentInput is an input type that accepts FixedOrPercentArgs and FixedOrPercentOutput values.
// You can construct a concrete instance of `FixedOrPercentInput` via:
//
//          FixedOrPercentArgs{...}
type FixedOrPercentInput interface {
	pulumi.Input

	ToFixedOrPercentOutput() FixedOrPercentOutput
	ToFixedOrPercentOutputWithContext(context.Context) FixedOrPercentOutput
}

// Message encapsulating a value that can be either absolute ("fixed") or relative ("percent") to a value.
type FixedOrPercentArgs struct {
	// Specifies a fixed value.
	Fixed pulumi.IntPtrInput `pulumi:"fixed"`
	// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
	Percent pulumi.IntPtrInput `pulumi:"percent"`
}

func (FixedOrPercentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedOrPercent)(nil)).Elem()
}

func (i FixedOrPercentArgs) ToFixedOrPercentOutput() FixedOrPercentOutput {
	return i.ToFixedOrPercentOutputWithContext(context.Background())
}

func (i FixedOrPercentArgs) ToFixedOrPercentOutputWithContext(ctx context.Context) FixedOrPercentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentOutput)
}

func (i FixedOrPercentArgs) ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput {
	return i.ToFixedOrPercentPtrOutputWithContext(context.Background())
}

func (i FixedOrPercentArgs) ToFixedOrPercentPtrOutputWithContext(ctx context.Context) FixedOrPercentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentOutput).ToFixedOrPercentPtrOutputWithContext(ctx)
}

// FixedOrPercentPtrInput is an input type that accepts FixedOrPercentArgs, FixedOrPercentPtr and FixedOrPercentPtrOutput values.
// You can construct a concrete instance of `FixedOrPercentPtrInput` via:
//
//          FixedOrPercentArgs{...}
//
//  or:
//
//          nil
type FixedOrPercentPtrInput interface {
	pulumi.Input

	ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput
	ToFixedOrPercentPtrOutputWithContext(context.Context) FixedOrPercentPtrOutput
}

type fixedOrPercentPtrType FixedOrPercentArgs

func FixedOrPercentPtr(v *FixedOrPercentArgs) FixedOrPercentPtrInput {
	return (*fixedOrPercentPtrType)(v)
}

func (*fixedOrPercentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FixedOrPercent)(nil)).Elem()
}

func (i *fixedOrPercentPtrType) ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput {
	return i.ToFixedOrPercentPtrOutputWithContext(context.Background())
}

func (i *fixedOrPercentPtrType) ToFixedOrPercentPtrOutputWithContext(ctx context.Context) FixedOrPercentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentPtrOutput)
}

// Message encapsulating a value that can be either absolute ("fixed") or relative ("percent") to a value.
type FixedOrPercentOutput struct{ *pulumi.OutputState }

func (FixedOrPercentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedOrPercent)(nil)).Elem()
}

func (o FixedOrPercentOutput) ToFixedOrPercentOutput() FixedOrPercentOutput {
	return o
}

func (o FixedOrPercentOutput) ToFixedOrPercentOutputWithContext(ctx context.Context) FixedOrPercentOutput {
	return o
}

func (o FixedOrPercentOutput) ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput {
	return o.ToFixedOrPercentPtrOutputWithContext(context.Background())
}

func (o FixedOrPercentOutput) ToFixedOrPercentPtrOutputWithContext(ctx context.Context) FixedOrPercentPtrOutput {
	return o.ApplyT(func(v FixedOrPercent) *FixedOrPercent {
		return &v
	}).(FixedOrPercentPtrOutput)
}

// Specifies a fixed value.
func (o FixedOrPercentOutput) Fixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FixedOrPercent) *int { return v.Fixed }).(pulumi.IntPtrOutput)
}

// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
func (o FixedOrPercentOutput) Percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FixedOrPercent) *int { return v.Percent }).(pulumi.IntPtrOutput)
}

type FixedOrPercentPtrOutput struct{ *pulumi.OutputState }

func (FixedOrPercentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FixedOrPercent)(nil)).Elem()
}

func (o FixedOrPercentPtrOutput) ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput {
	return o
}

func (o FixedOrPercentPtrOutput) ToFixedOrPercentPtrOutputWithContext(ctx context.Context) FixedOrPercentPtrOutput {
	return o
}

func (o FixedOrPercentPtrOutput) Elem() FixedOrPercentOutput {
	return o.ApplyT(func(v *FixedOrPercent) FixedOrPercent { return *v }).(FixedOrPercentOutput)
}

// Specifies a fixed value.
func (o FixedOrPercentPtrOutput) Fixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedOrPercent) *int {
		if v == nil {
			return nil
		}
		return v.Fixed
	}).(pulumi.IntPtrOutput)
}

// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
func (o FixedOrPercentPtrOutput) Percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedOrPercent) *int {
		if v == nil {
			return nil
		}
		return v.Percent
	}).(pulumi.IntPtrOutput)
}

// Cloud Storage object representation.
type GcsObject struct {
	// Required. Bucket of the Cloud Storage object.
	Bucket *string `pulumi:"bucket"`
	// Required. Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
	GenerationNumber *string `pulumi:"generationNumber"`
	// Required. Name of the Cloud Storage object.
	Object *string `pulumi:"object"`
}

// GcsObjectInput is an input type that accepts GcsObjectArgs and GcsObjectOutput values.
// You can construct a concrete instance of `GcsObjectInput` via:
//
//          GcsObjectArgs{...}
type GcsObjectInput interface {
	pulumi.Input

	ToGcsObjectOutput() GcsObjectOutput
	ToGcsObjectOutputWithContext(context.Context) GcsObjectOutput
}

// Cloud Storage object representation.
type GcsObjectArgs struct {
	// Required. Bucket of the Cloud Storage object.
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// Required. Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
	GenerationNumber pulumi.StringPtrInput `pulumi:"generationNumber"`
	// Required. Name of the Cloud Storage object.
	Object pulumi.StringPtrInput `pulumi:"object"`
}

func (GcsObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsObject)(nil)).Elem()
}

func (i GcsObjectArgs) ToGcsObjectOutput() GcsObjectOutput {
	return i.ToGcsObjectOutputWithContext(context.Background())
}

func (i GcsObjectArgs) ToGcsObjectOutputWithContext(ctx context.Context) GcsObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsObjectOutput)
}

func (i GcsObjectArgs) ToGcsObjectPtrOutput() GcsObjectPtrOutput {
	return i.ToGcsObjectPtrOutputWithContext(context.Background())
}

func (i GcsObjectArgs) ToGcsObjectPtrOutputWithContext(ctx context.Context) GcsObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsObjectOutput).ToGcsObjectPtrOutputWithContext(ctx)
}

// GcsObjectPtrInput is an input type that accepts GcsObjectArgs, GcsObjectPtr and GcsObjectPtrOutput values.
// You can construct a concrete instance of `GcsObjectPtrInput` via:
//
//          GcsObjectArgs{...}
//
//  or:
//
//          nil
type GcsObjectPtrInput interface {
	pulumi.Input

	ToGcsObjectPtrOutput() GcsObjectPtrOutput
	ToGcsObjectPtrOutputWithContext(context.Context) GcsObjectPtrOutput
}

type gcsObjectPtrType GcsObjectArgs

func GcsObjectPtr(v *GcsObjectArgs) GcsObjectPtrInput {
	return (*gcsObjectPtrType)(v)
}

func (*gcsObjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsObject)(nil)).Elem()
}

func (i *gcsObjectPtrType) ToGcsObjectPtrOutput() GcsObjectPtrOutput {
	return i.ToGcsObjectPtrOutputWithContext(context.Background())
}

func (i *gcsObjectPtrType) ToGcsObjectPtrOutputWithContext(ctx context.Context) GcsObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsObjectPtrOutput)
}

// Cloud Storage object representation.
type GcsObjectOutput struct{ *pulumi.OutputState }

func (GcsObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsObject)(nil)).Elem()
}

func (o GcsObjectOutput) ToGcsObjectOutput() GcsObjectOutput {
	return o
}

func (o GcsObjectOutput) ToGcsObjectOutputWithContext(ctx context.Context) GcsObjectOutput {
	return o
}

func (o GcsObjectOutput) ToGcsObjectPtrOutput() GcsObjectPtrOutput {
	return o.ToGcsObjectPtrOutputWithContext(context.Background())
}

func (o GcsObjectOutput) ToGcsObjectPtrOutputWithContext(ctx context.Context) GcsObjectPtrOutput {
	return o.ApplyT(func(v GcsObject) *GcsObject {
		return &v
	}).(GcsObjectPtrOutput)
}

// Required. Bucket of the Cloud Storage object.
func (o GcsObjectOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsObject) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// Required. Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
func (o GcsObjectOutput) GenerationNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsObject) *string { return v.GenerationNumber }).(pulumi.StringPtrOutput)
}

// Required. Name of the Cloud Storage object.
func (o GcsObjectOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsObject) *string { return v.Object }).(pulumi.StringPtrOutput)
}

type GcsObjectPtrOutput struct{ *pulumi.OutputState }

func (GcsObjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsObject)(nil)).Elem()
}

func (o GcsObjectPtrOutput) ToGcsObjectPtrOutput() GcsObjectPtrOutput {
	return o
}

func (o GcsObjectPtrOutput) ToGcsObjectPtrOutputWithContext(ctx context.Context) GcsObjectPtrOutput {
	return o
}

func (o GcsObjectPtrOutput) Elem() GcsObjectOutput {
	return o.ApplyT(func(v *GcsObject) GcsObject { return *v }).(GcsObjectOutput)
}

// Required. Bucket of the Cloud Storage object.
func (o GcsObjectPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsObject) *string {
		if v == nil {
			return nil
		}
		return v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Required. Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
func (o GcsObjectPtrOutput) GenerationNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsObject) *string {
		if v == nil {
			return nil
		}
		return v.GenerationNumber
	}).(pulumi.StringPtrOutput)
}

// Required. Name of the Cloud Storage object.
func (o GcsObjectPtrOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsObject) *string {
		if v == nil {
			return nil
		}
		return v.Object
	}).(pulumi.StringPtrOutput)
}

// Googet patching is performed by running `googet update`.
type GooSettings struct {
}

// GooSettingsInput is an input type that accepts GooSettingsArgs and GooSettingsOutput values.
// You can construct a concrete instance of `GooSettingsInput` via:
//
//          GooSettingsArgs{...}
type GooSettingsInput interface {
	pulumi.Input

	ToGooSettingsOutput() GooSettingsOutput
	ToGooSettingsOutputWithContext(context.Context) GooSettingsOutput
}

// Googet patching is performed by running `googet update`.
type GooSettingsArgs struct {
}

func (GooSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooSettings)(nil)).Elem()
}

func (i GooSettingsArgs) ToGooSettingsOutput() GooSettingsOutput {
	return i.ToGooSettingsOutputWithContext(context.Background())
}

func (i GooSettingsArgs) ToGooSettingsOutputWithContext(ctx context.Context) GooSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooSettingsOutput)
}

func (i GooSettingsArgs) ToGooSettingsPtrOutput() GooSettingsPtrOutput {
	return i.ToGooSettingsPtrOutputWithContext(context.Background())
}

func (i GooSettingsArgs) ToGooSettingsPtrOutputWithContext(ctx context.Context) GooSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooSettingsOutput).ToGooSettingsPtrOutputWithContext(ctx)
}

// GooSettingsPtrInput is an input type that accepts GooSettingsArgs, GooSettingsPtr and GooSettingsPtrOutput values.
// You can construct a concrete instance of `GooSettingsPtrInput` via:
//
//          GooSettingsArgs{...}
//
//  or:
//
//          nil
type GooSettingsPtrInput interface {
	pulumi.Input

	ToGooSettingsPtrOutput() GooSettingsPtrOutput
	ToGooSettingsPtrOutputWithContext(context.Context) GooSettingsPtrOutput
}

type gooSettingsPtrType GooSettingsArgs

func GooSettingsPtr(v *GooSettingsArgs) GooSettingsPtrInput {
	return (*gooSettingsPtrType)(v)
}

func (*gooSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooSettings)(nil)).Elem()
}

func (i *gooSettingsPtrType) ToGooSettingsPtrOutput() GooSettingsPtrOutput {
	return i.ToGooSettingsPtrOutputWithContext(context.Background())
}

func (i *gooSettingsPtrType) ToGooSettingsPtrOutputWithContext(ctx context.Context) GooSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooSettingsPtrOutput)
}

// Googet patching is performed by running `googet update`.
type GooSettingsOutput struct{ *pulumi.OutputState }

func (GooSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooSettings)(nil)).Elem()
}

func (o GooSettingsOutput) ToGooSettingsOutput() GooSettingsOutput {
	return o
}

func (o GooSettingsOutput) ToGooSettingsOutputWithContext(ctx context.Context) GooSettingsOutput {
	return o
}

func (o GooSettingsOutput) ToGooSettingsPtrOutput() GooSettingsPtrOutput {
	return o.ToGooSettingsPtrOutputWithContext(context.Background())
}

func (o GooSettingsOutput) ToGooSettingsPtrOutputWithContext(ctx context.Context) GooSettingsPtrOutput {
	return o.ApplyT(func(v GooSettings) *GooSettings {
		return &v
	}).(GooSettingsPtrOutput)
}

type GooSettingsPtrOutput struct{ *pulumi.OutputState }

func (GooSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooSettings)(nil)).Elem()
}

func (o GooSettingsPtrOutput) ToGooSettingsPtrOutput() GooSettingsPtrOutput {
	return o
}

func (o GooSettingsPtrOutput) ToGooSettingsPtrOutputWithContext(ctx context.Context) GooSettingsPtrOutput {
	return o
}

func (o GooSettingsPtrOutput) Elem() GooSettingsOutput {
	return o.ApplyT(func(v *GooSettings) GooSettings { return *v }).(GooSettingsOutput)
}

// Represents a monthly schedule. An example of a valid monthly schedule is "on the third Tuesday of the month" or "on the 15th of the month".
type MonthlySchedule struct {
	// Required. One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month. Months without the target day will be skipped. For example, a schedule to run "every month on the 31st" will not run in February, April, June, etc.
	MonthDay *int `pulumi:"monthDay"`
	// Required. Week day in a month.
	WeekDayOfMonth *WeekDayOfMonth `pulumi:"weekDayOfMonth"`
}

// MonthlyScheduleInput is an input type that accepts MonthlyScheduleArgs and MonthlyScheduleOutput values.
// You can construct a concrete instance of `MonthlyScheduleInput` via:
//
//          MonthlyScheduleArgs{...}
type MonthlyScheduleInput interface {
	pulumi.Input

	ToMonthlyScheduleOutput() MonthlyScheduleOutput
	ToMonthlyScheduleOutputWithContext(context.Context) MonthlyScheduleOutput
}

// Represents a monthly schedule. An example of a valid monthly schedule is "on the third Tuesday of the month" or "on the 15th of the month".
type MonthlyScheduleArgs struct {
	// Required. One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month. Months without the target day will be skipped. For example, a schedule to run "every month on the 31st" will not run in February, April, June, etc.
	MonthDay pulumi.IntPtrInput `pulumi:"monthDay"`
	// Required. Week day in a month.
	WeekDayOfMonth WeekDayOfMonthPtrInput `pulumi:"weekDayOfMonth"`
}

func (MonthlyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonthlySchedule)(nil)).Elem()
}

func (i MonthlyScheduleArgs) ToMonthlyScheduleOutput() MonthlyScheduleOutput {
	return i.ToMonthlyScheduleOutputWithContext(context.Background())
}

func (i MonthlyScheduleArgs) ToMonthlyScheduleOutputWithContext(ctx context.Context) MonthlyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonthlyScheduleOutput)
}

func (i MonthlyScheduleArgs) ToMonthlySchedulePtrOutput() MonthlySchedulePtrOutput {
	return i.ToMonthlySchedulePtrOutputWithContext(context.Background())
}

func (i MonthlyScheduleArgs) ToMonthlySchedulePtrOutputWithContext(ctx context.Context) MonthlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonthlyScheduleOutput).ToMonthlySchedulePtrOutputWithContext(ctx)
}

// MonthlySchedulePtrInput is an input type that accepts MonthlyScheduleArgs, MonthlySchedulePtr and MonthlySchedulePtrOutput values.
// You can construct a concrete instance of `MonthlySchedulePtrInput` via:
//
//          MonthlyScheduleArgs{...}
//
//  or:
//
//          nil
type MonthlySchedulePtrInput interface {
	pulumi.Input

	ToMonthlySchedulePtrOutput() MonthlySchedulePtrOutput
	ToMonthlySchedulePtrOutputWithContext(context.Context) MonthlySchedulePtrOutput
}

type monthlySchedulePtrType MonthlyScheduleArgs

func MonthlySchedulePtr(v *MonthlyScheduleArgs) MonthlySchedulePtrInput {
	return (*monthlySchedulePtrType)(v)
}

func (*monthlySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonthlySchedule)(nil)).Elem()
}

func (i *monthlySchedulePtrType) ToMonthlySchedulePtrOutput() MonthlySchedulePtrOutput {
	return i.ToMonthlySchedulePtrOutputWithContext(context.Background())
}

func (i *monthlySchedulePtrType) ToMonthlySchedulePtrOutputWithContext(ctx context.Context) MonthlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonthlySchedulePtrOutput)
}

// Represents a monthly schedule. An example of a valid monthly schedule is "on the third Tuesday of the month" or "on the 15th of the month".
type MonthlyScheduleOutput struct{ *pulumi.OutputState }

func (MonthlyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonthlySchedule)(nil)).Elem()
}

func (o MonthlyScheduleOutput) ToMonthlyScheduleOutput() MonthlyScheduleOutput {
	return o
}

func (o MonthlyScheduleOutput) ToMonthlyScheduleOutputWithContext(ctx context.Context) MonthlyScheduleOutput {
	return o
}

func (o MonthlyScheduleOutput) ToMonthlySchedulePtrOutput() MonthlySchedulePtrOutput {
	return o.ToMonthlySchedulePtrOutputWithContext(context.Background())
}

func (o MonthlyScheduleOutput) ToMonthlySchedulePtrOutputWithContext(ctx context.Context) MonthlySchedulePtrOutput {
	return o.ApplyT(func(v MonthlySchedule) *MonthlySchedule {
		return &v
	}).(MonthlySchedulePtrOutput)
}

// Required. One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month. Months without the target day will be skipped. For example, a schedule to run "every month on the 31st" will not run in February, April, June, etc.
func (o MonthlyScheduleOutput) MonthDay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonthlySchedule) *int { return v.MonthDay }).(pulumi.IntPtrOutput)
}

// Required. Week day in a month.
func (o MonthlyScheduleOutput) WeekDayOfMonth() WeekDayOfMonthPtrOutput {
	return o.ApplyT(func(v MonthlySchedule) *WeekDayOfMonth { return v.WeekDayOfMonth }).(WeekDayOfMonthPtrOutput)
}

type MonthlySchedulePtrOutput struct{ *pulumi.OutputState }

func (MonthlySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonthlySchedule)(nil)).Elem()
}

func (o MonthlySchedulePtrOutput) ToMonthlySchedulePtrOutput() MonthlySchedulePtrOutput {
	return o
}

func (o MonthlySchedulePtrOutput) ToMonthlySchedulePtrOutputWithContext(ctx context.Context) MonthlySchedulePtrOutput {
	return o
}

func (o MonthlySchedulePtrOutput) Elem() MonthlyScheduleOutput {
	return o.ApplyT(func(v *MonthlySchedule) MonthlySchedule { return *v }).(MonthlyScheduleOutput)
}

// Required. One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month. Months without the target day will be skipped. For example, a schedule to run "every month on the 31st" will not run in February, April, June, etc.
func (o MonthlySchedulePtrOutput) MonthDay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonthlySchedule) *int {
		if v == nil {
			return nil
		}
		return v.MonthDay
	}).(pulumi.IntPtrOutput)
}

// Required. Week day in a month.
func (o MonthlySchedulePtrOutput) WeekDayOfMonth() WeekDayOfMonthPtrOutput {
	return o.ApplyT(func(v *MonthlySchedule) *WeekDayOfMonth {
		if v == nil {
			return nil
		}
		return v.WeekDayOfMonth
	}).(WeekDayOfMonthPtrOutput)
}

// Sets the time for a one time patch deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
type OneTimeSchedule struct {
	// Required. The desired patch job execution time.
	ExecuteTime *string `pulumi:"executeTime"`
}

// OneTimeScheduleInput is an input type that accepts OneTimeScheduleArgs and OneTimeScheduleOutput values.
// You can construct a concrete instance of `OneTimeScheduleInput` via:
//
//          OneTimeScheduleArgs{...}
type OneTimeScheduleInput interface {
	pulumi.Input

	ToOneTimeScheduleOutput() OneTimeScheduleOutput
	ToOneTimeScheduleOutputWithContext(context.Context) OneTimeScheduleOutput
}

// Sets the time for a one time patch deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
type OneTimeScheduleArgs struct {
	// Required. The desired patch job execution time.
	ExecuteTime pulumi.StringPtrInput `pulumi:"executeTime"`
}

func (OneTimeScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneTimeSchedule)(nil)).Elem()
}

func (i OneTimeScheduleArgs) ToOneTimeScheduleOutput() OneTimeScheduleOutput {
	return i.ToOneTimeScheduleOutputWithContext(context.Background())
}

func (i OneTimeScheduleArgs) ToOneTimeScheduleOutputWithContext(ctx context.Context) OneTimeScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneTimeScheduleOutput)
}

func (i OneTimeScheduleArgs) ToOneTimeSchedulePtrOutput() OneTimeSchedulePtrOutput {
	return i.ToOneTimeSchedulePtrOutputWithContext(context.Background())
}

func (i OneTimeScheduleArgs) ToOneTimeSchedulePtrOutputWithContext(ctx context.Context) OneTimeSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneTimeScheduleOutput).ToOneTimeSchedulePtrOutputWithContext(ctx)
}

// OneTimeSchedulePtrInput is an input type that accepts OneTimeScheduleArgs, OneTimeSchedulePtr and OneTimeSchedulePtrOutput values.
// You can construct a concrete instance of `OneTimeSchedulePtrInput` via:
//
//          OneTimeScheduleArgs{...}
//
//  or:
//
//          nil
type OneTimeSchedulePtrInput interface {
	pulumi.Input

	ToOneTimeSchedulePtrOutput() OneTimeSchedulePtrOutput
	ToOneTimeSchedulePtrOutputWithContext(context.Context) OneTimeSchedulePtrOutput
}

type oneTimeSchedulePtrType OneTimeScheduleArgs

func OneTimeSchedulePtr(v *OneTimeScheduleArgs) OneTimeSchedulePtrInput {
	return (*oneTimeSchedulePtrType)(v)
}

func (*oneTimeSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OneTimeSchedule)(nil)).Elem()
}

func (i *oneTimeSchedulePtrType) ToOneTimeSchedulePtrOutput() OneTimeSchedulePtrOutput {
	return i.ToOneTimeSchedulePtrOutputWithContext(context.Background())
}

func (i *oneTimeSchedulePtrType) ToOneTimeSchedulePtrOutputWithContext(ctx context.Context) OneTimeSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneTimeSchedulePtrOutput)
}

// Sets the time for a one time patch deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
type OneTimeScheduleOutput struct{ *pulumi.OutputState }

func (OneTimeScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneTimeSchedule)(nil)).Elem()
}

func (o OneTimeScheduleOutput) ToOneTimeScheduleOutput() OneTimeScheduleOutput {
	return o
}

func (o OneTimeScheduleOutput) ToOneTimeScheduleOutputWithContext(ctx context.Context) OneTimeScheduleOutput {
	return o
}

func (o OneTimeScheduleOutput) ToOneTimeSchedulePtrOutput() OneTimeSchedulePtrOutput {
	return o.ToOneTimeSchedulePtrOutputWithContext(context.Background())
}

func (o OneTimeScheduleOutput) ToOneTimeSchedulePtrOutputWithContext(ctx context.Context) OneTimeSchedulePtrOutput {
	return o.ApplyT(func(v OneTimeSchedule) *OneTimeSchedule {
		return &v
	}).(OneTimeSchedulePtrOutput)
}

// Required. The desired patch job execution time.
func (o OneTimeScheduleOutput) ExecuteTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneTimeSchedule) *string { return v.ExecuteTime }).(pulumi.StringPtrOutput)
}

type OneTimeSchedulePtrOutput struct{ *pulumi.OutputState }

func (OneTimeSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OneTimeSchedule)(nil)).Elem()
}

func (o OneTimeSchedulePtrOutput) ToOneTimeSchedulePtrOutput() OneTimeSchedulePtrOutput {
	return o
}

func (o OneTimeSchedulePtrOutput) ToOneTimeSchedulePtrOutputWithContext(ctx context.Context) OneTimeSchedulePtrOutput {
	return o
}

func (o OneTimeSchedulePtrOutput) Elem() OneTimeScheduleOutput {
	return o.ApplyT(func(v *OneTimeSchedule) OneTimeSchedule { return *v }).(OneTimeScheduleOutput)
}

// Required. The desired patch job execution time.
func (o OneTimeSchedulePtrOutput) ExecuteTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OneTimeSchedule) *string {
		if v == nil {
			return nil
		}
		return v.ExecuteTime
	}).(pulumi.StringPtrOutput)
}

// Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance.
type PatchConfig struct {
	// Apt update settings. Use this setting to override the default `apt` patch rules.
	Apt *AptSettings `pulumi:"apt"`
	// Goo update settings. Use this setting to override the default `goo` patch rules.
	Goo *GooSettings `pulumi:"goo"`
	// The `ExecStep` to run after the patch update.
	PostStep *ExecStep `pulumi:"postStep"`
	// The `ExecStep` to run before the patch update.
	PreStep *ExecStep `pulumi:"preStep"`
	// Post-patch reboot settings.
	RebootConfig *string `pulumi:"rebootConfig"`
	// Windows update settings. Use this override the default windows patch rules.
	WindowsUpdate *WindowsUpdateSettings `pulumi:"windowsUpdate"`
	// Yum update settings. Use this setting to override the default `yum` patch rules.
	Yum *YumSettings `pulumi:"yum"`
	// Zypper update settings. Use this setting to override the default `zypper` patch rules.
	Zypper *ZypperSettings `pulumi:"zypper"`
}

// PatchConfigInput is an input type that accepts PatchConfigArgs and PatchConfigOutput values.
// You can construct a concrete instance of `PatchConfigInput` via:
//
//          PatchConfigArgs{...}
type PatchConfigInput interface {
	pulumi.Input

	ToPatchConfigOutput() PatchConfigOutput
	ToPatchConfigOutputWithContext(context.Context) PatchConfigOutput
}

// Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance.
type PatchConfigArgs struct {
	// Apt update settings. Use this setting to override the default `apt` patch rules.
	Apt AptSettingsPtrInput `pulumi:"apt"`
	// Goo update settings. Use this setting to override the default `goo` patch rules.
	Goo GooSettingsPtrInput `pulumi:"goo"`
	// The `ExecStep` to run after the patch update.
	PostStep ExecStepPtrInput `pulumi:"postStep"`
	// The `ExecStep` to run before the patch update.
	PreStep ExecStepPtrInput `pulumi:"preStep"`
	// Post-patch reboot settings.
	RebootConfig pulumi.StringPtrInput `pulumi:"rebootConfig"`
	// Windows update settings. Use this override the default windows patch rules.
	WindowsUpdate WindowsUpdateSettingsPtrInput `pulumi:"windowsUpdate"`
	// Yum update settings. Use this setting to override the default `yum` patch rules.
	Yum YumSettingsPtrInput `pulumi:"yum"`
	// Zypper update settings. Use this setting to override the default `zypper` patch rules.
	Zypper ZypperSettingsPtrInput `pulumi:"zypper"`
}

func (PatchConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchConfig)(nil)).Elem()
}

func (i PatchConfigArgs) ToPatchConfigOutput() PatchConfigOutput {
	return i.ToPatchConfigOutputWithContext(context.Background())
}

func (i PatchConfigArgs) ToPatchConfigOutputWithContext(ctx context.Context) PatchConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchConfigOutput)
}

func (i PatchConfigArgs) ToPatchConfigPtrOutput() PatchConfigPtrOutput {
	return i.ToPatchConfigPtrOutputWithContext(context.Background())
}

func (i PatchConfigArgs) ToPatchConfigPtrOutputWithContext(ctx context.Context) PatchConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchConfigOutput).ToPatchConfigPtrOutputWithContext(ctx)
}

// PatchConfigPtrInput is an input type that accepts PatchConfigArgs, PatchConfigPtr and PatchConfigPtrOutput values.
// You can construct a concrete instance of `PatchConfigPtrInput` via:
//
//          PatchConfigArgs{...}
//
//  or:
//
//          nil
type PatchConfigPtrInput interface {
	pulumi.Input

	ToPatchConfigPtrOutput() PatchConfigPtrOutput
	ToPatchConfigPtrOutputWithContext(context.Context) PatchConfigPtrOutput
}

type patchConfigPtrType PatchConfigArgs

func PatchConfigPtr(v *PatchConfigArgs) PatchConfigPtrInput {
	return (*patchConfigPtrType)(v)
}

func (*patchConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchConfig)(nil)).Elem()
}

func (i *patchConfigPtrType) ToPatchConfigPtrOutput() PatchConfigPtrOutput {
	return i.ToPatchConfigPtrOutputWithContext(context.Background())
}

func (i *patchConfigPtrType) ToPatchConfigPtrOutputWithContext(ctx context.Context) PatchConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchConfigPtrOutput)
}

// Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance.
type PatchConfigOutput struct{ *pulumi.OutputState }

func (PatchConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchConfig)(nil)).Elem()
}

func (o PatchConfigOutput) ToPatchConfigOutput() PatchConfigOutput {
	return o
}

func (o PatchConfigOutput) ToPatchConfigOutputWithContext(ctx context.Context) PatchConfigOutput {
	return o
}

func (o PatchConfigOutput) ToPatchConfigPtrOutput() PatchConfigPtrOutput {
	return o.ToPatchConfigPtrOutputWithContext(context.Background())
}

func (o PatchConfigOutput) ToPatchConfigPtrOutputWithContext(ctx context.Context) PatchConfigPtrOutput {
	return o.ApplyT(func(v PatchConfig) *PatchConfig {
		return &v
	}).(PatchConfigPtrOutput)
}

// Apt update settings. Use this setting to override the default `apt` patch rules.
func (o PatchConfigOutput) Apt() AptSettingsPtrOutput {
	return o.ApplyT(func(v PatchConfig) *AptSettings { return v.Apt }).(AptSettingsPtrOutput)
}

// Goo update settings. Use this setting to override the default `goo` patch rules.
func (o PatchConfigOutput) Goo() GooSettingsPtrOutput {
	return o.ApplyT(func(v PatchConfig) *GooSettings { return v.Goo }).(GooSettingsPtrOutput)
}

// The `ExecStep` to run after the patch update.
func (o PatchConfigOutput) PostStep() ExecStepPtrOutput {
	return o.ApplyT(func(v PatchConfig) *ExecStep { return v.PostStep }).(ExecStepPtrOutput)
}

// The `ExecStep` to run before the patch update.
func (o PatchConfigOutput) PreStep() ExecStepPtrOutput {
	return o.ApplyT(func(v PatchConfig) *ExecStep { return v.PreStep }).(ExecStepPtrOutput)
}

// Post-patch reboot settings.
func (o PatchConfigOutput) RebootConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PatchConfig) *string { return v.RebootConfig }).(pulumi.StringPtrOutput)
}

// Windows update settings. Use this override the default windows patch rules.
func (o PatchConfigOutput) WindowsUpdate() WindowsUpdateSettingsPtrOutput {
	return o.ApplyT(func(v PatchConfig) *WindowsUpdateSettings { return v.WindowsUpdate }).(WindowsUpdateSettingsPtrOutput)
}

// Yum update settings. Use this setting to override the default `yum` patch rules.
func (o PatchConfigOutput) Yum() YumSettingsPtrOutput {
	return o.ApplyT(func(v PatchConfig) *YumSettings { return v.Yum }).(YumSettingsPtrOutput)
}

// Zypper update settings. Use this setting to override the default `zypper` patch rules.
func (o PatchConfigOutput) Zypper() ZypperSettingsPtrOutput {
	return o.ApplyT(func(v PatchConfig) *ZypperSettings { return v.Zypper }).(ZypperSettingsPtrOutput)
}

type PatchConfigPtrOutput struct{ *pulumi.OutputState }

func (PatchConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchConfig)(nil)).Elem()
}

func (o PatchConfigPtrOutput) ToPatchConfigPtrOutput() PatchConfigPtrOutput {
	return o
}

func (o PatchConfigPtrOutput) ToPatchConfigPtrOutputWithContext(ctx context.Context) PatchConfigPtrOutput {
	return o
}

func (o PatchConfigPtrOutput) Elem() PatchConfigOutput {
	return o.ApplyT(func(v *PatchConfig) PatchConfig { return *v }).(PatchConfigOutput)
}

// Apt update settings. Use this setting to override the default `apt` patch rules.
func (o PatchConfigPtrOutput) Apt() AptSettingsPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *AptSettings {
		if v == nil {
			return nil
		}
		return v.Apt
	}).(AptSettingsPtrOutput)
}

// Goo update settings. Use this setting to override the default `goo` patch rules.
func (o PatchConfigPtrOutput) Goo() GooSettingsPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *GooSettings {
		if v == nil {
			return nil
		}
		return v.Goo
	}).(GooSettingsPtrOutput)
}

// The `ExecStep` to run after the patch update.
func (o PatchConfigPtrOutput) PostStep() ExecStepPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *ExecStep {
		if v == nil {
			return nil
		}
		return v.PostStep
	}).(ExecStepPtrOutput)
}

// The `ExecStep` to run before the patch update.
func (o PatchConfigPtrOutput) PreStep() ExecStepPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *ExecStep {
		if v == nil {
			return nil
		}
		return v.PreStep
	}).(ExecStepPtrOutput)
}

// Post-patch reboot settings.
func (o PatchConfigPtrOutput) RebootConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *string {
		if v == nil {
			return nil
		}
		return v.RebootConfig
	}).(pulumi.StringPtrOutput)
}

// Windows update settings. Use this override the default windows patch rules.
func (o PatchConfigPtrOutput) WindowsUpdate() WindowsUpdateSettingsPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *WindowsUpdateSettings {
		if v == nil {
			return nil
		}
		return v.WindowsUpdate
	}).(WindowsUpdateSettingsPtrOutput)
}

// Yum update settings. Use this setting to override the default `yum` patch rules.
func (o PatchConfigPtrOutput) Yum() YumSettingsPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *YumSettings {
		if v == nil {
			return nil
		}
		return v.Yum
	}).(YumSettingsPtrOutput)
}

// Zypper update settings. Use this setting to override the default `zypper` patch rules.
func (o PatchConfigPtrOutput) Zypper() ZypperSettingsPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *ZypperSettings {
		if v == nil {
			return nil
		}
		return v.Zypper
	}).(ZypperSettingsPtrOutput)
}

// A filter to target VM instances for patching. The targeted VMs must meet all criteria specified. So if both labels and zones are specified, the patch job targets only VMs with those labels and in those zones.
type PatchInstanceFilter struct {
	// Target all VM instances in the project. If true, no other criteria is permitted.
	All *bool `pulumi:"all"`
	// Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.
	GroupLabels []PatchInstanceFilterGroupLabel `pulumi:"groupLabels"`
	// Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix="prod-".
	InstanceNamePrefixes []string `pulumi:"instanceNamePrefixes"`
	// Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
	Instances []string `pulumi:"instances"`
	// Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
	Zones []string `pulumi:"zones"`
}

// PatchInstanceFilterInput is an input type that accepts PatchInstanceFilterArgs and PatchInstanceFilterOutput values.
// You can construct a concrete instance of `PatchInstanceFilterInput` via:
//
//          PatchInstanceFilterArgs{...}
type PatchInstanceFilterInput interface {
	pulumi.Input

	ToPatchInstanceFilterOutput() PatchInstanceFilterOutput
	ToPatchInstanceFilterOutputWithContext(context.Context) PatchInstanceFilterOutput
}

// A filter to target VM instances for patching. The targeted VMs must meet all criteria specified. So if both labels and zones are specified, the patch job targets only VMs with those labels and in those zones.
type PatchInstanceFilterArgs struct {
	// Target all VM instances in the project. If true, no other criteria is permitted.
	All pulumi.BoolPtrInput `pulumi:"all"`
	// Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.
	GroupLabels PatchInstanceFilterGroupLabelArrayInput `pulumi:"groupLabels"`
	// Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix="prod-".
	InstanceNamePrefixes pulumi.StringArrayInput `pulumi:"instanceNamePrefixes"`
	// Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
	Instances pulumi.StringArrayInput `pulumi:"instances"`
	// Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
	Zones pulumi.StringArrayInput `pulumi:"zones"`
}

func (PatchInstanceFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchInstanceFilter)(nil)).Elem()
}

func (i PatchInstanceFilterArgs) ToPatchInstanceFilterOutput() PatchInstanceFilterOutput {
	return i.ToPatchInstanceFilterOutputWithContext(context.Background())
}

func (i PatchInstanceFilterArgs) ToPatchInstanceFilterOutputWithContext(ctx context.Context) PatchInstanceFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchInstanceFilterOutput)
}

func (i PatchInstanceFilterArgs) ToPatchInstanceFilterPtrOutput() PatchInstanceFilterPtrOutput {
	return i.ToPatchInstanceFilterPtrOutputWithContext(context.Background())
}

func (i PatchInstanceFilterArgs) ToPatchInstanceFilterPtrOutputWithContext(ctx context.Context) PatchInstanceFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchInstanceFilterOutput).ToPatchInstanceFilterPtrOutputWithContext(ctx)
}

// PatchInstanceFilterPtrInput is an input type that accepts PatchInstanceFilterArgs, PatchInstanceFilterPtr and PatchInstanceFilterPtrOutput values.
// You can construct a concrete instance of `PatchInstanceFilterPtrInput` via:
//
//          PatchInstanceFilterArgs{...}
//
//  or:
//
//          nil
type PatchInstanceFilterPtrInput interface {
	pulumi.Input

	ToPatchInstanceFilterPtrOutput() PatchInstanceFilterPtrOutput
	ToPatchInstanceFilterPtrOutputWithContext(context.Context) PatchInstanceFilterPtrOutput
}

type patchInstanceFilterPtrType PatchInstanceFilterArgs

func PatchInstanceFilterPtr(v *PatchInstanceFilterArgs) PatchInstanceFilterPtrInput {
	return (*patchInstanceFilterPtrType)(v)
}

func (*patchInstanceFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchInstanceFilter)(nil)).Elem()
}

func (i *patchInstanceFilterPtrType) ToPatchInstanceFilterPtrOutput() PatchInstanceFilterPtrOutput {
	return i.ToPatchInstanceFilterPtrOutputWithContext(context.Background())
}

func (i *patchInstanceFilterPtrType) ToPatchInstanceFilterPtrOutputWithContext(ctx context.Context) PatchInstanceFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchInstanceFilterPtrOutput)
}

// A filter to target VM instances for patching. The targeted VMs must meet all criteria specified. So if both labels and zones are specified, the patch job targets only VMs with those labels and in those zones.
type PatchInstanceFilterOutput struct{ *pulumi.OutputState }

func (PatchInstanceFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchInstanceFilter)(nil)).Elem()
}

func (o PatchInstanceFilterOutput) ToPatchInstanceFilterOutput() PatchInstanceFilterOutput {
	return o
}

func (o PatchInstanceFilterOutput) ToPatchInstanceFilterOutputWithContext(ctx context.Context) PatchInstanceFilterOutput {
	return o
}

func (o PatchInstanceFilterOutput) ToPatchInstanceFilterPtrOutput() PatchInstanceFilterPtrOutput {
	return o.ToPatchInstanceFilterPtrOutputWithContext(context.Background())
}

func (o PatchInstanceFilterOutput) ToPatchInstanceFilterPtrOutputWithContext(ctx context.Context) PatchInstanceFilterPtrOutput {
	return o.ApplyT(func(v PatchInstanceFilter) *PatchInstanceFilter {
		return &v
	}).(PatchInstanceFilterPtrOutput)
}

// Target all VM instances in the project. If true, no other criteria is permitted.
func (o PatchInstanceFilterOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PatchInstanceFilter) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

// Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.
func (o PatchInstanceFilterOutput) GroupLabels() PatchInstanceFilterGroupLabelArrayOutput {
	return o.ApplyT(func(v PatchInstanceFilter) []PatchInstanceFilterGroupLabel { return v.GroupLabels }).(PatchInstanceFilterGroupLabelArrayOutput)
}

// Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix="prod-".
func (o PatchInstanceFilterOutput) InstanceNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PatchInstanceFilter) []string { return v.InstanceNamePrefixes }).(pulumi.StringArrayOutput)
}

// Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
func (o PatchInstanceFilterOutput) Instances() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PatchInstanceFilter) []string { return v.Instances }).(pulumi.StringArrayOutput)
}

// Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
func (o PatchInstanceFilterOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PatchInstanceFilter) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

type PatchInstanceFilterPtrOutput struct{ *pulumi.OutputState }

func (PatchInstanceFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchInstanceFilter)(nil)).Elem()
}

func (o PatchInstanceFilterPtrOutput) ToPatchInstanceFilterPtrOutput() PatchInstanceFilterPtrOutput {
	return o
}

func (o PatchInstanceFilterPtrOutput) ToPatchInstanceFilterPtrOutputWithContext(ctx context.Context) PatchInstanceFilterPtrOutput {
	return o
}

func (o PatchInstanceFilterPtrOutput) Elem() PatchInstanceFilterOutput {
	return o.ApplyT(func(v *PatchInstanceFilter) PatchInstanceFilter { return *v }).(PatchInstanceFilterOutput)
}

// Target all VM instances in the project. If true, no other criteria is permitted.
func (o PatchInstanceFilterPtrOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PatchInstanceFilter) *bool {
		if v == nil {
			return nil
		}
		return v.All
	}).(pulumi.BoolPtrOutput)
}

// Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.
func (o PatchInstanceFilterPtrOutput) GroupLabels() PatchInstanceFilterGroupLabelArrayOutput {
	return o.ApplyT(func(v *PatchInstanceFilter) []PatchInstanceFilterGroupLabel {
		if v == nil {
			return nil
		}
		return v.GroupLabels
	}).(PatchInstanceFilterGroupLabelArrayOutput)
}

// Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix="prod-".
func (o PatchInstanceFilterPtrOutput) InstanceNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PatchInstanceFilter) []string {
		if v == nil {
			return nil
		}
		return v.InstanceNamePrefixes
	}).(pulumi.StringArrayOutput)
}

// Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
func (o PatchInstanceFilterPtrOutput) Instances() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PatchInstanceFilter) []string {
		if v == nil {
			return nil
		}
		return v.Instances
	}).(pulumi.StringArrayOutput)
}

// Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
func (o PatchInstanceFilterPtrOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PatchInstanceFilter) []string {
		if v == nil {
			return nil
		}
		return v.Zones
	}).(pulumi.StringArrayOutput)
}

// Targets a group of VM instances by using their [assigned labels](https://cloud.google.com/compute/docs/labeling-resources). Labels are key-value pairs. A `GroupLabel` is a combination of labels that is used to target VMs for a patch job. For example, a patch job can target VMs that have the following `GroupLabel`: `{"env":"test", "app":"web"}`. This means that the patch job is applied to VMs that have both the labels `env=test` and `app=web`.
type PatchInstanceFilterGroupLabel struct {
	// Compute Engine instance labels that must be present for a VM instance to be targeted by this filter.
	Labels map[string]string `pulumi:"labels"`
}

// PatchInstanceFilterGroupLabelInput is an input type that accepts PatchInstanceFilterGroupLabelArgs and PatchInstanceFilterGroupLabelOutput values.
// You can construct a concrete instance of `PatchInstanceFilterGroupLabelInput` via:
//
//          PatchInstanceFilterGroupLabelArgs{...}
type PatchInstanceFilterGroupLabelInput interface {
	pulumi.Input

	ToPatchInstanceFilterGroupLabelOutput() PatchInstanceFilterGroupLabelOutput
	ToPatchInstanceFilterGroupLabelOutputWithContext(context.Context) PatchInstanceFilterGroupLabelOutput
}

// Targets a group of VM instances by using their [assigned labels](https://cloud.google.com/compute/docs/labeling-resources). Labels are key-value pairs. A `GroupLabel` is a combination of labels that is used to target VMs for a patch job. For example, a patch job can target VMs that have the following `GroupLabel`: `{"env":"test", "app":"web"}`. This means that the patch job is applied to VMs that have both the labels `env=test` and `app=web`.
type PatchInstanceFilterGroupLabelArgs struct {
	// Compute Engine instance labels that must be present for a VM instance to be targeted by this filter.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (PatchInstanceFilterGroupLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchInstanceFilterGroupLabel)(nil)).Elem()
}

func (i PatchInstanceFilterGroupLabelArgs) ToPatchInstanceFilterGroupLabelOutput() PatchInstanceFilterGroupLabelOutput {
	return i.ToPatchInstanceFilterGroupLabelOutputWithContext(context.Background())
}

func (i PatchInstanceFilterGroupLabelArgs) ToPatchInstanceFilterGroupLabelOutputWithContext(ctx context.Context) PatchInstanceFilterGroupLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchInstanceFilterGroupLabelOutput)
}

// PatchInstanceFilterGroupLabelArrayInput is an input type that accepts PatchInstanceFilterGroupLabelArray and PatchInstanceFilterGroupLabelArrayOutput values.
// You can construct a concrete instance of `PatchInstanceFilterGroupLabelArrayInput` via:
//
//          PatchInstanceFilterGroupLabelArray{ PatchInstanceFilterGroupLabelArgs{...} }
type PatchInstanceFilterGroupLabelArrayInput interface {
	pulumi.Input

	ToPatchInstanceFilterGroupLabelArrayOutput() PatchInstanceFilterGroupLabelArrayOutput
	ToPatchInstanceFilterGroupLabelArrayOutputWithContext(context.Context) PatchInstanceFilterGroupLabelArrayOutput
}

type PatchInstanceFilterGroupLabelArray []PatchInstanceFilterGroupLabelInput

func (PatchInstanceFilterGroupLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PatchInstanceFilterGroupLabel)(nil)).Elem()
}

func (i PatchInstanceFilterGroupLabelArray) ToPatchInstanceFilterGroupLabelArrayOutput() PatchInstanceFilterGroupLabelArrayOutput {
	return i.ToPatchInstanceFilterGroupLabelArrayOutputWithContext(context.Background())
}

func (i PatchInstanceFilterGroupLabelArray) ToPatchInstanceFilterGroupLabelArrayOutputWithContext(ctx context.Context) PatchInstanceFilterGroupLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchInstanceFilterGroupLabelArrayOutput)
}

// Targets a group of VM instances by using their [assigned labels](https://cloud.google.com/compute/docs/labeling-resources). Labels are key-value pairs. A `GroupLabel` is a combination of labels that is used to target VMs for a patch job. For example, a patch job can target VMs that have the following `GroupLabel`: `{"env":"test", "app":"web"}`. This means that the patch job is applied to VMs that have both the labels `env=test` and `app=web`.
type PatchInstanceFilterGroupLabelOutput struct{ *pulumi.OutputState }

func (PatchInstanceFilterGroupLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchInstanceFilterGroupLabel)(nil)).Elem()
}

func (o PatchInstanceFilterGroupLabelOutput) ToPatchInstanceFilterGroupLabelOutput() PatchInstanceFilterGroupLabelOutput {
	return o
}

func (o PatchInstanceFilterGroupLabelOutput) ToPatchInstanceFilterGroupLabelOutputWithContext(ctx context.Context) PatchInstanceFilterGroupLabelOutput {
	return o
}

// Compute Engine instance labels that must be present for a VM instance to be targeted by this filter.
func (o PatchInstanceFilterGroupLabelOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PatchInstanceFilterGroupLabel) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type PatchInstanceFilterGroupLabelArrayOutput struct{ *pulumi.OutputState }

func (PatchInstanceFilterGroupLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PatchInstanceFilterGroupLabel)(nil)).Elem()
}

func (o PatchInstanceFilterGroupLabelArrayOutput) ToPatchInstanceFilterGroupLabelArrayOutput() PatchInstanceFilterGroupLabelArrayOutput {
	return o
}

func (o PatchInstanceFilterGroupLabelArrayOutput) ToPatchInstanceFilterGroupLabelArrayOutputWithContext(ctx context.Context) PatchInstanceFilterGroupLabelArrayOutput {
	return o
}

func (o PatchInstanceFilterGroupLabelArrayOutput) Index(i pulumi.IntInput) PatchInstanceFilterGroupLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PatchInstanceFilterGroupLabel {
		return vs[0].([]PatchInstanceFilterGroupLabel)[vs[1].(int)]
	}).(PatchInstanceFilterGroupLabelOutput)
}

// Patch rollout configuration specifications. Contains details on the concurrency control when applying patch(es) to all targeted VMs.
type PatchRollout struct {
	// The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up. During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps. A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget. For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone. For example, if the disruption budget has a fixed value of `10`, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops.
	DisruptionBudget *FixedOrPercent `pulumi:"disruptionBudget"`
	// Mode of the patch rollout.
	Mode *string `pulumi:"mode"`
}

// PatchRolloutInput is an input type that accepts PatchRolloutArgs and PatchRolloutOutput values.
// You can construct a concrete instance of `PatchRolloutInput` via:
//
//          PatchRolloutArgs{...}
type PatchRolloutInput interface {
	pulumi.Input

	ToPatchRolloutOutput() PatchRolloutOutput
	ToPatchRolloutOutputWithContext(context.Context) PatchRolloutOutput
}

// Patch rollout configuration specifications. Contains details on the concurrency control when applying patch(es) to all targeted VMs.
type PatchRolloutArgs struct {
	// The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up. During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps. A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget. For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone. For example, if the disruption budget has a fixed value of `10`, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops.
	DisruptionBudget FixedOrPercentPtrInput `pulumi:"disruptionBudget"`
	// Mode of the patch rollout.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (PatchRolloutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchRollout)(nil)).Elem()
}

func (i PatchRolloutArgs) ToPatchRolloutOutput() PatchRolloutOutput {
	return i.ToPatchRolloutOutputWithContext(context.Background())
}

func (i PatchRolloutArgs) ToPatchRolloutOutputWithContext(ctx context.Context) PatchRolloutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchRolloutOutput)
}

func (i PatchRolloutArgs) ToPatchRolloutPtrOutput() PatchRolloutPtrOutput {
	return i.ToPatchRolloutPtrOutputWithContext(context.Background())
}

func (i PatchRolloutArgs) ToPatchRolloutPtrOutputWithContext(ctx context.Context) PatchRolloutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchRolloutOutput).ToPatchRolloutPtrOutputWithContext(ctx)
}

// PatchRolloutPtrInput is an input type that accepts PatchRolloutArgs, PatchRolloutPtr and PatchRolloutPtrOutput values.
// You can construct a concrete instance of `PatchRolloutPtrInput` via:
//
//          PatchRolloutArgs{...}
//
//  or:
//
//          nil
type PatchRolloutPtrInput interface {
	pulumi.Input

	ToPatchRolloutPtrOutput() PatchRolloutPtrOutput
	ToPatchRolloutPtrOutputWithContext(context.Context) PatchRolloutPtrOutput
}

type patchRolloutPtrType PatchRolloutArgs

func PatchRolloutPtr(v *PatchRolloutArgs) PatchRolloutPtrInput {
	return (*patchRolloutPtrType)(v)
}

func (*patchRolloutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchRollout)(nil)).Elem()
}

func (i *patchRolloutPtrType) ToPatchRolloutPtrOutput() PatchRolloutPtrOutput {
	return i.ToPatchRolloutPtrOutputWithContext(context.Background())
}

func (i *patchRolloutPtrType) ToPatchRolloutPtrOutputWithContext(ctx context.Context) PatchRolloutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchRolloutPtrOutput)
}

// Patch rollout configuration specifications. Contains details on the concurrency control when applying patch(es) to all targeted VMs.
type PatchRolloutOutput struct{ *pulumi.OutputState }

func (PatchRolloutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchRollout)(nil)).Elem()
}

func (o PatchRolloutOutput) ToPatchRolloutOutput() PatchRolloutOutput {
	return o
}

func (o PatchRolloutOutput) ToPatchRolloutOutputWithContext(ctx context.Context) PatchRolloutOutput {
	return o
}

func (o PatchRolloutOutput) ToPatchRolloutPtrOutput() PatchRolloutPtrOutput {
	return o.ToPatchRolloutPtrOutputWithContext(context.Background())
}

func (o PatchRolloutOutput) ToPatchRolloutPtrOutputWithContext(ctx context.Context) PatchRolloutPtrOutput {
	return o.ApplyT(func(v PatchRollout) *PatchRollout {
		return &v
	}).(PatchRolloutPtrOutput)
}

// The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up. During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps. A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget. For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone. For example, if the disruption budget has a fixed value of `10`, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops.
func (o PatchRolloutOutput) DisruptionBudget() FixedOrPercentPtrOutput {
	return o.ApplyT(func(v PatchRollout) *FixedOrPercent { return v.DisruptionBudget }).(FixedOrPercentPtrOutput)
}

// Mode of the patch rollout.
func (o PatchRolloutOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PatchRollout) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type PatchRolloutPtrOutput struct{ *pulumi.OutputState }

func (PatchRolloutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchRollout)(nil)).Elem()
}

func (o PatchRolloutPtrOutput) ToPatchRolloutPtrOutput() PatchRolloutPtrOutput {
	return o
}

func (o PatchRolloutPtrOutput) ToPatchRolloutPtrOutputWithContext(ctx context.Context) PatchRolloutPtrOutput {
	return o
}

func (o PatchRolloutPtrOutput) Elem() PatchRolloutOutput {
	return o.ApplyT(func(v *PatchRollout) PatchRollout { return *v }).(PatchRolloutOutput)
}

// The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up. During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps. A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget. For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone. For example, if the disruption budget has a fixed value of `10`, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops.
func (o PatchRolloutPtrOutput) DisruptionBudget() FixedOrPercentPtrOutput {
	return o.ApplyT(func(v *PatchRollout) *FixedOrPercent {
		if v == nil {
			return nil
		}
		return v.DisruptionBudget
	}).(FixedOrPercentPtrOutput)
}

// Mode of the patch rollout.
func (o PatchRolloutPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PatchRollout) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Sets the time for recurring patch deployments.
type RecurringSchedule struct {
	// Optional. The end time at which a recurring patch deployment schedule is no longer active.
	EndTime *string `pulumi:"endTime"`
	// Required. The frequency unit of this recurring schedule.
	Frequency *string `pulumi:"frequency"`
	// Output only. The time the last patch job ran successfully.
	LastExecuteTime *string `pulumi:"lastExecuteTime"`
	// Required. Schedule with monthly executions.
	Monthly *MonthlySchedule `pulumi:"monthly"`
	// Output only. The time the next patch job is scheduled to run.
	NextExecuteTime *string `pulumi:"nextExecuteTime"`
	// Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
	StartTime *string `pulumi:"startTime"`
	// Required. Time of the day to run a recurring deployment.
	TimeOfDay *TimeOfDay `pulumi:"timeOfDay"`
	// Required. Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
	TimeZone *TimeZone `pulumi:"timeZone"`
	// Required. Schedule with weekly executions.
	Weekly *WeeklySchedule `pulumi:"weekly"`
}

// RecurringScheduleInput is an input type that accepts RecurringScheduleArgs and RecurringScheduleOutput values.
// You can construct a concrete instance of `RecurringScheduleInput` via:
//
//          RecurringScheduleArgs{...}
type RecurringScheduleInput interface {
	pulumi.Input

	ToRecurringScheduleOutput() RecurringScheduleOutput
	ToRecurringScheduleOutputWithContext(context.Context) RecurringScheduleOutput
}

// Sets the time for recurring patch deployments.
type RecurringScheduleArgs struct {
	// Optional. The end time at which a recurring patch deployment schedule is no longer active.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Required. The frequency unit of this recurring schedule.
	Frequency pulumi.StringPtrInput `pulumi:"frequency"`
	// Output only. The time the last patch job ran successfully.
	LastExecuteTime pulumi.StringPtrInput `pulumi:"lastExecuteTime"`
	// Required. Schedule with monthly executions.
	Monthly MonthlySchedulePtrInput `pulumi:"monthly"`
	// Output only. The time the next patch job is scheduled to run.
	NextExecuteTime pulumi.StringPtrInput `pulumi:"nextExecuteTime"`
	// Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Required. Time of the day to run a recurring deployment.
	TimeOfDay TimeOfDayPtrInput `pulumi:"timeOfDay"`
	// Required. Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
	TimeZone TimeZonePtrInput `pulumi:"timeZone"`
	// Required. Schedule with weekly executions.
	Weekly WeeklySchedulePtrInput `pulumi:"weekly"`
}

func (RecurringScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurringSchedule)(nil)).Elem()
}

func (i RecurringScheduleArgs) ToRecurringScheduleOutput() RecurringScheduleOutput {
	return i.ToRecurringScheduleOutputWithContext(context.Background())
}

func (i RecurringScheduleArgs) ToRecurringScheduleOutputWithContext(ctx context.Context) RecurringScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurringScheduleOutput)
}

func (i RecurringScheduleArgs) ToRecurringSchedulePtrOutput() RecurringSchedulePtrOutput {
	return i.ToRecurringSchedulePtrOutputWithContext(context.Background())
}

func (i RecurringScheduleArgs) ToRecurringSchedulePtrOutputWithContext(ctx context.Context) RecurringSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurringScheduleOutput).ToRecurringSchedulePtrOutputWithContext(ctx)
}

// RecurringSchedulePtrInput is an input type that accepts RecurringScheduleArgs, RecurringSchedulePtr and RecurringSchedulePtrOutput values.
// You can construct a concrete instance of `RecurringSchedulePtrInput` via:
//
//          RecurringScheduleArgs{...}
//
//  or:
//
//          nil
type RecurringSchedulePtrInput interface {
	pulumi.Input

	ToRecurringSchedulePtrOutput() RecurringSchedulePtrOutput
	ToRecurringSchedulePtrOutputWithContext(context.Context) RecurringSchedulePtrOutput
}

type recurringSchedulePtrType RecurringScheduleArgs

func RecurringSchedulePtr(v *RecurringScheduleArgs) RecurringSchedulePtrInput {
	return (*recurringSchedulePtrType)(v)
}

func (*recurringSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurringSchedule)(nil)).Elem()
}

func (i *recurringSchedulePtrType) ToRecurringSchedulePtrOutput() RecurringSchedulePtrOutput {
	return i.ToRecurringSchedulePtrOutputWithContext(context.Background())
}

func (i *recurringSchedulePtrType) ToRecurringSchedulePtrOutputWithContext(ctx context.Context) RecurringSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurringSchedulePtrOutput)
}

// Sets the time for recurring patch deployments.
type RecurringScheduleOutput struct{ *pulumi.OutputState }

func (RecurringScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurringSchedule)(nil)).Elem()
}

func (o RecurringScheduleOutput) ToRecurringScheduleOutput() RecurringScheduleOutput {
	return o
}

func (o RecurringScheduleOutput) ToRecurringScheduleOutputWithContext(ctx context.Context) RecurringScheduleOutput {
	return o
}

func (o RecurringScheduleOutput) ToRecurringSchedulePtrOutput() RecurringSchedulePtrOutput {
	return o.ToRecurringSchedulePtrOutputWithContext(context.Background())
}

func (o RecurringScheduleOutput) ToRecurringSchedulePtrOutputWithContext(ctx context.Context) RecurringSchedulePtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *RecurringSchedule {
		return &v
	}).(RecurringSchedulePtrOutput)
}

// Optional. The end time at which a recurring patch deployment schedule is no longer active.
func (o RecurringScheduleOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Required. The frequency unit of this recurring schedule.
func (o RecurringScheduleOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// Output only. The time the last patch job ran successfully.
func (o RecurringScheduleOutput) LastExecuteTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *string { return v.LastExecuteTime }).(pulumi.StringPtrOutput)
}

// Required. Schedule with monthly executions.
func (o RecurringScheduleOutput) Monthly() MonthlySchedulePtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *MonthlySchedule { return v.Monthly }).(MonthlySchedulePtrOutput)
}

// Output only. The time the next patch job is scheduled to run.
func (o RecurringScheduleOutput) NextExecuteTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *string { return v.NextExecuteTime }).(pulumi.StringPtrOutput)
}

// Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
func (o RecurringScheduleOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Required. Time of the day to run a recurring deployment.
func (o RecurringScheduleOutput) TimeOfDay() TimeOfDayPtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *TimeOfDay { return v.TimeOfDay }).(TimeOfDayPtrOutput)
}

// Required. Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
func (o RecurringScheduleOutput) TimeZone() TimeZonePtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *TimeZone { return v.TimeZone }).(TimeZonePtrOutput)
}

// Required. Schedule with weekly executions.
func (o RecurringScheduleOutput) Weekly() WeeklySchedulePtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *WeeklySchedule { return v.Weekly }).(WeeklySchedulePtrOutput)
}

type RecurringSchedulePtrOutput struct{ *pulumi.OutputState }

func (RecurringSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurringSchedule)(nil)).Elem()
}

func (o RecurringSchedulePtrOutput) ToRecurringSchedulePtrOutput() RecurringSchedulePtrOutput {
	return o
}

func (o RecurringSchedulePtrOutput) ToRecurringSchedulePtrOutputWithContext(ctx context.Context) RecurringSchedulePtrOutput {
	return o
}

func (o RecurringSchedulePtrOutput) Elem() RecurringScheduleOutput {
	return o.ApplyT(func(v *RecurringSchedule) RecurringSchedule { return *v }).(RecurringScheduleOutput)
}

// Optional. The end time at which a recurring patch deployment schedule is no longer active.
func (o RecurringSchedulePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurringSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Required. The frequency unit of this recurring schedule.
func (o RecurringSchedulePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurringSchedule) *string {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(pulumi.StringPtrOutput)
}

// Output only. The time the last patch job ran successfully.
func (o RecurringSchedulePtrOutput) LastExecuteTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurringSchedule) *string {
		if v == nil {
			return nil
		}
		return v.LastExecuteTime
	}).(pulumi.StringPtrOutput)
}

// Required. Schedule with monthly executions.
func (o RecurringSchedulePtrOutput) Monthly() MonthlySchedulePtrOutput {
	return o.ApplyT(func(v *RecurringSchedule) *MonthlySchedule {
		if v == nil {
			return nil
		}
		return v.Monthly
	}).(MonthlySchedulePtrOutput)
}

// Output only. The time the next patch job is scheduled to run.
func (o RecurringSchedulePtrOutput) NextExecuteTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurringSchedule) *string {
		if v == nil {
			return nil
		}
		return v.NextExecuteTime
	}).(pulumi.StringPtrOutput)
}

// Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
func (o RecurringSchedulePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurringSchedule) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Required. Time of the day to run a recurring deployment.
func (o RecurringSchedulePtrOutput) TimeOfDay() TimeOfDayPtrOutput {
	return o.ApplyT(func(v *RecurringSchedule) *TimeOfDay {
		if v == nil {
			return nil
		}
		return v.TimeOfDay
	}).(TimeOfDayPtrOutput)
}

// Required. Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
func (o RecurringSchedulePtrOutput) TimeZone() TimeZonePtrOutput {
	return o.ApplyT(func(v *RecurringSchedule) *TimeZone {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(TimeZonePtrOutput)
}

// Required. Schedule with weekly executions.
func (o RecurringSchedulePtrOutput) Weekly() WeeklySchedulePtrOutput {
	return o.ApplyT(func(v *RecurringSchedule) *WeeklySchedule {
		if v == nil {
			return nil
		}
		return v.Weekly
	}).(WeeklySchedulePtrOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDay struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours *int `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes *int `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos *int `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds *int `pulumi:"seconds"`
}

// TimeOfDayInput is an input type that accepts TimeOfDayArgs and TimeOfDayOutput values.
// You can construct a concrete instance of `TimeOfDayInput` via:
//
//          TimeOfDayArgs{...}
type TimeOfDayInput interface {
	pulumi.Input

	ToTimeOfDayOutput() TimeOfDayOutput
	ToTimeOfDayOutputWithContext(context.Context) TimeOfDayOutput
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayArgs struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours pulumi.IntPtrInput `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes pulumi.IntPtrInput `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds pulumi.IntPtrInput `pulumi:"seconds"`
}

func (TimeOfDayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDay)(nil)).Elem()
}

func (i TimeOfDayArgs) ToTimeOfDayOutput() TimeOfDayOutput {
	return i.ToTimeOfDayOutputWithContext(context.Background())
}

func (i TimeOfDayArgs) ToTimeOfDayOutputWithContext(ctx context.Context) TimeOfDayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOfDayOutput)
}

func (i TimeOfDayArgs) ToTimeOfDayPtrOutput() TimeOfDayPtrOutput {
	return i.ToTimeOfDayPtrOutputWithContext(context.Background())
}

func (i TimeOfDayArgs) ToTimeOfDayPtrOutputWithContext(ctx context.Context) TimeOfDayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOfDayOutput).ToTimeOfDayPtrOutputWithContext(ctx)
}

// TimeOfDayPtrInput is an input type that accepts TimeOfDayArgs, TimeOfDayPtr and TimeOfDayPtrOutput values.
// You can construct a concrete instance of `TimeOfDayPtrInput` via:
//
//          TimeOfDayArgs{...}
//
//  or:
//
//          nil
type TimeOfDayPtrInput interface {
	pulumi.Input

	ToTimeOfDayPtrOutput() TimeOfDayPtrOutput
	ToTimeOfDayPtrOutputWithContext(context.Context) TimeOfDayPtrOutput
}

type timeOfDayPtrType TimeOfDayArgs

func TimeOfDayPtr(v *TimeOfDayArgs) TimeOfDayPtrInput {
	return (*timeOfDayPtrType)(v)
}

func (*timeOfDayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeOfDay)(nil)).Elem()
}

func (i *timeOfDayPtrType) ToTimeOfDayPtrOutput() TimeOfDayPtrOutput {
	return i.ToTimeOfDayPtrOutputWithContext(context.Background())
}

func (i *timeOfDayPtrType) ToTimeOfDayPtrOutputWithContext(ctx context.Context) TimeOfDayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOfDayPtrOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayOutput struct{ *pulumi.OutputState }

func (TimeOfDayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDay)(nil)).Elem()
}

func (o TimeOfDayOutput) ToTimeOfDayOutput() TimeOfDayOutput {
	return o
}

func (o TimeOfDayOutput) ToTimeOfDayOutputWithContext(ctx context.Context) TimeOfDayOutput {
	return o
}

func (o TimeOfDayOutput) ToTimeOfDayPtrOutput() TimeOfDayPtrOutput {
	return o.ToTimeOfDayPtrOutputWithContext(context.Background())
}

func (o TimeOfDayOutput) ToTimeOfDayPtrOutputWithContext(ctx context.Context) TimeOfDayPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *TimeOfDay {
		return &v
	}).(TimeOfDayPtrOutput)
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o TimeOfDayOutput) Hours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Hours }).(pulumi.IntPtrOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o TimeOfDayOutput) Minutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Minutes }).(pulumi.IntPtrOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o TimeOfDayOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o TimeOfDayOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Seconds }).(pulumi.IntPtrOutput)
}

type TimeOfDayPtrOutput struct{ *pulumi.OutputState }

func (TimeOfDayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeOfDay)(nil)).Elem()
}

func (o TimeOfDayPtrOutput) ToTimeOfDayPtrOutput() TimeOfDayPtrOutput {
	return o
}

func (o TimeOfDayPtrOutput) ToTimeOfDayPtrOutputWithContext(ctx context.Context) TimeOfDayPtrOutput {
	return o
}

func (o TimeOfDayPtrOutput) Elem() TimeOfDayOutput {
	return o.ApplyT(func(v *TimeOfDay) TimeOfDay { return *v }).(TimeOfDayOutput)
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o TimeOfDayPtrOutput) Hours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOfDay) *int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntPtrOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o TimeOfDayPtrOutput) Minutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOfDay) *int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntPtrOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o TimeOfDayPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOfDay) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o TimeOfDayPtrOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOfDay) *int {
		if v == nil {
			return nil
		}
		return v.Seconds
	}).(pulumi.IntPtrOutput)
}

// Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
type TimeZone struct {
	// IANA Time Zone Database time zone, e.g. "America/New_York".
	Id *string `pulumi:"id"`
	// Optional. IANA Time Zone Database version number, e.g. "2019a".
	Version *string `pulumi:"version"`
}

// TimeZoneInput is an input type that accepts TimeZoneArgs and TimeZoneOutput values.
// You can construct a concrete instance of `TimeZoneInput` via:
//
//          TimeZoneArgs{...}
type TimeZoneInput interface {
	pulumi.Input

	ToTimeZoneOutput() TimeZoneOutput
	ToTimeZoneOutputWithContext(context.Context) TimeZoneOutput
}

// Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
type TimeZoneArgs struct {
	// IANA Time Zone Database time zone, e.g. "America/New_York".
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Optional. IANA Time Zone Database version number, e.g. "2019a".
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (TimeZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeZone)(nil)).Elem()
}

func (i TimeZoneArgs) ToTimeZoneOutput() TimeZoneOutput {
	return i.ToTimeZoneOutputWithContext(context.Background())
}

func (i TimeZoneArgs) ToTimeZoneOutputWithContext(ctx context.Context) TimeZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeZoneOutput)
}

func (i TimeZoneArgs) ToTimeZonePtrOutput() TimeZonePtrOutput {
	return i.ToTimeZonePtrOutputWithContext(context.Background())
}

func (i TimeZoneArgs) ToTimeZonePtrOutputWithContext(ctx context.Context) TimeZonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeZoneOutput).ToTimeZonePtrOutputWithContext(ctx)
}

// TimeZonePtrInput is an input type that accepts TimeZoneArgs, TimeZonePtr and TimeZonePtrOutput values.
// You can construct a concrete instance of `TimeZonePtrInput` via:
//
//          TimeZoneArgs{...}
//
//  or:
//
//          nil
type TimeZonePtrInput interface {
	pulumi.Input

	ToTimeZonePtrOutput() TimeZonePtrOutput
	ToTimeZonePtrOutputWithContext(context.Context) TimeZonePtrOutput
}

type timeZonePtrType TimeZoneArgs

func TimeZonePtr(v *TimeZoneArgs) TimeZonePtrInput {
	return (*timeZonePtrType)(v)
}

func (*timeZonePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeZone)(nil)).Elem()
}

func (i *timeZonePtrType) ToTimeZonePtrOutput() TimeZonePtrOutput {
	return i.ToTimeZonePtrOutputWithContext(context.Background())
}

func (i *timeZonePtrType) ToTimeZonePtrOutputWithContext(ctx context.Context) TimeZonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeZonePtrOutput)
}

// Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
type TimeZoneOutput struct{ *pulumi.OutputState }

func (TimeZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeZone)(nil)).Elem()
}

func (o TimeZoneOutput) ToTimeZoneOutput() TimeZoneOutput {
	return o
}

func (o TimeZoneOutput) ToTimeZoneOutputWithContext(ctx context.Context) TimeZoneOutput {
	return o
}

func (o TimeZoneOutput) ToTimeZonePtrOutput() TimeZonePtrOutput {
	return o.ToTimeZonePtrOutputWithContext(context.Background())
}

func (o TimeZoneOutput) ToTimeZonePtrOutputWithContext(ctx context.Context) TimeZonePtrOutput {
	return o.ApplyT(func(v TimeZone) *TimeZone {
		return &v
	}).(TimeZonePtrOutput)
}

// IANA Time Zone Database time zone, e.g. "America/New_York".
func (o TimeZoneOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeZone) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Optional. IANA Time Zone Database version number, e.g. "2019a".
func (o TimeZoneOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeZone) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type TimeZonePtrOutput struct{ *pulumi.OutputState }

func (TimeZonePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeZone)(nil)).Elem()
}

func (o TimeZonePtrOutput) ToTimeZonePtrOutput() TimeZonePtrOutput {
	return o
}

func (o TimeZonePtrOutput) ToTimeZonePtrOutputWithContext(ctx context.Context) TimeZonePtrOutput {
	return o
}

func (o TimeZonePtrOutput) Elem() TimeZoneOutput {
	return o.ApplyT(func(v *TimeZone) TimeZone { return *v }).(TimeZoneOutput)
}

// IANA Time Zone Database time zone, e.g. "America/New_York".
func (o TimeZonePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeZone) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Optional. IANA Time Zone Database version number, e.g. "2019a".
func (o TimeZonePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeZone) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Represents one week day in a month. An example is "the 4th Sunday".
type WeekDayOfMonth struct {
	// Required. A day of the week.
	DayOfWeek *string `pulumi:"dayOfWeek"`
	// Required. Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
	WeekOrdinal *int `pulumi:"weekOrdinal"`
}

// WeekDayOfMonthInput is an input type that accepts WeekDayOfMonthArgs and WeekDayOfMonthOutput values.
// You can construct a concrete instance of `WeekDayOfMonthInput` via:
//
//          WeekDayOfMonthArgs{...}
type WeekDayOfMonthInput interface {
	pulumi.Input

	ToWeekDayOfMonthOutput() WeekDayOfMonthOutput
	ToWeekDayOfMonthOutputWithContext(context.Context) WeekDayOfMonthOutput
}

// Represents one week day in a month. An example is "the 4th Sunday".
type WeekDayOfMonthArgs struct {
	// Required. A day of the week.
	DayOfWeek pulumi.StringPtrInput `pulumi:"dayOfWeek"`
	// Required. Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
	WeekOrdinal pulumi.IntPtrInput `pulumi:"weekOrdinal"`
}

func (WeekDayOfMonthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeekDayOfMonth)(nil)).Elem()
}

func (i WeekDayOfMonthArgs) ToWeekDayOfMonthOutput() WeekDayOfMonthOutput {
	return i.ToWeekDayOfMonthOutputWithContext(context.Background())
}

func (i WeekDayOfMonthArgs) ToWeekDayOfMonthOutputWithContext(ctx context.Context) WeekDayOfMonthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeekDayOfMonthOutput)
}

func (i WeekDayOfMonthArgs) ToWeekDayOfMonthPtrOutput() WeekDayOfMonthPtrOutput {
	return i.ToWeekDayOfMonthPtrOutputWithContext(context.Background())
}

func (i WeekDayOfMonthArgs) ToWeekDayOfMonthPtrOutputWithContext(ctx context.Context) WeekDayOfMonthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeekDayOfMonthOutput).ToWeekDayOfMonthPtrOutputWithContext(ctx)
}

// WeekDayOfMonthPtrInput is an input type that accepts WeekDayOfMonthArgs, WeekDayOfMonthPtr and WeekDayOfMonthPtrOutput values.
// You can construct a concrete instance of `WeekDayOfMonthPtrInput` via:
//
//          WeekDayOfMonthArgs{...}
//
//  or:
//
//          nil
type WeekDayOfMonthPtrInput interface {
	pulumi.Input

	ToWeekDayOfMonthPtrOutput() WeekDayOfMonthPtrOutput
	ToWeekDayOfMonthPtrOutputWithContext(context.Context) WeekDayOfMonthPtrOutput
}

type weekDayOfMonthPtrType WeekDayOfMonthArgs

func WeekDayOfMonthPtr(v *WeekDayOfMonthArgs) WeekDayOfMonthPtrInput {
	return (*weekDayOfMonthPtrType)(v)
}

func (*weekDayOfMonthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WeekDayOfMonth)(nil)).Elem()
}

func (i *weekDayOfMonthPtrType) ToWeekDayOfMonthPtrOutput() WeekDayOfMonthPtrOutput {
	return i.ToWeekDayOfMonthPtrOutputWithContext(context.Background())
}

func (i *weekDayOfMonthPtrType) ToWeekDayOfMonthPtrOutputWithContext(ctx context.Context) WeekDayOfMonthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeekDayOfMonthPtrOutput)
}

// Represents one week day in a month. An example is "the 4th Sunday".
type WeekDayOfMonthOutput struct{ *pulumi.OutputState }

func (WeekDayOfMonthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeekDayOfMonth)(nil)).Elem()
}

func (o WeekDayOfMonthOutput) ToWeekDayOfMonthOutput() WeekDayOfMonthOutput {
	return o
}

func (o WeekDayOfMonthOutput) ToWeekDayOfMonthOutputWithContext(ctx context.Context) WeekDayOfMonthOutput {
	return o
}

func (o WeekDayOfMonthOutput) ToWeekDayOfMonthPtrOutput() WeekDayOfMonthPtrOutput {
	return o.ToWeekDayOfMonthPtrOutputWithContext(context.Background())
}

func (o WeekDayOfMonthOutput) ToWeekDayOfMonthPtrOutputWithContext(ctx context.Context) WeekDayOfMonthPtrOutput {
	return o.ApplyT(func(v WeekDayOfMonth) *WeekDayOfMonth {
		return &v
	}).(WeekDayOfMonthPtrOutput)
}

// Required. A day of the week.
func (o WeekDayOfMonthOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WeekDayOfMonth) *string { return v.DayOfWeek }).(pulumi.StringPtrOutput)
}

// Required. Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
func (o WeekDayOfMonthOutput) WeekOrdinal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WeekDayOfMonth) *int { return v.WeekOrdinal }).(pulumi.IntPtrOutput)
}

type WeekDayOfMonthPtrOutput struct{ *pulumi.OutputState }

func (WeekDayOfMonthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeekDayOfMonth)(nil)).Elem()
}

func (o WeekDayOfMonthPtrOutput) ToWeekDayOfMonthPtrOutput() WeekDayOfMonthPtrOutput {
	return o
}

func (o WeekDayOfMonthPtrOutput) ToWeekDayOfMonthPtrOutputWithContext(ctx context.Context) WeekDayOfMonthPtrOutput {
	return o
}

func (o WeekDayOfMonthPtrOutput) Elem() WeekDayOfMonthOutput {
	return o.ApplyT(func(v *WeekDayOfMonth) WeekDayOfMonth { return *v }).(WeekDayOfMonthOutput)
}

// Required. A day of the week.
func (o WeekDayOfMonthPtrOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WeekDayOfMonth) *string {
		if v == nil {
			return nil
		}
		return v.DayOfWeek
	}).(pulumi.StringPtrOutput)
}

// Required. Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
func (o WeekDayOfMonthPtrOutput) WeekOrdinal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WeekDayOfMonth) *int {
		if v == nil {
			return nil
		}
		return v.WeekOrdinal
	}).(pulumi.IntPtrOutput)
}

// Represents a weekly schedule.
type WeeklySchedule struct {
	// Required. Day of the week.
	DayOfWeek *string `pulumi:"dayOfWeek"`
}

// WeeklyScheduleInput is an input type that accepts WeeklyScheduleArgs and WeeklyScheduleOutput values.
// You can construct a concrete instance of `WeeklyScheduleInput` via:
//
//          WeeklyScheduleArgs{...}
type WeeklyScheduleInput interface {
	pulumi.Input

	ToWeeklyScheduleOutput() WeeklyScheduleOutput
	ToWeeklyScheduleOutputWithContext(context.Context) WeeklyScheduleOutput
}

// Represents a weekly schedule.
type WeeklyScheduleArgs struct {
	// Required. Day of the week.
	DayOfWeek pulumi.StringPtrInput `pulumi:"dayOfWeek"`
}

func (WeeklyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklySchedule)(nil)).Elem()
}

func (i WeeklyScheduleArgs) ToWeeklyScheduleOutput() WeeklyScheduleOutput {
	return i.ToWeeklyScheduleOutputWithContext(context.Background())
}

func (i WeeklyScheduleArgs) ToWeeklyScheduleOutputWithContext(ctx context.Context) WeeklyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyScheduleOutput)
}

func (i WeeklyScheduleArgs) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return i.ToWeeklySchedulePtrOutputWithContext(context.Background())
}

func (i WeeklyScheduleArgs) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyScheduleOutput).ToWeeklySchedulePtrOutputWithContext(ctx)
}

// WeeklySchedulePtrInput is an input type that accepts WeeklyScheduleArgs, WeeklySchedulePtr and WeeklySchedulePtrOutput values.
// You can construct a concrete instance of `WeeklySchedulePtrInput` via:
//
//          WeeklyScheduleArgs{...}
//
//  or:
//
//          nil
type WeeklySchedulePtrInput interface {
	pulumi.Input

	ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput
	ToWeeklySchedulePtrOutputWithContext(context.Context) WeeklySchedulePtrOutput
}

type weeklySchedulePtrType WeeklyScheduleArgs

func WeeklySchedulePtr(v *WeeklyScheduleArgs) WeeklySchedulePtrInput {
	return (*weeklySchedulePtrType)(v)
}

func (*weeklySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklySchedule)(nil)).Elem()
}

func (i *weeklySchedulePtrType) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return i.ToWeeklySchedulePtrOutputWithContext(context.Background())
}

func (i *weeklySchedulePtrType) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklySchedulePtrOutput)
}

// Represents a weekly schedule.
type WeeklyScheduleOutput struct{ *pulumi.OutputState }

func (WeeklyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklySchedule)(nil)).Elem()
}

func (o WeeklyScheduleOutput) ToWeeklyScheduleOutput() WeeklyScheduleOutput {
	return o
}

func (o WeeklyScheduleOutput) ToWeeklyScheduleOutputWithContext(ctx context.Context) WeeklyScheduleOutput {
	return o
}

func (o WeeklyScheduleOutput) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return o.ToWeeklySchedulePtrOutputWithContext(context.Background())
}

func (o WeeklyScheduleOutput) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return o.ApplyT(func(v WeeklySchedule) *WeeklySchedule {
		return &v
	}).(WeeklySchedulePtrOutput)
}

// Required. Day of the week.
func (o WeeklyScheduleOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WeeklySchedule) *string { return v.DayOfWeek }).(pulumi.StringPtrOutput)
}

type WeeklySchedulePtrOutput struct{ *pulumi.OutputState }

func (WeeklySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklySchedule)(nil)).Elem()
}

func (o WeeklySchedulePtrOutput) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return o
}

func (o WeeklySchedulePtrOutput) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return o
}

func (o WeeklySchedulePtrOutput) Elem() WeeklyScheduleOutput {
	return o.ApplyT(func(v *WeeklySchedule) WeeklySchedule { return *v }).(WeeklyScheduleOutput)
}

// Required. Day of the week.
func (o WeeklySchedulePtrOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WeeklySchedule) *string {
		if v == nil {
			return nil
		}
		return v.DayOfWeek
	}).(pulumi.StringPtrOutput)
}

// Windows patching is performed using the Windows Update Agent.
type WindowsUpdateSettings struct {
	// Only apply updates of these windows update classifications. If empty, all updates are applied.
	Classifications []string `pulumi:"classifications"`
	// List of KBs to exclude from update.
	Excludes []string `pulumi:"excludes"`
	// An exclusive list of kbs to be updated. These are the only patches that will be updated. This field must not be used with other patch configurations.
	ExclusivePatches []string `pulumi:"exclusivePatches"`
}

// WindowsUpdateSettingsInput is an input type that accepts WindowsUpdateSettingsArgs and WindowsUpdateSettingsOutput values.
// You can construct a concrete instance of `WindowsUpdateSettingsInput` via:
//
//          WindowsUpdateSettingsArgs{...}
type WindowsUpdateSettingsInput interface {
	pulumi.Input

	ToWindowsUpdateSettingsOutput() WindowsUpdateSettingsOutput
	ToWindowsUpdateSettingsOutputWithContext(context.Context) WindowsUpdateSettingsOutput
}

// Windows patching is performed using the Windows Update Agent.
type WindowsUpdateSettingsArgs struct {
	// Only apply updates of these windows update classifications. If empty, all updates are applied.
	Classifications pulumi.StringArrayInput `pulumi:"classifications"`
	// List of KBs to exclude from update.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// An exclusive list of kbs to be updated. These are the only patches that will be updated. This field must not be used with other patch configurations.
	ExclusivePatches pulumi.StringArrayInput `pulumi:"exclusivePatches"`
}

func (WindowsUpdateSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsUpdateSettings)(nil)).Elem()
}

func (i WindowsUpdateSettingsArgs) ToWindowsUpdateSettingsOutput() WindowsUpdateSettingsOutput {
	return i.ToWindowsUpdateSettingsOutputWithContext(context.Background())
}

func (i WindowsUpdateSettingsArgs) ToWindowsUpdateSettingsOutputWithContext(ctx context.Context) WindowsUpdateSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsUpdateSettingsOutput)
}

func (i WindowsUpdateSettingsArgs) ToWindowsUpdateSettingsPtrOutput() WindowsUpdateSettingsPtrOutput {
	return i.ToWindowsUpdateSettingsPtrOutputWithContext(context.Background())
}

func (i WindowsUpdateSettingsArgs) ToWindowsUpdateSettingsPtrOutputWithContext(ctx context.Context) WindowsUpdateSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsUpdateSettingsOutput).ToWindowsUpdateSettingsPtrOutputWithContext(ctx)
}

// WindowsUpdateSettingsPtrInput is an input type that accepts WindowsUpdateSettingsArgs, WindowsUpdateSettingsPtr and WindowsUpdateSettingsPtrOutput values.
// You can construct a concrete instance of `WindowsUpdateSettingsPtrInput` via:
//
//          WindowsUpdateSettingsArgs{...}
//
//  or:
//
//          nil
type WindowsUpdateSettingsPtrInput interface {
	pulumi.Input

	ToWindowsUpdateSettingsPtrOutput() WindowsUpdateSettingsPtrOutput
	ToWindowsUpdateSettingsPtrOutputWithContext(context.Context) WindowsUpdateSettingsPtrOutput
}

type windowsUpdateSettingsPtrType WindowsUpdateSettingsArgs

func WindowsUpdateSettingsPtr(v *WindowsUpdateSettingsArgs) WindowsUpdateSettingsPtrInput {
	return (*windowsUpdateSettingsPtrType)(v)
}

func (*windowsUpdateSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsUpdateSettings)(nil)).Elem()
}

func (i *windowsUpdateSettingsPtrType) ToWindowsUpdateSettingsPtrOutput() WindowsUpdateSettingsPtrOutput {
	return i.ToWindowsUpdateSettingsPtrOutputWithContext(context.Background())
}

func (i *windowsUpdateSettingsPtrType) ToWindowsUpdateSettingsPtrOutputWithContext(ctx context.Context) WindowsUpdateSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsUpdateSettingsPtrOutput)
}

// Windows patching is performed using the Windows Update Agent.
type WindowsUpdateSettingsOutput struct{ *pulumi.OutputState }

func (WindowsUpdateSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsUpdateSettings)(nil)).Elem()
}

func (o WindowsUpdateSettingsOutput) ToWindowsUpdateSettingsOutput() WindowsUpdateSettingsOutput {
	return o
}

func (o WindowsUpdateSettingsOutput) ToWindowsUpdateSettingsOutputWithContext(ctx context.Context) WindowsUpdateSettingsOutput {
	return o
}

func (o WindowsUpdateSettingsOutput) ToWindowsUpdateSettingsPtrOutput() WindowsUpdateSettingsPtrOutput {
	return o.ToWindowsUpdateSettingsPtrOutputWithContext(context.Background())
}

func (o WindowsUpdateSettingsOutput) ToWindowsUpdateSettingsPtrOutputWithContext(ctx context.Context) WindowsUpdateSettingsPtrOutput {
	return o.ApplyT(func(v WindowsUpdateSettings) *WindowsUpdateSettings {
		return &v
	}).(WindowsUpdateSettingsPtrOutput)
}

// Only apply updates of these windows update classifications. If empty, all updates are applied.
func (o WindowsUpdateSettingsOutput) Classifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsUpdateSettings) []string { return v.Classifications }).(pulumi.StringArrayOutput)
}

// List of KBs to exclude from update.
func (o WindowsUpdateSettingsOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsUpdateSettings) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// An exclusive list of kbs to be updated. These are the only patches that will be updated. This field must not be used with other patch configurations.
func (o WindowsUpdateSettingsOutput) ExclusivePatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsUpdateSettings) []string { return v.ExclusivePatches }).(pulumi.StringArrayOutput)
}

type WindowsUpdateSettingsPtrOutput struct{ *pulumi.OutputState }

func (WindowsUpdateSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsUpdateSettings)(nil)).Elem()
}

func (o WindowsUpdateSettingsPtrOutput) ToWindowsUpdateSettingsPtrOutput() WindowsUpdateSettingsPtrOutput {
	return o
}

func (o WindowsUpdateSettingsPtrOutput) ToWindowsUpdateSettingsPtrOutputWithContext(ctx context.Context) WindowsUpdateSettingsPtrOutput {
	return o
}

func (o WindowsUpdateSettingsPtrOutput) Elem() WindowsUpdateSettingsOutput {
	return o.ApplyT(func(v *WindowsUpdateSettings) WindowsUpdateSettings { return *v }).(WindowsUpdateSettingsOutput)
}

// Only apply updates of these windows update classifications. If empty, all updates are applied.
func (o WindowsUpdateSettingsPtrOutput) Classifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WindowsUpdateSettings) []string {
		if v == nil {
			return nil
		}
		return v.Classifications
	}).(pulumi.StringArrayOutput)
}

// List of KBs to exclude from update.
func (o WindowsUpdateSettingsPtrOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WindowsUpdateSettings) []string {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(pulumi.StringArrayOutput)
}

// An exclusive list of kbs to be updated. These are the only patches that will be updated. This field must not be used with other patch configurations.
func (o WindowsUpdateSettingsPtrOutput) ExclusivePatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WindowsUpdateSettings) []string {
		if v == nil {
			return nil
		}
		return v.ExclusivePatches
	}).(pulumi.StringArrayOutput)
}

// Yum patching is performed by executing `yum update`. Additional options can be set to control how this is executed. Note that not all settings are supported on all platforms.
type YumSettings struct {
	// List of packages to exclude from update. These packages are excluded by using the yum `--exclude` flag.
	Excludes []string `pulumi:"excludes"`
	// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be specified with any other patch configuration fields.
	ExclusivePackages []string `pulumi:"exclusivePackages"`
	// Will cause patch to run `yum update-minimal` instead.
	Minimal *bool `pulumi:"minimal"`
	// Adds the `--security` flag to `yum update`. Not supported on all platforms.
	Security *bool `pulumi:"security"`
}

// YumSettingsInput is an input type that accepts YumSettingsArgs and YumSettingsOutput values.
// You can construct a concrete instance of `YumSettingsInput` via:
//
//          YumSettingsArgs{...}
type YumSettingsInput interface {
	pulumi.Input

	ToYumSettingsOutput() YumSettingsOutput
	ToYumSettingsOutputWithContext(context.Context) YumSettingsOutput
}

// Yum patching is performed by executing `yum update`. Additional options can be set to control how this is executed. Note that not all settings are supported on all platforms.
type YumSettingsArgs struct {
	// List of packages to exclude from update. These packages are excluded by using the yum `--exclude` flag.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be specified with any other patch configuration fields.
	ExclusivePackages pulumi.StringArrayInput `pulumi:"exclusivePackages"`
	// Will cause patch to run `yum update-minimal` instead.
	Minimal pulumi.BoolPtrInput `pulumi:"minimal"`
	// Adds the `--security` flag to `yum update`. Not supported on all platforms.
	Security pulumi.BoolPtrInput `pulumi:"security"`
}

func (YumSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*YumSettings)(nil)).Elem()
}

func (i YumSettingsArgs) ToYumSettingsOutput() YumSettingsOutput {
	return i.ToYumSettingsOutputWithContext(context.Background())
}

func (i YumSettingsArgs) ToYumSettingsOutputWithContext(ctx context.Context) YumSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YumSettingsOutput)
}

func (i YumSettingsArgs) ToYumSettingsPtrOutput() YumSettingsPtrOutput {
	return i.ToYumSettingsPtrOutputWithContext(context.Background())
}

func (i YumSettingsArgs) ToYumSettingsPtrOutputWithContext(ctx context.Context) YumSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YumSettingsOutput).ToYumSettingsPtrOutputWithContext(ctx)
}

// YumSettingsPtrInput is an input type that accepts YumSettingsArgs, YumSettingsPtr and YumSettingsPtrOutput values.
// You can construct a concrete instance of `YumSettingsPtrInput` via:
//
//          YumSettingsArgs{...}
//
//  or:
//
//          nil
type YumSettingsPtrInput interface {
	pulumi.Input

	ToYumSettingsPtrOutput() YumSettingsPtrOutput
	ToYumSettingsPtrOutputWithContext(context.Context) YumSettingsPtrOutput
}

type yumSettingsPtrType YumSettingsArgs

func YumSettingsPtr(v *YumSettingsArgs) YumSettingsPtrInput {
	return (*yumSettingsPtrType)(v)
}

func (*yumSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**YumSettings)(nil)).Elem()
}

func (i *yumSettingsPtrType) ToYumSettingsPtrOutput() YumSettingsPtrOutput {
	return i.ToYumSettingsPtrOutputWithContext(context.Background())
}

func (i *yumSettingsPtrType) ToYumSettingsPtrOutputWithContext(ctx context.Context) YumSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YumSettingsPtrOutput)
}

// Yum patching is performed by executing `yum update`. Additional options can be set to control how this is executed. Note that not all settings are supported on all platforms.
type YumSettingsOutput struct{ *pulumi.OutputState }

func (YumSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*YumSettings)(nil)).Elem()
}

func (o YumSettingsOutput) ToYumSettingsOutput() YumSettingsOutput {
	return o
}

func (o YumSettingsOutput) ToYumSettingsOutputWithContext(ctx context.Context) YumSettingsOutput {
	return o
}

func (o YumSettingsOutput) ToYumSettingsPtrOutput() YumSettingsPtrOutput {
	return o.ToYumSettingsPtrOutputWithContext(context.Background())
}

func (o YumSettingsOutput) ToYumSettingsPtrOutputWithContext(ctx context.Context) YumSettingsPtrOutput {
	return o.ApplyT(func(v YumSettings) *YumSettings {
		return &v
	}).(YumSettingsPtrOutput)
}

// List of packages to exclude from update. These packages are excluded by using the yum `--exclude` flag.
func (o YumSettingsOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v YumSettings) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be specified with any other patch configuration fields.
func (o YumSettingsOutput) ExclusivePackages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v YumSettings) []string { return v.ExclusivePackages }).(pulumi.StringArrayOutput)
}

// Will cause patch to run `yum update-minimal` instead.
func (o YumSettingsOutput) Minimal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v YumSettings) *bool { return v.Minimal }).(pulumi.BoolPtrOutput)
}

// Adds the `--security` flag to `yum update`. Not supported on all platforms.
func (o YumSettingsOutput) Security() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v YumSettings) *bool { return v.Security }).(pulumi.BoolPtrOutput)
}

type YumSettingsPtrOutput struct{ *pulumi.OutputState }

func (YumSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**YumSettings)(nil)).Elem()
}

func (o YumSettingsPtrOutput) ToYumSettingsPtrOutput() YumSettingsPtrOutput {
	return o
}

func (o YumSettingsPtrOutput) ToYumSettingsPtrOutputWithContext(ctx context.Context) YumSettingsPtrOutput {
	return o
}

func (o YumSettingsPtrOutput) Elem() YumSettingsOutput {
	return o.ApplyT(func(v *YumSettings) YumSettings { return *v }).(YumSettingsOutput)
}

// List of packages to exclude from update. These packages are excluded by using the yum `--exclude` flag.
func (o YumSettingsPtrOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *YumSettings) []string {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(pulumi.StringArrayOutput)
}

// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be specified with any other patch configuration fields.
func (o YumSettingsPtrOutput) ExclusivePackages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *YumSettings) []string {
		if v == nil {
			return nil
		}
		return v.ExclusivePackages
	}).(pulumi.StringArrayOutput)
}

// Will cause patch to run `yum update-minimal` instead.
func (o YumSettingsPtrOutput) Minimal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *YumSettings) *bool {
		if v == nil {
			return nil
		}
		return v.Minimal
	}).(pulumi.BoolPtrOutput)
}

// Adds the `--security` flag to `yum update`. Not supported on all platforms.
func (o YumSettingsPtrOutput) Security() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *YumSettings) *bool {
		if v == nil {
			return nil
		}
		return v.Security
	}).(pulumi.BoolPtrOutput)
}

// Zypper patching is performed by running `zypper patch`. See also https://en.opensuse.org/SDB:Zypper_manual.
type ZypperSettings struct {
	// Install only patches with these categories. Common categories include security, recommended, and feature.
	Categories []string `pulumi:"categories"`
	// List of patches to exclude from update.
	Excludes []string `pulumi:"excludes"`
	// An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.
	ExclusivePatches []string `pulumi:"exclusivePatches"`
	// Install only patches with these severities. Common severities include critical, important, moderate, and low.
	Severities []string `pulumi:"severities"`
	// Adds the `--with-optional` flag to `zypper patch`.
	WithOptional *bool `pulumi:"withOptional"`
	// Adds the `--with-update` flag, to `zypper patch`.
	WithUpdate *bool `pulumi:"withUpdate"`
}

// ZypperSettingsInput is an input type that accepts ZypperSettingsArgs and ZypperSettingsOutput values.
// You can construct a concrete instance of `ZypperSettingsInput` via:
//
//          ZypperSettingsArgs{...}
type ZypperSettingsInput interface {
	pulumi.Input

	ToZypperSettingsOutput() ZypperSettingsOutput
	ToZypperSettingsOutputWithContext(context.Context) ZypperSettingsOutput
}

// Zypper patching is performed by running `zypper patch`. See also https://en.opensuse.org/SDB:Zypper_manual.
type ZypperSettingsArgs struct {
	// Install only patches with these categories. Common categories include security, recommended, and feature.
	Categories pulumi.StringArrayInput `pulumi:"categories"`
	// List of patches to exclude from update.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.
	ExclusivePatches pulumi.StringArrayInput `pulumi:"exclusivePatches"`
	// Install only patches with these severities. Common severities include critical, important, moderate, and low.
	Severities pulumi.StringArrayInput `pulumi:"severities"`
	// Adds the `--with-optional` flag to `zypper patch`.
	WithOptional pulumi.BoolPtrInput `pulumi:"withOptional"`
	// Adds the `--with-update` flag, to `zypper patch`.
	WithUpdate pulumi.BoolPtrInput `pulumi:"withUpdate"`
}

func (ZypperSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZypperSettings)(nil)).Elem()
}

func (i ZypperSettingsArgs) ToZypperSettingsOutput() ZypperSettingsOutput {
	return i.ToZypperSettingsOutputWithContext(context.Background())
}

func (i ZypperSettingsArgs) ToZypperSettingsOutputWithContext(ctx context.Context) ZypperSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZypperSettingsOutput)
}

func (i ZypperSettingsArgs) ToZypperSettingsPtrOutput() ZypperSettingsPtrOutput {
	return i.ToZypperSettingsPtrOutputWithContext(context.Background())
}

func (i ZypperSettingsArgs) ToZypperSettingsPtrOutputWithContext(ctx context.Context) ZypperSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZypperSettingsOutput).ToZypperSettingsPtrOutputWithContext(ctx)
}

// ZypperSettingsPtrInput is an input type that accepts ZypperSettingsArgs, ZypperSettingsPtr and ZypperSettingsPtrOutput values.
// You can construct a concrete instance of `ZypperSettingsPtrInput` via:
//
//          ZypperSettingsArgs{...}
//
//  or:
//
//          nil
type ZypperSettingsPtrInput interface {
	pulumi.Input

	ToZypperSettingsPtrOutput() ZypperSettingsPtrOutput
	ToZypperSettingsPtrOutputWithContext(context.Context) ZypperSettingsPtrOutput
}

type zypperSettingsPtrType ZypperSettingsArgs

func ZypperSettingsPtr(v *ZypperSettingsArgs) ZypperSettingsPtrInput {
	return (*zypperSettingsPtrType)(v)
}

func (*zypperSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ZypperSettings)(nil)).Elem()
}

func (i *zypperSettingsPtrType) ToZypperSettingsPtrOutput() ZypperSettingsPtrOutput {
	return i.ToZypperSettingsPtrOutputWithContext(context.Background())
}

func (i *zypperSettingsPtrType) ToZypperSettingsPtrOutputWithContext(ctx context.Context) ZypperSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZypperSettingsPtrOutput)
}

// Zypper patching is performed by running `zypper patch`. See also https://en.opensuse.org/SDB:Zypper_manual.
type ZypperSettingsOutput struct{ *pulumi.OutputState }

func (ZypperSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZypperSettings)(nil)).Elem()
}

func (o ZypperSettingsOutput) ToZypperSettingsOutput() ZypperSettingsOutput {
	return o
}

func (o ZypperSettingsOutput) ToZypperSettingsOutputWithContext(ctx context.Context) ZypperSettingsOutput {
	return o
}

func (o ZypperSettingsOutput) ToZypperSettingsPtrOutput() ZypperSettingsPtrOutput {
	return o.ToZypperSettingsPtrOutputWithContext(context.Background())
}

func (o ZypperSettingsOutput) ToZypperSettingsPtrOutputWithContext(ctx context.Context) ZypperSettingsPtrOutput {
	return o.ApplyT(func(v ZypperSettings) *ZypperSettings {
		return &v
	}).(ZypperSettingsPtrOutput)
}

// Install only patches with these categories. Common categories include security, recommended, and feature.
func (o ZypperSettingsOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZypperSettings) []string { return v.Categories }).(pulumi.StringArrayOutput)
}

// List of patches to exclude from update.
func (o ZypperSettingsOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZypperSettings) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.
func (o ZypperSettingsOutput) ExclusivePatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZypperSettings) []string { return v.ExclusivePatches }).(pulumi.StringArrayOutput)
}

// Install only patches with these severities. Common severities include critical, important, moderate, and low.
func (o ZypperSettingsOutput) Severities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZypperSettings) []string { return v.Severities }).(pulumi.StringArrayOutput)
}

// Adds the `--with-optional` flag to `zypper patch`.
func (o ZypperSettingsOutput) WithOptional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ZypperSettings) *bool { return v.WithOptional }).(pulumi.BoolPtrOutput)
}

// Adds the `--with-update` flag, to `zypper patch`.
func (o ZypperSettingsOutput) WithUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ZypperSettings) *bool { return v.WithUpdate }).(pulumi.BoolPtrOutput)
}

type ZypperSettingsPtrOutput struct{ *pulumi.OutputState }

func (ZypperSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZypperSettings)(nil)).Elem()
}

func (o ZypperSettingsPtrOutput) ToZypperSettingsPtrOutput() ZypperSettingsPtrOutput {
	return o
}

func (o ZypperSettingsPtrOutput) ToZypperSettingsPtrOutputWithContext(ctx context.Context) ZypperSettingsPtrOutput {
	return o
}

func (o ZypperSettingsPtrOutput) Elem() ZypperSettingsOutput {
	return o.ApplyT(func(v *ZypperSettings) ZypperSettings { return *v }).(ZypperSettingsOutput)
}

// Install only patches with these categories. Common categories include security, recommended, and feature.
func (o ZypperSettingsPtrOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZypperSettings) []string {
		if v == nil {
			return nil
		}
		return v.Categories
	}).(pulumi.StringArrayOutput)
}

// List of patches to exclude from update.
func (o ZypperSettingsPtrOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZypperSettings) []string {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(pulumi.StringArrayOutput)
}

// An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.
func (o ZypperSettingsPtrOutput) ExclusivePatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZypperSettings) []string {
		if v == nil {
			return nil
		}
		return v.ExclusivePatches
	}).(pulumi.StringArrayOutput)
}

// Install only patches with these severities. Common severities include critical, important, moderate, and low.
func (o ZypperSettingsPtrOutput) Severities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZypperSettings) []string {
		if v == nil {
			return nil
		}
		return v.Severities
	}).(pulumi.StringArrayOutput)
}

// Adds the `--with-optional` flag to `zypper patch`.
func (o ZypperSettingsPtrOutput) WithOptional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZypperSettings) *bool {
		if v == nil {
			return nil
		}
		return v.WithOptional
	}).(pulumi.BoolPtrOutput)
}

// Adds the `--with-update` flag, to `zypper patch`.
func (o ZypperSettingsPtrOutput) WithUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZypperSettings) *bool {
		if v == nil {
			return nil
		}
		return v.WithUpdate
	}).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AptSettingsOutput{})
	pulumi.RegisterOutputType(AptSettingsPtrOutput{})
	pulumi.RegisterOutputType(ExecStepOutput{})
	pulumi.RegisterOutputType(ExecStepPtrOutput{})
	pulumi.RegisterOutputType(ExecStepConfigOutput{})
	pulumi.RegisterOutputType(ExecStepConfigPtrOutput{})
	pulumi.RegisterOutputType(FixedOrPercentOutput{})
	pulumi.RegisterOutputType(FixedOrPercentPtrOutput{})
	pulumi.RegisterOutputType(GcsObjectOutput{})
	pulumi.RegisterOutputType(GcsObjectPtrOutput{})
	pulumi.RegisterOutputType(GooSettingsOutput{})
	pulumi.RegisterOutputType(GooSettingsPtrOutput{})
	pulumi.RegisterOutputType(MonthlyScheduleOutput{})
	pulumi.RegisterOutputType(MonthlySchedulePtrOutput{})
	pulumi.RegisterOutputType(OneTimeScheduleOutput{})
	pulumi.RegisterOutputType(OneTimeSchedulePtrOutput{})
	pulumi.RegisterOutputType(PatchConfigOutput{})
	pulumi.RegisterOutputType(PatchConfigPtrOutput{})
	pulumi.RegisterOutputType(PatchInstanceFilterOutput{})
	pulumi.RegisterOutputType(PatchInstanceFilterPtrOutput{})
	pulumi.RegisterOutputType(PatchInstanceFilterGroupLabelOutput{})
	pulumi.RegisterOutputType(PatchInstanceFilterGroupLabelArrayOutput{})
	pulumi.RegisterOutputType(PatchRolloutOutput{})
	pulumi.RegisterOutputType(PatchRolloutPtrOutput{})
	pulumi.RegisterOutputType(RecurringScheduleOutput{})
	pulumi.RegisterOutputType(RecurringSchedulePtrOutput{})
	pulumi.RegisterOutputType(TimeOfDayOutput{})
	pulumi.RegisterOutputType(TimeOfDayPtrOutput{})
	pulumi.RegisterOutputType(TimeZoneOutput{})
	pulumi.RegisterOutputType(TimeZonePtrOutput{})
	pulumi.RegisterOutputType(WeekDayOfMonthOutput{})
	pulumi.RegisterOutputType(WeekDayOfMonthPtrOutput{})
	pulumi.RegisterOutputType(WeeklyScheduleOutput{})
	pulumi.RegisterOutputType(WeeklySchedulePtrOutput{})
	pulumi.RegisterOutputType(WindowsUpdateSettingsOutput{})
	pulumi.RegisterOutputType(WindowsUpdateSettingsPtrOutput{})
	pulumi.RegisterOutputType(YumSettingsOutput{})
	pulumi.RegisterOutputType(YumSettingsPtrOutput{})
	pulumi.RegisterOutputType(ZypperSettingsOutput{})
	pulumi.RegisterOutputType(ZypperSettingsPtrOutput{})
}
