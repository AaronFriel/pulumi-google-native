// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Represents a single Apt package repository. This repository is added to a repo file that is stored at `/etc/apt/sources.list.d/google_osconfig.list`.
type AptRepository struct {
	// Type of archive files in this repository. The default behavior is DEB.
	ArchiveType *string `pulumi:"archiveType"`
	// Required. List of components for this repository. Must contain at least one item.
	Components []string `pulumi:"components"`
	// Required. Distribution of this repository.
	Distribution *string `pulumi:"distribution"`
	// URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg` containing all the keys in any applied guest policy.
	GpgKey *string `pulumi:"gpgKey"`
	// Required. URI for this repository.
	Uri *string `pulumi:"uri"`
}

// AptRepositoryInput is an input type that accepts AptRepositoryArgs and AptRepositoryOutput values.
// You can construct a concrete instance of `AptRepositoryInput` via:
//
//          AptRepositoryArgs{...}
type AptRepositoryInput interface {
	pulumi.Input

	ToAptRepositoryOutput() AptRepositoryOutput
	ToAptRepositoryOutputWithContext(context.Context) AptRepositoryOutput
}

// Represents a single Apt package repository. This repository is added to a repo file that is stored at `/etc/apt/sources.list.d/google_osconfig.list`.
type AptRepositoryArgs struct {
	// Type of archive files in this repository. The default behavior is DEB.
	ArchiveType pulumi.StringPtrInput `pulumi:"archiveType"`
	// Required. List of components for this repository. Must contain at least one item.
	Components pulumi.StringArrayInput `pulumi:"components"`
	// Required. Distribution of this repository.
	Distribution pulumi.StringPtrInput `pulumi:"distribution"`
	// URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg` containing all the keys in any applied guest policy.
	GpgKey pulumi.StringPtrInput `pulumi:"gpgKey"`
	// Required. URI for this repository.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (AptRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AptRepository)(nil)).Elem()
}

func (i AptRepositoryArgs) ToAptRepositoryOutput() AptRepositoryOutput {
	return i.ToAptRepositoryOutputWithContext(context.Background())
}

func (i AptRepositoryArgs) ToAptRepositoryOutputWithContext(ctx context.Context) AptRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AptRepositoryOutput)
}

func (i AptRepositoryArgs) ToAptRepositoryPtrOutput() AptRepositoryPtrOutput {
	return i.ToAptRepositoryPtrOutputWithContext(context.Background())
}

func (i AptRepositoryArgs) ToAptRepositoryPtrOutputWithContext(ctx context.Context) AptRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AptRepositoryOutput).ToAptRepositoryPtrOutputWithContext(ctx)
}

// AptRepositoryPtrInput is an input type that accepts AptRepositoryArgs, AptRepositoryPtr and AptRepositoryPtrOutput values.
// You can construct a concrete instance of `AptRepositoryPtrInput` via:
//
//          AptRepositoryArgs{...}
//
//  or:
//
//          nil
type AptRepositoryPtrInput interface {
	pulumi.Input

	ToAptRepositoryPtrOutput() AptRepositoryPtrOutput
	ToAptRepositoryPtrOutputWithContext(context.Context) AptRepositoryPtrOutput
}

type aptRepositoryPtrType AptRepositoryArgs

func AptRepositoryPtr(v *AptRepositoryArgs) AptRepositoryPtrInput {
	return (*aptRepositoryPtrType)(v)
}

func (*aptRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AptRepository)(nil)).Elem()
}

func (i *aptRepositoryPtrType) ToAptRepositoryPtrOutput() AptRepositoryPtrOutput {
	return i.ToAptRepositoryPtrOutputWithContext(context.Background())
}

func (i *aptRepositoryPtrType) ToAptRepositoryPtrOutputWithContext(ctx context.Context) AptRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AptRepositoryPtrOutput)
}

// Represents a single Apt package repository. This repository is added to a repo file that is stored at `/etc/apt/sources.list.d/google_osconfig.list`.
type AptRepositoryOutput struct{ *pulumi.OutputState }

func (AptRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AptRepository)(nil)).Elem()
}

func (o AptRepositoryOutput) ToAptRepositoryOutput() AptRepositoryOutput {
	return o
}

func (o AptRepositoryOutput) ToAptRepositoryOutputWithContext(ctx context.Context) AptRepositoryOutput {
	return o
}

func (o AptRepositoryOutput) ToAptRepositoryPtrOutput() AptRepositoryPtrOutput {
	return o.ToAptRepositoryPtrOutputWithContext(context.Background())
}

func (o AptRepositoryOutput) ToAptRepositoryPtrOutputWithContext(ctx context.Context) AptRepositoryPtrOutput {
	return o.ApplyT(func(v AptRepository) *AptRepository {
		return &v
	}).(AptRepositoryPtrOutput)
}

// Type of archive files in this repository. The default behavior is DEB.
func (o AptRepositoryOutput) ArchiveType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AptRepository) *string { return v.ArchiveType }).(pulumi.StringPtrOutput)
}

// Required. List of components for this repository. Must contain at least one item.
func (o AptRepositoryOutput) Components() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AptRepository) []string { return v.Components }).(pulumi.StringArrayOutput)
}

// Required. Distribution of this repository.
func (o AptRepositoryOutput) Distribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AptRepository) *string { return v.Distribution }).(pulumi.StringPtrOutput)
}

// URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg` containing all the keys in any applied guest policy.
func (o AptRepositoryOutput) GpgKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AptRepository) *string { return v.GpgKey }).(pulumi.StringPtrOutput)
}

// Required. URI for this repository.
func (o AptRepositoryOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AptRepository) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type AptRepositoryPtrOutput struct{ *pulumi.OutputState }

func (AptRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AptRepository)(nil)).Elem()
}

func (o AptRepositoryPtrOutput) ToAptRepositoryPtrOutput() AptRepositoryPtrOutput {
	return o
}

func (o AptRepositoryPtrOutput) ToAptRepositoryPtrOutputWithContext(ctx context.Context) AptRepositoryPtrOutput {
	return o
}

func (o AptRepositoryPtrOutput) Elem() AptRepositoryOutput {
	return o.ApplyT(func(v *AptRepository) AptRepository { return *v }).(AptRepositoryOutput)
}

// Type of archive files in this repository. The default behavior is DEB.
func (o AptRepositoryPtrOutput) ArchiveType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AptRepository) *string {
		if v == nil {
			return nil
		}
		return v.ArchiveType
	}).(pulumi.StringPtrOutput)
}

// Required. List of components for this repository. Must contain at least one item.
func (o AptRepositoryPtrOutput) Components() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AptRepository) []string {
		if v == nil {
			return nil
		}
		return v.Components
	}).(pulumi.StringArrayOutput)
}

// Required. Distribution of this repository.
func (o AptRepositoryPtrOutput) Distribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AptRepository) *string {
		if v == nil {
			return nil
		}
		return v.Distribution
	}).(pulumi.StringPtrOutput)
}

// URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg` containing all the keys in any applied guest policy.
func (o AptRepositoryPtrOutput) GpgKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AptRepository) *string {
		if v == nil {
			return nil
		}
		return v.GpgKey
	}).(pulumi.StringPtrOutput)
}

// Required. URI for this repository.
func (o AptRepositoryPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AptRepository) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// Apt patching is completed by executing `apt-get update && apt-get upgrade`. Additional options can be set to control how this is executed.
type AptSettings struct {
	// List of packages to exclude from update. These packages will be excluded
	Excludes []string `pulumi:"excludes"`
	// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
	ExclusivePackages []string `pulumi:"exclusivePackages"`
	// By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
	Type *string `pulumi:"type"`
}

// AptSettingsInput is an input type that accepts AptSettingsArgs and AptSettingsOutput values.
// You can construct a concrete instance of `AptSettingsInput` via:
//
//          AptSettingsArgs{...}
type AptSettingsInput interface {
	pulumi.Input

	ToAptSettingsOutput() AptSettingsOutput
	ToAptSettingsOutputWithContext(context.Context) AptSettingsOutput
}

// Apt patching is completed by executing `apt-get update && apt-get upgrade`. Additional options can be set to control how this is executed.
type AptSettingsArgs struct {
	// List of packages to exclude from update. These packages will be excluded
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
	ExclusivePackages pulumi.StringArrayInput `pulumi:"exclusivePackages"`
	// By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (AptSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AptSettings)(nil)).Elem()
}

func (i AptSettingsArgs) ToAptSettingsOutput() AptSettingsOutput {
	return i.ToAptSettingsOutputWithContext(context.Background())
}

func (i AptSettingsArgs) ToAptSettingsOutputWithContext(ctx context.Context) AptSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AptSettingsOutput)
}

func (i AptSettingsArgs) ToAptSettingsPtrOutput() AptSettingsPtrOutput {
	return i.ToAptSettingsPtrOutputWithContext(context.Background())
}

func (i AptSettingsArgs) ToAptSettingsPtrOutputWithContext(ctx context.Context) AptSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AptSettingsOutput).ToAptSettingsPtrOutputWithContext(ctx)
}

// AptSettingsPtrInput is an input type that accepts AptSettingsArgs, AptSettingsPtr and AptSettingsPtrOutput values.
// You can construct a concrete instance of `AptSettingsPtrInput` via:
//
//          AptSettingsArgs{...}
//
//  or:
//
//          nil
type AptSettingsPtrInput interface {
	pulumi.Input

	ToAptSettingsPtrOutput() AptSettingsPtrOutput
	ToAptSettingsPtrOutputWithContext(context.Context) AptSettingsPtrOutput
}

type aptSettingsPtrType AptSettingsArgs

func AptSettingsPtr(v *AptSettingsArgs) AptSettingsPtrInput {
	return (*aptSettingsPtrType)(v)
}

func (*aptSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AptSettings)(nil)).Elem()
}

func (i *aptSettingsPtrType) ToAptSettingsPtrOutput() AptSettingsPtrOutput {
	return i.ToAptSettingsPtrOutputWithContext(context.Background())
}

func (i *aptSettingsPtrType) ToAptSettingsPtrOutputWithContext(ctx context.Context) AptSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AptSettingsPtrOutput)
}

// Apt patching is completed by executing `apt-get update && apt-get upgrade`. Additional options can be set to control how this is executed.
type AptSettingsOutput struct{ *pulumi.OutputState }

func (AptSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AptSettings)(nil)).Elem()
}

func (o AptSettingsOutput) ToAptSettingsOutput() AptSettingsOutput {
	return o
}

func (o AptSettingsOutput) ToAptSettingsOutputWithContext(ctx context.Context) AptSettingsOutput {
	return o
}

func (o AptSettingsOutput) ToAptSettingsPtrOutput() AptSettingsPtrOutput {
	return o.ToAptSettingsPtrOutputWithContext(context.Background())
}

func (o AptSettingsOutput) ToAptSettingsPtrOutputWithContext(ctx context.Context) AptSettingsPtrOutput {
	return o.ApplyT(func(v AptSettings) *AptSettings {
		return &v
	}).(AptSettingsPtrOutput)
}

// List of packages to exclude from update. These packages will be excluded
func (o AptSettingsOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AptSettings) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
func (o AptSettingsOutput) ExclusivePackages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AptSettings) []string { return v.ExclusivePackages }).(pulumi.StringArrayOutput)
}

// By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
func (o AptSettingsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AptSettings) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type AptSettingsPtrOutput struct{ *pulumi.OutputState }

func (AptSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AptSettings)(nil)).Elem()
}

func (o AptSettingsPtrOutput) ToAptSettingsPtrOutput() AptSettingsPtrOutput {
	return o
}

func (o AptSettingsPtrOutput) ToAptSettingsPtrOutputWithContext(ctx context.Context) AptSettingsPtrOutput {
	return o
}

func (o AptSettingsPtrOutput) Elem() AptSettingsOutput {
	return o.ApplyT(func(v *AptSettings) AptSettings { return *v }).(AptSettingsOutput)
}

// List of packages to exclude from update. These packages will be excluded
func (o AptSettingsPtrOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AptSettings) []string {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(pulumi.StringArrayOutput)
}

// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
func (o AptSettingsPtrOutput) ExclusivePackages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AptSettings) []string {
		if v == nil {
			return nil
		}
		return v.ExclusivePackages
	}).(pulumi.StringArrayOutput)
}

// By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
func (o AptSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AptSettings) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// An assignment represents the group or groups of VM instances that the policy applies to. If an assignment is empty, it applies to all VM instances. Otherwise, the targeted VM instances must meet all the criteria specified. So if both labels and zones are specified, the policy applies to VM instances with those labels and in those zones.
type Assignment struct {
	// Targets instances matching at least one of these label sets. This allows an assignment to target disparate groups, for example "env=prod or env=staging".
	GroupLabels []AssignmentGroupLabel `pulumi:"groupLabels"`
	// Targets VM instances whose name starts with one of these prefixes. Like labels, this is another way to group VM instances when targeting configs, for example prefix="prod-". Only supported for project-level policies.
	InstanceNamePrefixes []string `pulumi:"instanceNamePrefixes"`
	// Targets any of the instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`. Instance targeting is uncommon and is supported to facilitate the management of changes by the instance or to target specific VM instances for development and testing. Only supported for project-level policies and must reference instances within this project.
	Instances []string `pulumi:"instances"`
	// Targets VM instances matching at least one of the following OS types. VM instances must match all supplied criteria for a given OsType to be included.
	OsTypes []AssignmentOsType `pulumi:"osTypes"`
	// Targets instances in any of these zones. Leave empty to target instances in any zone. Zonal targeting is uncommon and is supported to facilitate the management of changes by zone.
	Zones []string `pulumi:"zones"`
}

// AssignmentInput is an input type that accepts AssignmentArgs and AssignmentOutput values.
// You can construct a concrete instance of `AssignmentInput` via:
//
//          AssignmentArgs{...}
type AssignmentInput interface {
	pulumi.Input

	ToAssignmentOutput() AssignmentOutput
	ToAssignmentOutputWithContext(context.Context) AssignmentOutput
}

// An assignment represents the group or groups of VM instances that the policy applies to. If an assignment is empty, it applies to all VM instances. Otherwise, the targeted VM instances must meet all the criteria specified. So if both labels and zones are specified, the policy applies to VM instances with those labels and in those zones.
type AssignmentArgs struct {
	// Targets instances matching at least one of these label sets. This allows an assignment to target disparate groups, for example "env=prod or env=staging".
	GroupLabels AssignmentGroupLabelArrayInput `pulumi:"groupLabels"`
	// Targets VM instances whose name starts with one of these prefixes. Like labels, this is another way to group VM instances when targeting configs, for example prefix="prod-". Only supported for project-level policies.
	InstanceNamePrefixes pulumi.StringArrayInput `pulumi:"instanceNamePrefixes"`
	// Targets any of the instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`. Instance targeting is uncommon and is supported to facilitate the management of changes by the instance or to target specific VM instances for development and testing. Only supported for project-level policies and must reference instances within this project.
	Instances pulumi.StringArrayInput `pulumi:"instances"`
	// Targets VM instances matching at least one of the following OS types. VM instances must match all supplied criteria for a given OsType to be included.
	OsTypes AssignmentOsTypeArrayInput `pulumi:"osTypes"`
	// Targets instances in any of these zones. Leave empty to target instances in any zone. Zonal targeting is uncommon and is supported to facilitate the management of changes by zone.
	Zones pulumi.StringArrayInput `pulumi:"zones"`
}

func (AssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Assignment)(nil)).Elem()
}

func (i AssignmentArgs) ToAssignmentOutput() AssignmentOutput {
	return i.ToAssignmentOutputWithContext(context.Background())
}

func (i AssignmentArgs) ToAssignmentOutputWithContext(ctx context.Context) AssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentOutput)
}

func (i AssignmentArgs) ToAssignmentPtrOutput() AssignmentPtrOutput {
	return i.ToAssignmentPtrOutputWithContext(context.Background())
}

func (i AssignmentArgs) ToAssignmentPtrOutputWithContext(ctx context.Context) AssignmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentOutput).ToAssignmentPtrOutputWithContext(ctx)
}

// AssignmentPtrInput is an input type that accepts AssignmentArgs, AssignmentPtr and AssignmentPtrOutput values.
// You can construct a concrete instance of `AssignmentPtrInput` via:
//
//          AssignmentArgs{...}
//
//  or:
//
//          nil
type AssignmentPtrInput interface {
	pulumi.Input

	ToAssignmentPtrOutput() AssignmentPtrOutput
	ToAssignmentPtrOutputWithContext(context.Context) AssignmentPtrOutput
}

type assignmentPtrType AssignmentArgs

func AssignmentPtr(v *AssignmentArgs) AssignmentPtrInput {
	return (*assignmentPtrType)(v)
}

func (*assignmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Assignment)(nil)).Elem()
}

func (i *assignmentPtrType) ToAssignmentPtrOutput() AssignmentPtrOutput {
	return i.ToAssignmentPtrOutputWithContext(context.Background())
}

func (i *assignmentPtrType) ToAssignmentPtrOutputWithContext(ctx context.Context) AssignmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentPtrOutput)
}

// An assignment represents the group or groups of VM instances that the policy applies to. If an assignment is empty, it applies to all VM instances. Otherwise, the targeted VM instances must meet all the criteria specified. So if both labels and zones are specified, the policy applies to VM instances with those labels and in those zones.
type AssignmentOutput struct{ *pulumi.OutputState }

func (AssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Assignment)(nil)).Elem()
}

func (o AssignmentOutput) ToAssignmentOutput() AssignmentOutput {
	return o
}

func (o AssignmentOutput) ToAssignmentOutputWithContext(ctx context.Context) AssignmentOutput {
	return o
}

func (o AssignmentOutput) ToAssignmentPtrOutput() AssignmentPtrOutput {
	return o.ToAssignmentPtrOutputWithContext(context.Background())
}

func (o AssignmentOutput) ToAssignmentPtrOutputWithContext(ctx context.Context) AssignmentPtrOutput {
	return o.ApplyT(func(v Assignment) *Assignment {
		return &v
	}).(AssignmentPtrOutput)
}

// Targets instances matching at least one of these label sets. This allows an assignment to target disparate groups, for example "env=prod or env=staging".
func (o AssignmentOutput) GroupLabels() AssignmentGroupLabelArrayOutput {
	return o.ApplyT(func(v Assignment) []AssignmentGroupLabel { return v.GroupLabels }).(AssignmentGroupLabelArrayOutput)
}

// Targets VM instances whose name starts with one of these prefixes. Like labels, this is another way to group VM instances when targeting configs, for example prefix="prod-". Only supported for project-level policies.
func (o AssignmentOutput) InstanceNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Assignment) []string { return v.InstanceNamePrefixes }).(pulumi.StringArrayOutput)
}

// Targets any of the instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`. Instance targeting is uncommon and is supported to facilitate the management of changes by the instance or to target specific VM instances for development and testing. Only supported for project-level policies and must reference instances within this project.
func (o AssignmentOutput) Instances() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Assignment) []string { return v.Instances }).(pulumi.StringArrayOutput)
}

// Targets VM instances matching at least one of the following OS types. VM instances must match all supplied criteria for a given OsType to be included.
func (o AssignmentOutput) OsTypes() AssignmentOsTypeArrayOutput {
	return o.ApplyT(func(v Assignment) []AssignmentOsType { return v.OsTypes }).(AssignmentOsTypeArrayOutput)
}

// Targets instances in any of these zones. Leave empty to target instances in any zone. Zonal targeting is uncommon and is supported to facilitate the management of changes by zone.
func (o AssignmentOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Assignment) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

type AssignmentPtrOutput struct{ *pulumi.OutputState }

func (AssignmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Assignment)(nil)).Elem()
}

func (o AssignmentPtrOutput) ToAssignmentPtrOutput() AssignmentPtrOutput {
	return o
}

func (o AssignmentPtrOutput) ToAssignmentPtrOutputWithContext(ctx context.Context) AssignmentPtrOutput {
	return o
}

func (o AssignmentPtrOutput) Elem() AssignmentOutput {
	return o.ApplyT(func(v *Assignment) Assignment { return *v }).(AssignmentOutput)
}

// Targets instances matching at least one of these label sets. This allows an assignment to target disparate groups, for example "env=prod or env=staging".
func (o AssignmentPtrOutput) GroupLabels() AssignmentGroupLabelArrayOutput {
	return o.ApplyT(func(v *Assignment) []AssignmentGroupLabel {
		if v == nil {
			return nil
		}
		return v.GroupLabels
	}).(AssignmentGroupLabelArrayOutput)
}

// Targets VM instances whose name starts with one of these prefixes. Like labels, this is another way to group VM instances when targeting configs, for example prefix="prod-". Only supported for project-level policies.
func (o AssignmentPtrOutput) InstanceNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Assignment) []string {
		if v == nil {
			return nil
		}
		return v.InstanceNamePrefixes
	}).(pulumi.StringArrayOutput)
}

// Targets any of the instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`. Instance targeting is uncommon and is supported to facilitate the management of changes by the instance or to target specific VM instances for development and testing. Only supported for project-level policies and must reference instances within this project.
func (o AssignmentPtrOutput) Instances() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Assignment) []string {
		if v == nil {
			return nil
		}
		return v.Instances
	}).(pulumi.StringArrayOutput)
}

// Targets VM instances matching at least one of the following OS types. VM instances must match all supplied criteria for a given OsType to be included.
func (o AssignmentPtrOutput) OsTypes() AssignmentOsTypeArrayOutput {
	return o.ApplyT(func(v *Assignment) []AssignmentOsType {
		if v == nil {
			return nil
		}
		return v.OsTypes
	}).(AssignmentOsTypeArrayOutput)
}

// Targets instances in any of these zones. Leave empty to target instances in any zone. Zonal targeting is uncommon and is supported to facilitate the management of changes by zone.
func (o AssignmentPtrOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Assignment) []string {
		if v == nil {
			return nil
		}
		return v.Zones
	}).(pulumi.StringArrayOutput)
}

// Represents a group of VM intances that can be identified as having all these labels, for example "env=prod and app=web".
type AssignmentGroupLabel struct {
	// Google Compute Engine instance labels that must be present for an instance to be included in this assignment group.
	Labels map[string]string `pulumi:"labels"`
}

// AssignmentGroupLabelInput is an input type that accepts AssignmentGroupLabelArgs and AssignmentGroupLabelOutput values.
// You can construct a concrete instance of `AssignmentGroupLabelInput` via:
//
//          AssignmentGroupLabelArgs{...}
type AssignmentGroupLabelInput interface {
	pulumi.Input

	ToAssignmentGroupLabelOutput() AssignmentGroupLabelOutput
	ToAssignmentGroupLabelOutputWithContext(context.Context) AssignmentGroupLabelOutput
}

// Represents a group of VM intances that can be identified as having all these labels, for example "env=prod and app=web".
type AssignmentGroupLabelArgs struct {
	// Google Compute Engine instance labels that must be present for an instance to be included in this assignment group.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (AssignmentGroupLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentGroupLabel)(nil)).Elem()
}

func (i AssignmentGroupLabelArgs) ToAssignmentGroupLabelOutput() AssignmentGroupLabelOutput {
	return i.ToAssignmentGroupLabelOutputWithContext(context.Background())
}

func (i AssignmentGroupLabelArgs) ToAssignmentGroupLabelOutputWithContext(ctx context.Context) AssignmentGroupLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentGroupLabelOutput)
}

// AssignmentGroupLabelArrayInput is an input type that accepts AssignmentGroupLabelArray and AssignmentGroupLabelArrayOutput values.
// You can construct a concrete instance of `AssignmentGroupLabelArrayInput` via:
//
//          AssignmentGroupLabelArray{ AssignmentGroupLabelArgs{...} }
type AssignmentGroupLabelArrayInput interface {
	pulumi.Input

	ToAssignmentGroupLabelArrayOutput() AssignmentGroupLabelArrayOutput
	ToAssignmentGroupLabelArrayOutputWithContext(context.Context) AssignmentGroupLabelArrayOutput
}

type AssignmentGroupLabelArray []AssignmentGroupLabelInput

func (AssignmentGroupLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssignmentGroupLabel)(nil)).Elem()
}

func (i AssignmentGroupLabelArray) ToAssignmentGroupLabelArrayOutput() AssignmentGroupLabelArrayOutput {
	return i.ToAssignmentGroupLabelArrayOutputWithContext(context.Background())
}

func (i AssignmentGroupLabelArray) ToAssignmentGroupLabelArrayOutputWithContext(ctx context.Context) AssignmentGroupLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentGroupLabelArrayOutput)
}

// Represents a group of VM intances that can be identified as having all these labels, for example "env=prod and app=web".
type AssignmentGroupLabelOutput struct{ *pulumi.OutputState }

func (AssignmentGroupLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentGroupLabel)(nil)).Elem()
}

func (o AssignmentGroupLabelOutput) ToAssignmentGroupLabelOutput() AssignmentGroupLabelOutput {
	return o
}

func (o AssignmentGroupLabelOutput) ToAssignmentGroupLabelOutputWithContext(ctx context.Context) AssignmentGroupLabelOutput {
	return o
}

// Google Compute Engine instance labels that must be present for an instance to be included in this assignment group.
func (o AssignmentGroupLabelOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v AssignmentGroupLabel) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type AssignmentGroupLabelArrayOutput struct{ *pulumi.OutputState }

func (AssignmentGroupLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssignmentGroupLabel)(nil)).Elem()
}

func (o AssignmentGroupLabelArrayOutput) ToAssignmentGroupLabelArrayOutput() AssignmentGroupLabelArrayOutput {
	return o
}

func (o AssignmentGroupLabelArrayOutput) ToAssignmentGroupLabelArrayOutputWithContext(ctx context.Context) AssignmentGroupLabelArrayOutput {
	return o
}

func (o AssignmentGroupLabelArrayOutput) Index(i pulumi.IntInput) AssignmentGroupLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssignmentGroupLabel {
		return vs[0].([]AssignmentGroupLabel)[vs[1].(int)]
	}).(AssignmentGroupLabelOutput)
}

// Defines the criteria for selecting VM Instances by OS type.
type AssignmentOsType struct {
	// Targets VM instances with OS Inventory enabled and having the following OS architecture.
	OsArchitecture *string `pulumi:"osArchitecture"`
	// Targets VM instances with OS Inventory enabled and having the following OS short name, for example "debian" or "windows".
	OsShortName *string `pulumi:"osShortName"`
	// Targets VM instances with OS Inventory enabled and having the following following OS version.
	OsVersion *string `pulumi:"osVersion"`
}

// AssignmentOsTypeInput is an input type that accepts AssignmentOsTypeArgs and AssignmentOsTypeOutput values.
// You can construct a concrete instance of `AssignmentOsTypeInput` via:
//
//          AssignmentOsTypeArgs{...}
type AssignmentOsTypeInput interface {
	pulumi.Input

	ToAssignmentOsTypeOutput() AssignmentOsTypeOutput
	ToAssignmentOsTypeOutputWithContext(context.Context) AssignmentOsTypeOutput
}

// Defines the criteria for selecting VM Instances by OS type.
type AssignmentOsTypeArgs struct {
	// Targets VM instances with OS Inventory enabled and having the following OS architecture.
	OsArchitecture pulumi.StringPtrInput `pulumi:"osArchitecture"`
	// Targets VM instances with OS Inventory enabled and having the following OS short name, for example "debian" or "windows".
	OsShortName pulumi.StringPtrInput `pulumi:"osShortName"`
	// Targets VM instances with OS Inventory enabled and having the following following OS version.
	OsVersion pulumi.StringPtrInput `pulumi:"osVersion"`
}

func (AssignmentOsTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentOsType)(nil)).Elem()
}

func (i AssignmentOsTypeArgs) ToAssignmentOsTypeOutput() AssignmentOsTypeOutput {
	return i.ToAssignmentOsTypeOutputWithContext(context.Background())
}

func (i AssignmentOsTypeArgs) ToAssignmentOsTypeOutputWithContext(ctx context.Context) AssignmentOsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentOsTypeOutput)
}

// AssignmentOsTypeArrayInput is an input type that accepts AssignmentOsTypeArray and AssignmentOsTypeArrayOutput values.
// You can construct a concrete instance of `AssignmentOsTypeArrayInput` via:
//
//          AssignmentOsTypeArray{ AssignmentOsTypeArgs{...} }
type AssignmentOsTypeArrayInput interface {
	pulumi.Input

	ToAssignmentOsTypeArrayOutput() AssignmentOsTypeArrayOutput
	ToAssignmentOsTypeArrayOutputWithContext(context.Context) AssignmentOsTypeArrayOutput
}

type AssignmentOsTypeArray []AssignmentOsTypeInput

func (AssignmentOsTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssignmentOsType)(nil)).Elem()
}

func (i AssignmentOsTypeArray) ToAssignmentOsTypeArrayOutput() AssignmentOsTypeArrayOutput {
	return i.ToAssignmentOsTypeArrayOutputWithContext(context.Background())
}

func (i AssignmentOsTypeArray) ToAssignmentOsTypeArrayOutputWithContext(ctx context.Context) AssignmentOsTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentOsTypeArrayOutput)
}

// Defines the criteria for selecting VM Instances by OS type.
type AssignmentOsTypeOutput struct{ *pulumi.OutputState }

func (AssignmentOsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentOsType)(nil)).Elem()
}

func (o AssignmentOsTypeOutput) ToAssignmentOsTypeOutput() AssignmentOsTypeOutput {
	return o
}

func (o AssignmentOsTypeOutput) ToAssignmentOsTypeOutputWithContext(ctx context.Context) AssignmentOsTypeOutput {
	return o
}

// Targets VM instances with OS Inventory enabled and having the following OS architecture.
func (o AssignmentOsTypeOutput) OsArchitecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssignmentOsType) *string { return v.OsArchitecture }).(pulumi.StringPtrOutput)
}

// Targets VM instances with OS Inventory enabled and having the following OS short name, for example "debian" or "windows".
func (o AssignmentOsTypeOutput) OsShortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssignmentOsType) *string { return v.OsShortName }).(pulumi.StringPtrOutput)
}

// Targets VM instances with OS Inventory enabled and having the following following OS version.
func (o AssignmentOsTypeOutput) OsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssignmentOsType) *string { return v.OsVersion }).(pulumi.StringPtrOutput)
}

type AssignmentOsTypeArrayOutput struct{ *pulumi.OutputState }

func (AssignmentOsTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssignmentOsType)(nil)).Elem()
}

func (o AssignmentOsTypeArrayOutput) ToAssignmentOsTypeArrayOutput() AssignmentOsTypeArrayOutput {
	return o
}

func (o AssignmentOsTypeArrayOutput) ToAssignmentOsTypeArrayOutputWithContext(ctx context.Context) AssignmentOsTypeArrayOutput {
	return o
}

func (o AssignmentOsTypeArrayOutput) Index(i pulumi.IntInput) AssignmentOsTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssignmentOsType {
		return vs[0].([]AssignmentOsType)[vs[1].(int)]
	}).(AssignmentOsTypeOutput)
}

// A step that runs an executable for a PatchJob.
type ExecStep struct {
	// The ExecStepConfig for all Linux VMs targeted by the PatchJob.
	LinuxExecStepConfig *ExecStepConfig `pulumi:"linuxExecStepConfig"`
	// The ExecStepConfig for all Windows VMs targeted by the PatchJob.
	WindowsExecStepConfig *ExecStepConfig `pulumi:"windowsExecStepConfig"`
}

// ExecStepInput is an input type that accepts ExecStepArgs and ExecStepOutput values.
// You can construct a concrete instance of `ExecStepInput` via:
//
//          ExecStepArgs{...}
type ExecStepInput interface {
	pulumi.Input

	ToExecStepOutput() ExecStepOutput
	ToExecStepOutputWithContext(context.Context) ExecStepOutput
}

// A step that runs an executable for a PatchJob.
type ExecStepArgs struct {
	// The ExecStepConfig for all Linux VMs targeted by the PatchJob.
	LinuxExecStepConfig ExecStepConfigPtrInput `pulumi:"linuxExecStepConfig"`
	// The ExecStepConfig for all Windows VMs targeted by the PatchJob.
	WindowsExecStepConfig ExecStepConfigPtrInput `pulumi:"windowsExecStepConfig"`
}

func (ExecStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecStep)(nil)).Elem()
}

func (i ExecStepArgs) ToExecStepOutput() ExecStepOutput {
	return i.ToExecStepOutputWithContext(context.Background())
}

func (i ExecStepArgs) ToExecStepOutputWithContext(ctx context.Context) ExecStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecStepOutput)
}

func (i ExecStepArgs) ToExecStepPtrOutput() ExecStepPtrOutput {
	return i.ToExecStepPtrOutputWithContext(context.Background())
}

func (i ExecStepArgs) ToExecStepPtrOutputWithContext(ctx context.Context) ExecStepPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecStepOutput).ToExecStepPtrOutputWithContext(ctx)
}

// ExecStepPtrInput is an input type that accepts ExecStepArgs, ExecStepPtr and ExecStepPtrOutput values.
// You can construct a concrete instance of `ExecStepPtrInput` via:
//
//          ExecStepArgs{...}
//
//  or:
//
//          nil
type ExecStepPtrInput interface {
	pulumi.Input

	ToExecStepPtrOutput() ExecStepPtrOutput
	ToExecStepPtrOutputWithContext(context.Context) ExecStepPtrOutput
}

type execStepPtrType ExecStepArgs

func ExecStepPtr(v *ExecStepArgs) ExecStepPtrInput {
	return (*execStepPtrType)(v)
}

func (*execStepPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecStep)(nil)).Elem()
}

func (i *execStepPtrType) ToExecStepPtrOutput() ExecStepPtrOutput {
	return i.ToExecStepPtrOutputWithContext(context.Background())
}

func (i *execStepPtrType) ToExecStepPtrOutputWithContext(ctx context.Context) ExecStepPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecStepPtrOutput)
}

// A step that runs an executable for a PatchJob.
type ExecStepOutput struct{ *pulumi.OutputState }

func (ExecStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecStep)(nil)).Elem()
}

func (o ExecStepOutput) ToExecStepOutput() ExecStepOutput {
	return o
}

func (o ExecStepOutput) ToExecStepOutputWithContext(ctx context.Context) ExecStepOutput {
	return o
}

func (o ExecStepOutput) ToExecStepPtrOutput() ExecStepPtrOutput {
	return o.ToExecStepPtrOutputWithContext(context.Background())
}

func (o ExecStepOutput) ToExecStepPtrOutputWithContext(ctx context.Context) ExecStepPtrOutput {
	return o.ApplyT(func(v ExecStep) *ExecStep {
		return &v
	}).(ExecStepPtrOutput)
}

// The ExecStepConfig for all Linux VMs targeted by the PatchJob.
func (o ExecStepOutput) LinuxExecStepConfig() ExecStepConfigPtrOutput {
	return o.ApplyT(func(v ExecStep) *ExecStepConfig { return v.LinuxExecStepConfig }).(ExecStepConfigPtrOutput)
}

// The ExecStepConfig for all Windows VMs targeted by the PatchJob.
func (o ExecStepOutput) WindowsExecStepConfig() ExecStepConfigPtrOutput {
	return o.ApplyT(func(v ExecStep) *ExecStepConfig { return v.WindowsExecStepConfig }).(ExecStepConfigPtrOutput)
}

type ExecStepPtrOutput struct{ *pulumi.OutputState }

func (ExecStepPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecStep)(nil)).Elem()
}

func (o ExecStepPtrOutput) ToExecStepPtrOutput() ExecStepPtrOutput {
	return o
}

func (o ExecStepPtrOutput) ToExecStepPtrOutputWithContext(ctx context.Context) ExecStepPtrOutput {
	return o
}

func (o ExecStepPtrOutput) Elem() ExecStepOutput {
	return o.ApplyT(func(v *ExecStep) ExecStep { return *v }).(ExecStepOutput)
}

// The ExecStepConfig for all Linux VMs targeted by the PatchJob.
func (o ExecStepPtrOutput) LinuxExecStepConfig() ExecStepConfigPtrOutput {
	return o.ApplyT(func(v *ExecStep) *ExecStepConfig {
		if v == nil {
			return nil
		}
		return v.LinuxExecStepConfig
	}).(ExecStepConfigPtrOutput)
}

// The ExecStepConfig for all Windows VMs targeted by the PatchJob.
func (o ExecStepPtrOutput) WindowsExecStepConfig() ExecStepConfigPtrOutput {
	return o.ApplyT(func(v *ExecStep) *ExecStepConfig {
		if v == nil {
			return nil
		}
		return v.WindowsExecStepConfig
	}).(ExecStepConfigPtrOutput)
}

// Common configurations for an ExecStep.
type ExecStepConfig struct {
	// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
	AllowedSuccessCodes []int `pulumi:"allowedSuccessCodes"`
	// A Google Cloud Storage object containing the executable.
	GcsObject *GcsObject `pulumi:"gcsObject"`
	// The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
	Interpreter *string `pulumi:"interpreter"`
	// An absolute path to the executable on the VM.
	LocalPath *string `pulumi:"localPath"`
}

// ExecStepConfigInput is an input type that accepts ExecStepConfigArgs and ExecStepConfigOutput values.
// You can construct a concrete instance of `ExecStepConfigInput` via:
//
//          ExecStepConfigArgs{...}
type ExecStepConfigInput interface {
	pulumi.Input

	ToExecStepConfigOutput() ExecStepConfigOutput
	ToExecStepConfigOutputWithContext(context.Context) ExecStepConfigOutput
}

// Common configurations for an ExecStep.
type ExecStepConfigArgs struct {
	// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
	AllowedSuccessCodes pulumi.IntArrayInput `pulumi:"allowedSuccessCodes"`
	// A Google Cloud Storage object containing the executable.
	GcsObject GcsObjectPtrInput `pulumi:"gcsObject"`
	// The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
	Interpreter pulumi.StringPtrInput `pulumi:"interpreter"`
	// An absolute path to the executable on the VM.
	LocalPath pulumi.StringPtrInput `pulumi:"localPath"`
}

func (ExecStepConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecStepConfig)(nil)).Elem()
}

func (i ExecStepConfigArgs) ToExecStepConfigOutput() ExecStepConfigOutput {
	return i.ToExecStepConfigOutputWithContext(context.Background())
}

func (i ExecStepConfigArgs) ToExecStepConfigOutputWithContext(ctx context.Context) ExecStepConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecStepConfigOutput)
}

func (i ExecStepConfigArgs) ToExecStepConfigPtrOutput() ExecStepConfigPtrOutput {
	return i.ToExecStepConfigPtrOutputWithContext(context.Background())
}

func (i ExecStepConfigArgs) ToExecStepConfigPtrOutputWithContext(ctx context.Context) ExecStepConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecStepConfigOutput).ToExecStepConfigPtrOutputWithContext(ctx)
}

// ExecStepConfigPtrInput is an input type that accepts ExecStepConfigArgs, ExecStepConfigPtr and ExecStepConfigPtrOutput values.
// You can construct a concrete instance of `ExecStepConfigPtrInput` via:
//
//          ExecStepConfigArgs{...}
//
//  or:
//
//          nil
type ExecStepConfigPtrInput interface {
	pulumi.Input

	ToExecStepConfigPtrOutput() ExecStepConfigPtrOutput
	ToExecStepConfigPtrOutputWithContext(context.Context) ExecStepConfigPtrOutput
}

type execStepConfigPtrType ExecStepConfigArgs

func ExecStepConfigPtr(v *ExecStepConfigArgs) ExecStepConfigPtrInput {
	return (*execStepConfigPtrType)(v)
}

func (*execStepConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecStepConfig)(nil)).Elem()
}

func (i *execStepConfigPtrType) ToExecStepConfigPtrOutput() ExecStepConfigPtrOutput {
	return i.ToExecStepConfigPtrOutputWithContext(context.Background())
}

func (i *execStepConfigPtrType) ToExecStepConfigPtrOutputWithContext(ctx context.Context) ExecStepConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecStepConfigPtrOutput)
}

// Common configurations for an ExecStep.
type ExecStepConfigOutput struct{ *pulumi.OutputState }

func (ExecStepConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecStepConfig)(nil)).Elem()
}

func (o ExecStepConfigOutput) ToExecStepConfigOutput() ExecStepConfigOutput {
	return o
}

func (o ExecStepConfigOutput) ToExecStepConfigOutputWithContext(ctx context.Context) ExecStepConfigOutput {
	return o
}

func (o ExecStepConfigOutput) ToExecStepConfigPtrOutput() ExecStepConfigPtrOutput {
	return o.ToExecStepConfigPtrOutputWithContext(context.Background())
}

func (o ExecStepConfigOutput) ToExecStepConfigPtrOutputWithContext(ctx context.Context) ExecStepConfigPtrOutput {
	return o.ApplyT(func(v ExecStepConfig) *ExecStepConfig {
		return &v
	}).(ExecStepConfigPtrOutput)
}

// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
func (o ExecStepConfigOutput) AllowedSuccessCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ExecStepConfig) []int { return v.AllowedSuccessCodes }).(pulumi.IntArrayOutput)
}

// A Google Cloud Storage object containing the executable.
func (o ExecStepConfigOutput) GcsObject() GcsObjectPtrOutput {
	return o.ApplyT(func(v ExecStepConfig) *GcsObject { return v.GcsObject }).(GcsObjectPtrOutput)
}

// The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
func (o ExecStepConfigOutput) Interpreter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecStepConfig) *string { return v.Interpreter }).(pulumi.StringPtrOutput)
}

// An absolute path to the executable on the VM.
func (o ExecStepConfigOutput) LocalPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecStepConfig) *string { return v.LocalPath }).(pulumi.StringPtrOutput)
}

type ExecStepConfigPtrOutput struct{ *pulumi.OutputState }

func (ExecStepConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecStepConfig)(nil)).Elem()
}

func (o ExecStepConfigPtrOutput) ToExecStepConfigPtrOutput() ExecStepConfigPtrOutput {
	return o
}

func (o ExecStepConfigPtrOutput) ToExecStepConfigPtrOutputWithContext(ctx context.Context) ExecStepConfigPtrOutput {
	return o
}

func (o ExecStepConfigPtrOutput) Elem() ExecStepConfigOutput {
	return o.ApplyT(func(v *ExecStepConfig) ExecStepConfig { return *v }).(ExecStepConfigOutput)
}

// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
func (o ExecStepConfigPtrOutput) AllowedSuccessCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ExecStepConfig) []int {
		if v == nil {
			return nil
		}
		return v.AllowedSuccessCodes
	}).(pulumi.IntArrayOutput)
}

// A Google Cloud Storage object containing the executable.
func (o ExecStepConfigPtrOutput) GcsObject() GcsObjectPtrOutput {
	return o.ApplyT(func(v *ExecStepConfig) *GcsObject {
		if v == nil {
			return nil
		}
		return v.GcsObject
	}).(GcsObjectPtrOutput)
}

// The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
func (o ExecStepConfigPtrOutput) Interpreter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecStepConfig) *string {
		if v == nil {
			return nil
		}
		return v.Interpreter
	}).(pulumi.StringPtrOutput)
}

// An absolute path to the executable on the VM.
func (o ExecStepConfigPtrOutput) LocalPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecStepConfig) *string {
		if v == nil {
			return nil
		}
		return v.LocalPath
	}).(pulumi.StringPtrOutput)
}

// Message encapsulating a value that can be either absolute ("fixed") or relative ("percent") to a value.
type FixedOrPercent struct {
	// Specifies a fixed value.
	Fixed *int `pulumi:"fixed"`
	// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
	Percent *int `pulumi:"percent"`
}

// FixedOrPercentInput is an input type that accepts FixedOrPercentArgs and FixedOrPercentOutput values.
// You can construct a concrete instance of `FixedOrPercentInput` via:
//
//          FixedOrPercentArgs{...}
type FixedOrPercentInput interface {
	pulumi.Input

	ToFixedOrPercentOutput() FixedOrPercentOutput
	ToFixedOrPercentOutputWithContext(context.Context) FixedOrPercentOutput
}

// Message encapsulating a value that can be either absolute ("fixed") or relative ("percent") to a value.
type FixedOrPercentArgs struct {
	// Specifies a fixed value.
	Fixed pulumi.IntPtrInput `pulumi:"fixed"`
	// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
	Percent pulumi.IntPtrInput `pulumi:"percent"`
}

func (FixedOrPercentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedOrPercent)(nil)).Elem()
}

func (i FixedOrPercentArgs) ToFixedOrPercentOutput() FixedOrPercentOutput {
	return i.ToFixedOrPercentOutputWithContext(context.Background())
}

func (i FixedOrPercentArgs) ToFixedOrPercentOutputWithContext(ctx context.Context) FixedOrPercentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentOutput)
}

func (i FixedOrPercentArgs) ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput {
	return i.ToFixedOrPercentPtrOutputWithContext(context.Background())
}

func (i FixedOrPercentArgs) ToFixedOrPercentPtrOutputWithContext(ctx context.Context) FixedOrPercentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentOutput).ToFixedOrPercentPtrOutputWithContext(ctx)
}

// FixedOrPercentPtrInput is an input type that accepts FixedOrPercentArgs, FixedOrPercentPtr and FixedOrPercentPtrOutput values.
// You can construct a concrete instance of `FixedOrPercentPtrInput` via:
//
//          FixedOrPercentArgs{...}
//
//  or:
//
//          nil
type FixedOrPercentPtrInput interface {
	pulumi.Input

	ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput
	ToFixedOrPercentPtrOutputWithContext(context.Context) FixedOrPercentPtrOutput
}

type fixedOrPercentPtrType FixedOrPercentArgs

func FixedOrPercentPtr(v *FixedOrPercentArgs) FixedOrPercentPtrInput {
	return (*fixedOrPercentPtrType)(v)
}

func (*fixedOrPercentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FixedOrPercent)(nil)).Elem()
}

func (i *fixedOrPercentPtrType) ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput {
	return i.ToFixedOrPercentPtrOutputWithContext(context.Background())
}

func (i *fixedOrPercentPtrType) ToFixedOrPercentPtrOutputWithContext(ctx context.Context) FixedOrPercentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentPtrOutput)
}

// Message encapsulating a value that can be either absolute ("fixed") or relative ("percent") to a value.
type FixedOrPercentOutput struct{ *pulumi.OutputState }

func (FixedOrPercentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedOrPercent)(nil)).Elem()
}

func (o FixedOrPercentOutput) ToFixedOrPercentOutput() FixedOrPercentOutput {
	return o
}

func (o FixedOrPercentOutput) ToFixedOrPercentOutputWithContext(ctx context.Context) FixedOrPercentOutput {
	return o
}

func (o FixedOrPercentOutput) ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput {
	return o.ToFixedOrPercentPtrOutputWithContext(context.Background())
}

func (o FixedOrPercentOutput) ToFixedOrPercentPtrOutputWithContext(ctx context.Context) FixedOrPercentPtrOutput {
	return o.ApplyT(func(v FixedOrPercent) *FixedOrPercent {
		return &v
	}).(FixedOrPercentPtrOutput)
}

// Specifies a fixed value.
func (o FixedOrPercentOutput) Fixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FixedOrPercent) *int { return v.Fixed }).(pulumi.IntPtrOutput)
}

// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
func (o FixedOrPercentOutput) Percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FixedOrPercent) *int { return v.Percent }).(pulumi.IntPtrOutput)
}

type FixedOrPercentPtrOutput struct{ *pulumi.OutputState }

func (FixedOrPercentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FixedOrPercent)(nil)).Elem()
}

func (o FixedOrPercentPtrOutput) ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput {
	return o
}

func (o FixedOrPercentPtrOutput) ToFixedOrPercentPtrOutputWithContext(ctx context.Context) FixedOrPercentPtrOutput {
	return o
}

func (o FixedOrPercentPtrOutput) Elem() FixedOrPercentOutput {
	return o.ApplyT(func(v *FixedOrPercent) FixedOrPercent { return *v }).(FixedOrPercentOutput)
}

// Specifies a fixed value.
func (o FixedOrPercentPtrOutput) Fixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedOrPercent) *int {
		if v == nil {
			return nil
		}
		return v.Fixed
	}).(pulumi.IntPtrOutput)
}

// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
func (o FixedOrPercentPtrOutput) Percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedOrPercent) *int {
		if v == nil {
			return nil
		}
		return v.Percent
	}).(pulumi.IntPtrOutput)
}

// Google Cloud Storage object representation.
type GcsObject struct {
	// Required. Bucket of the Google Cloud Storage object.
	Bucket *string `pulumi:"bucket"`
	// Required. Generation number of the Google Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
	GenerationNumber *string `pulumi:"generationNumber"`
	// Required. Name of the Google Cloud Storage object.
	Object *string `pulumi:"object"`
}

// GcsObjectInput is an input type that accepts GcsObjectArgs and GcsObjectOutput values.
// You can construct a concrete instance of `GcsObjectInput` via:
//
//          GcsObjectArgs{...}
type GcsObjectInput interface {
	pulumi.Input

	ToGcsObjectOutput() GcsObjectOutput
	ToGcsObjectOutputWithContext(context.Context) GcsObjectOutput
}

// Google Cloud Storage object representation.
type GcsObjectArgs struct {
	// Required. Bucket of the Google Cloud Storage object.
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// Required. Generation number of the Google Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
	GenerationNumber pulumi.StringPtrInput `pulumi:"generationNumber"`
	// Required. Name of the Google Cloud Storage object.
	Object pulumi.StringPtrInput `pulumi:"object"`
}

func (GcsObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsObject)(nil)).Elem()
}

func (i GcsObjectArgs) ToGcsObjectOutput() GcsObjectOutput {
	return i.ToGcsObjectOutputWithContext(context.Background())
}

func (i GcsObjectArgs) ToGcsObjectOutputWithContext(ctx context.Context) GcsObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsObjectOutput)
}

func (i GcsObjectArgs) ToGcsObjectPtrOutput() GcsObjectPtrOutput {
	return i.ToGcsObjectPtrOutputWithContext(context.Background())
}

func (i GcsObjectArgs) ToGcsObjectPtrOutputWithContext(ctx context.Context) GcsObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsObjectOutput).ToGcsObjectPtrOutputWithContext(ctx)
}

// GcsObjectPtrInput is an input type that accepts GcsObjectArgs, GcsObjectPtr and GcsObjectPtrOutput values.
// You can construct a concrete instance of `GcsObjectPtrInput` via:
//
//          GcsObjectArgs{...}
//
//  or:
//
//          nil
type GcsObjectPtrInput interface {
	pulumi.Input

	ToGcsObjectPtrOutput() GcsObjectPtrOutput
	ToGcsObjectPtrOutputWithContext(context.Context) GcsObjectPtrOutput
}

type gcsObjectPtrType GcsObjectArgs

func GcsObjectPtr(v *GcsObjectArgs) GcsObjectPtrInput {
	return (*gcsObjectPtrType)(v)
}

func (*gcsObjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsObject)(nil)).Elem()
}

func (i *gcsObjectPtrType) ToGcsObjectPtrOutput() GcsObjectPtrOutput {
	return i.ToGcsObjectPtrOutputWithContext(context.Background())
}

func (i *gcsObjectPtrType) ToGcsObjectPtrOutputWithContext(ctx context.Context) GcsObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsObjectPtrOutput)
}

// Google Cloud Storage object representation.
type GcsObjectOutput struct{ *pulumi.OutputState }

func (GcsObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsObject)(nil)).Elem()
}

func (o GcsObjectOutput) ToGcsObjectOutput() GcsObjectOutput {
	return o
}

func (o GcsObjectOutput) ToGcsObjectOutputWithContext(ctx context.Context) GcsObjectOutput {
	return o
}

func (o GcsObjectOutput) ToGcsObjectPtrOutput() GcsObjectPtrOutput {
	return o.ToGcsObjectPtrOutputWithContext(context.Background())
}

func (o GcsObjectOutput) ToGcsObjectPtrOutputWithContext(ctx context.Context) GcsObjectPtrOutput {
	return o.ApplyT(func(v GcsObject) *GcsObject {
		return &v
	}).(GcsObjectPtrOutput)
}

// Required. Bucket of the Google Cloud Storage object.
func (o GcsObjectOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsObject) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// Required. Generation number of the Google Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
func (o GcsObjectOutput) GenerationNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsObject) *string { return v.GenerationNumber }).(pulumi.StringPtrOutput)
}

// Required. Name of the Google Cloud Storage object.
func (o GcsObjectOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsObject) *string { return v.Object }).(pulumi.StringPtrOutput)
}

type GcsObjectPtrOutput struct{ *pulumi.OutputState }

func (GcsObjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsObject)(nil)).Elem()
}

func (o GcsObjectPtrOutput) ToGcsObjectPtrOutput() GcsObjectPtrOutput {
	return o
}

func (o GcsObjectPtrOutput) ToGcsObjectPtrOutputWithContext(ctx context.Context) GcsObjectPtrOutput {
	return o
}

func (o GcsObjectPtrOutput) Elem() GcsObjectOutput {
	return o.ApplyT(func(v *GcsObject) GcsObject { return *v }).(GcsObjectOutput)
}

// Required. Bucket of the Google Cloud Storage object.
func (o GcsObjectPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsObject) *string {
		if v == nil {
			return nil
		}
		return v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Required. Generation number of the Google Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
func (o GcsObjectPtrOutput) GenerationNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsObject) *string {
		if v == nil {
			return nil
		}
		return v.GenerationNumber
	}).(pulumi.StringPtrOutput)
}

// Required. Name of the Google Cloud Storage object.
func (o GcsObjectPtrOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsObject) *string {
		if v == nil {
			return nil
		}
		return v.Object
	}).(pulumi.StringPtrOutput)
}

// Represents a Goo package repository. These is added to a repo file that is stored at C:/ProgramData/GooGet/repos/google_osconfig.repo.
type GooRepository struct {
	// Required. The name of the repository.
	Name *string `pulumi:"name"`
	// Required. The url of the repository.
	Url *string `pulumi:"url"`
}

// GooRepositoryInput is an input type that accepts GooRepositoryArgs and GooRepositoryOutput values.
// You can construct a concrete instance of `GooRepositoryInput` via:
//
//          GooRepositoryArgs{...}
type GooRepositoryInput interface {
	pulumi.Input

	ToGooRepositoryOutput() GooRepositoryOutput
	ToGooRepositoryOutputWithContext(context.Context) GooRepositoryOutput
}

// Represents a Goo package repository. These is added to a repo file that is stored at C:/ProgramData/GooGet/repos/google_osconfig.repo.
type GooRepositoryArgs struct {
	// Required. The name of the repository.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Required. The url of the repository.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GooRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooRepository)(nil)).Elem()
}

func (i GooRepositoryArgs) ToGooRepositoryOutput() GooRepositoryOutput {
	return i.ToGooRepositoryOutputWithContext(context.Background())
}

func (i GooRepositoryArgs) ToGooRepositoryOutputWithContext(ctx context.Context) GooRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooRepositoryOutput)
}

func (i GooRepositoryArgs) ToGooRepositoryPtrOutput() GooRepositoryPtrOutput {
	return i.ToGooRepositoryPtrOutputWithContext(context.Background())
}

func (i GooRepositoryArgs) ToGooRepositoryPtrOutputWithContext(ctx context.Context) GooRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooRepositoryOutput).ToGooRepositoryPtrOutputWithContext(ctx)
}

// GooRepositoryPtrInput is an input type that accepts GooRepositoryArgs, GooRepositoryPtr and GooRepositoryPtrOutput values.
// You can construct a concrete instance of `GooRepositoryPtrInput` via:
//
//          GooRepositoryArgs{...}
//
//  or:
//
//          nil
type GooRepositoryPtrInput interface {
	pulumi.Input

	ToGooRepositoryPtrOutput() GooRepositoryPtrOutput
	ToGooRepositoryPtrOutputWithContext(context.Context) GooRepositoryPtrOutput
}

type gooRepositoryPtrType GooRepositoryArgs

func GooRepositoryPtr(v *GooRepositoryArgs) GooRepositoryPtrInput {
	return (*gooRepositoryPtrType)(v)
}

func (*gooRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooRepository)(nil)).Elem()
}

func (i *gooRepositoryPtrType) ToGooRepositoryPtrOutput() GooRepositoryPtrOutput {
	return i.ToGooRepositoryPtrOutputWithContext(context.Background())
}

func (i *gooRepositoryPtrType) ToGooRepositoryPtrOutputWithContext(ctx context.Context) GooRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooRepositoryPtrOutput)
}

// Represents a Goo package repository. These is added to a repo file that is stored at C:/ProgramData/GooGet/repos/google_osconfig.repo.
type GooRepositoryOutput struct{ *pulumi.OutputState }

func (GooRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooRepository)(nil)).Elem()
}

func (o GooRepositoryOutput) ToGooRepositoryOutput() GooRepositoryOutput {
	return o
}

func (o GooRepositoryOutput) ToGooRepositoryOutputWithContext(ctx context.Context) GooRepositoryOutput {
	return o
}

func (o GooRepositoryOutput) ToGooRepositoryPtrOutput() GooRepositoryPtrOutput {
	return o.ToGooRepositoryPtrOutputWithContext(context.Background())
}

func (o GooRepositoryOutput) ToGooRepositoryPtrOutputWithContext(ctx context.Context) GooRepositoryPtrOutput {
	return o.ApplyT(func(v GooRepository) *GooRepository {
		return &v
	}).(GooRepositoryPtrOutput)
}

// Required. The name of the repository.
func (o GooRepositoryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooRepository) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Required. The url of the repository.
func (o GooRepositoryOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooRepository) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GooRepositoryPtrOutput struct{ *pulumi.OutputState }

func (GooRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooRepository)(nil)).Elem()
}

func (o GooRepositoryPtrOutput) ToGooRepositoryPtrOutput() GooRepositoryPtrOutput {
	return o
}

func (o GooRepositoryPtrOutput) ToGooRepositoryPtrOutputWithContext(ctx context.Context) GooRepositoryPtrOutput {
	return o
}

func (o GooRepositoryPtrOutput) Elem() GooRepositoryOutput {
	return o.ApplyT(func(v *GooRepository) GooRepository { return *v }).(GooRepositoryOutput)
}

// Required. The name of the repository.
func (o GooRepositoryPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooRepository) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Required. The url of the repository.
func (o GooRepositoryPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooRepository) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Googet patching is performed by running `googet update`.
type GooSettings struct {
}

// GooSettingsInput is an input type that accepts GooSettingsArgs and GooSettingsOutput values.
// You can construct a concrete instance of `GooSettingsInput` via:
//
//          GooSettingsArgs{...}
type GooSettingsInput interface {
	pulumi.Input

	ToGooSettingsOutput() GooSettingsOutput
	ToGooSettingsOutputWithContext(context.Context) GooSettingsOutput
}

// Googet patching is performed by running `googet update`.
type GooSettingsArgs struct {
}

func (GooSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooSettings)(nil)).Elem()
}

func (i GooSettingsArgs) ToGooSettingsOutput() GooSettingsOutput {
	return i.ToGooSettingsOutputWithContext(context.Background())
}

func (i GooSettingsArgs) ToGooSettingsOutputWithContext(ctx context.Context) GooSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooSettingsOutput)
}

func (i GooSettingsArgs) ToGooSettingsPtrOutput() GooSettingsPtrOutput {
	return i.ToGooSettingsPtrOutputWithContext(context.Background())
}

func (i GooSettingsArgs) ToGooSettingsPtrOutputWithContext(ctx context.Context) GooSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooSettingsOutput).ToGooSettingsPtrOutputWithContext(ctx)
}

// GooSettingsPtrInput is an input type that accepts GooSettingsArgs, GooSettingsPtr and GooSettingsPtrOutput values.
// You can construct a concrete instance of `GooSettingsPtrInput` via:
//
//          GooSettingsArgs{...}
//
//  or:
//
//          nil
type GooSettingsPtrInput interface {
	pulumi.Input

	ToGooSettingsPtrOutput() GooSettingsPtrOutput
	ToGooSettingsPtrOutputWithContext(context.Context) GooSettingsPtrOutput
}

type gooSettingsPtrType GooSettingsArgs

func GooSettingsPtr(v *GooSettingsArgs) GooSettingsPtrInput {
	return (*gooSettingsPtrType)(v)
}

func (*gooSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooSettings)(nil)).Elem()
}

func (i *gooSettingsPtrType) ToGooSettingsPtrOutput() GooSettingsPtrOutput {
	return i.ToGooSettingsPtrOutputWithContext(context.Background())
}

func (i *gooSettingsPtrType) ToGooSettingsPtrOutputWithContext(ctx context.Context) GooSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooSettingsPtrOutput)
}

// Googet patching is performed by running `googet update`.
type GooSettingsOutput struct{ *pulumi.OutputState }

func (GooSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooSettings)(nil)).Elem()
}

func (o GooSettingsOutput) ToGooSettingsOutput() GooSettingsOutput {
	return o
}

func (o GooSettingsOutput) ToGooSettingsOutputWithContext(ctx context.Context) GooSettingsOutput {
	return o
}

func (o GooSettingsOutput) ToGooSettingsPtrOutput() GooSettingsPtrOutput {
	return o.ToGooSettingsPtrOutputWithContext(context.Background())
}

func (o GooSettingsOutput) ToGooSettingsPtrOutputWithContext(ctx context.Context) GooSettingsPtrOutput {
	return o.ApplyT(func(v GooSettings) *GooSettings {
		return &v
	}).(GooSettingsPtrOutput)
}

type GooSettingsPtrOutput struct{ *pulumi.OutputState }

func (GooSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooSettings)(nil)).Elem()
}

func (o GooSettingsPtrOutput) ToGooSettingsPtrOutput() GooSettingsPtrOutput {
	return o
}

func (o GooSettingsPtrOutput) ToGooSettingsPtrOutputWithContext(ctx context.Context) GooSettingsPtrOutput {
	return o
}

func (o GooSettingsPtrOutput) Elem() GooSettingsOutput {
	return o.ApplyT(func(v *GooSettings) GooSettings { return *v }).(GooSettingsOutput)
}

// Represents a monthly schedule. An example of a valid monthly schedule is "on the third Tuesday of the month" or "on the 15th of the month".
type MonthlySchedule struct {
	// Required. One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month. Months without the target day will be skipped. For example, a schedule to run "every month on the 31st" will not run in February, April, June, etc.
	MonthDay *int `pulumi:"monthDay"`
	// Required. Week day in a month.
	WeekDayOfMonth *WeekDayOfMonth `pulumi:"weekDayOfMonth"`
}

// MonthlyScheduleInput is an input type that accepts MonthlyScheduleArgs and MonthlyScheduleOutput values.
// You can construct a concrete instance of `MonthlyScheduleInput` via:
//
//          MonthlyScheduleArgs{...}
type MonthlyScheduleInput interface {
	pulumi.Input

	ToMonthlyScheduleOutput() MonthlyScheduleOutput
	ToMonthlyScheduleOutputWithContext(context.Context) MonthlyScheduleOutput
}

// Represents a monthly schedule. An example of a valid monthly schedule is "on the third Tuesday of the month" or "on the 15th of the month".
type MonthlyScheduleArgs struct {
	// Required. One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month. Months without the target day will be skipped. For example, a schedule to run "every month on the 31st" will not run in February, April, June, etc.
	MonthDay pulumi.IntPtrInput `pulumi:"monthDay"`
	// Required. Week day in a month.
	WeekDayOfMonth WeekDayOfMonthPtrInput `pulumi:"weekDayOfMonth"`
}

func (MonthlyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonthlySchedule)(nil)).Elem()
}

func (i MonthlyScheduleArgs) ToMonthlyScheduleOutput() MonthlyScheduleOutput {
	return i.ToMonthlyScheduleOutputWithContext(context.Background())
}

func (i MonthlyScheduleArgs) ToMonthlyScheduleOutputWithContext(ctx context.Context) MonthlyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonthlyScheduleOutput)
}

func (i MonthlyScheduleArgs) ToMonthlySchedulePtrOutput() MonthlySchedulePtrOutput {
	return i.ToMonthlySchedulePtrOutputWithContext(context.Background())
}

func (i MonthlyScheduleArgs) ToMonthlySchedulePtrOutputWithContext(ctx context.Context) MonthlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonthlyScheduleOutput).ToMonthlySchedulePtrOutputWithContext(ctx)
}

// MonthlySchedulePtrInput is an input type that accepts MonthlyScheduleArgs, MonthlySchedulePtr and MonthlySchedulePtrOutput values.
// You can construct a concrete instance of `MonthlySchedulePtrInput` via:
//
//          MonthlyScheduleArgs{...}
//
//  or:
//
//          nil
type MonthlySchedulePtrInput interface {
	pulumi.Input

	ToMonthlySchedulePtrOutput() MonthlySchedulePtrOutput
	ToMonthlySchedulePtrOutputWithContext(context.Context) MonthlySchedulePtrOutput
}

type monthlySchedulePtrType MonthlyScheduleArgs

func MonthlySchedulePtr(v *MonthlyScheduleArgs) MonthlySchedulePtrInput {
	return (*monthlySchedulePtrType)(v)
}

func (*monthlySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonthlySchedule)(nil)).Elem()
}

func (i *monthlySchedulePtrType) ToMonthlySchedulePtrOutput() MonthlySchedulePtrOutput {
	return i.ToMonthlySchedulePtrOutputWithContext(context.Background())
}

func (i *monthlySchedulePtrType) ToMonthlySchedulePtrOutputWithContext(ctx context.Context) MonthlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonthlySchedulePtrOutput)
}

// Represents a monthly schedule. An example of a valid monthly schedule is "on the third Tuesday of the month" or "on the 15th of the month".
type MonthlyScheduleOutput struct{ *pulumi.OutputState }

func (MonthlyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonthlySchedule)(nil)).Elem()
}

func (o MonthlyScheduleOutput) ToMonthlyScheduleOutput() MonthlyScheduleOutput {
	return o
}

func (o MonthlyScheduleOutput) ToMonthlyScheduleOutputWithContext(ctx context.Context) MonthlyScheduleOutput {
	return o
}

func (o MonthlyScheduleOutput) ToMonthlySchedulePtrOutput() MonthlySchedulePtrOutput {
	return o.ToMonthlySchedulePtrOutputWithContext(context.Background())
}

func (o MonthlyScheduleOutput) ToMonthlySchedulePtrOutputWithContext(ctx context.Context) MonthlySchedulePtrOutput {
	return o.ApplyT(func(v MonthlySchedule) *MonthlySchedule {
		return &v
	}).(MonthlySchedulePtrOutput)
}

// Required. One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month. Months without the target day will be skipped. For example, a schedule to run "every month on the 31st" will not run in February, April, June, etc.
func (o MonthlyScheduleOutput) MonthDay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonthlySchedule) *int { return v.MonthDay }).(pulumi.IntPtrOutput)
}

// Required. Week day in a month.
func (o MonthlyScheduleOutput) WeekDayOfMonth() WeekDayOfMonthPtrOutput {
	return o.ApplyT(func(v MonthlySchedule) *WeekDayOfMonth { return v.WeekDayOfMonth }).(WeekDayOfMonthPtrOutput)
}

type MonthlySchedulePtrOutput struct{ *pulumi.OutputState }

func (MonthlySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonthlySchedule)(nil)).Elem()
}

func (o MonthlySchedulePtrOutput) ToMonthlySchedulePtrOutput() MonthlySchedulePtrOutput {
	return o
}

func (o MonthlySchedulePtrOutput) ToMonthlySchedulePtrOutputWithContext(ctx context.Context) MonthlySchedulePtrOutput {
	return o
}

func (o MonthlySchedulePtrOutput) Elem() MonthlyScheduleOutput {
	return o.ApplyT(func(v *MonthlySchedule) MonthlySchedule { return *v }).(MonthlyScheduleOutput)
}

// Required. One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month. Months without the target day will be skipped. For example, a schedule to run "every month on the 31st" will not run in February, April, June, etc.
func (o MonthlySchedulePtrOutput) MonthDay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonthlySchedule) *int {
		if v == nil {
			return nil
		}
		return v.MonthDay
	}).(pulumi.IntPtrOutput)
}

// Required. Week day in a month.
func (o MonthlySchedulePtrOutput) WeekDayOfMonth() WeekDayOfMonthPtrOutput {
	return o.ApplyT(func(v *MonthlySchedule) *WeekDayOfMonth {
		if v == nil {
			return nil
		}
		return v.WeekDayOfMonth
	}).(WeekDayOfMonthPtrOutput)
}

// Sets the time for a one time patch deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
type OneTimeSchedule struct {
	// Required. The desired patch job execution time.
	ExecuteTime *string `pulumi:"executeTime"`
}

// OneTimeScheduleInput is an input type that accepts OneTimeScheduleArgs and OneTimeScheduleOutput values.
// You can construct a concrete instance of `OneTimeScheduleInput` via:
//
//          OneTimeScheduleArgs{...}
type OneTimeScheduleInput interface {
	pulumi.Input

	ToOneTimeScheduleOutput() OneTimeScheduleOutput
	ToOneTimeScheduleOutputWithContext(context.Context) OneTimeScheduleOutput
}

// Sets the time for a one time patch deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
type OneTimeScheduleArgs struct {
	// Required. The desired patch job execution time.
	ExecuteTime pulumi.StringPtrInput `pulumi:"executeTime"`
}

func (OneTimeScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneTimeSchedule)(nil)).Elem()
}

func (i OneTimeScheduleArgs) ToOneTimeScheduleOutput() OneTimeScheduleOutput {
	return i.ToOneTimeScheduleOutputWithContext(context.Background())
}

func (i OneTimeScheduleArgs) ToOneTimeScheduleOutputWithContext(ctx context.Context) OneTimeScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneTimeScheduleOutput)
}

func (i OneTimeScheduleArgs) ToOneTimeSchedulePtrOutput() OneTimeSchedulePtrOutput {
	return i.ToOneTimeSchedulePtrOutputWithContext(context.Background())
}

func (i OneTimeScheduleArgs) ToOneTimeSchedulePtrOutputWithContext(ctx context.Context) OneTimeSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneTimeScheduleOutput).ToOneTimeSchedulePtrOutputWithContext(ctx)
}

// OneTimeSchedulePtrInput is an input type that accepts OneTimeScheduleArgs, OneTimeSchedulePtr and OneTimeSchedulePtrOutput values.
// You can construct a concrete instance of `OneTimeSchedulePtrInput` via:
//
//          OneTimeScheduleArgs{...}
//
//  or:
//
//          nil
type OneTimeSchedulePtrInput interface {
	pulumi.Input

	ToOneTimeSchedulePtrOutput() OneTimeSchedulePtrOutput
	ToOneTimeSchedulePtrOutputWithContext(context.Context) OneTimeSchedulePtrOutput
}

type oneTimeSchedulePtrType OneTimeScheduleArgs

func OneTimeSchedulePtr(v *OneTimeScheduleArgs) OneTimeSchedulePtrInput {
	return (*oneTimeSchedulePtrType)(v)
}

func (*oneTimeSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OneTimeSchedule)(nil)).Elem()
}

func (i *oneTimeSchedulePtrType) ToOneTimeSchedulePtrOutput() OneTimeSchedulePtrOutput {
	return i.ToOneTimeSchedulePtrOutputWithContext(context.Background())
}

func (i *oneTimeSchedulePtrType) ToOneTimeSchedulePtrOutputWithContext(ctx context.Context) OneTimeSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneTimeSchedulePtrOutput)
}

// Sets the time for a one time patch deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
type OneTimeScheduleOutput struct{ *pulumi.OutputState }

func (OneTimeScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneTimeSchedule)(nil)).Elem()
}

func (o OneTimeScheduleOutput) ToOneTimeScheduleOutput() OneTimeScheduleOutput {
	return o
}

func (o OneTimeScheduleOutput) ToOneTimeScheduleOutputWithContext(ctx context.Context) OneTimeScheduleOutput {
	return o
}

func (o OneTimeScheduleOutput) ToOneTimeSchedulePtrOutput() OneTimeSchedulePtrOutput {
	return o.ToOneTimeSchedulePtrOutputWithContext(context.Background())
}

func (o OneTimeScheduleOutput) ToOneTimeSchedulePtrOutputWithContext(ctx context.Context) OneTimeSchedulePtrOutput {
	return o.ApplyT(func(v OneTimeSchedule) *OneTimeSchedule {
		return &v
	}).(OneTimeSchedulePtrOutput)
}

// Required. The desired patch job execution time.
func (o OneTimeScheduleOutput) ExecuteTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneTimeSchedule) *string { return v.ExecuteTime }).(pulumi.StringPtrOutput)
}

type OneTimeSchedulePtrOutput struct{ *pulumi.OutputState }

func (OneTimeSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OneTimeSchedule)(nil)).Elem()
}

func (o OneTimeSchedulePtrOutput) ToOneTimeSchedulePtrOutput() OneTimeSchedulePtrOutput {
	return o
}

func (o OneTimeSchedulePtrOutput) ToOneTimeSchedulePtrOutputWithContext(ctx context.Context) OneTimeSchedulePtrOutput {
	return o
}

func (o OneTimeSchedulePtrOutput) Elem() OneTimeScheduleOutput {
	return o.ApplyT(func(v *OneTimeSchedule) OneTimeSchedule { return *v }).(OneTimeScheduleOutput)
}

// Required. The desired patch job execution time.
func (o OneTimeSchedulePtrOutput) ExecuteTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OneTimeSchedule) *string {
		if v == nil {
			return nil
		}
		return v.ExecuteTime
	}).(pulumi.StringPtrOutput)
}

// Package is a reference to the software package to be installed or removed. The agent on the VM instance uses the system package manager to apply the config. These are the commands that the agent uses to install or remove packages. Apt install: `apt-get update && apt-get -y install package1 package2 package3` remove: `apt-get -y remove package1 package2 package3` Yum install: `yum -y install package1 package2 package3` remove: `yum -y remove package1 package2 package3` Zypper install: `zypper install package1 package2 package3` remove: `zypper rm package1 package2` Googet install: `googet -noconfirm install package1 package2 package3` remove: `googet -noconfirm remove package1 package2 package3`
type Package struct {
	// The desired_state the agent should maintain for this package. The default is to ensure the package is installed.
	DesiredState *string `pulumi:"desiredState"`
	// Type of package manager that can be used to install this package. If a system does not have the package manager, the package is not installed or removed no error message is returned. By default, or if you specify `ANY`, the agent attempts to install and remove this package using the default package manager. This is useful when creating a policy that applies to different types of systems. The default behavior is ANY.
	Manager *string `pulumi:"manager"`
	// Required. The name of the package. A package is uniquely identified for conflict validation by checking the package name and the manager(s) that the package targets.
	Name *string `pulumi:"name"`
}

// PackageInput is an input type that accepts PackageArgs and PackageOutput values.
// You can construct a concrete instance of `PackageInput` via:
//
//          PackageArgs{...}
type PackageInput interface {
	pulumi.Input

	ToPackageOutput() PackageOutput
	ToPackageOutputWithContext(context.Context) PackageOutput
}

// Package is a reference to the software package to be installed or removed. The agent on the VM instance uses the system package manager to apply the config. These are the commands that the agent uses to install or remove packages. Apt install: `apt-get update && apt-get -y install package1 package2 package3` remove: `apt-get -y remove package1 package2 package3` Yum install: `yum -y install package1 package2 package3` remove: `yum -y remove package1 package2 package3` Zypper install: `zypper install package1 package2 package3` remove: `zypper rm package1 package2` Googet install: `googet -noconfirm install package1 package2 package3` remove: `googet -noconfirm remove package1 package2 package3`
type PackageArgs struct {
	// The desired_state the agent should maintain for this package. The default is to ensure the package is installed.
	DesiredState pulumi.StringPtrInput `pulumi:"desiredState"`
	// Type of package manager that can be used to install this package. If a system does not have the package manager, the package is not installed or removed no error message is returned. By default, or if you specify `ANY`, the agent attempts to install and remove this package using the default package manager. This is useful when creating a policy that applies to different types of systems. The default behavior is ANY.
	Manager pulumi.StringPtrInput `pulumi:"manager"`
	// Required. The name of the package. A package is uniquely identified for conflict validation by checking the package name and the manager(s) that the package targets.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Package)(nil)).Elem()
}

func (i PackageArgs) ToPackageOutput() PackageOutput {
	return i.ToPackageOutputWithContext(context.Background())
}

func (i PackageArgs) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageOutput)
}

// PackageArrayInput is an input type that accepts PackageArray and PackageArrayOutput values.
// You can construct a concrete instance of `PackageArrayInput` via:
//
//          PackageArray{ PackageArgs{...} }
type PackageArrayInput interface {
	pulumi.Input

	ToPackageArrayOutput() PackageArrayOutput
	ToPackageArrayOutputWithContext(context.Context) PackageArrayOutput
}

type PackageArray []PackageInput

func (PackageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Package)(nil)).Elem()
}

func (i PackageArray) ToPackageArrayOutput() PackageArrayOutput {
	return i.ToPackageArrayOutputWithContext(context.Background())
}

func (i PackageArray) ToPackageArrayOutputWithContext(ctx context.Context) PackageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageArrayOutput)
}

// Package is a reference to the software package to be installed or removed. The agent on the VM instance uses the system package manager to apply the config. These are the commands that the agent uses to install or remove packages. Apt install: `apt-get update && apt-get -y install package1 package2 package3` remove: `apt-get -y remove package1 package2 package3` Yum install: `yum -y install package1 package2 package3` remove: `yum -y remove package1 package2 package3` Zypper install: `zypper install package1 package2 package3` remove: `zypper rm package1 package2` Googet install: `googet -noconfirm install package1 package2 package3` remove: `googet -noconfirm remove package1 package2 package3`
type PackageOutput struct{ *pulumi.OutputState }

func (PackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Package)(nil)).Elem()
}

func (o PackageOutput) ToPackageOutput() PackageOutput {
	return o
}

func (o PackageOutput) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return o
}

// The desired_state the agent should maintain for this package. The default is to ensure the package is installed.
func (o PackageOutput) DesiredState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.DesiredState }).(pulumi.StringPtrOutput)
}

// Type of package manager that can be used to install this package. If a system does not have the package manager, the package is not installed or removed no error message is returned. By default, or if you specify `ANY`, the agent attempts to install and remove this package using the default package manager. This is useful when creating a policy that applies to different types of systems. The default behavior is ANY.
func (o PackageOutput) Manager() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.Manager }).(pulumi.StringPtrOutput)
}

// Required. The name of the package. A package is uniquely identified for conflict validation by checking the package name and the manager(s) that the package targets.
func (o PackageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PackageArrayOutput struct{ *pulumi.OutputState }

func (PackageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Package)(nil)).Elem()
}

func (o PackageArrayOutput) ToPackageArrayOutput() PackageArrayOutput {
	return o
}

func (o PackageArrayOutput) ToPackageArrayOutputWithContext(ctx context.Context) PackageArrayOutput {
	return o
}

func (o PackageArrayOutput) Index(i pulumi.IntInput) PackageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Package {
		return vs[0].([]Package)[vs[1].(int)]
	}).(PackageOutput)
}

// A package repository.
type PackageRepository struct {
	// An Apt Repository.
	Apt *AptRepository `pulumi:"apt"`
	// A Goo Repository.
	Goo *GooRepository `pulumi:"goo"`
	// A Yum Repository.
	Yum *YumRepository `pulumi:"yum"`
	// A Zypper Repository.
	Zypper *ZypperRepository `pulumi:"zypper"`
}

// PackageRepositoryInput is an input type that accepts PackageRepositoryArgs and PackageRepositoryOutput values.
// You can construct a concrete instance of `PackageRepositoryInput` via:
//
//          PackageRepositoryArgs{...}
type PackageRepositoryInput interface {
	pulumi.Input

	ToPackageRepositoryOutput() PackageRepositoryOutput
	ToPackageRepositoryOutputWithContext(context.Context) PackageRepositoryOutput
}

// A package repository.
type PackageRepositoryArgs struct {
	// An Apt Repository.
	Apt AptRepositoryPtrInput `pulumi:"apt"`
	// A Goo Repository.
	Goo GooRepositoryPtrInput `pulumi:"goo"`
	// A Yum Repository.
	Yum YumRepositoryPtrInput `pulumi:"yum"`
	// A Zypper Repository.
	Zypper ZypperRepositoryPtrInput `pulumi:"zypper"`
}

func (PackageRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageRepository)(nil)).Elem()
}

func (i PackageRepositoryArgs) ToPackageRepositoryOutput() PackageRepositoryOutput {
	return i.ToPackageRepositoryOutputWithContext(context.Background())
}

func (i PackageRepositoryArgs) ToPackageRepositoryOutputWithContext(ctx context.Context) PackageRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageRepositoryOutput)
}

// PackageRepositoryArrayInput is an input type that accepts PackageRepositoryArray and PackageRepositoryArrayOutput values.
// You can construct a concrete instance of `PackageRepositoryArrayInput` via:
//
//          PackageRepositoryArray{ PackageRepositoryArgs{...} }
type PackageRepositoryArrayInput interface {
	pulumi.Input

	ToPackageRepositoryArrayOutput() PackageRepositoryArrayOutput
	ToPackageRepositoryArrayOutputWithContext(context.Context) PackageRepositoryArrayOutput
}

type PackageRepositoryArray []PackageRepositoryInput

func (PackageRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageRepository)(nil)).Elem()
}

func (i PackageRepositoryArray) ToPackageRepositoryArrayOutput() PackageRepositoryArrayOutput {
	return i.ToPackageRepositoryArrayOutputWithContext(context.Background())
}

func (i PackageRepositoryArray) ToPackageRepositoryArrayOutputWithContext(ctx context.Context) PackageRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageRepositoryArrayOutput)
}

// A package repository.
type PackageRepositoryOutput struct{ *pulumi.OutputState }

func (PackageRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageRepository)(nil)).Elem()
}

func (o PackageRepositoryOutput) ToPackageRepositoryOutput() PackageRepositoryOutput {
	return o
}

func (o PackageRepositoryOutput) ToPackageRepositoryOutputWithContext(ctx context.Context) PackageRepositoryOutput {
	return o
}

// An Apt Repository.
func (o PackageRepositoryOutput) Apt() AptRepositoryPtrOutput {
	return o.ApplyT(func(v PackageRepository) *AptRepository { return v.Apt }).(AptRepositoryPtrOutput)
}

// A Goo Repository.
func (o PackageRepositoryOutput) Goo() GooRepositoryPtrOutput {
	return o.ApplyT(func(v PackageRepository) *GooRepository { return v.Goo }).(GooRepositoryPtrOutput)
}

// A Yum Repository.
func (o PackageRepositoryOutput) Yum() YumRepositoryPtrOutput {
	return o.ApplyT(func(v PackageRepository) *YumRepository { return v.Yum }).(YumRepositoryPtrOutput)
}

// A Zypper Repository.
func (o PackageRepositoryOutput) Zypper() ZypperRepositoryPtrOutput {
	return o.ApplyT(func(v PackageRepository) *ZypperRepository { return v.Zypper }).(ZypperRepositoryPtrOutput)
}

type PackageRepositoryArrayOutput struct{ *pulumi.OutputState }

func (PackageRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageRepository)(nil)).Elem()
}

func (o PackageRepositoryArrayOutput) ToPackageRepositoryArrayOutput() PackageRepositoryArrayOutput {
	return o
}

func (o PackageRepositoryArrayOutput) ToPackageRepositoryArrayOutputWithContext(ctx context.Context) PackageRepositoryArrayOutput {
	return o
}

func (o PackageRepositoryArrayOutput) Index(i pulumi.IntInput) PackageRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PackageRepository {
		return vs[0].([]PackageRepository)[vs[1].(int)]
	}).(PackageRepositoryOutput)
}

// Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance.
type PatchConfig struct {
	// Apt update settings. Use this setting to override the default `apt` patch rules.
	Apt *AptSettings `pulumi:"apt"`
	// Goo update settings. Use this setting to override the default `goo` patch rules.
	Goo *GooSettings `pulumi:"goo"`
	// The `ExecStep` to run after the patch update.
	PostStep *ExecStep `pulumi:"postStep"`
	// The `ExecStep` to run before the patch update.
	PreStep *ExecStep `pulumi:"preStep"`
	// Post-patch reboot settings.
	RebootConfig *string `pulumi:"rebootConfig"`
	// Windows update settings. Use this override the default windows patch rules.
	WindowsUpdate *WindowsUpdateSettings `pulumi:"windowsUpdate"`
	// Yum update settings. Use this setting to override the default `yum` patch rules.
	Yum *YumSettings `pulumi:"yum"`
	// Zypper update settings. Use this setting to override the default `zypper` patch rules.
	Zypper *ZypperSettings `pulumi:"zypper"`
}

// PatchConfigInput is an input type that accepts PatchConfigArgs and PatchConfigOutput values.
// You can construct a concrete instance of `PatchConfigInput` via:
//
//          PatchConfigArgs{...}
type PatchConfigInput interface {
	pulumi.Input

	ToPatchConfigOutput() PatchConfigOutput
	ToPatchConfigOutputWithContext(context.Context) PatchConfigOutput
}

// Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance.
type PatchConfigArgs struct {
	// Apt update settings. Use this setting to override the default `apt` patch rules.
	Apt AptSettingsPtrInput `pulumi:"apt"`
	// Goo update settings. Use this setting to override the default `goo` patch rules.
	Goo GooSettingsPtrInput `pulumi:"goo"`
	// The `ExecStep` to run after the patch update.
	PostStep ExecStepPtrInput `pulumi:"postStep"`
	// The `ExecStep` to run before the patch update.
	PreStep ExecStepPtrInput `pulumi:"preStep"`
	// Post-patch reboot settings.
	RebootConfig pulumi.StringPtrInput `pulumi:"rebootConfig"`
	// Windows update settings. Use this override the default windows patch rules.
	WindowsUpdate WindowsUpdateSettingsPtrInput `pulumi:"windowsUpdate"`
	// Yum update settings. Use this setting to override the default `yum` patch rules.
	Yum YumSettingsPtrInput `pulumi:"yum"`
	// Zypper update settings. Use this setting to override the default `zypper` patch rules.
	Zypper ZypperSettingsPtrInput `pulumi:"zypper"`
}

func (PatchConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchConfig)(nil)).Elem()
}

func (i PatchConfigArgs) ToPatchConfigOutput() PatchConfigOutput {
	return i.ToPatchConfigOutputWithContext(context.Background())
}

func (i PatchConfigArgs) ToPatchConfigOutputWithContext(ctx context.Context) PatchConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchConfigOutput)
}

func (i PatchConfigArgs) ToPatchConfigPtrOutput() PatchConfigPtrOutput {
	return i.ToPatchConfigPtrOutputWithContext(context.Background())
}

func (i PatchConfigArgs) ToPatchConfigPtrOutputWithContext(ctx context.Context) PatchConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchConfigOutput).ToPatchConfigPtrOutputWithContext(ctx)
}

// PatchConfigPtrInput is an input type that accepts PatchConfigArgs, PatchConfigPtr and PatchConfigPtrOutput values.
// You can construct a concrete instance of `PatchConfigPtrInput` via:
//
//          PatchConfigArgs{...}
//
//  or:
//
//          nil
type PatchConfigPtrInput interface {
	pulumi.Input

	ToPatchConfigPtrOutput() PatchConfigPtrOutput
	ToPatchConfigPtrOutputWithContext(context.Context) PatchConfigPtrOutput
}

type patchConfigPtrType PatchConfigArgs

func PatchConfigPtr(v *PatchConfigArgs) PatchConfigPtrInput {
	return (*patchConfigPtrType)(v)
}

func (*patchConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchConfig)(nil)).Elem()
}

func (i *patchConfigPtrType) ToPatchConfigPtrOutput() PatchConfigPtrOutput {
	return i.ToPatchConfigPtrOutputWithContext(context.Background())
}

func (i *patchConfigPtrType) ToPatchConfigPtrOutputWithContext(ctx context.Context) PatchConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchConfigPtrOutput)
}

// Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance.
type PatchConfigOutput struct{ *pulumi.OutputState }

func (PatchConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchConfig)(nil)).Elem()
}

func (o PatchConfigOutput) ToPatchConfigOutput() PatchConfigOutput {
	return o
}

func (o PatchConfigOutput) ToPatchConfigOutputWithContext(ctx context.Context) PatchConfigOutput {
	return o
}

func (o PatchConfigOutput) ToPatchConfigPtrOutput() PatchConfigPtrOutput {
	return o.ToPatchConfigPtrOutputWithContext(context.Background())
}

func (o PatchConfigOutput) ToPatchConfigPtrOutputWithContext(ctx context.Context) PatchConfigPtrOutput {
	return o.ApplyT(func(v PatchConfig) *PatchConfig {
		return &v
	}).(PatchConfigPtrOutput)
}

// Apt update settings. Use this setting to override the default `apt` patch rules.
func (o PatchConfigOutput) Apt() AptSettingsPtrOutput {
	return o.ApplyT(func(v PatchConfig) *AptSettings { return v.Apt }).(AptSettingsPtrOutput)
}

// Goo update settings. Use this setting to override the default `goo` patch rules.
func (o PatchConfigOutput) Goo() GooSettingsPtrOutput {
	return o.ApplyT(func(v PatchConfig) *GooSettings { return v.Goo }).(GooSettingsPtrOutput)
}

// The `ExecStep` to run after the patch update.
func (o PatchConfigOutput) PostStep() ExecStepPtrOutput {
	return o.ApplyT(func(v PatchConfig) *ExecStep { return v.PostStep }).(ExecStepPtrOutput)
}

// The `ExecStep` to run before the patch update.
func (o PatchConfigOutput) PreStep() ExecStepPtrOutput {
	return o.ApplyT(func(v PatchConfig) *ExecStep { return v.PreStep }).(ExecStepPtrOutput)
}

// Post-patch reboot settings.
func (o PatchConfigOutput) RebootConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PatchConfig) *string { return v.RebootConfig }).(pulumi.StringPtrOutput)
}

// Windows update settings. Use this override the default windows patch rules.
func (o PatchConfigOutput) WindowsUpdate() WindowsUpdateSettingsPtrOutput {
	return o.ApplyT(func(v PatchConfig) *WindowsUpdateSettings { return v.WindowsUpdate }).(WindowsUpdateSettingsPtrOutput)
}

// Yum update settings. Use this setting to override the default `yum` patch rules.
func (o PatchConfigOutput) Yum() YumSettingsPtrOutput {
	return o.ApplyT(func(v PatchConfig) *YumSettings { return v.Yum }).(YumSettingsPtrOutput)
}

// Zypper update settings. Use this setting to override the default `zypper` patch rules.
func (o PatchConfigOutput) Zypper() ZypperSettingsPtrOutput {
	return o.ApplyT(func(v PatchConfig) *ZypperSettings { return v.Zypper }).(ZypperSettingsPtrOutput)
}

type PatchConfigPtrOutput struct{ *pulumi.OutputState }

func (PatchConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchConfig)(nil)).Elem()
}

func (o PatchConfigPtrOutput) ToPatchConfigPtrOutput() PatchConfigPtrOutput {
	return o
}

func (o PatchConfigPtrOutput) ToPatchConfigPtrOutputWithContext(ctx context.Context) PatchConfigPtrOutput {
	return o
}

func (o PatchConfigPtrOutput) Elem() PatchConfigOutput {
	return o.ApplyT(func(v *PatchConfig) PatchConfig { return *v }).(PatchConfigOutput)
}

// Apt update settings. Use this setting to override the default `apt` patch rules.
func (o PatchConfigPtrOutput) Apt() AptSettingsPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *AptSettings {
		if v == nil {
			return nil
		}
		return v.Apt
	}).(AptSettingsPtrOutput)
}

// Goo update settings. Use this setting to override the default `goo` patch rules.
func (o PatchConfigPtrOutput) Goo() GooSettingsPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *GooSettings {
		if v == nil {
			return nil
		}
		return v.Goo
	}).(GooSettingsPtrOutput)
}

// The `ExecStep` to run after the patch update.
func (o PatchConfigPtrOutput) PostStep() ExecStepPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *ExecStep {
		if v == nil {
			return nil
		}
		return v.PostStep
	}).(ExecStepPtrOutput)
}

// The `ExecStep` to run before the patch update.
func (o PatchConfigPtrOutput) PreStep() ExecStepPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *ExecStep {
		if v == nil {
			return nil
		}
		return v.PreStep
	}).(ExecStepPtrOutput)
}

// Post-patch reboot settings.
func (o PatchConfigPtrOutput) RebootConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *string {
		if v == nil {
			return nil
		}
		return v.RebootConfig
	}).(pulumi.StringPtrOutput)
}

// Windows update settings. Use this override the default windows patch rules.
func (o PatchConfigPtrOutput) WindowsUpdate() WindowsUpdateSettingsPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *WindowsUpdateSettings {
		if v == nil {
			return nil
		}
		return v.WindowsUpdate
	}).(WindowsUpdateSettingsPtrOutput)
}

// Yum update settings. Use this setting to override the default `yum` patch rules.
func (o PatchConfigPtrOutput) Yum() YumSettingsPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *YumSettings {
		if v == nil {
			return nil
		}
		return v.Yum
	}).(YumSettingsPtrOutput)
}

// Zypper update settings. Use this setting to override the default `zypper` patch rules.
func (o PatchConfigPtrOutput) Zypper() ZypperSettingsPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *ZypperSettings {
		if v == nil {
			return nil
		}
		return v.Zypper
	}).(ZypperSettingsPtrOutput)
}

// A filter to target VM instances for patching. The targeted VMs must meet all criteria specified. So if both labels and zones are specified, the patch job targets only VMs with those labels and in those zones.
type PatchInstanceFilter struct {
	// Target all VM instances in the project. If true, no other criteria is permitted.
	All *bool `pulumi:"all"`
	// Targets VM instances matching at least one of these label sets. This allows targeting of disparate groups, for example "env=prod or env=staging".
	GroupLabels []PatchInstanceFilterGroupLabel `pulumi:"groupLabels"`
	// Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix="prod-".
	InstanceNamePrefixes []string `pulumi:"instanceNamePrefixes"`
	// Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
	Instances []string `pulumi:"instances"`
	// Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
	Zones []string `pulumi:"zones"`
}

// PatchInstanceFilterInput is an input type that accepts PatchInstanceFilterArgs and PatchInstanceFilterOutput values.
// You can construct a concrete instance of `PatchInstanceFilterInput` via:
//
//          PatchInstanceFilterArgs{...}
type PatchInstanceFilterInput interface {
	pulumi.Input

	ToPatchInstanceFilterOutput() PatchInstanceFilterOutput
	ToPatchInstanceFilterOutputWithContext(context.Context) PatchInstanceFilterOutput
}

// A filter to target VM instances for patching. The targeted VMs must meet all criteria specified. So if both labels and zones are specified, the patch job targets only VMs with those labels and in those zones.
type PatchInstanceFilterArgs struct {
	// Target all VM instances in the project. If true, no other criteria is permitted.
	All pulumi.BoolPtrInput `pulumi:"all"`
	// Targets VM instances matching at least one of these label sets. This allows targeting of disparate groups, for example "env=prod or env=staging".
	GroupLabels PatchInstanceFilterGroupLabelArrayInput `pulumi:"groupLabels"`
	// Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix="prod-".
	InstanceNamePrefixes pulumi.StringArrayInput `pulumi:"instanceNamePrefixes"`
	// Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
	Instances pulumi.StringArrayInput `pulumi:"instances"`
	// Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
	Zones pulumi.StringArrayInput `pulumi:"zones"`
}

func (PatchInstanceFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchInstanceFilter)(nil)).Elem()
}

func (i PatchInstanceFilterArgs) ToPatchInstanceFilterOutput() PatchInstanceFilterOutput {
	return i.ToPatchInstanceFilterOutputWithContext(context.Background())
}

func (i PatchInstanceFilterArgs) ToPatchInstanceFilterOutputWithContext(ctx context.Context) PatchInstanceFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchInstanceFilterOutput)
}

func (i PatchInstanceFilterArgs) ToPatchInstanceFilterPtrOutput() PatchInstanceFilterPtrOutput {
	return i.ToPatchInstanceFilterPtrOutputWithContext(context.Background())
}

func (i PatchInstanceFilterArgs) ToPatchInstanceFilterPtrOutputWithContext(ctx context.Context) PatchInstanceFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchInstanceFilterOutput).ToPatchInstanceFilterPtrOutputWithContext(ctx)
}

// PatchInstanceFilterPtrInput is an input type that accepts PatchInstanceFilterArgs, PatchInstanceFilterPtr and PatchInstanceFilterPtrOutput values.
// You can construct a concrete instance of `PatchInstanceFilterPtrInput` via:
//
//          PatchInstanceFilterArgs{...}
//
//  or:
//
//          nil
type PatchInstanceFilterPtrInput interface {
	pulumi.Input

	ToPatchInstanceFilterPtrOutput() PatchInstanceFilterPtrOutput
	ToPatchInstanceFilterPtrOutputWithContext(context.Context) PatchInstanceFilterPtrOutput
}

type patchInstanceFilterPtrType PatchInstanceFilterArgs

func PatchInstanceFilterPtr(v *PatchInstanceFilterArgs) PatchInstanceFilterPtrInput {
	return (*patchInstanceFilterPtrType)(v)
}

func (*patchInstanceFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchInstanceFilter)(nil)).Elem()
}

func (i *patchInstanceFilterPtrType) ToPatchInstanceFilterPtrOutput() PatchInstanceFilterPtrOutput {
	return i.ToPatchInstanceFilterPtrOutputWithContext(context.Background())
}

func (i *patchInstanceFilterPtrType) ToPatchInstanceFilterPtrOutputWithContext(ctx context.Context) PatchInstanceFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchInstanceFilterPtrOutput)
}

// A filter to target VM instances for patching. The targeted VMs must meet all criteria specified. So if both labels and zones are specified, the patch job targets only VMs with those labels and in those zones.
type PatchInstanceFilterOutput struct{ *pulumi.OutputState }

func (PatchInstanceFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchInstanceFilter)(nil)).Elem()
}

func (o PatchInstanceFilterOutput) ToPatchInstanceFilterOutput() PatchInstanceFilterOutput {
	return o
}

func (o PatchInstanceFilterOutput) ToPatchInstanceFilterOutputWithContext(ctx context.Context) PatchInstanceFilterOutput {
	return o
}

func (o PatchInstanceFilterOutput) ToPatchInstanceFilterPtrOutput() PatchInstanceFilterPtrOutput {
	return o.ToPatchInstanceFilterPtrOutputWithContext(context.Background())
}

func (o PatchInstanceFilterOutput) ToPatchInstanceFilterPtrOutputWithContext(ctx context.Context) PatchInstanceFilterPtrOutput {
	return o.ApplyT(func(v PatchInstanceFilter) *PatchInstanceFilter {
		return &v
	}).(PatchInstanceFilterPtrOutput)
}

// Target all VM instances in the project. If true, no other criteria is permitted.
func (o PatchInstanceFilterOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PatchInstanceFilter) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

// Targets VM instances matching at least one of these label sets. This allows targeting of disparate groups, for example "env=prod or env=staging".
func (o PatchInstanceFilterOutput) GroupLabels() PatchInstanceFilterGroupLabelArrayOutput {
	return o.ApplyT(func(v PatchInstanceFilter) []PatchInstanceFilterGroupLabel { return v.GroupLabels }).(PatchInstanceFilterGroupLabelArrayOutput)
}

// Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix="prod-".
func (o PatchInstanceFilterOutput) InstanceNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PatchInstanceFilter) []string { return v.InstanceNamePrefixes }).(pulumi.StringArrayOutput)
}

// Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
func (o PatchInstanceFilterOutput) Instances() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PatchInstanceFilter) []string { return v.Instances }).(pulumi.StringArrayOutput)
}

// Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
func (o PatchInstanceFilterOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PatchInstanceFilter) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

type PatchInstanceFilterPtrOutput struct{ *pulumi.OutputState }

func (PatchInstanceFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchInstanceFilter)(nil)).Elem()
}

func (o PatchInstanceFilterPtrOutput) ToPatchInstanceFilterPtrOutput() PatchInstanceFilterPtrOutput {
	return o
}

func (o PatchInstanceFilterPtrOutput) ToPatchInstanceFilterPtrOutputWithContext(ctx context.Context) PatchInstanceFilterPtrOutput {
	return o
}

func (o PatchInstanceFilterPtrOutput) Elem() PatchInstanceFilterOutput {
	return o.ApplyT(func(v *PatchInstanceFilter) PatchInstanceFilter { return *v }).(PatchInstanceFilterOutput)
}

// Target all VM instances in the project. If true, no other criteria is permitted.
func (o PatchInstanceFilterPtrOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PatchInstanceFilter) *bool {
		if v == nil {
			return nil
		}
		return v.All
	}).(pulumi.BoolPtrOutput)
}

// Targets VM instances matching at least one of these label sets. This allows targeting of disparate groups, for example "env=prod or env=staging".
func (o PatchInstanceFilterPtrOutput) GroupLabels() PatchInstanceFilterGroupLabelArrayOutput {
	return o.ApplyT(func(v *PatchInstanceFilter) []PatchInstanceFilterGroupLabel {
		if v == nil {
			return nil
		}
		return v.GroupLabels
	}).(PatchInstanceFilterGroupLabelArrayOutput)
}

// Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix="prod-".
func (o PatchInstanceFilterPtrOutput) InstanceNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PatchInstanceFilter) []string {
		if v == nil {
			return nil
		}
		return v.InstanceNamePrefixes
	}).(pulumi.StringArrayOutput)
}

// Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
func (o PatchInstanceFilterPtrOutput) Instances() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PatchInstanceFilter) []string {
		if v == nil {
			return nil
		}
		return v.Instances
	}).(pulumi.StringArrayOutput)
}

// Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
func (o PatchInstanceFilterPtrOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PatchInstanceFilter) []string {
		if v == nil {
			return nil
		}
		return v.Zones
	}).(pulumi.StringArrayOutput)
}

// Represents a group of VMs that can be identified as having all these labels, for example "env=prod and app=web".
type PatchInstanceFilterGroupLabel struct {
	// Compute Engine instance labels that must be present for a VM instance to be targeted by this filter.
	Labels map[string]string `pulumi:"labels"`
}

// PatchInstanceFilterGroupLabelInput is an input type that accepts PatchInstanceFilterGroupLabelArgs and PatchInstanceFilterGroupLabelOutput values.
// You can construct a concrete instance of `PatchInstanceFilterGroupLabelInput` via:
//
//          PatchInstanceFilterGroupLabelArgs{...}
type PatchInstanceFilterGroupLabelInput interface {
	pulumi.Input

	ToPatchInstanceFilterGroupLabelOutput() PatchInstanceFilterGroupLabelOutput
	ToPatchInstanceFilterGroupLabelOutputWithContext(context.Context) PatchInstanceFilterGroupLabelOutput
}

// Represents a group of VMs that can be identified as having all these labels, for example "env=prod and app=web".
type PatchInstanceFilterGroupLabelArgs struct {
	// Compute Engine instance labels that must be present for a VM instance to be targeted by this filter.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (PatchInstanceFilterGroupLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchInstanceFilterGroupLabel)(nil)).Elem()
}

func (i PatchInstanceFilterGroupLabelArgs) ToPatchInstanceFilterGroupLabelOutput() PatchInstanceFilterGroupLabelOutput {
	return i.ToPatchInstanceFilterGroupLabelOutputWithContext(context.Background())
}

func (i PatchInstanceFilterGroupLabelArgs) ToPatchInstanceFilterGroupLabelOutputWithContext(ctx context.Context) PatchInstanceFilterGroupLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchInstanceFilterGroupLabelOutput)
}

// PatchInstanceFilterGroupLabelArrayInput is an input type that accepts PatchInstanceFilterGroupLabelArray and PatchInstanceFilterGroupLabelArrayOutput values.
// You can construct a concrete instance of `PatchInstanceFilterGroupLabelArrayInput` via:
//
//          PatchInstanceFilterGroupLabelArray{ PatchInstanceFilterGroupLabelArgs{...} }
type PatchInstanceFilterGroupLabelArrayInput interface {
	pulumi.Input

	ToPatchInstanceFilterGroupLabelArrayOutput() PatchInstanceFilterGroupLabelArrayOutput
	ToPatchInstanceFilterGroupLabelArrayOutputWithContext(context.Context) PatchInstanceFilterGroupLabelArrayOutput
}

type PatchInstanceFilterGroupLabelArray []PatchInstanceFilterGroupLabelInput

func (PatchInstanceFilterGroupLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PatchInstanceFilterGroupLabel)(nil)).Elem()
}

func (i PatchInstanceFilterGroupLabelArray) ToPatchInstanceFilterGroupLabelArrayOutput() PatchInstanceFilterGroupLabelArrayOutput {
	return i.ToPatchInstanceFilterGroupLabelArrayOutputWithContext(context.Background())
}

func (i PatchInstanceFilterGroupLabelArray) ToPatchInstanceFilterGroupLabelArrayOutputWithContext(ctx context.Context) PatchInstanceFilterGroupLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchInstanceFilterGroupLabelArrayOutput)
}

// Represents a group of VMs that can be identified as having all these labels, for example "env=prod and app=web".
type PatchInstanceFilterGroupLabelOutput struct{ *pulumi.OutputState }

func (PatchInstanceFilterGroupLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchInstanceFilterGroupLabel)(nil)).Elem()
}

func (o PatchInstanceFilterGroupLabelOutput) ToPatchInstanceFilterGroupLabelOutput() PatchInstanceFilterGroupLabelOutput {
	return o
}

func (o PatchInstanceFilterGroupLabelOutput) ToPatchInstanceFilterGroupLabelOutputWithContext(ctx context.Context) PatchInstanceFilterGroupLabelOutput {
	return o
}

// Compute Engine instance labels that must be present for a VM instance to be targeted by this filter.
func (o PatchInstanceFilterGroupLabelOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PatchInstanceFilterGroupLabel) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type PatchInstanceFilterGroupLabelArrayOutput struct{ *pulumi.OutputState }

func (PatchInstanceFilterGroupLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PatchInstanceFilterGroupLabel)(nil)).Elem()
}

func (o PatchInstanceFilterGroupLabelArrayOutput) ToPatchInstanceFilterGroupLabelArrayOutput() PatchInstanceFilterGroupLabelArrayOutput {
	return o
}

func (o PatchInstanceFilterGroupLabelArrayOutput) ToPatchInstanceFilterGroupLabelArrayOutputWithContext(ctx context.Context) PatchInstanceFilterGroupLabelArrayOutput {
	return o
}

func (o PatchInstanceFilterGroupLabelArrayOutput) Index(i pulumi.IntInput) PatchInstanceFilterGroupLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PatchInstanceFilterGroupLabel {
		return vs[0].([]PatchInstanceFilterGroupLabel)[vs[1].(int)]
	}).(PatchInstanceFilterGroupLabelOutput)
}

// Patch rollout configuration specifications. Contains details on the concurrency control when applying patch(es) to all targeted VMs.
type PatchRollout struct {
	// The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up. During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps. A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget. For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone. For example, if the disruption budget has a fixed value of `10`, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops.
	DisruptionBudget *FixedOrPercent `pulumi:"disruptionBudget"`
	// Mode of the patch rollout.
	Mode *string `pulumi:"mode"`
}

// PatchRolloutInput is an input type that accepts PatchRolloutArgs and PatchRolloutOutput values.
// You can construct a concrete instance of `PatchRolloutInput` via:
//
//          PatchRolloutArgs{...}
type PatchRolloutInput interface {
	pulumi.Input

	ToPatchRolloutOutput() PatchRolloutOutput
	ToPatchRolloutOutputWithContext(context.Context) PatchRolloutOutput
}

// Patch rollout configuration specifications. Contains details on the concurrency control when applying patch(es) to all targeted VMs.
type PatchRolloutArgs struct {
	// The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up. During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps. A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget. For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone. For example, if the disruption budget has a fixed value of `10`, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops.
	DisruptionBudget FixedOrPercentPtrInput `pulumi:"disruptionBudget"`
	// Mode of the patch rollout.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (PatchRolloutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchRollout)(nil)).Elem()
}

func (i PatchRolloutArgs) ToPatchRolloutOutput() PatchRolloutOutput {
	return i.ToPatchRolloutOutputWithContext(context.Background())
}

func (i PatchRolloutArgs) ToPatchRolloutOutputWithContext(ctx context.Context) PatchRolloutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchRolloutOutput)
}

func (i PatchRolloutArgs) ToPatchRolloutPtrOutput() PatchRolloutPtrOutput {
	return i.ToPatchRolloutPtrOutputWithContext(context.Background())
}

func (i PatchRolloutArgs) ToPatchRolloutPtrOutputWithContext(ctx context.Context) PatchRolloutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchRolloutOutput).ToPatchRolloutPtrOutputWithContext(ctx)
}

// PatchRolloutPtrInput is an input type that accepts PatchRolloutArgs, PatchRolloutPtr and PatchRolloutPtrOutput values.
// You can construct a concrete instance of `PatchRolloutPtrInput` via:
//
//          PatchRolloutArgs{...}
//
//  or:
//
//          nil
type PatchRolloutPtrInput interface {
	pulumi.Input

	ToPatchRolloutPtrOutput() PatchRolloutPtrOutput
	ToPatchRolloutPtrOutputWithContext(context.Context) PatchRolloutPtrOutput
}

type patchRolloutPtrType PatchRolloutArgs

func PatchRolloutPtr(v *PatchRolloutArgs) PatchRolloutPtrInput {
	return (*patchRolloutPtrType)(v)
}

func (*patchRolloutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchRollout)(nil)).Elem()
}

func (i *patchRolloutPtrType) ToPatchRolloutPtrOutput() PatchRolloutPtrOutput {
	return i.ToPatchRolloutPtrOutputWithContext(context.Background())
}

func (i *patchRolloutPtrType) ToPatchRolloutPtrOutputWithContext(ctx context.Context) PatchRolloutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchRolloutPtrOutput)
}

// Patch rollout configuration specifications. Contains details on the concurrency control when applying patch(es) to all targeted VMs.
type PatchRolloutOutput struct{ *pulumi.OutputState }

func (PatchRolloutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchRollout)(nil)).Elem()
}

func (o PatchRolloutOutput) ToPatchRolloutOutput() PatchRolloutOutput {
	return o
}

func (o PatchRolloutOutput) ToPatchRolloutOutputWithContext(ctx context.Context) PatchRolloutOutput {
	return o
}

func (o PatchRolloutOutput) ToPatchRolloutPtrOutput() PatchRolloutPtrOutput {
	return o.ToPatchRolloutPtrOutputWithContext(context.Background())
}

func (o PatchRolloutOutput) ToPatchRolloutPtrOutputWithContext(ctx context.Context) PatchRolloutPtrOutput {
	return o.ApplyT(func(v PatchRollout) *PatchRollout {
		return &v
	}).(PatchRolloutPtrOutput)
}

// The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up. During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps. A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget. For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone. For example, if the disruption budget has a fixed value of `10`, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops.
func (o PatchRolloutOutput) DisruptionBudget() FixedOrPercentPtrOutput {
	return o.ApplyT(func(v PatchRollout) *FixedOrPercent { return v.DisruptionBudget }).(FixedOrPercentPtrOutput)
}

// Mode of the patch rollout.
func (o PatchRolloutOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PatchRollout) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type PatchRolloutPtrOutput struct{ *pulumi.OutputState }

func (PatchRolloutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchRollout)(nil)).Elem()
}

func (o PatchRolloutPtrOutput) ToPatchRolloutPtrOutput() PatchRolloutPtrOutput {
	return o
}

func (o PatchRolloutPtrOutput) ToPatchRolloutPtrOutputWithContext(ctx context.Context) PatchRolloutPtrOutput {
	return o
}

func (o PatchRolloutPtrOutput) Elem() PatchRolloutOutput {
	return o.ApplyT(func(v *PatchRollout) PatchRollout { return *v }).(PatchRolloutOutput)
}

// The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up. During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps. A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget. For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone. For example, if the disruption budget has a fixed value of `10`, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops.
func (o PatchRolloutPtrOutput) DisruptionBudget() FixedOrPercentPtrOutput {
	return o.ApplyT(func(v *PatchRollout) *FixedOrPercent {
		if v == nil {
			return nil
		}
		return v.DisruptionBudget
	}).(FixedOrPercentPtrOutput)
}

// Mode of the patch rollout.
func (o PatchRolloutPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PatchRollout) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Sets the time for recurring patch deployments.
type RecurringSchedule struct {
	// Optional. The end time at which a recurring patch deployment schedule is no longer active.
	EndTime *string `pulumi:"endTime"`
	// Required. The frequency unit of this recurring schedule.
	Frequency *string `pulumi:"frequency"`
	// Output only. The time the last patch job ran successfully.
	LastExecuteTime *string `pulumi:"lastExecuteTime"`
	// Required. Schedule with monthly executions.
	Monthly *MonthlySchedule `pulumi:"monthly"`
	// Output only. The time the next patch job is scheduled to run.
	NextExecuteTime *string `pulumi:"nextExecuteTime"`
	// Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
	StartTime *string `pulumi:"startTime"`
	// Required. Time of the day to run a recurring deployment.
	TimeOfDay *TimeOfDay `pulumi:"timeOfDay"`
	// Required. Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
	TimeZone *TimeZone `pulumi:"timeZone"`
	// Required. Schedule with weekly executions.
	Weekly *WeeklySchedule `pulumi:"weekly"`
}

// RecurringScheduleInput is an input type that accepts RecurringScheduleArgs and RecurringScheduleOutput values.
// You can construct a concrete instance of `RecurringScheduleInput` via:
//
//          RecurringScheduleArgs{...}
type RecurringScheduleInput interface {
	pulumi.Input

	ToRecurringScheduleOutput() RecurringScheduleOutput
	ToRecurringScheduleOutputWithContext(context.Context) RecurringScheduleOutput
}

// Sets the time for recurring patch deployments.
type RecurringScheduleArgs struct {
	// Optional. The end time at which a recurring patch deployment schedule is no longer active.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Required. The frequency unit of this recurring schedule.
	Frequency pulumi.StringPtrInput `pulumi:"frequency"`
	// Output only. The time the last patch job ran successfully.
	LastExecuteTime pulumi.StringPtrInput `pulumi:"lastExecuteTime"`
	// Required. Schedule with monthly executions.
	Monthly MonthlySchedulePtrInput `pulumi:"monthly"`
	// Output only. The time the next patch job is scheduled to run.
	NextExecuteTime pulumi.StringPtrInput `pulumi:"nextExecuteTime"`
	// Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Required. Time of the day to run a recurring deployment.
	TimeOfDay TimeOfDayPtrInput `pulumi:"timeOfDay"`
	// Required. Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
	TimeZone TimeZonePtrInput `pulumi:"timeZone"`
	// Required. Schedule with weekly executions.
	Weekly WeeklySchedulePtrInput `pulumi:"weekly"`
}

func (RecurringScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurringSchedule)(nil)).Elem()
}

func (i RecurringScheduleArgs) ToRecurringScheduleOutput() RecurringScheduleOutput {
	return i.ToRecurringScheduleOutputWithContext(context.Background())
}

func (i RecurringScheduleArgs) ToRecurringScheduleOutputWithContext(ctx context.Context) RecurringScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurringScheduleOutput)
}

func (i RecurringScheduleArgs) ToRecurringSchedulePtrOutput() RecurringSchedulePtrOutput {
	return i.ToRecurringSchedulePtrOutputWithContext(context.Background())
}

func (i RecurringScheduleArgs) ToRecurringSchedulePtrOutputWithContext(ctx context.Context) RecurringSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurringScheduleOutput).ToRecurringSchedulePtrOutputWithContext(ctx)
}

// RecurringSchedulePtrInput is an input type that accepts RecurringScheduleArgs, RecurringSchedulePtr and RecurringSchedulePtrOutput values.
// You can construct a concrete instance of `RecurringSchedulePtrInput` via:
//
//          RecurringScheduleArgs{...}
//
//  or:
//
//          nil
type RecurringSchedulePtrInput interface {
	pulumi.Input

	ToRecurringSchedulePtrOutput() RecurringSchedulePtrOutput
	ToRecurringSchedulePtrOutputWithContext(context.Context) RecurringSchedulePtrOutput
}

type recurringSchedulePtrType RecurringScheduleArgs

func RecurringSchedulePtr(v *RecurringScheduleArgs) RecurringSchedulePtrInput {
	return (*recurringSchedulePtrType)(v)
}

func (*recurringSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurringSchedule)(nil)).Elem()
}

func (i *recurringSchedulePtrType) ToRecurringSchedulePtrOutput() RecurringSchedulePtrOutput {
	return i.ToRecurringSchedulePtrOutputWithContext(context.Background())
}

func (i *recurringSchedulePtrType) ToRecurringSchedulePtrOutputWithContext(ctx context.Context) RecurringSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurringSchedulePtrOutput)
}

// Sets the time for recurring patch deployments.
type RecurringScheduleOutput struct{ *pulumi.OutputState }

func (RecurringScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurringSchedule)(nil)).Elem()
}

func (o RecurringScheduleOutput) ToRecurringScheduleOutput() RecurringScheduleOutput {
	return o
}

func (o RecurringScheduleOutput) ToRecurringScheduleOutputWithContext(ctx context.Context) RecurringScheduleOutput {
	return o
}

func (o RecurringScheduleOutput) ToRecurringSchedulePtrOutput() RecurringSchedulePtrOutput {
	return o.ToRecurringSchedulePtrOutputWithContext(context.Background())
}

func (o RecurringScheduleOutput) ToRecurringSchedulePtrOutputWithContext(ctx context.Context) RecurringSchedulePtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *RecurringSchedule {
		return &v
	}).(RecurringSchedulePtrOutput)
}

// Optional. The end time at which a recurring patch deployment schedule is no longer active.
func (o RecurringScheduleOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Required. The frequency unit of this recurring schedule.
func (o RecurringScheduleOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// Output only. The time the last patch job ran successfully.
func (o RecurringScheduleOutput) LastExecuteTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *string { return v.LastExecuteTime }).(pulumi.StringPtrOutput)
}

// Required. Schedule with monthly executions.
func (o RecurringScheduleOutput) Monthly() MonthlySchedulePtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *MonthlySchedule { return v.Monthly }).(MonthlySchedulePtrOutput)
}

// Output only. The time the next patch job is scheduled to run.
func (o RecurringScheduleOutput) NextExecuteTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *string { return v.NextExecuteTime }).(pulumi.StringPtrOutput)
}

// Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
func (o RecurringScheduleOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Required. Time of the day to run a recurring deployment.
func (o RecurringScheduleOutput) TimeOfDay() TimeOfDayPtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *TimeOfDay { return v.TimeOfDay }).(TimeOfDayPtrOutput)
}

// Required. Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
func (o RecurringScheduleOutput) TimeZone() TimeZonePtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *TimeZone { return v.TimeZone }).(TimeZonePtrOutput)
}

// Required. Schedule with weekly executions.
func (o RecurringScheduleOutput) Weekly() WeeklySchedulePtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *WeeklySchedule { return v.Weekly }).(WeeklySchedulePtrOutput)
}

type RecurringSchedulePtrOutput struct{ *pulumi.OutputState }

func (RecurringSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurringSchedule)(nil)).Elem()
}

func (o RecurringSchedulePtrOutput) ToRecurringSchedulePtrOutput() RecurringSchedulePtrOutput {
	return o
}

func (o RecurringSchedulePtrOutput) ToRecurringSchedulePtrOutputWithContext(ctx context.Context) RecurringSchedulePtrOutput {
	return o
}

func (o RecurringSchedulePtrOutput) Elem() RecurringScheduleOutput {
	return o.ApplyT(func(v *RecurringSchedule) RecurringSchedule { return *v }).(RecurringScheduleOutput)
}

// Optional. The end time at which a recurring patch deployment schedule is no longer active.
func (o RecurringSchedulePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurringSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Required. The frequency unit of this recurring schedule.
func (o RecurringSchedulePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurringSchedule) *string {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(pulumi.StringPtrOutput)
}

// Output only. The time the last patch job ran successfully.
func (o RecurringSchedulePtrOutput) LastExecuteTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurringSchedule) *string {
		if v == nil {
			return nil
		}
		return v.LastExecuteTime
	}).(pulumi.StringPtrOutput)
}

// Required. Schedule with monthly executions.
func (o RecurringSchedulePtrOutput) Monthly() MonthlySchedulePtrOutput {
	return o.ApplyT(func(v *RecurringSchedule) *MonthlySchedule {
		if v == nil {
			return nil
		}
		return v.Monthly
	}).(MonthlySchedulePtrOutput)
}

// Output only. The time the next patch job is scheduled to run.
func (o RecurringSchedulePtrOutput) NextExecuteTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurringSchedule) *string {
		if v == nil {
			return nil
		}
		return v.NextExecuteTime
	}).(pulumi.StringPtrOutput)
}

// Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
func (o RecurringSchedulePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurringSchedule) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Required. Time of the day to run a recurring deployment.
func (o RecurringSchedulePtrOutput) TimeOfDay() TimeOfDayPtrOutput {
	return o.ApplyT(func(v *RecurringSchedule) *TimeOfDay {
		if v == nil {
			return nil
		}
		return v.TimeOfDay
	}).(TimeOfDayPtrOutput)
}

// Required. Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
func (o RecurringSchedulePtrOutput) TimeZone() TimeZonePtrOutput {
	return o.ApplyT(func(v *RecurringSchedule) *TimeZone {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(TimeZonePtrOutput)
}

// Required. Schedule with weekly executions.
func (o RecurringSchedulePtrOutput) Weekly() WeeklySchedulePtrOutput {
	return o.ApplyT(func(v *RecurringSchedule) *WeeklySchedule {
		if v == nil {
			return nil
		}
		return v.Weekly
	}).(WeeklySchedulePtrOutput)
}

// A software recipe is a set of instructions for installing and configuring a piece of software. It consists of a set of artifacts that are downloaded, and a set of steps that install, configure, and/or update the software. Recipes support installing and updating software from artifacts in the following formats: Zip archive, Tar archive, Windows MSI, Debian package, and RPM package. Additionally, recipes support executing a script (either defined in a file or directly in this api) in bash, sh, cmd, and powershell. Updating a software recipe If a recipe is assigned to an instance and there is a recipe with the same name but a lower version already installed and the assigned state of the recipe is `UPDATED`, then the recipe is updated to the new version. Script Working Directories Each script or execution step is run in its own temporary directory which is deleted after completing the step.
type SoftwareRecipe struct {
	// Resources available to be used in the steps in the recipe.
	Artifacts []SoftwareRecipeArtifact `pulumi:"artifacts"`
	// Default is INSTALLED. The desired state the agent should maintain for this recipe. INSTALLED: The software recipe is installed on the instance but won't be updated to new versions. UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version, if a higher version of the recipe is assigned to this instance. REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
	DesiredState *string `pulumi:"desiredState"`
	// Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation. Any steps taken (including partially completed steps) are not rolled back.
	InstallSteps []SoftwareRecipeStep `pulumi:"installSteps"`
	// Required. Unique identifier for the recipe. Only one recipe with a given name is installed on an instance. Names are also used to identify resources which helps to determine whether guest policies have conflicts. This means that requests to create multiple recipes with the same name and version are rejected since they could potentially have conflicting assignments.
	Name *string `pulumi:"name"`
	// Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe. Any steps taken (including partially completed steps) are not rolled back.
	UpdateSteps []SoftwareRecipeStep `pulumi:"updateSteps"`
	// The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).
	Version *string `pulumi:"version"`
}

// SoftwareRecipeInput is an input type that accepts SoftwareRecipeArgs and SoftwareRecipeOutput values.
// You can construct a concrete instance of `SoftwareRecipeInput` via:
//
//          SoftwareRecipeArgs{...}
type SoftwareRecipeInput interface {
	pulumi.Input

	ToSoftwareRecipeOutput() SoftwareRecipeOutput
	ToSoftwareRecipeOutputWithContext(context.Context) SoftwareRecipeOutput
}

// A software recipe is a set of instructions for installing and configuring a piece of software. It consists of a set of artifacts that are downloaded, and a set of steps that install, configure, and/or update the software. Recipes support installing and updating software from artifacts in the following formats: Zip archive, Tar archive, Windows MSI, Debian package, and RPM package. Additionally, recipes support executing a script (either defined in a file or directly in this api) in bash, sh, cmd, and powershell. Updating a software recipe If a recipe is assigned to an instance and there is a recipe with the same name but a lower version already installed and the assigned state of the recipe is `UPDATED`, then the recipe is updated to the new version. Script Working Directories Each script or execution step is run in its own temporary directory which is deleted after completing the step.
type SoftwareRecipeArgs struct {
	// Resources available to be used in the steps in the recipe.
	Artifacts SoftwareRecipeArtifactArrayInput `pulumi:"artifacts"`
	// Default is INSTALLED. The desired state the agent should maintain for this recipe. INSTALLED: The software recipe is installed on the instance but won't be updated to new versions. UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version, if a higher version of the recipe is assigned to this instance. REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
	DesiredState pulumi.StringPtrInput `pulumi:"desiredState"`
	// Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation. Any steps taken (including partially completed steps) are not rolled back.
	InstallSteps SoftwareRecipeStepArrayInput `pulumi:"installSteps"`
	// Required. Unique identifier for the recipe. Only one recipe with a given name is installed on an instance. Names are also used to identify resources which helps to determine whether guest policies have conflicts. This means that requests to create multiple recipes with the same name and version are rejected since they could potentially have conflicting assignments.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe. Any steps taken (including partially completed steps) are not rolled back.
	UpdateSteps SoftwareRecipeStepArrayInput `pulumi:"updateSteps"`
	// The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (SoftwareRecipeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipe)(nil)).Elem()
}

func (i SoftwareRecipeArgs) ToSoftwareRecipeOutput() SoftwareRecipeOutput {
	return i.ToSoftwareRecipeOutputWithContext(context.Background())
}

func (i SoftwareRecipeArgs) ToSoftwareRecipeOutputWithContext(ctx context.Context) SoftwareRecipeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeOutput)
}

// SoftwareRecipeArrayInput is an input type that accepts SoftwareRecipeArray and SoftwareRecipeArrayOutput values.
// You can construct a concrete instance of `SoftwareRecipeArrayInput` via:
//
//          SoftwareRecipeArray{ SoftwareRecipeArgs{...} }
type SoftwareRecipeArrayInput interface {
	pulumi.Input

	ToSoftwareRecipeArrayOutput() SoftwareRecipeArrayOutput
	ToSoftwareRecipeArrayOutputWithContext(context.Context) SoftwareRecipeArrayOutput
}

type SoftwareRecipeArray []SoftwareRecipeInput

func (SoftwareRecipeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SoftwareRecipe)(nil)).Elem()
}

func (i SoftwareRecipeArray) ToSoftwareRecipeArrayOutput() SoftwareRecipeArrayOutput {
	return i.ToSoftwareRecipeArrayOutputWithContext(context.Background())
}

func (i SoftwareRecipeArray) ToSoftwareRecipeArrayOutputWithContext(ctx context.Context) SoftwareRecipeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeArrayOutput)
}

// A software recipe is a set of instructions for installing and configuring a piece of software. It consists of a set of artifacts that are downloaded, and a set of steps that install, configure, and/or update the software. Recipes support installing and updating software from artifacts in the following formats: Zip archive, Tar archive, Windows MSI, Debian package, and RPM package. Additionally, recipes support executing a script (either defined in a file or directly in this api) in bash, sh, cmd, and powershell. Updating a software recipe If a recipe is assigned to an instance and there is a recipe with the same name but a lower version already installed and the assigned state of the recipe is `UPDATED`, then the recipe is updated to the new version. Script Working Directories Each script or execution step is run in its own temporary directory which is deleted after completing the step.
type SoftwareRecipeOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipe)(nil)).Elem()
}

func (o SoftwareRecipeOutput) ToSoftwareRecipeOutput() SoftwareRecipeOutput {
	return o
}

func (o SoftwareRecipeOutput) ToSoftwareRecipeOutputWithContext(ctx context.Context) SoftwareRecipeOutput {
	return o
}

// Resources available to be used in the steps in the recipe.
func (o SoftwareRecipeOutput) Artifacts() SoftwareRecipeArtifactArrayOutput {
	return o.ApplyT(func(v SoftwareRecipe) []SoftwareRecipeArtifact { return v.Artifacts }).(SoftwareRecipeArtifactArrayOutput)
}

// Default is INSTALLED. The desired state the agent should maintain for this recipe. INSTALLED: The software recipe is installed on the instance but won't be updated to new versions. UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version, if a higher version of the recipe is assigned to this instance. REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
func (o SoftwareRecipeOutput) DesiredState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipe) *string { return v.DesiredState }).(pulumi.StringPtrOutput)
}

// Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation. Any steps taken (including partially completed steps) are not rolled back.
func (o SoftwareRecipeOutput) InstallSteps() SoftwareRecipeStepArrayOutput {
	return o.ApplyT(func(v SoftwareRecipe) []SoftwareRecipeStep { return v.InstallSteps }).(SoftwareRecipeStepArrayOutput)
}

// Required. Unique identifier for the recipe. Only one recipe with a given name is installed on an instance. Names are also used to identify resources which helps to determine whether guest policies have conflicts. This means that requests to create multiple recipes with the same name and version are rejected since they could potentially have conflicting assignments.
func (o SoftwareRecipeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipe) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe. Any steps taken (including partially completed steps) are not rolled back.
func (o SoftwareRecipeOutput) UpdateSteps() SoftwareRecipeStepArrayOutput {
	return o.ApplyT(func(v SoftwareRecipe) []SoftwareRecipeStep { return v.UpdateSteps }).(SoftwareRecipeStepArrayOutput)
}

// The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).
func (o SoftwareRecipeOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipe) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type SoftwareRecipeArrayOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SoftwareRecipe)(nil)).Elem()
}

func (o SoftwareRecipeArrayOutput) ToSoftwareRecipeArrayOutput() SoftwareRecipeArrayOutput {
	return o
}

func (o SoftwareRecipeArrayOutput) ToSoftwareRecipeArrayOutputWithContext(ctx context.Context) SoftwareRecipeArrayOutput {
	return o
}

func (o SoftwareRecipeArrayOutput) Index(i pulumi.IntInput) SoftwareRecipeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SoftwareRecipe {
		return vs[0].([]SoftwareRecipe)[vs[1].(int)]
	}).(SoftwareRecipeOutput)
}

// Specifies a resource to be used in the recipe.
type SoftwareRecipeArtifact struct {
	// Defaults to false. When false, recipes are subject to validations based on the artifact type: Remote: A checksum must be specified, and only protocols with transport-layer security are permitted. GCS: An object generation number must be specified.
	AllowInsecure *bool `pulumi:"allowInsecure"`
	// A Google Cloud Storage artifact.
	Gcs *SoftwareRecipeArtifactGcs `pulumi:"gcs"`
	// Required. Id of the artifact, which the installation and update steps of this recipe can reference. Artifacts in a recipe cannot have the same id.
	Id *string `pulumi:"id"`
	// A generic remote artifact.
	Remote *SoftwareRecipeArtifactRemote `pulumi:"remote"`
}

// SoftwareRecipeArtifactInput is an input type that accepts SoftwareRecipeArtifactArgs and SoftwareRecipeArtifactOutput values.
// You can construct a concrete instance of `SoftwareRecipeArtifactInput` via:
//
//          SoftwareRecipeArtifactArgs{...}
type SoftwareRecipeArtifactInput interface {
	pulumi.Input

	ToSoftwareRecipeArtifactOutput() SoftwareRecipeArtifactOutput
	ToSoftwareRecipeArtifactOutputWithContext(context.Context) SoftwareRecipeArtifactOutput
}

// Specifies a resource to be used in the recipe.
type SoftwareRecipeArtifactArgs struct {
	// Defaults to false. When false, recipes are subject to validations based on the artifact type: Remote: A checksum must be specified, and only protocols with transport-layer security are permitted. GCS: An object generation number must be specified.
	AllowInsecure pulumi.BoolPtrInput `pulumi:"allowInsecure"`
	// A Google Cloud Storage artifact.
	Gcs SoftwareRecipeArtifactGcsPtrInput `pulumi:"gcs"`
	// Required. Id of the artifact, which the installation and update steps of this recipe can reference. Artifacts in a recipe cannot have the same id.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A generic remote artifact.
	Remote SoftwareRecipeArtifactRemotePtrInput `pulumi:"remote"`
}

func (SoftwareRecipeArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeArtifact)(nil)).Elem()
}

func (i SoftwareRecipeArtifactArgs) ToSoftwareRecipeArtifactOutput() SoftwareRecipeArtifactOutput {
	return i.ToSoftwareRecipeArtifactOutputWithContext(context.Background())
}

func (i SoftwareRecipeArtifactArgs) ToSoftwareRecipeArtifactOutputWithContext(ctx context.Context) SoftwareRecipeArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeArtifactOutput)
}

// SoftwareRecipeArtifactArrayInput is an input type that accepts SoftwareRecipeArtifactArray and SoftwareRecipeArtifactArrayOutput values.
// You can construct a concrete instance of `SoftwareRecipeArtifactArrayInput` via:
//
//          SoftwareRecipeArtifactArray{ SoftwareRecipeArtifactArgs{...} }
type SoftwareRecipeArtifactArrayInput interface {
	pulumi.Input

	ToSoftwareRecipeArtifactArrayOutput() SoftwareRecipeArtifactArrayOutput
	ToSoftwareRecipeArtifactArrayOutputWithContext(context.Context) SoftwareRecipeArtifactArrayOutput
}

type SoftwareRecipeArtifactArray []SoftwareRecipeArtifactInput

func (SoftwareRecipeArtifactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SoftwareRecipeArtifact)(nil)).Elem()
}

func (i SoftwareRecipeArtifactArray) ToSoftwareRecipeArtifactArrayOutput() SoftwareRecipeArtifactArrayOutput {
	return i.ToSoftwareRecipeArtifactArrayOutputWithContext(context.Background())
}

func (i SoftwareRecipeArtifactArray) ToSoftwareRecipeArtifactArrayOutputWithContext(ctx context.Context) SoftwareRecipeArtifactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeArtifactArrayOutput)
}

// Specifies a resource to be used in the recipe.
type SoftwareRecipeArtifactOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeArtifact)(nil)).Elem()
}

func (o SoftwareRecipeArtifactOutput) ToSoftwareRecipeArtifactOutput() SoftwareRecipeArtifactOutput {
	return o
}

func (o SoftwareRecipeArtifactOutput) ToSoftwareRecipeArtifactOutputWithContext(ctx context.Context) SoftwareRecipeArtifactOutput {
	return o
}

// Defaults to false. When false, recipes are subject to validations based on the artifact type: Remote: A checksum must be specified, and only protocols with transport-layer security are permitted. GCS: An object generation number must be specified.
func (o SoftwareRecipeArtifactOutput) AllowInsecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeArtifact) *bool { return v.AllowInsecure }).(pulumi.BoolPtrOutput)
}

// A Google Cloud Storage artifact.
func (o SoftwareRecipeArtifactOutput) Gcs() SoftwareRecipeArtifactGcsPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeArtifact) *SoftwareRecipeArtifactGcs { return v.Gcs }).(SoftwareRecipeArtifactGcsPtrOutput)
}

// Required. Id of the artifact, which the installation and update steps of this recipe can reference. Artifacts in a recipe cannot have the same id.
func (o SoftwareRecipeArtifactOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeArtifact) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A generic remote artifact.
func (o SoftwareRecipeArtifactOutput) Remote() SoftwareRecipeArtifactRemotePtrOutput {
	return o.ApplyT(func(v SoftwareRecipeArtifact) *SoftwareRecipeArtifactRemote { return v.Remote }).(SoftwareRecipeArtifactRemotePtrOutput)
}

type SoftwareRecipeArtifactArrayOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeArtifactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SoftwareRecipeArtifact)(nil)).Elem()
}

func (o SoftwareRecipeArtifactArrayOutput) ToSoftwareRecipeArtifactArrayOutput() SoftwareRecipeArtifactArrayOutput {
	return o
}

func (o SoftwareRecipeArtifactArrayOutput) ToSoftwareRecipeArtifactArrayOutputWithContext(ctx context.Context) SoftwareRecipeArtifactArrayOutput {
	return o
}

func (o SoftwareRecipeArtifactArrayOutput) Index(i pulumi.IntInput) SoftwareRecipeArtifactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SoftwareRecipeArtifact {
		return vs[0].([]SoftwareRecipeArtifact)[vs[1].(int)]
	}).(SoftwareRecipeArtifactOutput)
}

// Specifies an artifact available as a Google Cloud Storage object.
type SoftwareRecipeArtifactGcs struct {
	// Bucket of the Google Cloud Storage object. Given an example URL: `https://storage.googleapis.com/my-bucket/foo/bar#1234567` this value would be `my-bucket`.
	Bucket *string `pulumi:"bucket"`
	// Must be provided if allow_insecure is false. Generation number of the Google Cloud Storage object. `https://storage.googleapis.com/my-bucket/foo/bar#1234567` this value would be `1234567`.
	Generation *string `pulumi:"generation"`
	// Name of the Google Cloud Storage object. As specified [here] (https://cloud.google.com/storage/docs/naming#objectnames) Given an example URL: `https://storage.googleapis.com/my-bucket/foo/bar#1234567` this value would be `foo/bar`.
	Object *string `pulumi:"object"`
}

// SoftwareRecipeArtifactGcsInput is an input type that accepts SoftwareRecipeArtifactGcsArgs and SoftwareRecipeArtifactGcsOutput values.
// You can construct a concrete instance of `SoftwareRecipeArtifactGcsInput` via:
//
//          SoftwareRecipeArtifactGcsArgs{...}
type SoftwareRecipeArtifactGcsInput interface {
	pulumi.Input

	ToSoftwareRecipeArtifactGcsOutput() SoftwareRecipeArtifactGcsOutput
	ToSoftwareRecipeArtifactGcsOutputWithContext(context.Context) SoftwareRecipeArtifactGcsOutput
}

// Specifies an artifact available as a Google Cloud Storage object.
type SoftwareRecipeArtifactGcsArgs struct {
	// Bucket of the Google Cloud Storage object. Given an example URL: `https://storage.googleapis.com/my-bucket/foo/bar#1234567` this value would be `my-bucket`.
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// Must be provided if allow_insecure is false. Generation number of the Google Cloud Storage object. `https://storage.googleapis.com/my-bucket/foo/bar#1234567` this value would be `1234567`.
	Generation pulumi.StringPtrInput `pulumi:"generation"`
	// Name of the Google Cloud Storage object. As specified [here] (https://cloud.google.com/storage/docs/naming#objectnames) Given an example URL: `https://storage.googleapis.com/my-bucket/foo/bar#1234567` this value would be `foo/bar`.
	Object pulumi.StringPtrInput `pulumi:"object"`
}

func (SoftwareRecipeArtifactGcsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeArtifactGcs)(nil)).Elem()
}

func (i SoftwareRecipeArtifactGcsArgs) ToSoftwareRecipeArtifactGcsOutput() SoftwareRecipeArtifactGcsOutput {
	return i.ToSoftwareRecipeArtifactGcsOutputWithContext(context.Background())
}

func (i SoftwareRecipeArtifactGcsArgs) ToSoftwareRecipeArtifactGcsOutputWithContext(ctx context.Context) SoftwareRecipeArtifactGcsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeArtifactGcsOutput)
}

func (i SoftwareRecipeArtifactGcsArgs) ToSoftwareRecipeArtifactGcsPtrOutput() SoftwareRecipeArtifactGcsPtrOutput {
	return i.ToSoftwareRecipeArtifactGcsPtrOutputWithContext(context.Background())
}

func (i SoftwareRecipeArtifactGcsArgs) ToSoftwareRecipeArtifactGcsPtrOutputWithContext(ctx context.Context) SoftwareRecipeArtifactGcsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeArtifactGcsOutput).ToSoftwareRecipeArtifactGcsPtrOutputWithContext(ctx)
}

// SoftwareRecipeArtifactGcsPtrInput is an input type that accepts SoftwareRecipeArtifactGcsArgs, SoftwareRecipeArtifactGcsPtr and SoftwareRecipeArtifactGcsPtrOutput values.
// You can construct a concrete instance of `SoftwareRecipeArtifactGcsPtrInput` via:
//
//          SoftwareRecipeArtifactGcsArgs{...}
//
//  or:
//
//          nil
type SoftwareRecipeArtifactGcsPtrInput interface {
	pulumi.Input

	ToSoftwareRecipeArtifactGcsPtrOutput() SoftwareRecipeArtifactGcsPtrOutput
	ToSoftwareRecipeArtifactGcsPtrOutputWithContext(context.Context) SoftwareRecipeArtifactGcsPtrOutput
}

type softwareRecipeArtifactGcsPtrType SoftwareRecipeArtifactGcsArgs

func SoftwareRecipeArtifactGcsPtr(v *SoftwareRecipeArtifactGcsArgs) SoftwareRecipeArtifactGcsPtrInput {
	return (*softwareRecipeArtifactGcsPtrType)(v)
}

func (*softwareRecipeArtifactGcsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeArtifactGcs)(nil)).Elem()
}

func (i *softwareRecipeArtifactGcsPtrType) ToSoftwareRecipeArtifactGcsPtrOutput() SoftwareRecipeArtifactGcsPtrOutput {
	return i.ToSoftwareRecipeArtifactGcsPtrOutputWithContext(context.Background())
}

func (i *softwareRecipeArtifactGcsPtrType) ToSoftwareRecipeArtifactGcsPtrOutputWithContext(ctx context.Context) SoftwareRecipeArtifactGcsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeArtifactGcsPtrOutput)
}

// Specifies an artifact available as a Google Cloud Storage object.
type SoftwareRecipeArtifactGcsOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeArtifactGcsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeArtifactGcs)(nil)).Elem()
}

func (o SoftwareRecipeArtifactGcsOutput) ToSoftwareRecipeArtifactGcsOutput() SoftwareRecipeArtifactGcsOutput {
	return o
}

func (o SoftwareRecipeArtifactGcsOutput) ToSoftwareRecipeArtifactGcsOutputWithContext(ctx context.Context) SoftwareRecipeArtifactGcsOutput {
	return o
}

func (o SoftwareRecipeArtifactGcsOutput) ToSoftwareRecipeArtifactGcsPtrOutput() SoftwareRecipeArtifactGcsPtrOutput {
	return o.ToSoftwareRecipeArtifactGcsPtrOutputWithContext(context.Background())
}

func (o SoftwareRecipeArtifactGcsOutput) ToSoftwareRecipeArtifactGcsPtrOutputWithContext(ctx context.Context) SoftwareRecipeArtifactGcsPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeArtifactGcs) *SoftwareRecipeArtifactGcs {
		return &v
	}).(SoftwareRecipeArtifactGcsPtrOutput)
}

// Bucket of the Google Cloud Storage object. Given an example URL: `https://storage.googleapis.com/my-bucket/foo/bar#1234567` this value would be `my-bucket`.
func (o SoftwareRecipeArtifactGcsOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeArtifactGcs) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// Must be provided if allow_insecure is false. Generation number of the Google Cloud Storage object. `https://storage.googleapis.com/my-bucket/foo/bar#1234567` this value would be `1234567`.
func (o SoftwareRecipeArtifactGcsOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeArtifactGcs) *string { return v.Generation }).(pulumi.StringPtrOutput)
}

// Name of the Google Cloud Storage object. As specified [here] (https://cloud.google.com/storage/docs/naming#objectnames) Given an example URL: `https://storage.googleapis.com/my-bucket/foo/bar#1234567` this value would be `foo/bar`.
func (o SoftwareRecipeArtifactGcsOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeArtifactGcs) *string { return v.Object }).(pulumi.StringPtrOutput)
}

type SoftwareRecipeArtifactGcsPtrOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeArtifactGcsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeArtifactGcs)(nil)).Elem()
}

func (o SoftwareRecipeArtifactGcsPtrOutput) ToSoftwareRecipeArtifactGcsPtrOutput() SoftwareRecipeArtifactGcsPtrOutput {
	return o
}

func (o SoftwareRecipeArtifactGcsPtrOutput) ToSoftwareRecipeArtifactGcsPtrOutputWithContext(ctx context.Context) SoftwareRecipeArtifactGcsPtrOutput {
	return o
}

func (o SoftwareRecipeArtifactGcsPtrOutput) Elem() SoftwareRecipeArtifactGcsOutput {
	return o.ApplyT(func(v *SoftwareRecipeArtifactGcs) SoftwareRecipeArtifactGcs { return *v }).(SoftwareRecipeArtifactGcsOutput)
}

// Bucket of the Google Cloud Storage object. Given an example URL: `https://storage.googleapis.com/my-bucket/foo/bar#1234567` this value would be `my-bucket`.
func (o SoftwareRecipeArtifactGcsPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareRecipeArtifactGcs) *string {
		if v == nil {
			return nil
		}
		return v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Must be provided if allow_insecure is false. Generation number of the Google Cloud Storage object. `https://storage.googleapis.com/my-bucket/foo/bar#1234567` this value would be `1234567`.
func (o SoftwareRecipeArtifactGcsPtrOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareRecipeArtifactGcs) *string {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(pulumi.StringPtrOutput)
}

// Name of the Google Cloud Storage object. As specified [here] (https://cloud.google.com/storage/docs/naming#objectnames) Given an example URL: `https://storage.googleapis.com/my-bucket/foo/bar#1234567` this value would be `foo/bar`.
func (o SoftwareRecipeArtifactGcsPtrOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareRecipeArtifactGcs) *string {
		if v == nil {
			return nil
		}
		return v.Object
	}).(pulumi.StringPtrOutput)
}

// Specifies an artifact available via some URI.
type SoftwareRecipeArtifactRemote struct {
	// Must be provided if `allow_insecure` is `false`. SHA256 checksum in hex format, to compare to the checksum of the artifact. If the checksum is not empty and it doesn't match the artifact then the recipe installation fails before running any of the steps.
	Checksum *string `pulumi:"checksum"`
	// URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
	Uri *string `pulumi:"uri"`
}

// SoftwareRecipeArtifactRemoteInput is an input type that accepts SoftwareRecipeArtifactRemoteArgs and SoftwareRecipeArtifactRemoteOutput values.
// You can construct a concrete instance of `SoftwareRecipeArtifactRemoteInput` via:
//
//          SoftwareRecipeArtifactRemoteArgs{...}
type SoftwareRecipeArtifactRemoteInput interface {
	pulumi.Input

	ToSoftwareRecipeArtifactRemoteOutput() SoftwareRecipeArtifactRemoteOutput
	ToSoftwareRecipeArtifactRemoteOutputWithContext(context.Context) SoftwareRecipeArtifactRemoteOutput
}

// Specifies an artifact available via some URI.
type SoftwareRecipeArtifactRemoteArgs struct {
	// Must be provided if `allow_insecure` is `false`. SHA256 checksum in hex format, to compare to the checksum of the artifact. If the checksum is not empty and it doesn't match the artifact then the recipe installation fails before running any of the steps.
	Checksum pulumi.StringPtrInput `pulumi:"checksum"`
	// URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (SoftwareRecipeArtifactRemoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeArtifactRemote)(nil)).Elem()
}

func (i SoftwareRecipeArtifactRemoteArgs) ToSoftwareRecipeArtifactRemoteOutput() SoftwareRecipeArtifactRemoteOutput {
	return i.ToSoftwareRecipeArtifactRemoteOutputWithContext(context.Background())
}

func (i SoftwareRecipeArtifactRemoteArgs) ToSoftwareRecipeArtifactRemoteOutputWithContext(ctx context.Context) SoftwareRecipeArtifactRemoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeArtifactRemoteOutput)
}

func (i SoftwareRecipeArtifactRemoteArgs) ToSoftwareRecipeArtifactRemotePtrOutput() SoftwareRecipeArtifactRemotePtrOutput {
	return i.ToSoftwareRecipeArtifactRemotePtrOutputWithContext(context.Background())
}

func (i SoftwareRecipeArtifactRemoteArgs) ToSoftwareRecipeArtifactRemotePtrOutputWithContext(ctx context.Context) SoftwareRecipeArtifactRemotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeArtifactRemoteOutput).ToSoftwareRecipeArtifactRemotePtrOutputWithContext(ctx)
}

// SoftwareRecipeArtifactRemotePtrInput is an input type that accepts SoftwareRecipeArtifactRemoteArgs, SoftwareRecipeArtifactRemotePtr and SoftwareRecipeArtifactRemotePtrOutput values.
// You can construct a concrete instance of `SoftwareRecipeArtifactRemotePtrInput` via:
//
//          SoftwareRecipeArtifactRemoteArgs{...}
//
//  or:
//
//          nil
type SoftwareRecipeArtifactRemotePtrInput interface {
	pulumi.Input

	ToSoftwareRecipeArtifactRemotePtrOutput() SoftwareRecipeArtifactRemotePtrOutput
	ToSoftwareRecipeArtifactRemotePtrOutputWithContext(context.Context) SoftwareRecipeArtifactRemotePtrOutput
}

type softwareRecipeArtifactRemotePtrType SoftwareRecipeArtifactRemoteArgs

func SoftwareRecipeArtifactRemotePtr(v *SoftwareRecipeArtifactRemoteArgs) SoftwareRecipeArtifactRemotePtrInput {
	return (*softwareRecipeArtifactRemotePtrType)(v)
}

func (*softwareRecipeArtifactRemotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeArtifactRemote)(nil)).Elem()
}

func (i *softwareRecipeArtifactRemotePtrType) ToSoftwareRecipeArtifactRemotePtrOutput() SoftwareRecipeArtifactRemotePtrOutput {
	return i.ToSoftwareRecipeArtifactRemotePtrOutputWithContext(context.Background())
}

func (i *softwareRecipeArtifactRemotePtrType) ToSoftwareRecipeArtifactRemotePtrOutputWithContext(ctx context.Context) SoftwareRecipeArtifactRemotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeArtifactRemotePtrOutput)
}

// Specifies an artifact available via some URI.
type SoftwareRecipeArtifactRemoteOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeArtifactRemoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeArtifactRemote)(nil)).Elem()
}

func (o SoftwareRecipeArtifactRemoteOutput) ToSoftwareRecipeArtifactRemoteOutput() SoftwareRecipeArtifactRemoteOutput {
	return o
}

func (o SoftwareRecipeArtifactRemoteOutput) ToSoftwareRecipeArtifactRemoteOutputWithContext(ctx context.Context) SoftwareRecipeArtifactRemoteOutput {
	return o
}

func (o SoftwareRecipeArtifactRemoteOutput) ToSoftwareRecipeArtifactRemotePtrOutput() SoftwareRecipeArtifactRemotePtrOutput {
	return o.ToSoftwareRecipeArtifactRemotePtrOutputWithContext(context.Background())
}

func (o SoftwareRecipeArtifactRemoteOutput) ToSoftwareRecipeArtifactRemotePtrOutputWithContext(ctx context.Context) SoftwareRecipeArtifactRemotePtrOutput {
	return o.ApplyT(func(v SoftwareRecipeArtifactRemote) *SoftwareRecipeArtifactRemote {
		return &v
	}).(SoftwareRecipeArtifactRemotePtrOutput)
}

// Must be provided if `allow_insecure` is `false`. SHA256 checksum in hex format, to compare to the checksum of the artifact. If the checksum is not empty and it doesn't match the artifact then the recipe installation fails before running any of the steps.
func (o SoftwareRecipeArtifactRemoteOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeArtifactRemote) *string { return v.Checksum }).(pulumi.StringPtrOutput)
}

// URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
func (o SoftwareRecipeArtifactRemoteOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeArtifactRemote) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type SoftwareRecipeArtifactRemotePtrOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeArtifactRemotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeArtifactRemote)(nil)).Elem()
}

func (o SoftwareRecipeArtifactRemotePtrOutput) ToSoftwareRecipeArtifactRemotePtrOutput() SoftwareRecipeArtifactRemotePtrOutput {
	return o
}

func (o SoftwareRecipeArtifactRemotePtrOutput) ToSoftwareRecipeArtifactRemotePtrOutputWithContext(ctx context.Context) SoftwareRecipeArtifactRemotePtrOutput {
	return o
}

func (o SoftwareRecipeArtifactRemotePtrOutput) Elem() SoftwareRecipeArtifactRemoteOutput {
	return o.ApplyT(func(v *SoftwareRecipeArtifactRemote) SoftwareRecipeArtifactRemote { return *v }).(SoftwareRecipeArtifactRemoteOutput)
}

// Must be provided if `allow_insecure` is `false`. SHA256 checksum in hex format, to compare to the checksum of the artifact. If the checksum is not empty and it doesn't match the artifact then the recipe installation fails before running any of the steps.
func (o SoftwareRecipeArtifactRemotePtrOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareRecipeArtifactRemote) *string {
		if v == nil {
			return nil
		}
		return v.Checksum
	}).(pulumi.StringPtrOutput)
}

// URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
func (o SoftwareRecipeArtifactRemotePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareRecipeArtifactRemote) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// An action that can be taken as part of installing or updating a recipe.
type SoftwareRecipeStep struct {
	// Extracts an archive into the specified directory.
	ArchiveExtraction *SoftwareRecipeStepExtractArchive `pulumi:"archiveExtraction"`
	// Installs a deb file via dpkg.
	DpkgInstallation *SoftwareRecipeStepInstallDpkg `pulumi:"dpkgInstallation"`
	// Copies a file onto the instance.
	FileCopy *SoftwareRecipeStepCopyFile `pulumi:"fileCopy"`
	// Executes an artifact or local file.
	FileExec *SoftwareRecipeStepExecFile `pulumi:"fileExec"`
	// Installs an MSI file.
	MsiInstallation *SoftwareRecipeStepInstallMsi `pulumi:"msiInstallation"`
	// Installs an rpm file via the rpm utility.
	RpmInstallation *SoftwareRecipeStepInstallRpm `pulumi:"rpmInstallation"`
	// Runs commands in a shell.
	ScriptRun *SoftwareRecipeStepRunScript `pulumi:"scriptRun"`
}

// SoftwareRecipeStepInput is an input type that accepts SoftwareRecipeStepArgs and SoftwareRecipeStepOutput values.
// You can construct a concrete instance of `SoftwareRecipeStepInput` via:
//
//          SoftwareRecipeStepArgs{...}
type SoftwareRecipeStepInput interface {
	pulumi.Input

	ToSoftwareRecipeStepOutput() SoftwareRecipeStepOutput
	ToSoftwareRecipeStepOutputWithContext(context.Context) SoftwareRecipeStepOutput
}

// An action that can be taken as part of installing or updating a recipe.
type SoftwareRecipeStepArgs struct {
	// Extracts an archive into the specified directory.
	ArchiveExtraction SoftwareRecipeStepExtractArchivePtrInput `pulumi:"archiveExtraction"`
	// Installs a deb file via dpkg.
	DpkgInstallation SoftwareRecipeStepInstallDpkgPtrInput `pulumi:"dpkgInstallation"`
	// Copies a file onto the instance.
	FileCopy SoftwareRecipeStepCopyFilePtrInput `pulumi:"fileCopy"`
	// Executes an artifact or local file.
	FileExec SoftwareRecipeStepExecFilePtrInput `pulumi:"fileExec"`
	// Installs an MSI file.
	MsiInstallation SoftwareRecipeStepInstallMsiPtrInput `pulumi:"msiInstallation"`
	// Installs an rpm file via the rpm utility.
	RpmInstallation SoftwareRecipeStepInstallRpmPtrInput `pulumi:"rpmInstallation"`
	// Runs commands in a shell.
	ScriptRun SoftwareRecipeStepRunScriptPtrInput `pulumi:"scriptRun"`
}

func (SoftwareRecipeStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeStep)(nil)).Elem()
}

func (i SoftwareRecipeStepArgs) ToSoftwareRecipeStepOutput() SoftwareRecipeStepOutput {
	return i.ToSoftwareRecipeStepOutputWithContext(context.Background())
}

func (i SoftwareRecipeStepArgs) ToSoftwareRecipeStepOutputWithContext(ctx context.Context) SoftwareRecipeStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepOutput)
}

// SoftwareRecipeStepArrayInput is an input type that accepts SoftwareRecipeStepArray and SoftwareRecipeStepArrayOutput values.
// You can construct a concrete instance of `SoftwareRecipeStepArrayInput` via:
//
//          SoftwareRecipeStepArray{ SoftwareRecipeStepArgs{...} }
type SoftwareRecipeStepArrayInput interface {
	pulumi.Input

	ToSoftwareRecipeStepArrayOutput() SoftwareRecipeStepArrayOutput
	ToSoftwareRecipeStepArrayOutputWithContext(context.Context) SoftwareRecipeStepArrayOutput
}

type SoftwareRecipeStepArray []SoftwareRecipeStepInput

func (SoftwareRecipeStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SoftwareRecipeStep)(nil)).Elem()
}

func (i SoftwareRecipeStepArray) ToSoftwareRecipeStepArrayOutput() SoftwareRecipeStepArrayOutput {
	return i.ToSoftwareRecipeStepArrayOutputWithContext(context.Background())
}

func (i SoftwareRecipeStepArray) ToSoftwareRecipeStepArrayOutputWithContext(ctx context.Context) SoftwareRecipeStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepArrayOutput)
}

// An action that can be taken as part of installing or updating a recipe.
type SoftwareRecipeStepOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeStep)(nil)).Elem()
}

func (o SoftwareRecipeStepOutput) ToSoftwareRecipeStepOutput() SoftwareRecipeStepOutput {
	return o
}

func (o SoftwareRecipeStepOutput) ToSoftwareRecipeStepOutputWithContext(ctx context.Context) SoftwareRecipeStepOutput {
	return o
}

// Extracts an archive into the specified directory.
func (o SoftwareRecipeStepOutput) ArchiveExtraction() SoftwareRecipeStepExtractArchivePtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStep) *SoftwareRecipeStepExtractArchive { return v.ArchiveExtraction }).(SoftwareRecipeStepExtractArchivePtrOutput)
}

// Installs a deb file via dpkg.
func (o SoftwareRecipeStepOutput) DpkgInstallation() SoftwareRecipeStepInstallDpkgPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStep) *SoftwareRecipeStepInstallDpkg { return v.DpkgInstallation }).(SoftwareRecipeStepInstallDpkgPtrOutput)
}

// Copies a file onto the instance.
func (o SoftwareRecipeStepOutput) FileCopy() SoftwareRecipeStepCopyFilePtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStep) *SoftwareRecipeStepCopyFile { return v.FileCopy }).(SoftwareRecipeStepCopyFilePtrOutput)
}

// Executes an artifact or local file.
func (o SoftwareRecipeStepOutput) FileExec() SoftwareRecipeStepExecFilePtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStep) *SoftwareRecipeStepExecFile { return v.FileExec }).(SoftwareRecipeStepExecFilePtrOutput)
}

// Installs an MSI file.
func (o SoftwareRecipeStepOutput) MsiInstallation() SoftwareRecipeStepInstallMsiPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStep) *SoftwareRecipeStepInstallMsi { return v.MsiInstallation }).(SoftwareRecipeStepInstallMsiPtrOutput)
}

// Installs an rpm file via the rpm utility.
func (o SoftwareRecipeStepOutput) RpmInstallation() SoftwareRecipeStepInstallRpmPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStep) *SoftwareRecipeStepInstallRpm { return v.RpmInstallation }).(SoftwareRecipeStepInstallRpmPtrOutput)
}

// Runs commands in a shell.
func (o SoftwareRecipeStepOutput) ScriptRun() SoftwareRecipeStepRunScriptPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStep) *SoftwareRecipeStepRunScript { return v.ScriptRun }).(SoftwareRecipeStepRunScriptPtrOutput)
}

type SoftwareRecipeStepArrayOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SoftwareRecipeStep)(nil)).Elem()
}

func (o SoftwareRecipeStepArrayOutput) ToSoftwareRecipeStepArrayOutput() SoftwareRecipeStepArrayOutput {
	return o
}

func (o SoftwareRecipeStepArrayOutput) ToSoftwareRecipeStepArrayOutputWithContext(ctx context.Context) SoftwareRecipeStepArrayOutput {
	return o
}

func (o SoftwareRecipeStepArrayOutput) Index(i pulumi.IntInput) SoftwareRecipeStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SoftwareRecipeStep {
		return vs[0].([]SoftwareRecipeStep)[vs[1].(int)]
	}).(SoftwareRecipeStepOutput)
}

// Copies the artifact to the specified path on the instance.
type SoftwareRecipeStepCopyFile struct {
	// Required. The id of the relevant artifact in the recipe.
	ArtifactId *string `pulumi:"artifactId"`
	// Required. The absolute path on the instance to put the file.
	Destination *string `pulumi:"destination"`
	// Whether to allow this step to overwrite existing files. If this is false and the file already exists the file is not overwritten and the step is considered a success. Defaults to false.
	Overwrite *bool `pulumi:"overwrite"`
	// Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
	Permissions *string `pulumi:"permissions"`
}

// SoftwareRecipeStepCopyFileInput is an input type that accepts SoftwareRecipeStepCopyFileArgs and SoftwareRecipeStepCopyFileOutput values.
// You can construct a concrete instance of `SoftwareRecipeStepCopyFileInput` via:
//
//          SoftwareRecipeStepCopyFileArgs{...}
type SoftwareRecipeStepCopyFileInput interface {
	pulumi.Input

	ToSoftwareRecipeStepCopyFileOutput() SoftwareRecipeStepCopyFileOutput
	ToSoftwareRecipeStepCopyFileOutputWithContext(context.Context) SoftwareRecipeStepCopyFileOutput
}

// Copies the artifact to the specified path on the instance.
type SoftwareRecipeStepCopyFileArgs struct {
	// Required. The id of the relevant artifact in the recipe.
	ArtifactId pulumi.StringPtrInput `pulumi:"artifactId"`
	// Required. The absolute path on the instance to put the file.
	Destination pulumi.StringPtrInput `pulumi:"destination"`
	// Whether to allow this step to overwrite existing files. If this is false and the file already exists the file is not overwritten and the step is considered a success. Defaults to false.
	Overwrite pulumi.BoolPtrInput `pulumi:"overwrite"`
	// Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
	Permissions pulumi.StringPtrInput `pulumi:"permissions"`
}

func (SoftwareRecipeStepCopyFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeStepCopyFile)(nil)).Elem()
}

func (i SoftwareRecipeStepCopyFileArgs) ToSoftwareRecipeStepCopyFileOutput() SoftwareRecipeStepCopyFileOutput {
	return i.ToSoftwareRecipeStepCopyFileOutputWithContext(context.Background())
}

func (i SoftwareRecipeStepCopyFileArgs) ToSoftwareRecipeStepCopyFileOutputWithContext(ctx context.Context) SoftwareRecipeStepCopyFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepCopyFileOutput)
}

func (i SoftwareRecipeStepCopyFileArgs) ToSoftwareRecipeStepCopyFilePtrOutput() SoftwareRecipeStepCopyFilePtrOutput {
	return i.ToSoftwareRecipeStepCopyFilePtrOutputWithContext(context.Background())
}

func (i SoftwareRecipeStepCopyFileArgs) ToSoftwareRecipeStepCopyFilePtrOutputWithContext(ctx context.Context) SoftwareRecipeStepCopyFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepCopyFileOutput).ToSoftwareRecipeStepCopyFilePtrOutputWithContext(ctx)
}

// SoftwareRecipeStepCopyFilePtrInput is an input type that accepts SoftwareRecipeStepCopyFileArgs, SoftwareRecipeStepCopyFilePtr and SoftwareRecipeStepCopyFilePtrOutput values.
// You can construct a concrete instance of `SoftwareRecipeStepCopyFilePtrInput` via:
//
//          SoftwareRecipeStepCopyFileArgs{...}
//
//  or:
//
//          nil
type SoftwareRecipeStepCopyFilePtrInput interface {
	pulumi.Input

	ToSoftwareRecipeStepCopyFilePtrOutput() SoftwareRecipeStepCopyFilePtrOutput
	ToSoftwareRecipeStepCopyFilePtrOutputWithContext(context.Context) SoftwareRecipeStepCopyFilePtrOutput
}

type softwareRecipeStepCopyFilePtrType SoftwareRecipeStepCopyFileArgs

func SoftwareRecipeStepCopyFilePtr(v *SoftwareRecipeStepCopyFileArgs) SoftwareRecipeStepCopyFilePtrInput {
	return (*softwareRecipeStepCopyFilePtrType)(v)
}

func (*softwareRecipeStepCopyFilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeStepCopyFile)(nil)).Elem()
}

func (i *softwareRecipeStepCopyFilePtrType) ToSoftwareRecipeStepCopyFilePtrOutput() SoftwareRecipeStepCopyFilePtrOutput {
	return i.ToSoftwareRecipeStepCopyFilePtrOutputWithContext(context.Background())
}

func (i *softwareRecipeStepCopyFilePtrType) ToSoftwareRecipeStepCopyFilePtrOutputWithContext(ctx context.Context) SoftwareRecipeStepCopyFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepCopyFilePtrOutput)
}

// Copies the artifact to the specified path on the instance.
type SoftwareRecipeStepCopyFileOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeStepCopyFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeStepCopyFile)(nil)).Elem()
}

func (o SoftwareRecipeStepCopyFileOutput) ToSoftwareRecipeStepCopyFileOutput() SoftwareRecipeStepCopyFileOutput {
	return o
}

func (o SoftwareRecipeStepCopyFileOutput) ToSoftwareRecipeStepCopyFileOutputWithContext(ctx context.Context) SoftwareRecipeStepCopyFileOutput {
	return o
}

func (o SoftwareRecipeStepCopyFileOutput) ToSoftwareRecipeStepCopyFilePtrOutput() SoftwareRecipeStepCopyFilePtrOutput {
	return o.ToSoftwareRecipeStepCopyFilePtrOutputWithContext(context.Background())
}

func (o SoftwareRecipeStepCopyFileOutput) ToSoftwareRecipeStepCopyFilePtrOutputWithContext(ctx context.Context) SoftwareRecipeStepCopyFilePtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepCopyFile) *SoftwareRecipeStepCopyFile {
		return &v
	}).(SoftwareRecipeStepCopyFilePtrOutput)
}

// Required. The id of the relevant artifact in the recipe.
func (o SoftwareRecipeStepCopyFileOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepCopyFile) *string { return v.ArtifactId }).(pulumi.StringPtrOutput)
}

// Required. The absolute path on the instance to put the file.
func (o SoftwareRecipeStepCopyFileOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepCopyFile) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

// Whether to allow this step to overwrite existing files. If this is false and the file already exists the file is not overwritten and the step is considered a success. Defaults to false.
func (o SoftwareRecipeStepCopyFileOutput) Overwrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepCopyFile) *bool { return v.Overwrite }).(pulumi.BoolPtrOutput)
}

// Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
func (o SoftwareRecipeStepCopyFileOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepCopyFile) *string { return v.Permissions }).(pulumi.StringPtrOutput)
}

type SoftwareRecipeStepCopyFilePtrOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeStepCopyFilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeStepCopyFile)(nil)).Elem()
}

func (o SoftwareRecipeStepCopyFilePtrOutput) ToSoftwareRecipeStepCopyFilePtrOutput() SoftwareRecipeStepCopyFilePtrOutput {
	return o
}

func (o SoftwareRecipeStepCopyFilePtrOutput) ToSoftwareRecipeStepCopyFilePtrOutputWithContext(ctx context.Context) SoftwareRecipeStepCopyFilePtrOutput {
	return o
}

func (o SoftwareRecipeStepCopyFilePtrOutput) Elem() SoftwareRecipeStepCopyFileOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepCopyFile) SoftwareRecipeStepCopyFile { return *v }).(SoftwareRecipeStepCopyFileOutput)
}

// Required. The id of the relevant artifact in the recipe.
func (o SoftwareRecipeStepCopyFilePtrOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepCopyFile) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactId
	}).(pulumi.StringPtrOutput)
}

// Required. The absolute path on the instance to put the file.
func (o SoftwareRecipeStepCopyFilePtrOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepCopyFile) *string {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(pulumi.StringPtrOutput)
}

// Whether to allow this step to overwrite existing files. If this is false and the file already exists the file is not overwritten and the step is considered a success. Defaults to false.
func (o SoftwareRecipeStepCopyFilePtrOutput) Overwrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepCopyFile) *bool {
		if v == nil {
			return nil
		}
		return v.Overwrite
	}).(pulumi.BoolPtrOutput)
}

// Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
func (o SoftwareRecipeStepCopyFilePtrOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepCopyFile) *string {
		if v == nil {
			return nil
		}
		return v.Permissions
	}).(pulumi.StringPtrOutput)
}

// Executes an artifact or local file.
type SoftwareRecipeStepExecFile struct {
	// Defaults to [0]. A list of possible return values that the program can return to indicate a success.
	AllowedExitCodes []int `pulumi:"allowedExitCodes"`
	// Arguments to be passed to the provided executable.
	Args []string `pulumi:"args"`
	// The id of the relevant artifact in the recipe.
	ArtifactId *string `pulumi:"artifactId"`
	// The absolute path of the file on the local filesystem.
	LocalPath *string `pulumi:"localPath"`
}

// SoftwareRecipeStepExecFileInput is an input type that accepts SoftwareRecipeStepExecFileArgs and SoftwareRecipeStepExecFileOutput values.
// You can construct a concrete instance of `SoftwareRecipeStepExecFileInput` via:
//
//          SoftwareRecipeStepExecFileArgs{...}
type SoftwareRecipeStepExecFileInput interface {
	pulumi.Input

	ToSoftwareRecipeStepExecFileOutput() SoftwareRecipeStepExecFileOutput
	ToSoftwareRecipeStepExecFileOutputWithContext(context.Context) SoftwareRecipeStepExecFileOutput
}

// Executes an artifact or local file.
type SoftwareRecipeStepExecFileArgs struct {
	// Defaults to [0]. A list of possible return values that the program can return to indicate a success.
	AllowedExitCodes pulumi.IntArrayInput `pulumi:"allowedExitCodes"`
	// Arguments to be passed to the provided executable.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// The id of the relevant artifact in the recipe.
	ArtifactId pulumi.StringPtrInput `pulumi:"artifactId"`
	// The absolute path of the file on the local filesystem.
	LocalPath pulumi.StringPtrInput `pulumi:"localPath"`
}

func (SoftwareRecipeStepExecFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeStepExecFile)(nil)).Elem()
}

func (i SoftwareRecipeStepExecFileArgs) ToSoftwareRecipeStepExecFileOutput() SoftwareRecipeStepExecFileOutput {
	return i.ToSoftwareRecipeStepExecFileOutputWithContext(context.Background())
}

func (i SoftwareRecipeStepExecFileArgs) ToSoftwareRecipeStepExecFileOutputWithContext(ctx context.Context) SoftwareRecipeStepExecFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepExecFileOutput)
}

func (i SoftwareRecipeStepExecFileArgs) ToSoftwareRecipeStepExecFilePtrOutput() SoftwareRecipeStepExecFilePtrOutput {
	return i.ToSoftwareRecipeStepExecFilePtrOutputWithContext(context.Background())
}

func (i SoftwareRecipeStepExecFileArgs) ToSoftwareRecipeStepExecFilePtrOutputWithContext(ctx context.Context) SoftwareRecipeStepExecFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepExecFileOutput).ToSoftwareRecipeStepExecFilePtrOutputWithContext(ctx)
}

// SoftwareRecipeStepExecFilePtrInput is an input type that accepts SoftwareRecipeStepExecFileArgs, SoftwareRecipeStepExecFilePtr and SoftwareRecipeStepExecFilePtrOutput values.
// You can construct a concrete instance of `SoftwareRecipeStepExecFilePtrInput` via:
//
//          SoftwareRecipeStepExecFileArgs{...}
//
//  or:
//
//          nil
type SoftwareRecipeStepExecFilePtrInput interface {
	pulumi.Input

	ToSoftwareRecipeStepExecFilePtrOutput() SoftwareRecipeStepExecFilePtrOutput
	ToSoftwareRecipeStepExecFilePtrOutputWithContext(context.Context) SoftwareRecipeStepExecFilePtrOutput
}

type softwareRecipeStepExecFilePtrType SoftwareRecipeStepExecFileArgs

func SoftwareRecipeStepExecFilePtr(v *SoftwareRecipeStepExecFileArgs) SoftwareRecipeStepExecFilePtrInput {
	return (*softwareRecipeStepExecFilePtrType)(v)
}

func (*softwareRecipeStepExecFilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeStepExecFile)(nil)).Elem()
}

func (i *softwareRecipeStepExecFilePtrType) ToSoftwareRecipeStepExecFilePtrOutput() SoftwareRecipeStepExecFilePtrOutput {
	return i.ToSoftwareRecipeStepExecFilePtrOutputWithContext(context.Background())
}

func (i *softwareRecipeStepExecFilePtrType) ToSoftwareRecipeStepExecFilePtrOutputWithContext(ctx context.Context) SoftwareRecipeStepExecFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepExecFilePtrOutput)
}

// Executes an artifact or local file.
type SoftwareRecipeStepExecFileOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeStepExecFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeStepExecFile)(nil)).Elem()
}

func (o SoftwareRecipeStepExecFileOutput) ToSoftwareRecipeStepExecFileOutput() SoftwareRecipeStepExecFileOutput {
	return o
}

func (o SoftwareRecipeStepExecFileOutput) ToSoftwareRecipeStepExecFileOutputWithContext(ctx context.Context) SoftwareRecipeStepExecFileOutput {
	return o
}

func (o SoftwareRecipeStepExecFileOutput) ToSoftwareRecipeStepExecFilePtrOutput() SoftwareRecipeStepExecFilePtrOutput {
	return o.ToSoftwareRecipeStepExecFilePtrOutputWithContext(context.Background())
}

func (o SoftwareRecipeStepExecFileOutput) ToSoftwareRecipeStepExecFilePtrOutputWithContext(ctx context.Context) SoftwareRecipeStepExecFilePtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepExecFile) *SoftwareRecipeStepExecFile {
		return &v
	}).(SoftwareRecipeStepExecFilePtrOutput)
}

// Defaults to [0]. A list of possible return values that the program can return to indicate a success.
func (o SoftwareRecipeStepExecFileOutput) AllowedExitCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v SoftwareRecipeStepExecFile) []int { return v.AllowedExitCodes }).(pulumi.IntArrayOutput)
}

// Arguments to be passed to the provided executable.
func (o SoftwareRecipeStepExecFileOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SoftwareRecipeStepExecFile) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// The id of the relevant artifact in the recipe.
func (o SoftwareRecipeStepExecFileOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepExecFile) *string { return v.ArtifactId }).(pulumi.StringPtrOutput)
}

// The absolute path of the file on the local filesystem.
func (o SoftwareRecipeStepExecFileOutput) LocalPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepExecFile) *string { return v.LocalPath }).(pulumi.StringPtrOutput)
}

type SoftwareRecipeStepExecFilePtrOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeStepExecFilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeStepExecFile)(nil)).Elem()
}

func (o SoftwareRecipeStepExecFilePtrOutput) ToSoftwareRecipeStepExecFilePtrOutput() SoftwareRecipeStepExecFilePtrOutput {
	return o
}

func (o SoftwareRecipeStepExecFilePtrOutput) ToSoftwareRecipeStepExecFilePtrOutputWithContext(ctx context.Context) SoftwareRecipeStepExecFilePtrOutput {
	return o
}

func (o SoftwareRecipeStepExecFilePtrOutput) Elem() SoftwareRecipeStepExecFileOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepExecFile) SoftwareRecipeStepExecFile { return *v }).(SoftwareRecipeStepExecFileOutput)
}

// Defaults to [0]. A list of possible return values that the program can return to indicate a success.
func (o SoftwareRecipeStepExecFilePtrOutput) AllowedExitCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepExecFile) []int {
		if v == nil {
			return nil
		}
		return v.AllowedExitCodes
	}).(pulumi.IntArrayOutput)
}

// Arguments to be passed to the provided executable.
func (o SoftwareRecipeStepExecFilePtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepExecFile) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// The id of the relevant artifact in the recipe.
func (o SoftwareRecipeStepExecFilePtrOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepExecFile) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactId
	}).(pulumi.StringPtrOutput)
}

// The absolute path of the file on the local filesystem.
func (o SoftwareRecipeStepExecFilePtrOutput) LocalPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepExecFile) *string {
		if v == nil {
			return nil
		}
		return v.LocalPath
	}).(pulumi.StringPtrOutput)
}

// Extracts an archive of the type specified in the specified directory.
type SoftwareRecipeStepExtractArchive struct {
	// Required. The id of the relevant artifact in the recipe.
	ArtifactId *string `pulumi:"artifactId"`
	// Directory to extract archive to. Defaults to `/` on Linux or `C:\` on Windows.
	Destination *string `pulumi:"destination"`
	// Required. The type of the archive to extract.
	Type *string `pulumi:"type"`
}

// SoftwareRecipeStepExtractArchiveInput is an input type that accepts SoftwareRecipeStepExtractArchiveArgs and SoftwareRecipeStepExtractArchiveOutput values.
// You can construct a concrete instance of `SoftwareRecipeStepExtractArchiveInput` via:
//
//          SoftwareRecipeStepExtractArchiveArgs{...}
type SoftwareRecipeStepExtractArchiveInput interface {
	pulumi.Input

	ToSoftwareRecipeStepExtractArchiveOutput() SoftwareRecipeStepExtractArchiveOutput
	ToSoftwareRecipeStepExtractArchiveOutputWithContext(context.Context) SoftwareRecipeStepExtractArchiveOutput
}

// Extracts an archive of the type specified in the specified directory.
type SoftwareRecipeStepExtractArchiveArgs struct {
	// Required. The id of the relevant artifact in the recipe.
	ArtifactId pulumi.StringPtrInput `pulumi:"artifactId"`
	// Directory to extract archive to. Defaults to `/` on Linux or `C:\` on Windows.
	Destination pulumi.StringPtrInput `pulumi:"destination"`
	// Required. The type of the archive to extract.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SoftwareRecipeStepExtractArchiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeStepExtractArchive)(nil)).Elem()
}

func (i SoftwareRecipeStepExtractArchiveArgs) ToSoftwareRecipeStepExtractArchiveOutput() SoftwareRecipeStepExtractArchiveOutput {
	return i.ToSoftwareRecipeStepExtractArchiveOutputWithContext(context.Background())
}

func (i SoftwareRecipeStepExtractArchiveArgs) ToSoftwareRecipeStepExtractArchiveOutputWithContext(ctx context.Context) SoftwareRecipeStepExtractArchiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepExtractArchiveOutput)
}

func (i SoftwareRecipeStepExtractArchiveArgs) ToSoftwareRecipeStepExtractArchivePtrOutput() SoftwareRecipeStepExtractArchivePtrOutput {
	return i.ToSoftwareRecipeStepExtractArchivePtrOutputWithContext(context.Background())
}

func (i SoftwareRecipeStepExtractArchiveArgs) ToSoftwareRecipeStepExtractArchivePtrOutputWithContext(ctx context.Context) SoftwareRecipeStepExtractArchivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepExtractArchiveOutput).ToSoftwareRecipeStepExtractArchivePtrOutputWithContext(ctx)
}

// SoftwareRecipeStepExtractArchivePtrInput is an input type that accepts SoftwareRecipeStepExtractArchiveArgs, SoftwareRecipeStepExtractArchivePtr and SoftwareRecipeStepExtractArchivePtrOutput values.
// You can construct a concrete instance of `SoftwareRecipeStepExtractArchivePtrInput` via:
//
//          SoftwareRecipeStepExtractArchiveArgs{...}
//
//  or:
//
//          nil
type SoftwareRecipeStepExtractArchivePtrInput interface {
	pulumi.Input

	ToSoftwareRecipeStepExtractArchivePtrOutput() SoftwareRecipeStepExtractArchivePtrOutput
	ToSoftwareRecipeStepExtractArchivePtrOutputWithContext(context.Context) SoftwareRecipeStepExtractArchivePtrOutput
}

type softwareRecipeStepExtractArchivePtrType SoftwareRecipeStepExtractArchiveArgs

func SoftwareRecipeStepExtractArchivePtr(v *SoftwareRecipeStepExtractArchiveArgs) SoftwareRecipeStepExtractArchivePtrInput {
	return (*softwareRecipeStepExtractArchivePtrType)(v)
}

func (*softwareRecipeStepExtractArchivePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeStepExtractArchive)(nil)).Elem()
}

func (i *softwareRecipeStepExtractArchivePtrType) ToSoftwareRecipeStepExtractArchivePtrOutput() SoftwareRecipeStepExtractArchivePtrOutput {
	return i.ToSoftwareRecipeStepExtractArchivePtrOutputWithContext(context.Background())
}

func (i *softwareRecipeStepExtractArchivePtrType) ToSoftwareRecipeStepExtractArchivePtrOutputWithContext(ctx context.Context) SoftwareRecipeStepExtractArchivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepExtractArchivePtrOutput)
}

// Extracts an archive of the type specified in the specified directory.
type SoftwareRecipeStepExtractArchiveOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeStepExtractArchiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeStepExtractArchive)(nil)).Elem()
}

func (o SoftwareRecipeStepExtractArchiveOutput) ToSoftwareRecipeStepExtractArchiveOutput() SoftwareRecipeStepExtractArchiveOutput {
	return o
}

func (o SoftwareRecipeStepExtractArchiveOutput) ToSoftwareRecipeStepExtractArchiveOutputWithContext(ctx context.Context) SoftwareRecipeStepExtractArchiveOutput {
	return o
}

func (o SoftwareRecipeStepExtractArchiveOutput) ToSoftwareRecipeStepExtractArchivePtrOutput() SoftwareRecipeStepExtractArchivePtrOutput {
	return o.ToSoftwareRecipeStepExtractArchivePtrOutputWithContext(context.Background())
}

func (o SoftwareRecipeStepExtractArchiveOutput) ToSoftwareRecipeStepExtractArchivePtrOutputWithContext(ctx context.Context) SoftwareRecipeStepExtractArchivePtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepExtractArchive) *SoftwareRecipeStepExtractArchive {
		return &v
	}).(SoftwareRecipeStepExtractArchivePtrOutput)
}

// Required. The id of the relevant artifact in the recipe.
func (o SoftwareRecipeStepExtractArchiveOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepExtractArchive) *string { return v.ArtifactId }).(pulumi.StringPtrOutput)
}

// Directory to extract archive to. Defaults to `/` on Linux or `C:\` on Windows.
func (o SoftwareRecipeStepExtractArchiveOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepExtractArchive) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

// Required. The type of the archive to extract.
func (o SoftwareRecipeStepExtractArchiveOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepExtractArchive) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SoftwareRecipeStepExtractArchivePtrOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeStepExtractArchivePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeStepExtractArchive)(nil)).Elem()
}

func (o SoftwareRecipeStepExtractArchivePtrOutput) ToSoftwareRecipeStepExtractArchivePtrOutput() SoftwareRecipeStepExtractArchivePtrOutput {
	return o
}

func (o SoftwareRecipeStepExtractArchivePtrOutput) ToSoftwareRecipeStepExtractArchivePtrOutputWithContext(ctx context.Context) SoftwareRecipeStepExtractArchivePtrOutput {
	return o
}

func (o SoftwareRecipeStepExtractArchivePtrOutput) Elem() SoftwareRecipeStepExtractArchiveOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepExtractArchive) SoftwareRecipeStepExtractArchive { return *v }).(SoftwareRecipeStepExtractArchiveOutput)
}

// Required. The id of the relevant artifact in the recipe.
func (o SoftwareRecipeStepExtractArchivePtrOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepExtractArchive) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactId
	}).(pulumi.StringPtrOutput)
}

// Directory to extract archive to. Defaults to `/` on Linux or `C:\` on Windows.
func (o SoftwareRecipeStepExtractArchivePtrOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepExtractArchive) *string {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(pulumi.StringPtrOutput)
}

// Required. The type of the archive to extract.
func (o SoftwareRecipeStepExtractArchivePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepExtractArchive) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Installs a deb via dpkg.
type SoftwareRecipeStepInstallDpkg struct {
	// Required. The id of the relevant artifact in the recipe.
	ArtifactId *string `pulumi:"artifactId"`
}

// SoftwareRecipeStepInstallDpkgInput is an input type that accepts SoftwareRecipeStepInstallDpkgArgs and SoftwareRecipeStepInstallDpkgOutput values.
// You can construct a concrete instance of `SoftwareRecipeStepInstallDpkgInput` via:
//
//          SoftwareRecipeStepInstallDpkgArgs{...}
type SoftwareRecipeStepInstallDpkgInput interface {
	pulumi.Input

	ToSoftwareRecipeStepInstallDpkgOutput() SoftwareRecipeStepInstallDpkgOutput
	ToSoftwareRecipeStepInstallDpkgOutputWithContext(context.Context) SoftwareRecipeStepInstallDpkgOutput
}

// Installs a deb via dpkg.
type SoftwareRecipeStepInstallDpkgArgs struct {
	// Required. The id of the relevant artifact in the recipe.
	ArtifactId pulumi.StringPtrInput `pulumi:"artifactId"`
}

func (SoftwareRecipeStepInstallDpkgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeStepInstallDpkg)(nil)).Elem()
}

func (i SoftwareRecipeStepInstallDpkgArgs) ToSoftwareRecipeStepInstallDpkgOutput() SoftwareRecipeStepInstallDpkgOutput {
	return i.ToSoftwareRecipeStepInstallDpkgOutputWithContext(context.Background())
}

func (i SoftwareRecipeStepInstallDpkgArgs) ToSoftwareRecipeStepInstallDpkgOutputWithContext(ctx context.Context) SoftwareRecipeStepInstallDpkgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepInstallDpkgOutput)
}

func (i SoftwareRecipeStepInstallDpkgArgs) ToSoftwareRecipeStepInstallDpkgPtrOutput() SoftwareRecipeStepInstallDpkgPtrOutput {
	return i.ToSoftwareRecipeStepInstallDpkgPtrOutputWithContext(context.Background())
}

func (i SoftwareRecipeStepInstallDpkgArgs) ToSoftwareRecipeStepInstallDpkgPtrOutputWithContext(ctx context.Context) SoftwareRecipeStepInstallDpkgPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepInstallDpkgOutput).ToSoftwareRecipeStepInstallDpkgPtrOutputWithContext(ctx)
}

// SoftwareRecipeStepInstallDpkgPtrInput is an input type that accepts SoftwareRecipeStepInstallDpkgArgs, SoftwareRecipeStepInstallDpkgPtr and SoftwareRecipeStepInstallDpkgPtrOutput values.
// You can construct a concrete instance of `SoftwareRecipeStepInstallDpkgPtrInput` via:
//
//          SoftwareRecipeStepInstallDpkgArgs{...}
//
//  or:
//
//          nil
type SoftwareRecipeStepInstallDpkgPtrInput interface {
	pulumi.Input

	ToSoftwareRecipeStepInstallDpkgPtrOutput() SoftwareRecipeStepInstallDpkgPtrOutput
	ToSoftwareRecipeStepInstallDpkgPtrOutputWithContext(context.Context) SoftwareRecipeStepInstallDpkgPtrOutput
}

type softwareRecipeStepInstallDpkgPtrType SoftwareRecipeStepInstallDpkgArgs

func SoftwareRecipeStepInstallDpkgPtr(v *SoftwareRecipeStepInstallDpkgArgs) SoftwareRecipeStepInstallDpkgPtrInput {
	return (*softwareRecipeStepInstallDpkgPtrType)(v)
}

func (*softwareRecipeStepInstallDpkgPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeStepInstallDpkg)(nil)).Elem()
}

func (i *softwareRecipeStepInstallDpkgPtrType) ToSoftwareRecipeStepInstallDpkgPtrOutput() SoftwareRecipeStepInstallDpkgPtrOutput {
	return i.ToSoftwareRecipeStepInstallDpkgPtrOutputWithContext(context.Background())
}

func (i *softwareRecipeStepInstallDpkgPtrType) ToSoftwareRecipeStepInstallDpkgPtrOutputWithContext(ctx context.Context) SoftwareRecipeStepInstallDpkgPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepInstallDpkgPtrOutput)
}

// Installs a deb via dpkg.
type SoftwareRecipeStepInstallDpkgOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeStepInstallDpkgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeStepInstallDpkg)(nil)).Elem()
}

func (o SoftwareRecipeStepInstallDpkgOutput) ToSoftwareRecipeStepInstallDpkgOutput() SoftwareRecipeStepInstallDpkgOutput {
	return o
}

func (o SoftwareRecipeStepInstallDpkgOutput) ToSoftwareRecipeStepInstallDpkgOutputWithContext(ctx context.Context) SoftwareRecipeStepInstallDpkgOutput {
	return o
}

func (o SoftwareRecipeStepInstallDpkgOutput) ToSoftwareRecipeStepInstallDpkgPtrOutput() SoftwareRecipeStepInstallDpkgPtrOutput {
	return o.ToSoftwareRecipeStepInstallDpkgPtrOutputWithContext(context.Background())
}

func (o SoftwareRecipeStepInstallDpkgOutput) ToSoftwareRecipeStepInstallDpkgPtrOutputWithContext(ctx context.Context) SoftwareRecipeStepInstallDpkgPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepInstallDpkg) *SoftwareRecipeStepInstallDpkg {
		return &v
	}).(SoftwareRecipeStepInstallDpkgPtrOutput)
}

// Required. The id of the relevant artifact in the recipe.
func (o SoftwareRecipeStepInstallDpkgOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepInstallDpkg) *string { return v.ArtifactId }).(pulumi.StringPtrOutput)
}

type SoftwareRecipeStepInstallDpkgPtrOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeStepInstallDpkgPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeStepInstallDpkg)(nil)).Elem()
}

func (o SoftwareRecipeStepInstallDpkgPtrOutput) ToSoftwareRecipeStepInstallDpkgPtrOutput() SoftwareRecipeStepInstallDpkgPtrOutput {
	return o
}

func (o SoftwareRecipeStepInstallDpkgPtrOutput) ToSoftwareRecipeStepInstallDpkgPtrOutputWithContext(ctx context.Context) SoftwareRecipeStepInstallDpkgPtrOutput {
	return o
}

func (o SoftwareRecipeStepInstallDpkgPtrOutput) Elem() SoftwareRecipeStepInstallDpkgOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepInstallDpkg) SoftwareRecipeStepInstallDpkg { return *v }).(SoftwareRecipeStepInstallDpkgOutput)
}

// Required. The id of the relevant artifact in the recipe.
func (o SoftwareRecipeStepInstallDpkgPtrOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepInstallDpkg) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactId
	}).(pulumi.StringPtrOutput)
}

// Installs an MSI file.
type SoftwareRecipeStepInstallMsi struct {
	// Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
	AllowedExitCodes []int `pulumi:"allowedExitCodes"`
	// Required. The id of the relevant artifact in the recipe.
	ArtifactId *string `pulumi:"artifactId"`
	// The flags to use when installing the MSI defaults to ["/i"] (i.e. the install flag).
	Flags []string `pulumi:"flags"`
}

// SoftwareRecipeStepInstallMsiInput is an input type that accepts SoftwareRecipeStepInstallMsiArgs and SoftwareRecipeStepInstallMsiOutput values.
// You can construct a concrete instance of `SoftwareRecipeStepInstallMsiInput` via:
//
//          SoftwareRecipeStepInstallMsiArgs{...}
type SoftwareRecipeStepInstallMsiInput interface {
	pulumi.Input

	ToSoftwareRecipeStepInstallMsiOutput() SoftwareRecipeStepInstallMsiOutput
	ToSoftwareRecipeStepInstallMsiOutputWithContext(context.Context) SoftwareRecipeStepInstallMsiOutput
}

// Installs an MSI file.
type SoftwareRecipeStepInstallMsiArgs struct {
	// Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
	AllowedExitCodes pulumi.IntArrayInput `pulumi:"allowedExitCodes"`
	// Required. The id of the relevant artifact in the recipe.
	ArtifactId pulumi.StringPtrInput `pulumi:"artifactId"`
	// The flags to use when installing the MSI defaults to ["/i"] (i.e. the install flag).
	Flags pulumi.StringArrayInput `pulumi:"flags"`
}

func (SoftwareRecipeStepInstallMsiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeStepInstallMsi)(nil)).Elem()
}

func (i SoftwareRecipeStepInstallMsiArgs) ToSoftwareRecipeStepInstallMsiOutput() SoftwareRecipeStepInstallMsiOutput {
	return i.ToSoftwareRecipeStepInstallMsiOutputWithContext(context.Background())
}

func (i SoftwareRecipeStepInstallMsiArgs) ToSoftwareRecipeStepInstallMsiOutputWithContext(ctx context.Context) SoftwareRecipeStepInstallMsiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepInstallMsiOutput)
}

func (i SoftwareRecipeStepInstallMsiArgs) ToSoftwareRecipeStepInstallMsiPtrOutput() SoftwareRecipeStepInstallMsiPtrOutput {
	return i.ToSoftwareRecipeStepInstallMsiPtrOutputWithContext(context.Background())
}

func (i SoftwareRecipeStepInstallMsiArgs) ToSoftwareRecipeStepInstallMsiPtrOutputWithContext(ctx context.Context) SoftwareRecipeStepInstallMsiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepInstallMsiOutput).ToSoftwareRecipeStepInstallMsiPtrOutputWithContext(ctx)
}

// SoftwareRecipeStepInstallMsiPtrInput is an input type that accepts SoftwareRecipeStepInstallMsiArgs, SoftwareRecipeStepInstallMsiPtr and SoftwareRecipeStepInstallMsiPtrOutput values.
// You can construct a concrete instance of `SoftwareRecipeStepInstallMsiPtrInput` via:
//
//          SoftwareRecipeStepInstallMsiArgs{...}
//
//  or:
//
//          nil
type SoftwareRecipeStepInstallMsiPtrInput interface {
	pulumi.Input

	ToSoftwareRecipeStepInstallMsiPtrOutput() SoftwareRecipeStepInstallMsiPtrOutput
	ToSoftwareRecipeStepInstallMsiPtrOutputWithContext(context.Context) SoftwareRecipeStepInstallMsiPtrOutput
}

type softwareRecipeStepInstallMsiPtrType SoftwareRecipeStepInstallMsiArgs

func SoftwareRecipeStepInstallMsiPtr(v *SoftwareRecipeStepInstallMsiArgs) SoftwareRecipeStepInstallMsiPtrInput {
	return (*softwareRecipeStepInstallMsiPtrType)(v)
}

func (*softwareRecipeStepInstallMsiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeStepInstallMsi)(nil)).Elem()
}

func (i *softwareRecipeStepInstallMsiPtrType) ToSoftwareRecipeStepInstallMsiPtrOutput() SoftwareRecipeStepInstallMsiPtrOutput {
	return i.ToSoftwareRecipeStepInstallMsiPtrOutputWithContext(context.Background())
}

func (i *softwareRecipeStepInstallMsiPtrType) ToSoftwareRecipeStepInstallMsiPtrOutputWithContext(ctx context.Context) SoftwareRecipeStepInstallMsiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepInstallMsiPtrOutput)
}

// Installs an MSI file.
type SoftwareRecipeStepInstallMsiOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeStepInstallMsiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeStepInstallMsi)(nil)).Elem()
}

func (o SoftwareRecipeStepInstallMsiOutput) ToSoftwareRecipeStepInstallMsiOutput() SoftwareRecipeStepInstallMsiOutput {
	return o
}

func (o SoftwareRecipeStepInstallMsiOutput) ToSoftwareRecipeStepInstallMsiOutputWithContext(ctx context.Context) SoftwareRecipeStepInstallMsiOutput {
	return o
}

func (o SoftwareRecipeStepInstallMsiOutput) ToSoftwareRecipeStepInstallMsiPtrOutput() SoftwareRecipeStepInstallMsiPtrOutput {
	return o.ToSoftwareRecipeStepInstallMsiPtrOutputWithContext(context.Background())
}

func (o SoftwareRecipeStepInstallMsiOutput) ToSoftwareRecipeStepInstallMsiPtrOutputWithContext(ctx context.Context) SoftwareRecipeStepInstallMsiPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepInstallMsi) *SoftwareRecipeStepInstallMsi {
		return &v
	}).(SoftwareRecipeStepInstallMsiPtrOutput)
}

// Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
func (o SoftwareRecipeStepInstallMsiOutput) AllowedExitCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v SoftwareRecipeStepInstallMsi) []int { return v.AllowedExitCodes }).(pulumi.IntArrayOutput)
}

// Required. The id of the relevant artifact in the recipe.
func (o SoftwareRecipeStepInstallMsiOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepInstallMsi) *string { return v.ArtifactId }).(pulumi.StringPtrOutput)
}

// The flags to use when installing the MSI defaults to ["/i"] (i.e. the install flag).
func (o SoftwareRecipeStepInstallMsiOutput) Flags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SoftwareRecipeStepInstallMsi) []string { return v.Flags }).(pulumi.StringArrayOutput)
}

type SoftwareRecipeStepInstallMsiPtrOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeStepInstallMsiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeStepInstallMsi)(nil)).Elem()
}

func (o SoftwareRecipeStepInstallMsiPtrOutput) ToSoftwareRecipeStepInstallMsiPtrOutput() SoftwareRecipeStepInstallMsiPtrOutput {
	return o
}

func (o SoftwareRecipeStepInstallMsiPtrOutput) ToSoftwareRecipeStepInstallMsiPtrOutputWithContext(ctx context.Context) SoftwareRecipeStepInstallMsiPtrOutput {
	return o
}

func (o SoftwareRecipeStepInstallMsiPtrOutput) Elem() SoftwareRecipeStepInstallMsiOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepInstallMsi) SoftwareRecipeStepInstallMsi { return *v }).(SoftwareRecipeStepInstallMsiOutput)
}

// Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
func (o SoftwareRecipeStepInstallMsiPtrOutput) AllowedExitCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepInstallMsi) []int {
		if v == nil {
			return nil
		}
		return v.AllowedExitCodes
	}).(pulumi.IntArrayOutput)
}

// Required. The id of the relevant artifact in the recipe.
func (o SoftwareRecipeStepInstallMsiPtrOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepInstallMsi) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactId
	}).(pulumi.StringPtrOutput)
}

// The flags to use when installing the MSI defaults to ["/i"] (i.e. the install flag).
func (o SoftwareRecipeStepInstallMsiPtrOutput) Flags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepInstallMsi) []string {
		if v == nil {
			return nil
		}
		return v.Flags
	}).(pulumi.StringArrayOutput)
}

// Installs an rpm file via the rpm utility.
type SoftwareRecipeStepInstallRpm struct {
	// Required. The id of the relevant artifact in the recipe.
	ArtifactId *string `pulumi:"artifactId"`
}

// SoftwareRecipeStepInstallRpmInput is an input type that accepts SoftwareRecipeStepInstallRpmArgs and SoftwareRecipeStepInstallRpmOutput values.
// You can construct a concrete instance of `SoftwareRecipeStepInstallRpmInput` via:
//
//          SoftwareRecipeStepInstallRpmArgs{...}
type SoftwareRecipeStepInstallRpmInput interface {
	pulumi.Input

	ToSoftwareRecipeStepInstallRpmOutput() SoftwareRecipeStepInstallRpmOutput
	ToSoftwareRecipeStepInstallRpmOutputWithContext(context.Context) SoftwareRecipeStepInstallRpmOutput
}

// Installs an rpm file via the rpm utility.
type SoftwareRecipeStepInstallRpmArgs struct {
	// Required. The id of the relevant artifact in the recipe.
	ArtifactId pulumi.StringPtrInput `pulumi:"artifactId"`
}

func (SoftwareRecipeStepInstallRpmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeStepInstallRpm)(nil)).Elem()
}

func (i SoftwareRecipeStepInstallRpmArgs) ToSoftwareRecipeStepInstallRpmOutput() SoftwareRecipeStepInstallRpmOutput {
	return i.ToSoftwareRecipeStepInstallRpmOutputWithContext(context.Background())
}

func (i SoftwareRecipeStepInstallRpmArgs) ToSoftwareRecipeStepInstallRpmOutputWithContext(ctx context.Context) SoftwareRecipeStepInstallRpmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepInstallRpmOutput)
}

func (i SoftwareRecipeStepInstallRpmArgs) ToSoftwareRecipeStepInstallRpmPtrOutput() SoftwareRecipeStepInstallRpmPtrOutput {
	return i.ToSoftwareRecipeStepInstallRpmPtrOutputWithContext(context.Background())
}

func (i SoftwareRecipeStepInstallRpmArgs) ToSoftwareRecipeStepInstallRpmPtrOutputWithContext(ctx context.Context) SoftwareRecipeStepInstallRpmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepInstallRpmOutput).ToSoftwareRecipeStepInstallRpmPtrOutputWithContext(ctx)
}

// SoftwareRecipeStepInstallRpmPtrInput is an input type that accepts SoftwareRecipeStepInstallRpmArgs, SoftwareRecipeStepInstallRpmPtr and SoftwareRecipeStepInstallRpmPtrOutput values.
// You can construct a concrete instance of `SoftwareRecipeStepInstallRpmPtrInput` via:
//
//          SoftwareRecipeStepInstallRpmArgs{...}
//
//  or:
//
//          nil
type SoftwareRecipeStepInstallRpmPtrInput interface {
	pulumi.Input

	ToSoftwareRecipeStepInstallRpmPtrOutput() SoftwareRecipeStepInstallRpmPtrOutput
	ToSoftwareRecipeStepInstallRpmPtrOutputWithContext(context.Context) SoftwareRecipeStepInstallRpmPtrOutput
}

type softwareRecipeStepInstallRpmPtrType SoftwareRecipeStepInstallRpmArgs

func SoftwareRecipeStepInstallRpmPtr(v *SoftwareRecipeStepInstallRpmArgs) SoftwareRecipeStepInstallRpmPtrInput {
	return (*softwareRecipeStepInstallRpmPtrType)(v)
}

func (*softwareRecipeStepInstallRpmPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeStepInstallRpm)(nil)).Elem()
}

func (i *softwareRecipeStepInstallRpmPtrType) ToSoftwareRecipeStepInstallRpmPtrOutput() SoftwareRecipeStepInstallRpmPtrOutput {
	return i.ToSoftwareRecipeStepInstallRpmPtrOutputWithContext(context.Background())
}

func (i *softwareRecipeStepInstallRpmPtrType) ToSoftwareRecipeStepInstallRpmPtrOutputWithContext(ctx context.Context) SoftwareRecipeStepInstallRpmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepInstallRpmPtrOutput)
}

// Installs an rpm file via the rpm utility.
type SoftwareRecipeStepInstallRpmOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeStepInstallRpmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeStepInstallRpm)(nil)).Elem()
}

func (o SoftwareRecipeStepInstallRpmOutput) ToSoftwareRecipeStepInstallRpmOutput() SoftwareRecipeStepInstallRpmOutput {
	return o
}

func (o SoftwareRecipeStepInstallRpmOutput) ToSoftwareRecipeStepInstallRpmOutputWithContext(ctx context.Context) SoftwareRecipeStepInstallRpmOutput {
	return o
}

func (o SoftwareRecipeStepInstallRpmOutput) ToSoftwareRecipeStepInstallRpmPtrOutput() SoftwareRecipeStepInstallRpmPtrOutput {
	return o.ToSoftwareRecipeStepInstallRpmPtrOutputWithContext(context.Background())
}

func (o SoftwareRecipeStepInstallRpmOutput) ToSoftwareRecipeStepInstallRpmPtrOutputWithContext(ctx context.Context) SoftwareRecipeStepInstallRpmPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepInstallRpm) *SoftwareRecipeStepInstallRpm {
		return &v
	}).(SoftwareRecipeStepInstallRpmPtrOutput)
}

// Required. The id of the relevant artifact in the recipe.
func (o SoftwareRecipeStepInstallRpmOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepInstallRpm) *string { return v.ArtifactId }).(pulumi.StringPtrOutput)
}

type SoftwareRecipeStepInstallRpmPtrOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeStepInstallRpmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeStepInstallRpm)(nil)).Elem()
}

func (o SoftwareRecipeStepInstallRpmPtrOutput) ToSoftwareRecipeStepInstallRpmPtrOutput() SoftwareRecipeStepInstallRpmPtrOutput {
	return o
}

func (o SoftwareRecipeStepInstallRpmPtrOutput) ToSoftwareRecipeStepInstallRpmPtrOutputWithContext(ctx context.Context) SoftwareRecipeStepInstallRpmPtrOutput {
	return o
}

func (o SoftwareRecipeStepInstallRpmPtrOutput) Elem() SoftwareRecipeStepInstallRpmOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepInstallRpm) SoftwareRecipeStepInstallRpm { return *v }).(SoftwareRecipeStepInstallRpmOutput)
}

// Required. The id of the relevant artifact in the recipe.
func (o SoftwareRecipeStepInstallRpmPtrOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepInstallRpm) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactId
	}).(pulumi.StringPtrOutput)
}

// Runs a script through an interpreter.
type SoftwareRecipeStepRunScript struct {
	// Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
	AllowedExitCodes []int `pulumi:"allowedExitCodes"`
	// The script interpreter to use to run the script. If no interpreter is specified the script is executed directly, which likely only succeed for scripts with [shebang lines](<https://en.wikipedia.org/wiki/Shebang_\(Unix\)>).
	Interpreter *string `pulumi:"interpreter"`
	// Required. The shell script to be executed.
	Script *string `pulumi:"script"`
}

// SoftwareRecipeStepRunScriptInput is an input type that accepts SoftwareRecipeStepRunScriptArgs and SoftwareRecipeStepRunScriptOutput values.
// You can construct a concrete instance of `SoftwareRecipeStepRunScriptInput` via:
//
//          SoftwareRecipeStepRunScriptArgs{...}
type SoftwareRecipeStepRunScriptInput interface {
	pulumi.Input

	ToSoftwareRecipeStepRunScriptOutput() SoftwareRecipeStepRunScriptOutput
	ToSoftwareRecipeStepRunScriptOutputWithContext(context.Context) SoftwareRecipeStepRunScriptOutput
}

// Runs a script through an interpreter.
type SoftwareRecipeStepRunScriptArgs struct {
	// Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
	AllowedExitCodes pulumi.IntArrayInput `pulumi:"allowedExitCodes"`
	// The script interpreter to use to run the script. If no interpreter is specified the script is executed directly, which likely only succeed for scripts with [shebang lines](<https://en.wikipedia.org/wiki/Shebang_\(Unix\)>).
	Interpreter pulumi.StringPtrInput `pulumi:"interpreter"`
	// Required. The shell script to be executed.
	Script pulumi.StringPtrInput `pulumi:"script"`
}

func (SoftwareRecipeStepRunScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeStepRunScript)(nil)).Elem()
}

func (i SoftwareRecipeStepRunScriptArgs) ToSoftwareRecipeStepRunScriptOutput() SoftwareRecipeStepRunScriptOutput {
	return i.ToSoftwareRecipeStepRunScriptOutputWithContext(context.Background())
}

func (i SoftwareRecipeStepRunScriptArgs) ToSoftwareRecipeStepRunScriptOutputWithContext(ctx context.Context) SoftwareRecipeStepRunScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepRunScriptOutput)
}

func (i SoftwareRecipeStepRunScriptArgs) ToSoftwareRecipeStepRunScriptPtrOutput() SoftwareRecipeStepRunScriptPtrOutput {
	return i.ToSoftwareRecipeStepRunScriptPtrOutputWithContext(context.Background())
}

func (i SoftwareRecipeStepRunScriptArgs) ToSoftwareRecipeStepRunScriptPtrOutputWithContext(ctx context.Context) SoftwareRecipeStepRunScriptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepRunScriptOutput).ToSoftwareRecipeStepRunScriptPtrOutputWithContext(ctx)
}

// SoftwareRecipeStepRunScriptPtrInput is an input type that accepts SoftwareRecipeStepRunScriptArgs, SoftwareRecipeStepRunScriptPtr and SoftwareRecipeStepRunScriptPtrOutput values.
// You can construct a concrete instance of `SoftwareRecipeStepRunScriptPtrInput` via:
//
//          SoftwareRecipeStepRunScriptArgs{...}
//
//  or:
//
//          nil
type SoftwareRecipeStepRunScriptPtrInput interface {
	pulumi.Input

	ToSoftwareRecipeStepRunScriptPtrOutput() SoftwareRecipeStepRunScriptPtrOutput
	ToSoftwareRecipeStepRunScriptPtrOutputWithContext(context.Context) SoftwareRecipeStepRunScriptPtrOutput
}

type softwareRecipeStepRunScriptPtrType SoftwareRecipeStepRunScriptArgs

func SoftwareRecipeStepRunScriptPtr(v *SoftwareRecipeStepRunScriptArgs) SoftwareRecipeStepRunScriptPtrInput {
	return (*softwareRecipeStepRunScriptPtrType)(v)
}

func (*softwareRecipeStepRunScriptPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeStepRunScript)(nil)).Elem()
}

func (i *softwareRecipeStepRunScriptPtrType) ToSoftwareRecipeStepRunScriptPtrOutput() SoftwareRecipeStepRunScriptPtrOutput {
	return i.ToSoftwareRecipeStepRunScriptPtrOutputWithContext(context.Background())
}

func (i *softwareRecipeStepRunScriptPtrType) ToSoftwareRecipeStepRunScriptPtrOutputWithContext(ctx context.Context) SoftwareRecipeStepRunScriptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareRecipeStepRunScriptPtrOutput)
}

// Runs a script through an interpreter.
type SoftwareRecipeStepRunScriptOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeStepRunScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeStepRunScript)(nil)).Elem()
}

func (o SoftwareRecipeStepRunScriptOutput) ToSoftwareRecipeStepRunScriptOutput() SoftwareRecipeStepRunScriptOutput {
	return o
}

func (o SoftwareRecipeStepRunScriptOutput) ToSoftwareRecipeStepRunScriptOutputWithContext(ctx context.Context) SoftwareRecipeStepRunScriptOutput {
	return o
}

func (o SoftwareRecipeStepRunScriptOutput) ToSoftwareRecipeStepRunScriptPtrOutput() SoftwareRecipeStepRunScriptPtrOutput {
	return o.ToSoftwareRecipeStepRunScriptPtrOutputWithContext(context.Background())
}

func (o SoftwareRecipeStepRunScriptOutput) ToSoftwareRecipeStepRunScriptPtrOutputWithContext(ctx context.Context) SoftwareRecipeStepRunScriptPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepRunScript) *SoftwareRecipeStepRunScript {
		return &v
	}).(SoftwareRecipeStepRunScriptPtrOutput)
}

// Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
func (o SoftwareRecipeStepRunScriptOutput) AllowedExitCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v SoftwareRecipeStepRunScript) []int { return v.AllowedExitCodes }).(pulumi.IntArrayOutput)
}

// The script interpreter to use to run the script. If no interpreter is specified the script is executed directly, which likely only succeed for scripts with [shebang lines](<https://en.wikipedia.org/wiki/Shebang_\(Unix\)>).
func (o SoftwareRecipeStepRunScriptOutput) Interpreter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepRunScript) *string { return v.Interpreter }).(pulumi.StringPtrOutput)
}

// Required. The shell script to be executed.
func (o SoftwareRecipeStepRunScriptOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareRecipeStepRunScript) *string { return v.Script }).(pulumi.StringPtrOutput)
}

type SoftwareRecipeStepRunScriptPtrOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeStepRunScriptPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeStepRunScript)(nil)).Elem()
}

func (o SoftwareRecipeStepRunScriptPtrOutput) ToSoftwareRecipeStepRunScriptPtrOutput() SoftwareRecipeStepRunScriptPtrOutput {
	return o
}

func (o SoftwareRecipeStepRunScriptPtrOutput) ToSoftwareRecipeStepRunScriptPtrOutputWithContext(ctx context.Context) SoftwareRecipeStepRunScriptPtrOutput {
	return o
}

func (o SoftwareRecipeStepRunScriptPtrOutput) Elem() SoftwareRecipeStepRunScriptOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepRunScript) SoftwareRecipeStepRunScript { return *v }).(SoftwareRecipeStepRunScriptOutput)
}

// Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
func (o SoftwareRecipeStepRunScriptPtrOutput) AllowedExitCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepRunScript) []int {
		if v == nil {
			return nil
		}
		return v.AllowedExitCodes
	}).(pulumi.IntArrayOutput)
}

// The script interpreter to use to run the script. If no interpreter is specified the script is executed directly, which likely only succeed for scripts with [shebang lines](<https://en.wikipedia.org/wiki/Shebang_\(Unix\)>).
func (o SoftwareRecipeStepRunScriptPtrOutput) Interpreter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepRunScript) *string {
		if v == nil {
			return nil
		}
		return v.Interpreter
	}).(pulumi.StringPtrOutput)
}

// Required. The shell script to be executed.
func (o SoftwareRecipeStepRunScriptPtrOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepRunScript) *string {
		if v == nil {
			return nil
		}
		return v.Script
	}).(pulumi.StringPtrOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDay struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours *int `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes *int `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos *int `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds *int `pulumi:"seconds"`
}

// TimeOfDayInput is an input type that accepts TimeOfDayArgs and TimeOfDayOutput values.
// You can construct a concrete instance of `TimeOfDayInput` via:
//
//          TimeOfDayArgs{...}
type TimeOfDayInput interface {
	pulumi.Input

	ToTimeOfDayOutput() TimeOfDayOutput
	ToTimeOfDayOutputWithContext(context.Context) TimeOfDayOutput
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayArgs struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours pulumi.IntPtrInput `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes pulumi.IntPtrInput `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds pulumi.IntPtrInput `pulumi:"seconds"`
}

func (TimeOfDayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDay)(nil)).Elem()
}

func (i TimeOfDayArgs) ToTimeOfDayOutput() TimeOfDayOutput {
	return i.ToTimeOfDayOutputWithContext(context.Background())
}

func (i TimeOfDayArgs) ToTimeOfDayOutputWithContext(ctx context.Context) TimeOfDayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOfDayOutput)
}

func (i TimeOfDayArgs) ToTimeOfDayPtrOutput() TimeOfDayPtrOutput {
	return i.ToTimeOfDayPtrOutputWithContext(context.Background())
}

func (i TimeOfDayArgs) ToTimeOfDayPtrOutputWithContext(ctx context.Context) TimeOfDayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOfDayOutput).ToTimeOfDayPtrOutputWithContext(ctx)
}

// TimeOfDayPtrInput is an input type that accepts TimeOfDayArgs, TimeOfDayPtr and TimeOfDayPtrOutput values.
// You can construct a concrete instance of `TimeOfDayPtrInput` via:
//
//          TimeOfDayArgs{...}
//
//  or:
//
//          nil
type TimeOfDayPtrInput interface {
	pulumi.Input

	ToTimeOfDayPtrOutput() TimeOfDayPtrOutput
	ToTimeOfDayPtrOutputWithContext(context.Context) TimeOfDayPtrOutput
}

type timeOfDayPtrType TimeOfDayArgs

func TimeOfDayPtr(v *TimeOfDayArgs) TimeOfDayPtrInput {
	return (*timeOfDayPtrType)(v)
}

func (*timeOfDayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeOfDay)(nil)).Elem()
}

func (i *timeOfDayPtrType) ToTimeOfDayPtrOutput() TimeOfDayPtrOutput {
	return i.ToTimeOfDayPtrOutputWithContext(context.Background())
}

func (i *timeOfDayPtrType) ToTimeOfDayPtrOutputWithContext(ctx context.Context) TimeOfDayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOfDayPtrOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayOutput struct{ *pulumi.OutputState }

func (TimeOfDayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDay)(nil)).Elem()
}

func (o TimeOfDayOutput) ToTimeOfDayOutput() TimeOfDayOutput {
	return o
}

func (o TimeOfDayOutput) ToTimeOfDayOutputWithContext(ctx context.Context) TimeOfDayOutput {
	return o
}

func (o TimeOfDayOutput) ToTimeOfDayPtrOutput() TimeOfDayPtrOutput {
	return o.ToTimeOfDayPtrOutputWithContext(context.Background())
}

func (o TimeOfDayOutput) ToTimeOfDayPtrOutputWithContext(ctx context.Context) TimeOfDayPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *TimeOfDay {
		return &v
	}).(TimeOfDayPtrOutput)
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o TimeOfDayOutput) Hours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Hours }).(pulumi.IntPtrOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o TimeOfDayOutput) Minutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Minutes }).(pulumi.IntPtrOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o TimeOfDayOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o TimeOfDayOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Seconds }).(pulumi.IntPtrOutput)
}

type TimeOfDayPtrOutput struct{ *pulumi.OutputState }

func (TimeOfDayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeOfDay)(nil)).Elem()
}

func (o TimeOfDayPtrOutput) ToTimeOfDayPtrOutput() TimeOfDayPtrOutput {
	return o
}

func (o TimeOfDayPtrOutput) ToTimeOfDayPtrOutputWithContext(ctx context.Context) TimeOfDayPtrOutput {
	return o
}

func (o TimeOfDayPtrOutput) Elem() TimeOfDayOutput {
	return o.ApplyT(func(v *TimeOfDay) TimeOfDay { return *v }).(TimeOfDayOutput)
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o TimeOfDayPtrOutput) Hours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOfDay) *int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntPtrOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o TimeOfDayPtrOutput) Minutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOfDay) *int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntPtrOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o TimeOfDayPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOfDay) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o TimeOfDayPtrOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOfDay) *int {
		if v == nil {
			return nil
		}
		return v.Seconds
	}).(pulumi.IntPtrOutput)
}

// Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
type TimeZone struct {
	// IANA Time Zone Database time zone, e.g. "America/New_York".
	Id *string `pulumi:"id"`
	// Optional. IANA Time Zone Database version number, e.g. "2019a".
	Version *string `pulumi:"version"`
}

// TimeZoneInput is an input type that accepts TimeZoneArgs and TimeZoneOutput values.
// You can construct a concrete instance of `TimeZoneInput` via:
//
//          TimeZoneArgs{...}
type TimeZoneInput interface {
	pulumi.Input

	ToTimeZoneOutput() TimeZoneOutput
	ToTimeZoneOutputWithContext(context.Context) TimeZoneOutput
}

// Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
type TimeZoneArgs struct {
	// IANA Time Zone Database time zone, e.g. "America/New_York".
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Optional. IANA Time Zone Database version number, e.g. "2019a".
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (TimeZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeZone)(nil)).Elem()
}

func (i TimeZoneArgs) ToTimeZoneOutput() TimeZoneOutput {
	return i.ToTimeZoneOutputWithContext(context.Background())
}

func (i TimeZoneArgs) ToTimeZoneOutputWithContext(ctx context.Context) TimeZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeZoneOutput)
}

func (i TimeZoneArgs) ToTimeZonePtrOutput() TimeZonePtrOutput {
	return i.ToTimeZonePtrOutputWithContext(context.Background())
}

func (i TimeZoneArgs) ToTimeZonePtrOutputWithContext(ctx context.Context) TimeZonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeZoneOutput).ToTimeZonePtrOutputWithContext(ctx)
}

// TimeZonePtrInput is an input type that accepts TimeZoneArgs, TimeZonePtr and TimeZonePtrOutput values.
// You can construct a concrete instance of `TimeZonePtrInput` via:
//
//          TimeZoneArgs{...}
//
//  or:
//
//          nil
type TimeZonePtrInput interface {
	pulumi.Input

	ToTimeZonePtrOutput() TimeZonePtrOutput
	ToTimeZonePtrOutputWithContext(context.Context) TimeZonePtrOutput
}

type timeZonePtrType TimeZoneArgs

func TimeZonePtr(v *TimeZoneArgs) TimeZonePtrInput {
	return (*timeZonePtrType)(v)
}

func (*timeZonePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeZone)(nil)).Elem()
}

func (i *timeZonePtrType) ToTimeZonePtrOutput() TimeZonePtrOutput {
	return i.ToTimeZonePtrOutputWithContext(context.Background())
}

func (i *timeZonePtrType) ToTimeZonePtrOutputWithContext(ctx context.Context) TimeZonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeZonePtrOutput)
}

// Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
type TimeZoneOutput struct{ *pulumi.OutputState }

func (TimeZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeZone)(nil)).Elem()
}

func (o TimeZoneOutput) ToTimeZoneOutput() TimeZoneOutput {
	return o
}

func (o TimeZoneOutput) ToTimeZoneOutputWithContext(ctx context.Context) TimeZoneOutput {
	return o
}

func (o TimeZoneOutput) ToTimeZonePtrOutput() TimeZonePtrOutput {
	return o.ToTimeZonePtrOutputWithContext(context.Background())
}

func (o TimeZoneOutput) ToTimeZonePtrOutputWithContext(ctx context.Context) TimeZonePtrOutput {
	return o.ApplyT(func(v TimeZone) *TimeZone {
		return &v
	}).(TimeZonePtrOutput)
}

// IANA Time Zone Database time zone, e.g. "America/New_York".
func (o TimeZoneOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeZone) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Optional. IANA Time Zone Database version number, e.g. "2019a".
func (o TimeZoneOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeZone) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type TimeZonePtrOutput struct{ *pulumi.OutputState }

func (TimeZonePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeZone)(nil)).Elem()
}

func (o TimeZonePtrOutput) ToTimeZonePtrOutput() TimeZonePtrOutput {
	return o
}

func (o TimeZonePtrOutput) ToTimeZonePtrOutputWithContext(ctx context.Context) TimeZonePtrOutput {
	return o
}

func (o TimeZonePtrOutput) Elem() TimeZoneOutput {
	return o.ApplyT(func(v *TimeZone) TimeZone { return *v }).(TimeZoneOutput)
}

// IANA Time Zone Database time zone, e.g. "America/New_York".
func (o TimeZonePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeZone) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Optional. IANA Time Zone Database version number, e.g. "2019a".
func (o TimeZonePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeZone) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Represents one week day in a month. An example is "the 4th Sunday".
type WeekDayOfMonth struct {
	// Required. A day of the week.
	DayOfWeek *string `pulumi:"dayOfWeek"`
	// Required. Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
	WeekOrdinal *int `pulumi:"weekOrdinal"`
}

// WeekDayOfMonthInput is an input type that accepts WeekDayOfMonthArgs and WeekDayOfMonthOutput values.
// You can construct a concrete instance of `WeekDayOfMonthInput` via:
//
//          WeekDayOfMonthArgs{...}
type WeekDayOfMonthInput interface {
	pulumi.Input

	ToWeekDayOfMonthOutput() WeekDayOfMonthOutput
	ToWeekDayOfMonthOutputWithContext(context.Context) WeekDayOfMonthOutput
}

// Represents one week day in a month. An example is "the 4th Sunday".
type WeekDayOfMonthArgs struct {
	// Required. A day of the week.
	DayOfWeek pulumi.StringPtrInput `pulumi:"dayOfWeek"`
	// Required. Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
	WeekOrdinal pulumi.IntPtrInput `pulumi:"weekOrdinal"`
}

func (WeekDayOfMonthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeekDayOfMonth)(nil)).Elem()
}

func (i WeekDayOfMonthArgs) ToWeekDayOfMonthOutput() WeekDayOfMonthOutput {
	return i.ToWeekDayOfMonthOutputWithContext(context.Background())
}

func (i WeekDayOfMonthArgs) ToWeekDayOfMonthOutputWithContext(ctx context.Context) WeekDayOfMonthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeekDayOfMonthOutput)
}

func (i WeekDayOfMonthArgs) ToWeekDayOfMonthPtrOutput() WeekDayOfMonthPtrOutput {
	return i.ToWeekDayOfMonthPtrOutputWithContext(context.Background())
}

func (i WeekDayOfMonthArgs) ToWeekDayOfMonthPtrOutputWithContext(ctx context.Context) WeekDayOfMonthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeekDayOfMonthOutput).ToWeekDayOfMonthPtrOutputWithContext(ctx)
}

// WeekDayOfMonthPtrInput is an input type that accepts WeekDayOfMonthArgs, WeekDayOfMonthPtr and WeekDayOfMonthPtrOutput values.
// You can construct a concrete instance of `WeekDayOfMonthPtrInput` via:
//
//          WeekDayOfMonthArgs{...}
//
//  or:
//
//          nil
type WeekDayOfMonthPtrInput interface {
	pulumi.Input

	ToWeekDayOfMonthPtrOutput() WeekDayOfMonthPtrOutput
	ToWeekDayOfMonthPtrOutputWithContext(context.Context) WeekDayOfMonthPtrOutput
}

type weekDayOfMonthPtrType WeekDayOfMonthArgs

func WeekDayOfMonthPtr(v *WeekDayOfMonthArgs) WeekDayOfMonthPtrInput {
	return (*weekDayOfMonthPtrType)(v)
}

func (*weekDayOfMonthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WeekDayOfMonth)(nil)).Elem()
}

func (i *weekDayOfMonthPtrType) ToWeekDayOfMonthPtrOutput() WeekDayOfMonthPtrOutput {
	return i.ToWeekDayOfMonthPtrOutputWithContext(context.Background())
}

func (i *weekDayOfMonthPtrType) ToWeekDayOfMonthPtrOutputWithContext(ctx context.Context) WeekDayOfMonthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeekDayOfMonthPtrOutput)
}

// Represents one week day in a month. An example is "the 4th Sunday".
type WeekDayOfMonthOutput struct{ *pulumi.OutputState }

func (WeekDayOfMonthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeekDayOfMonth)(nil)).Elem()
}

func (o WeekDayOfMonthOutput) ToWeekDayOfMonthOutput() WeekDayOfMonthOutput {
	return o
}

func (o WeekDayOfMonthOutput) ToWeekDayOfMonthOutputWithContext(ctx context.Context) WeekDayOfMonthOutput {
	return o
}

func (o WeekDayOfMonthOutput) ToWeekDayOfMonthPtrOutput() WeekDayOfMonthPtrOutput {
	return o.ToWeekDayOfMonthPtrOutputWithContext(context.Background())
}

func (o WeekDayOfMonthOutput) ToWeekDayOfMonthPtrOutputWithContext(ctx context.Context) WeekDayOfMonthPtrOutput {
	return o.ApplyT(func(v WeekDayOfMonth) *WeekDayOfMonth {
		return &v
	}).(WeekDayOfMonthPtrOutput)
}

// Required. A day of the week.
func (o WeekDayOfMonthOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WeekDayOfMonth) *string { return v.DayOfWeek }).(pulumi.StringPtrOutput)
}

// Required. Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
func (o WeekDayOfMonthOutput) WeekOrdinal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WeekDayOfMonth) *int { return v.WeekOrdinal }).(pulumi.IntPtrOutput)
}

type WeekDayOfMonthPtrOutput struct{ *pulumi.OutputState }

func (WeekDayOfMonthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeekDayOfMonth)(nil)).Elem()
}

func (o WeekDayOfMonthPtrOutput) ToWeekDayOfMonthPtrOutput() WeekDayOfMonthPtrOutput {
	return o
}

func (o WeekDayOfMonthPtrOutput) ToWeekDayOfMonthPtrOutputWithContext(ctx context.Context) WeekDayOfMonthPtrOutput {
	return o
}

func (o WeekDayOfMonthPtrOutput) Elem() WeekDayOfMonthOutput {
	return o.ApplyT(func(v *WeekDayOfMonth) WeekDayOfMonth { return *v }).(WeekDayOfMonthOutput)
}

// Required. A day of the week.
func (o WeekDayOfMonthPtrOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WeekDayOfMonth) *string {
		if v == nil {
			return nil
		}
		return v.DayOfWeek
	}).(pulumi.StringPtrOutput)
}

// Required. Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
func (o WeekDayOfMonthPtrOutput) WeekOrdinal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WeekDayOfMonth) *int {
		if v == nil {
			return nil
		}
		return v.WeekOrdinal
	}).(pulumi.IntPtrOutput)
}

// Represents a weekly schedule.
type WeeklySchedule struct {
	// Required. Day of the week.
	DayOfWeek *string `pulumi:"dayOfWeek"`
}

// WeeklyScheduleInput is an input type that accepts WeeklyScheduleArgs and WeeklyScheduleOutput values.
// You can construct a concrete instance of `WeeklyScheduleInput` via:
//
//          WeeklyScheduleArgs{...}
type WeeklyScheduleInput interface {
	pulumi.Input

	ToWeeklyScheduleOutput() WeeklyScheduleOutput
	ToWeeklyScheduleOutputWithContext(context.Context) WeeklyScheduleOutput
}

// Represents a weekly schedule.
type WeeklyScheduleArgs struct {
	// Required. Day of the week.
	DayOfWeek pulumi.StringPtrInput `pulumi:"dayOfWeek"`
}

func (WeeklyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklySchedule)(nil)).Elem()
}

func (i WeeklyScheduleArgs) ToWeeklyScheduleOutput() WeeklyScheduleOutput {
	return i.ToWeeklyScheduleOutputWithContext(context.Background())
}

func (i WeeklyScheduleArgs) ToWeeklyScheduleOutputWithContext(ctx context.Context) WeeklyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyScheduleOutput)
}

func (i WeeklyScheduleArgs) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return i.ToWeeklySchedulePtrOutputWithContext(context.Background())
}

func (i WeeklyScheduleArgs) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyScheduleOutput).ToWeeklySchedulePtrOutputWithContext(ctx)
}

// WeeklySchedulePtrInput is an input type that accepts WeeklyScheduleArgs, WeeklySchedulePtr and WeeklySchedulePtrOutput values.
// You can construct a concrete instance of `WeeklySchedulePtrInput` via:
//
//          WeeklyScheduleArgs{...}
//
//  or:
//
//          nil
type WeeklySchedulePtrInput interface {
	pulumi.Input

	ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput
	ToWeeklySchedulePtrOutputWithContext(context.Context) WeeklySchedulePtrOutput
}

type weeklySchedulePtrType WeeklyScheduleArgs

func WeeklySchedulePtr(v *WeeklyScheduleArgs) WeeklySchedulePtrInput {
	return (*weeklySchedulePtrType)(v)
}

func (*weeklySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklySchedule)(nil)).Elem()
}

func (i *weeklySchedulePtrType) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return i.ToWeeklySchedulePtrOutputWithContext(context.Background())
}

func (i *weeklySchedulePtrType) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklySchedulePtrOutput)
}

// Represents a weekly schedule.
type WeeklyScheduleOutput struct{ *pulumi.OutputState }

func (WeeklyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklySchedule)(nil)).Elem()
}

func (o WeeklyScheduleOutput) ToWeeklyScheduleOutput() WeeklyScheduleOutput {
	return o
}

func (o WeeklyScheduleOutput) ToWeeklyScheduleOutputWithContext(ctx context.Context) WeeklyScheduleOutput {
	return o
}

func (o WeeklyScheduleOutput) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return o.ToWeeklySchedulePtrOutputWithContext(context.Background())
}

func (o WeeklyScheduleOutput) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return o.ApplyT(func(v WeeklySchedule) *WeeklySchedule {
		return &v
	}).(WeeklySchedulePtrOutput)
}

// Required. Day of the week.
func (o WeeklyScheduleOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WeeklySchedule) *string { return v.DayOfWeek }).(pulumi.StringPtrOutput)
}

type WeeklySchedulePtrOutput struct{ *pulumi.OutputState }

func (WeeklySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklySchedule)(nil)).Elem()
}

func (o WeeklySchedulePtrOutput) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return o
}

func (o WeeklySchedulePtrOutput) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return o
}

func (o WeeklySchedulePtrOutput) Elem() WeeklyScheduleOutput {
	return o.ApplyT(func(v *WeeklySchedule) WeeklySchedule { return *v }).(WeeklyScheduleOutput)
}

// Required. Day of the week.
func (o WeeklySchedulePtrOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WeeklySchedule) *string {
		if v == nil {
			return nil
		}
		return v.DayOfWeek
	}).(pulumi.StringPtrOutput)
}

// Windows patching is performed using the Windows Update Agent.
type WindowsUpdateSettings struct {
	// Only apply updates of these windows update classifications. If empty, all updates are applied.
	Classifications []string `pulumi:"classifications"`
	// List of KBs to exclude from update.
	Excludes []string `pulumi:"excludes"`
	// An exclusive list of kbs to be updated. These are the only patches that will be updated. This field must not be used with other patch configurations.
	ExclusivePatches []string `pulumi:"exclusivePatches"`
}

// WindowsUpdateSettingsInput is an input type that accepts WindowsUpdateSettingsArgs and WindowsUpdateSettingsOutput values.
// You can construct a concrete instance of `WindowsUpdateSettingsInput` via:
//
//          WindowsUpdateSettingsArgs{...}
type WindowsUpdateSettingsInput interface {
	pulumi.Input

	ToWindowsUpdateSettingsOutput() WindowsUpdateSettingsOutput
	ToWindowsUpdateSettingsOutputWithContext(context.Context) WindowsUpdateSettingsOutput
}

// Windows patching is performed using the Windows Update Agent.
type WindowsUpdateSettingsArgs struct {
	// Only apply updates of these windows update classifications. If empty, all updates are applied.
	Classifications pulumi.StringArrayInput `pulumi:"classifications"`
	// List of KBs to exclude from update.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// An exclusive list of kbs to be updated. These are the only patches that will be updated. This field must not be used with other patch configurations.
	ExclusivePatches pulumi.StringArrayInput `pulumi:"exclusivePatches"`
}

func (WindowsUpdateSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsUpdateSettings)(nil)).Elem()
}

func (i WindowsUpdateSettingsArgs) ToWindowsUpdateSettingsOutput() WindowsUpdateSettingsOutput {
	return i.ToWindowsUpdateSettingsOutputWithContext(context.Background())
}

func (i WindowsUpdateSettingsArgs) ToWindowsUpdateSettingsOutputWithContext(ctx context.Context) WindowsUpdateSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsUpdateSettingsOutput)
}

func (i WindowsUpdateSettingsArgs) ToWindowsUpdateSettingsPtrOutput() WindowsUpdateSettingsPtrOutput {
	return i.ToWindowsUpdateSettingsPtrOutputWithContext(context.Background())
}

func (i WindowsUpdateSettingsArgs) ToWindowsUpdateSettingsPtrOutputWithContext(ctx context.Context) WindowsUpdateSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsUpdateSettingsOutput).ToWindowsUpdateSettingsPtrOutputWithContext(ctx)
}

// WindowsUpdateSettingsPtrInput is an input type that accepts WindowsUpdateSettingsArgs, WindowsUpdateSettingsPtr and WindowsUpdateSettingsPtrOutput values.
// You can construct a concrete instance of `WindowsUpdateSettingsPtrInput` via:
//
//          WindowsUpdateSettingsArgs{...}
//
//  or:
//
//          nil
type WindowsUpdateSettingsPtrInput interface {
	pulumi.Input

	ToWindowsUpdateSettingsPtrOutput() WindowsUpdateSettingsPtrOutput
	ToWindowsUpdateSettingsPtrOutputWithContext(context.Context) WindowsUpdateSettingsPtrOutput
}

type windowsUpdateSettingsPtrType WindowsUpdateSettingsArgs

func WindowsUpdateSettingsPtr(v *WindowsUpdateSettingsArgs) WindowsUpdateSettingsPtrInput {
	return (*windowsUpdateSettingsPtrType)(v)
}

func (*windowsUpdateSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsUpdateSettings)(nil)).Elem()
}

func (i *windowsUpdateSettingsPtrType) ToWindowsUpdateSettingsPtrOutput() WindowsUpdateSettingsPtrOutput {
	return i.ToWindowsUpdateSettingsPtrOutputWithContext(context.Background())
}

func (i *windowsUpdateSettingsPtrType) ToWindowsUpdateSettingsPtrOutputWithContext(ctx context.Context) WindowsUpdateSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsUpdateSettingsPtrOutput)
}

// Windows patching is performed using the Windows Update Agent.
type WindowsUpdateSettingsOutput struct{ *pulumi.OutputState }

func (WindowsUpdateSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsUpdateSettings)(nil)).Elem()
}

func (o WindowsUpdateSettingsOutput) ToWindowsUpdateSettingsOutput() WindowsUpdateSettingsOutput {
	return o
}

func (o WindowsUpdateSettingsOutput) ToWindowsUpdateSettingsOutputWithContext(ctx context.Context) WindowsUpdateSettingsOutput {
	return o
}

func (o WindowsUpdateSettingsOutput) ToWindowsUpdateSettingsPtrOutput() WindowsUpdateSettingsPtrOutput {
	return o.ToWindowsUpdateSettingsPtrOutputWithContext(context.Background())
}

func (o WindowsUpdateSettingsOutput) ToWindowsUpdateSettingsPtrOutputWithContext(ctx context.Context) WindowsUpdateSettingsPtrOutput {
	return o.ApplyT(func(v WindowsUpdateSettings) *WindowsUpdateSettings {
		return &v
	}).(WindowsUpdateSettingsPtrOutput)
}

// Only apply updates of these windows update classifications. If empty, all updates are applied.
func (o WindowsUpdateSettingsOutput) Classifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsUpdateSettings) []string { return v.Classifications }).(pulumi.StringArrayOutput)
}

// List of KBs to exclude from update.
func (o WindowsUpdateSettingsOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsUpdateSettings) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// An exclusive list of kbs to be updated. These are the only patches that will be updated. This field must not be used with other patch configurations.
func (o WindowsUpdateSettingsOutput) ExclusivePatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsUpdateSettings) []string { return v.ExclusivePatches }).(pulumi.StringArrayOutput)
}

type WindowsUpdateSettingsPtrOutput struct{ *pulumi.OutputState }

func (WindowsUpdateSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsUpdateSettings)(nil)).Elem()
}

func (o WindowsUpdateSettingsPtrOutput) ToWindowsUpdateSettingsPtrOutput() WindowsUpdateSettingsPtrOutput {
	return o
}

func (o WindowsUpdateSettingsPtrOutput) ToWindowsUpdateSettingsPtrOutputWithContext(ctx context.Context) WindowsUpdateSettingsPtrOutput {
	return o
}

func (o WindowsUpdateSettingsPtrOutput) Elem() WindowsUpdateSettingsOutput {
	return o.ApplyT(func(v *WindowsUpdateSettings) WindowsUpdateSettings { return *v }).(WindowsUpdateSettingsOutput)
}

// Only apply updates of these windows update classifications. If empty, all updates are applied.
func (o WindowsUpdateSettingsPtrOutput) Classifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WindowsUpdateSettings) []string {
		if v == nil {
			return nil
		}
		return v.Classifications
	}).(pulumi.StringArrayOutput)
}

// List of KBs to exclude from update.
func (o WindowsUpdateSettingsPtrOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WindowsUpdateSettings) []string {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(pulumi.StringArrayOutput)
}

// An exclusive list of kbs to be updated. These are the only patches that will be updated. This field must not be used with other patch configurations.
func (o WindowsUpdateSettingsPtrOutput) ExclusivePatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WindowsUpdateSettings) []string {
		if v == nil {
			return nil
		}
		return v.ExclusivePatches
	}).(pulumi.StringArrayOutput)
}

// Represents a single Yum package repository. This repository is added to a repo file that is stored at `/etc/yum.repos.d/google_osconfig.repo`.
type YumRepository struct {
	// Required. The location of the repository directory.
	BaseUrl *string `pulumi:"baseUrl"`
	// The display name of the repository.
	DisplayName *string `pulumi:"displayName"`
	// URIs of GPG keys.
	GpgKeys []string `pulumi:"gpgKeys"`
	// Required. A one word, unique name for this repository. This is the `repo id` in the Yum config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for guest policy conflicts.
	Id *string `pulumi:"id"`
}

// YumRepositoryInput is an input type that accepts YumRepositoryArgs and YumRepositoryOutput values.
// You can construct a concrete instance of `YumRepositoryInput` via:
//
//          YumRepositoryArgs{...}
type YumRepositoryInput interface {
	pulumi.Input

	ToYumRepositoryOutput() YumRepositoryOutput
	ToYumRepositoryOutputWithContext(context.Context) YumRepositoryOutput
}

// Represents a single Yum package repository. This repository is added to a repo file that is stored at `/etc/yum.repos.d/google_osconfig.repo`.
type YumRepositoryArgs struct {
	// Required. The location of the repository directory.
	BaseUrl pulumi.StringPtrInput `pulumi:"baseUrl"`
	// The display name of the repository.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// URIs of GPG keys.
	GpgKeys pulumi.StringArrayInput `pulumi:"gpgKeys"`
	// Required. A one word, unique name for this repository. This is the `repo id` in the Yum config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for guest policy conflicts.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (YumRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*YumRepository)(nil)).Elem()
}

func (i YumRepositoryArgs) ToYumRepositoryOutput() YumRepositoryOutput {
	return i.ToYumRepositoryOutputWithContext(context.Background())
}

func (i YumRepositoryArgs) ToYumRepositoryOutputWithContext(ctx context.Context) YumRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YumRepositoryOutput)
}

func (i YumRepositoryArgs) ToYumRepositoryPtrOutput() YumRepositoryPtrOutput {
	return i.ToYumRepositoryPtrOutputWithContext(context.Background())
}

func (i YumRepositoryArgs) ToYumRepositoryPtrOutputWithContext(ctx context.Context) YumRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YumRepositoryOutput).ToYumRepositoryPtrOutputWithContext(ctx)
}

// YumRepositoryPtrInput is an input type that accepts YumRepositoryArgs, YumRepositoryPtr and YumRepositoryPtrOutput values.
// You can construct a concrete instance of `YumRepositoryPtrInput` via:
//
//          YumRepositoryArgs{...}
//
//  or:
//
//          nil
type YumRepositoryPtrInput interface {
	pulumi.Input

	ToYumRepositoryPtrOutput() YumRepositoryPtrOutput
	ToYumRepositoryPtrOutputWithContext(context.Context) YumRepositoryPtrOutput
}

type yumRepositoryPtrType YumRepositoryArgs

func YumRepositoryPtr(v *YumRepositoryArgs) YumRepositoryPtrInput {
	return (*yumRepositoryPtrType)(v)
}

func (*yumRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**YumRepository)(nil)).Elem()
}

func (i *yumRepositoryPtrType) ToYumRepositoryPtrOutput() YumRepositoryPtrOutput {
	return i.ToYumRepositoryPtrOutputWithContext(context.Background())
}

func (i *yumRepositoryPtrType) ToYumRepositoryPtrOutputWithContext(ctx context.Context) YumRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YumRepositoryPtrOutput)
}

// Represents a single Yum package repository. This repository is added to a repo file that is stored at `/etc/yum.repos.d/google_osconfig.repo`.
type YumRepositoryOutput struct{ *pulumi.OutputState }

func (YumRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*YumRepository)(nil)).Elem()
}

func (o YumRepositoryOutput) ToYumRepositoryOutput() YumRepositoryOutput {
	return o
}

func (o YumRepositoryOutput) ToYumRepositoryOutputWithContext(ctx context.Context) YumRepositoryOutput {
	return o
}

func (o YumRepositoryOutput) ToYumRepositoryPtrOutput() YumRepositoryPtrOutput {
	return o.ToYumRepositoryPtrOutputWithContext(context.Background())
}

func (o YumRepositoryOutput) ToYumRepositoryPtrOutputWithContext(ctx context.Context) YumRepositoryPtrOutput {
	return o.ApplyT(func(v YumRepository) *YumRepository {
		return &v
	}).(YumRepositoryPtrOutput)
}

// Required. The location of the repository directory.
func (o YumRepositoryOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v YumRepository) *string { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

// The display name of the repository.
func (o YumRepositoryOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v YumRepository) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// URIs of GPG keys.
func (o YumRepositoryOutput) GpgKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v YumRepository) []string { return v.GpgKeys }).(pulumi.StringArrayOutput)
}

// Required. A one word, unique name for this repository. This is the `repo id` in the Yum config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for guest policy conflicts.
func (o YumRepositoryOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v YumRepository) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type YumRepositoryPtrOutput struct{ *pulumi.OutputState }

func (YumRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**YumRepository)(nil)).Elem()
}

func (o YumRepositoryPtrOutput) ToYumRepositoryPtrOutput() YumRepositoryPtrOutput {
	return o
}

func (o YumRepositoryPtrOutput) ToYumRepositoryPtrOutputWithContext(ctx context.Context) YumRepositoryPtrOutput {
	return o
}

func (o YumRepositoryPtrOutput) Elem() YumRepositoryOutput {
	return o.ApplyT(func(v *YumRepository) YumRepository { return *v }).(YumRepositoryOutput)
}

// Required. The location of the repository directory.
func (o YumRepositoryPtrOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *YumRepository) *string {
		if v == nil {
			return nil
		}
		return v.BaseUrl
	}).(pulumi.StringPtrOutput)
}

// The display name of the repository.
func (o YumRepositoryPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *YumRepository) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// URIs of GPG keys.
func (o YumRepositoryPtrOutput) GpgKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *YumRepository) []string {
		if v == nil {
			return nil
		}
		return v.GpgKeys
	}).(pulumi.StringArrayOutput)
}

// Required. A one word, unique name for this repository. This is the `repo id` in the Yum config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for guest policy conflicts.
func (o YumRepositoryPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *YumRepository) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Yum patching is performed by executing `yum update`. Additional options can be set to control how this is executed. Note that not all settings are supported on all platforms.
type YumSettings struct {
	// List of packages to exclude from update. These packages are excluded by using the yum `--exclude` flag.
	Excludes []string `pulumi:"excludes"`
	// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be specified with any other patch configuration fields.
	ExclusivePackages []string `pulumi:"exclusivePackages"`
	// Will cause patch to run `yum update-minimal` instead.
	Minimal *bool `pulumi:"minimal"`
	// Adds the `--security` flag to `yum update`. Not supported on all platforms.
	Security *bool `pulumi:"security"`
}

// YumSettingsInput is an input type that accepts YumSettingsArgs and YumSettingsOutput values.
// You can construct a concrete instance of `YumSettingsInput` via:
//
//          YumSettingsArgs{...}
type YumSettingsInput interface {
	pulumi.Input

	ToYumSettingsOutput() YumSettingsOutput
	ToYumSettingsOutputWithContext(context.Context) YumSettingsOutput
}

// Yum patching is performed by executing `yum update`. Additional options can be set to control how this is executed. Note that not all settings are supported on all platforms.
type YumSettingsArgs struct {
	// List of packages to exclude from update. These packages are excluded by using the yum `--exclude` flag.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be specified with any other patch configuration fields.
	ExclusivePackages pulumi.StringArrayInput `pulumi:"exclusivePackages"`
	// Will cause patch to run `yum update-minimal` instead.
	Minimal pulumi.BoolPtrInput `pulumi:"minimal"`
	// Adds the `--security` flag to `yum update`. Not supported on all platforms.
	Security pulumi.BoolPtrInput `pulumi:"security"`
}

func (YumSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*YumSettings)(nil)).Elem()
}

func (i YumSettingsArgs) ToYumSettingsOutput() YumSettingsOutput {
	return i.ToYumSettingsOutputWithContext(context.Background())
}

func (i YumSettingsArgs) ToYumSettingsOutputWithContext(ctx context.Context) YumSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YumSettingsOutput)
}

func (i YumSettingsArgs) ToYumSettingsPtrOutput() YumSettingsPtrOutput {
	return i.ToYumSettingsPtrOutputWithContext(context.Background())
}

func (i YumSettingsArgs) ToYumSettingsPtrOutputWithContext(ctx context.Context) YumSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YumSettingsOutput).ToYumSettingsPtrOutputWithContext(ctx)
}

// YumSettingsPtrInput is an input type that accepts YumSettingsArgs, YumSettingsPtr and YumSettingsPtrOutput values.
// You can construct a concrete instance of `YumSettingsPtrInput` via:
//
//          YumSettingsArgs{...}
//
//  or:
//
//          nil
type YumSettingsPtrInput interface {
	pulumi.Input

	ToYumSettingsPtrOutput() YumSettingsPtrOutput
	ToYumSettingsPtrOutputWithContext(context.Context) YumSettingsPtrOutput
}

type yumSettingsPtrType YumSettingsArgs

func YumSettingsPtr(v *YumSettingsArgs) YumSettingsPtrInput {
	return (*yumSettingsPtrType)(v)
}

func (*yumSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**YumSettings)(nil)).Elem()
}

func (i *yumSettingsPtrType) ToYumSettingsPtrOutput() YumSettingsPtrOutput {
	return i.ToYumSettingsPtrOutputWithContext(context.Background())
}

func (i *yumSettingsPtrType) ToYumSettingsPtrOutputWithContext(ctx context.Context) YumSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YumSettingsPtrOutput)
}

// Yum patching is performed by executing `yum update`. Additional options can be set to control how this is executed. Note that not all settings are supported on all platforms.
type YumSettingsOutput struct{ *pulumi.OutputState }

func (YumSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*YumSettings)(nil)).Elem()
}

func (o YumSettingsOutput) ToYumSettingsOutput() YumSettingsOutput {
	return o
}

func (o YumSettingsOutput) ToYumSettingsOutputWithContext(ctx context.Context) YumSettingsOutput {
	return o
}

func (o YumSettingsOutput) ToYumSettingsPtrOutput() YumSettingsPtrOutput {
	return o.ToYumSettingsPtrOutputWithContext(context.Background())
}

func (o YumSettingsOutput) ToYumSettingsPtrOutputWithContext(ctx context.Context) YumSettingsPtrOutput {
	return o.ApplyT(func(v YumSettings) *YumSettings {
		return &v
	}).(YumSettingsPtrOutput)
}

// List of packages to exclude from update. These packages are excluded by using the yum `--exclude` flag.
func (o YumSettingsOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v YumSettings) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be specified with any other patch configuration fields.
func (o YumSettingsOutput) ExclusivePackages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v YumSettings) []string { return v.ExclusivePackages }).(pulumi.StringArrayOutput)
}

// Will cause patch to run `yum update-minimal` instead.
func (o YumSettingsOutput) Minimal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v YumSettings) *bool { return v.Minimal }).(pulumi.BoolPtrOutput)
}

// Adds the `--security` flag to `yum update`. Not supported on all platforms.
func (o YumSettingsOutput) Security() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v YumSettings) *bool { return v.Security }).(pulumi.BoolPtrOutput)
}

type YumSettingsPtrOutput struct{ *pulumi.OutputState }

func (YumSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**YumSettings)(nil)).Elem()
}

func (o YumSettingsPtrOutput) ToYumSettingsPtrOutput() YumSettingsPtrOutput {
	return o
}

func (o YumSettingsPtrOutput) ToYumSettingsPtrOutputWithContext(ctx context.Context) YumSettingsPtrOutput {
	return o
}

func (o YumSettingsPtrOutput) Elem() YumSettingsOutput {
	return o.ApplyT(func(v *YumSettings) YumSettings { return *v }).(YumSettingsOutput)
}

// List of packages to exclude from update. These packages are excluded by using the yum `--exclude` flag.
func (o YumSettingsPtrOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *YumSettings) []string {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(pulumi.StringArrayOutput)
}

// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be specified with any other patch configuration fields.
func (o YumSettingsPtrOutput) ExclusivePackages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *YumSettings) []string {
		if v == nil {
			return nil
		}
		return v.ExclusivePackages
	}).(pulumi.StringArrayOutput)
}

// Will cause patch to run `yum update-minimal` instead.
func (o YumSettingsPtrOutput) Minimal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *YumSettings) *bool {
		if v == nil {
			return nil
		}
		return v.Minimal
	}).(pulumi.BoolPtrOutput)
}

// Adds the `--security` flag to `yum update`. Not supported on all platforms.
func (o YumSettingsPtrOutput) Security() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *YumSettings) *bool {
		if v == nil {
			return nil
		}
		return v.Security
	}).(pulumi.BoolPtrOutput)
}

// Represents a single Zypper package repository. This repository is added to a repo file that is stored at `/etc/zypp/repos.d/google_osconfig.repo`.
type ZypperRepository struct {
	// Required. The location of the repository directory.
	BaseUrl *string `pulumi:"baseUrl"`
	// The display name of the repository.
	DisplayName *string `pulumi:"displayName"`
	// URIs of GPG keys.
	GpgKeys []string `pulumi:"gpgKeys"`
	// Required. A one word, unique name for this repository. This is the `repo id` in the zypper config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for guest policy conflicts.
	Id *string `pulumi:"id"`
}

// ZypperRepositoryInput is an input type that accepts ZypperRepositoryArgs and ZypperRepositoryOutput values.
// You can construct a concrete instance of `ZypperRepositoryInput` via:
//
//          ZypperRepositoryArgs{...}
type ZypperRepositoryInput interface {
	pulumi.Input

	ToZypperRepositoryOutput() ZypperRepositoryOutput
	ToZypperRepositoryOutputWithContext(context.Context) ZypperRepositoryOutput
}

// Represents a single Zypper package repository. This repository is added to a repo file that is stored at `/etc/zypp/repos.d/google_osconfig.repo`.
type ZypperRepositoryArgs struct {
	// Required. The location of the repository directory.
	BaseUrl pulumi.StringPtrInput `pulumi:"baseUrl"`
	// The display name of the repository.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// URIs of GPG keys.
	GpgKeys pulumi.StringArrayInput `pulumi:"gpgKeys"`
	// Required. A one word, unique name for this repository. This is the `repo id` in the zypper config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for guest policy conflicts.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (ZypperRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZypperRepository)(nil)).Elem()
}

func (i ZypperRepositoryArgs) ToZypperRepositoryOutput() ZypperRepositoryOutput {
	return i.ToZypperRepositoryOutputWithContext(context.Background())
}

func (i ZypperRepositoryArgs) ToZypperRepositoryOutputWithContext(ctx context.Context) ZypperRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZypperRepositoryOutput)
}

func (i ZypperRepositoryArgs) ToZypperRepositoryPtrOutput() ZypperRepositoryPtrOutput {
	return i.ToZypperRepositoryPtrOutputWithContext(context.Background())
}

func (i ZypperRepositoryArgs) ToZypperRepositoryPtrOutputWithContext(ctx context.Context) ZypperRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZypperRepositoryOutput).ToZypperRepositoryPtrOutputWithContext(ctx)
}

// ZypperRepositoryPtrInput is an input type that accepts ZypperRepositoryArgs, ZypperRepositoryPtr and ZypperRepositoryPtrOutput values.
// You can construct a concrete instance of `ZypperRepositoryPtrInput` via:
//
//          ZypperRepositoryArgs{...}
//
//  or:
//
//          nil
type ZypperRepositoryPtrInput interface {
	pulumi.Input

	ToZypperRepositoryPtrOutput() ZypperRepositoryPtrOutput
	ToZypperRepositoryPtrOutputWithContext(context.Context) ZypperRepositoryPtrOutput
}

type zypperRepositoryPtrType ZypperRepositoryArgs

func ZypperRepositoryPtr(v *ZypperRepositoryArgs) ZypperRepositoryPtrInput {
	return (*zypperRepositoryPtrType)(v)
}

func (*zypperRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ZypperRepository)(nil)).Elem()
}

func (i *zypperRepositoryPtrType) ToZypperRepositoryPtrOutput() ZypperRepositoryPtrOutput {
	return i.ToZypperRepositoryPtrOutputWithContext(context.Background())
}

func (i *zypperRepositoryPtrType) ToZypperRepositoryPtrOutputWithContext(ctx context.Context) ZypperRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZypperRepositoryPtrOutput)
}

// Represents a single Zypper package repository. This repository is added to a repo file that is stored at `/etc/zypp/repos.d/google_osconfig.repo`.
type ZypperRepositoryOutput struct{ *pulumi.OutputState }

func (ZypperRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZypperRepository)(nil)).Elem()
}

func (o ZypperRepositoryOutput) ToZypperRepositoryOutput() ZypperRepositoryOutput {
	return o
}

func (o ZypperRepositoryOutput) ToZypperRepositoryOutputWithContext(ctx context.Context) ZypperRepositoryOutput {
	return o
}

func (o ZypperRepositoryOutput) ToZypperRepositoryPtrOutput() ZypperRepositoryPtrOutput {
	return o.ToZypperRepositoryPtrOutputWithContext(context.Background())
}

func (o ZypperRepositoryOutput) ToZypperRepositoryPtrOutputWithContext(ctx context.Context) ZypperRepositoryPtrOutput {
	return o.ApplyT(func(v ZypperRepository) *ZypperRepository {
		return &v
	}).(ZypperRepositoryPtrOutput)
}

// Required. The location of the repository directory.
func (o ZypperRepositoryOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZypperRepository) *string { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

// The display name of the repository.
func (o ZypperRepositoryOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZypperRepository) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// URIs of GPG keys.
func (o ZypperRepositoryOutput) GpgKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZypperRepository) []string { return v.GpgKeys }).(pulumi.StringArrayOutput)
}

// Required. A one word, unique name for this repository. This is the `repo id` in the zypper config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for guest policy conflicts.
func (o ZypperRepositoryOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZypperRepository) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ZypperRepositoryPtrOutput struct{ *pulumi.OutputState }

func (ZypperRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZypperRepository)(nil)).Elem()
}

func (o ZypperRepositoryPtrOutput) ToZypperRepositoryPtrOutput() ZypperRepositoryPtrOutput {
	return o
}

func (o ZypperRepositoryPtrOutput) ToZypperRepositoryPtrOutputWithContext(ctx context.Context) ZypperRepositoryPtrOutput {
	return o
}

func (o ZypperRepositoryPtrOutput) Elem() ZypperRepositoryOutput {
	return o.ApplyT(func(v *ZypperRepository) ZypperRepository { return *v }).(ZypperRepositoryOutput)
}

// Required. The location of the repository directory.
func (o ZypperRepositoryPtrOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZypperRepository) *string {
		if v == nil {
			return nil
		}
		return v.BaseUrl
	}).(pulumi.StringPtrOutput)
}

// The display name of the repository.
func (o ZypperRepositoryPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZypperRepository) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// URIs of GPG keys.
func (o ZypperRepositoryPtrOutput) GpgKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZypperRepository) []string {
		if v == nil {
			return nil
		}
		return v.GpgKeys
	}).(pulumi.StringArrayOutput)
}

// Required. A one word, unique name for this repository. This is the `repo id` in the zypper config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for guest policy conflicts.
func (o ZypperRepositoryPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZypperRepository) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Zypper patching is performed by running `zypper patch`. See also https://en.opensuse.org/SDB:Zypper_manual.
type ZypperSettings struct {
	// Install only patches with these categories. Common categories include security, recommended, and feature.
	Categories []string `pulumi:"categories"`
	// List of patches to exclude from update.
	Excludes []string `pulumi:"excludes"`
	// An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.
	ExclusivePatches []string `pulumi:"exclusivePatches"`
	// Install only patches with these severities. Common severities include critical, important, moderate, and low.
	Severities []string `pulumi:"severities"`
	// Adds the `--with-optional` flag to `zypper patch`.
	WithOptional *bool `pulumi:"withOptional"`
	// Adds the `--with-update` flag, to `zypper patch`.
	WithUpdate *bool `pulumi:"withUpdate"`
}

// ZypperSettingsInput is an input type that accepts ZypperSettingsArgs and ZypperSettingsOutput values.
// You can construct a concrete instance of `ZypperSettingsInput` via:
//
//          ZypperSettingsArgs{...}
type ZypperSettingsInput interface {
	pulumi.Input

	ToZypperSettingsOutput() ZypperSettingsOutput
	ToZypperSettingsOutputWithContext(context.Context) ZypperSettingsOutput
}

// Zypper patching is performed by running `zypper patch`. See also https://en.opensuse.org/SDB:Zypper_manual.
type ZypperSettingsArgs struct {
	// Install only patches with these categories. Common categories include security, recommended, and feature.
	Categories pulumi.StringArrayInput `pulumi:"categories"`
	// List of patches to exclude from update.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.
	ExclusivePatches pulumi.StringArrayInput `pulumi:"exclusivePatches"`
	// Install only patches with these severities. Common severities include critical, important, moderate, and low.
	Severities pulumi.StringArrayInput `pulumi:"severities"`
	// Adds the `--with-optional` flag to `zypper patch`.
	WithOptional pulumi.BoolPtrInput `pulumi:"withOptional"`
	// Adds the `--with-update` flag, to `zypper patch`.
	WithUpdate pulumi.BoolPtrInput `pulumi:"withUpdate"`
}

func (ZypperSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZypperSettings)(nil)).Elem()
}

func (i ZypperSettingsArgs) ToZypperSettingsOutput() ZypperSettingsOutput {
	return i.ToZypperSettingsOutputWithContext(context.Background())
}

func (i ZypperSettingsArgs) ToZypperSettingsOutputWithContext(ctx context.Context) ZypperSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZypperSettingsOutput)
}

func (i ZypperSettingsArgs) ToZypperSettingsPtrOutput() ZypperSettingsPtrOutput {
	return i.ToZypperSettingsPtrOutputWithContext(context.Background())
}

func (i ZypperSettingsArgs) ToZypperSettingsPtrOutputWithContext(ctx context.Context) ZypperSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZypperSettingsOutput).ToZypperSettingsPtrOutputWithContext(ctx)
}

// ZypperSettingsPtrInput is an input type that accepts ZypperSettingsArgs, ZypperSettingsPtr and ZypperSettingsPtrOutput values.
// You can construct a concrete instance of `ZypperSettingsPtrInput` via:
//
//          ZypperSettingsArgs{...}
//
//  or:
//
//          nil
type ZypperSettingsPtrInput interface {
	pulumi.Input

	ToZypperSettingsPtrOutput() ZypperSettingsPtrOutput
	ToZypperSettingsPtrOutputWithContext(context.Context) ZypperSettingsPtrOutput
}

type zypperSettingsPtrType ZypperSettingsArgs

func ZypperSettingsPtr(v *ZypperSettingsArgs) ZypperSettingsPtrInput {
	return (*zypperSettingsPtrType)(v)
}

func (*zypperSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ZypperSettings)(nil)).Elem()
}

func (i *zypperSettingsPtrType) ToZypperSettingsPtrOutput() ZypperSettingsPtrOutput {
	return i.ToZypperSettingsPtrOutputWithContext(context.Background())
}

func (i *zypperSettingsPtrType) ToZypperSettingsPtrOutputWithContext(ctx context.Context) ZypperSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZypperSettingsPtrOutput)
}

// Zypper patching is performed by running `zypper patch`. See also https://en.opensuse.org/SDB:Zypper_manual.
type ZypperSettingsOutput struct{ *pulumi.OutputState }

func (ZypperSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZypperSettings)(nil)).Elem()
}

func (o ZypperSettingsOutput) ToZypperSettingsOutput() ZypperSettingsOutput {
	return o
}

func (o ZypperSettingsOutput) ToZypperSettingsOutputWithContext(ctx context.Context) ZypperSettingsOutput {
	return o
}

func (o ZypperSettingsOutput) ToZypperSettingsPtrOutput() ZypperSettingsPtrOutput {
	return o.ToZypperSettingsPtrOutputWithContext(context.Background())
}

func (o ZypperSettingsOutput) ToZypperSettingsPtrOutputWithContext(ctx context.Context) ZypperSettingsPtrOutput {
	return o.ApplyT(func(v ZypperSettings) *ZypperSettings {
		return &v
	}).(ZypperSettingsPtrOutput)
}

// Install only patches with these categories. Common categories include security, recommended, and feature.
func (o ZypperSettingsOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZypperSettings) []string { return v.Categories }).(pulumi.StringArrayOutput)
}

// List of patches to exclude from update.
func (o ZypperSettingsOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZypperSettings) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.
func (o ZypperSettingsOutput) ExclusivePatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZypperSettings) []string { return v.ExclusivePatches }).(pulumi.StringArrayOutput)
}

// Install only patches with these severities. Common severities include critical, important, moderate, and low.
func (o ZypperSettingsOutput) Severities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZypperSettings) []string { return v.Severities }).(pulumi.StringArrayOutput)
}

// Adds the `--with-optional` flag to `zypper patch`.
func (o ZypperSettingsOutput) WithOptional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ZypperSettings) *bool { return v.WithOptional }).(pulumi.BoolPtrOutput)
}

// Adds the `--with-update` flag, to `zypper patch`.
func (o ZypperSettingsOutput) WithUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ZypperSettings) *bool { return v.WithUpdate }).(pulumi.BoolPtrOutput)
}

type ZypperSettingsPtrOutput struct{ *pulumi.OutputState }

func (ZypperSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZypperSettings)(nil)).Elem()
}

func (o ZypperSettingsPtrOutput) ToZypperSettingsPtrOutput() ZypperSettingsPtrOutput {
	return o
}

func (o ZypperSettingsPtrOutput) ToZypperSettingsPtrOutputWithContext(ctx context.Context) ZypperSettingsPtrOutput {
	return o
}

func (o ZypperSettingsPtrOutput) Elem() ZypperSettingsOutput {
	return o.ApplyT(func(v *ZypperSettings) ZypperSettings { return *v }).(ZypperSettingsOutput)
}

// Install only patches with these categories. Common categories include security, recommended, and feature.
func (o ZypperSettingsPtrOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZypperSettings) []string {
		if v == nil {
			return nil
		}
		return v.Categories
	}).(pulumi.StringArrayOutput)
}

// List of patches to exclude from update.
func (o ZypperSettingsPtrOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZypperSettings) []string {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(pulumi.StringArrayOutput)
}

// An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.
func (o ZypperSettingsPtrOutput) ExclusivePatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZypperSettings) []string {
		if v == nil {
			return nil
		}
		return v.ExclusivePatches
	}).(pulumi.StringArrayOutput)
}

// Install only patches with these severities. Common severities include critical, important, moderate, and low.
func (o ZypperSettingsPtrOutput) Severities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZypperSettings) []string {
		if v == nil {
			return nil
		}
		return v.Severities
	}).(pulumi.StringArrayOutput)
}

// Adds the `--with-optional` flag to `zypper patch`.
func (o ZypperSettingsPtrOutput) WithOptional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZypperSettings) *bool {
		if v == nil {
			return nil
		}
		return v.WithOptional
	}).(pulumi.BoolPtrOutput)
}

// Adds the `--with-update` flag, to `zypper patch`.
func (o ZypperSettingsPtrOutput) WithUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZypperSettings) *bool {
		if v == nil {
			return nil
		}
		return v.WithUpdate
	}).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AptRepositoryOutput{})
	pulumi.RegisterOutputType(AptRepositoryPtrOutput{})
	pulumi.RegisterOutputType(AptSettingsOutput{})
	pulumi.RegisterOutputType(AptSettingsPtrOutput{})
	pulumi.RegisterOutputType(AssignmentOutput{})
	pulumi.RegisterOutputType(AssignmentPtrOutput{})
	pulumi.RegisterOutputType(AssignmentGroupLabelOutput{})
	pulumi.RegisterOutputType(AssignmentGroupLabelArrayOutput{})
	pulumi.RegisterOutputType(AssignmentOsTypeOutput{})
	pulumi.RegisterOutputType(AssignmentOsTypeArrayOutput{})
	pulumi.RegisterOutputType(ExecStepOutput{})
	pulumi.RegisterOutputType(ExecStepPtrOutput{})
	pulumi.RegisterOutputType(ExecStepConfigOutput{})
	pulumi.RegisterOutputType(ExecStepConfigPtrOutput{})
	pulumi.RegisterOutputType(FixedOrPercentOutput{})
	pulumi.RegisterOutputType(FixedOrPercentPtrOutput{})
	pulumi.RegisterOutputType(GcsObjectOutput{})
	pulumi.RegisterOutputType(GcsObjectPtrOutput{})
	pulumi.RegisterOutputType(GooRepositoryOutput{})
	pulumi.RegisterOutputType(GooRepositoryPtrOutput{})
	pulumi.RegisterOutputType(GooSettingsOutput{})
	pulumi.RegisterOutputType(GooSettingsPtrOutput{})
	pulumi.RegisterOutputType(MonthlyScheduleOutput{})
	pulumi.RegisterOutputType(MonthlySchedulePtrOutput{})
	pulumi.RegisterOutputType(OneTimeScheduleOutput{})
	pulumi.RegisterOutputType(OneTimeSchedulePtrOutput{})
	pulumi.RegisterOutputType(PackageOutput{})
	pulumi.RegisterOutputType(PackageArrayOutput{})
	pulumi.RegisterOutputType(PackageRepositoryOutput{})
	pulumi.RegisterOutputType(PackageRepositoryArrayOutput{})
	pulumi.RegisterOutputType(PatchConfigOutput{})
	pulumi.RegisterOutputType(PatchConfigPtrOutput{})
	pulumi.RegisterOutputType(PatchInstanceFilterOutput{})
	pulumi.RegisterOutputType(PatchInstanceFilterPtrOutput{})
	pulumi.RegisterOutputType(PatchInstanceFilterGroupLabelOutput{})
	pulumi.RegisterOutputType(PatchInstanceFilterGroupLabelArrayOutput{})
	pulumi.RegisterOutputType(PatchRolloutOutput{})
	pulumi.RegisterOutputType(PatchRolloutPtrOutput{})
	pulumi.RegisterOutputType(RecurringScheduleOutput{})
	pulumi.RegisterOutputType(RecurringSchedulePtrOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeArrayOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeArtifactOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeArtifactArrayOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeArtifactGcsOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeArtifactGcsPtrOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeArtifactRemoteOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeArtifactRemotePtrOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeStepOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeStepArrayOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeStepCopyFileOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeStepCopyFilePtrOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeStepExecFileOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeStepExecFilePtrOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeStepExtractArchiveOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeStepExtractArchivePtrOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeStepInstallDpkgOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeStepInstallDpkgPtrOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeStepInstallMsiOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeStepInstallMsiPtrOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeStepInstallRpmOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeStepInstallRpmPtrOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeStepRunScriptOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeStepRunScriptPtrOutput{})
	pulumi.RegisterOutputType(TimeOfDayOutput{})
	pulumi.RegisterOutputType(TimeOfDayPtrOutput{})
	pulumi.RegisterOutputType(TimeZoneOutput{})
	pulumi.RegisterOutputType(TimeZonePtrOutput{})
	pulumi.RegisterOutputType(WeekDayOfMonthOutput{})
	pulumi.RegisterOutputType(WeekDayOfMonthPtrOutput{})
	pulumi.RegisterOutputType(WeeklyScheduleOutput{})
	pulumi.RegisterOutputType(WeeklySchedulePtrOutput{})
	pulumi.RegisterOutputType(WindowsUpdateSettingsOutput{})
	pulumi.RegisterOutputType(WindowsUpdateSettingsPtrOutput{})
	pulumi.RegisterOutputType(YumRepositoryOutput{})
	pulumi.RegisterOutputType(YumRepositoryPtrOutput{})
	pulumi.RegisterOutputType(YumSettingsOutput{})
	pulumi.RegisterOutputType(YumSettingsPtrOutput{})
	pulumi.RegisterOutputType(ZypperRepositoryOutput{})
	pulumi.RegisterOutputType(ZypperRepositoryPtrOutput{})
	pulumi.RegisterOutputType(ZypperSettingsOutput{})
	pulumi.RegisterOutputType(ZypperSettingsPtrOutput{})
}
