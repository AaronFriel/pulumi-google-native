// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta4

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates an SSL certificate and returns it along with the private key and server certificate authority. The new certificate will not be usable until the instance is restarted.
type SslCertsInsertResponse struct {
	pulumi.CustomResourceState
}

// NewSslCertsInsertResponse registers a new resource with the given unique name, arguments, and options.
func NewSslCertsInsertResponse(ctx *pulumi.Context,
	name string, args *SslCertsInsertResponseArgs, opts ...pulumi.ResourceOption) (*SslCertsInsertResponse, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	var resource SslCertsInsertResponse
	err := ctx.RegisterResource("google-cloud:sqladmin/v1beta4:SslCertsInsertResponse", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSslCertsInsertResponse gets an existing SslCertsInsertResponse resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSslCertsInsertResponse(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SslCertsInsertResponseState, opts ...pulumi.ResourceOption) (*SslCertsInsertResponse, error) {
	var resource SslCertsInsertResponse
	err := ctx.ReadResource("google-cloud:sqladmin/v1beta4:SslCertsInsertResponse", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SslCertsInsertResponse resources.
type sslCertsInsertResponseState struct {
}

type SslCertsInsertResponseState struct {
}

func (SslCertsInsertResponseState) ElementType() reflect.Type {
	return reflect.TypeOf((*sslCertsInsertResponseState)(nil)).Elem()
}

type sslCertsInsertResponseArgs struct {
	// User supplied name. Must be a distinct name from the other certificates for this instance.
	CommonName *string `pulumi:"commonName"`
	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `pulumi:"instance"`
	// Project ID of the project that contains the instance.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a SslCertsInsertResponse resource.
type SslCertsInsertResponseArgs struct {
	// User supplied name. Must be a distinct name from the other certificates for this instance.
	CommonName pulumi.StringPtrInput
	// Cloud SQL instance ID. This does not include the project ID.
	Instance pulumi.StringInput
	// Project ID of the project that contains the instance.
	Project pulumi.StringInput
}

func (SslCertsInsertResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sslCertsInsertResponseArgs)(nil)).Elem()
}

type SslCertsInsertResponseInput interface {
	pulumi.Input

	ToSslCertsInsertResponseOutput() SslCertsInsertResponseOutput
	ToSslCertsInsertResponseOutputWithContext(ctx context.Context) SslCertsInsertResponseOutput
}

func (*SslCertsInsertResponse) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertsInsertResponse)(nil))
}

func (i *SslCertsInsertResponse) ToSslCertsInsertResponseOutput() SslCertsInsertResponseOutput {
	return i.ToSslCertsInsertResponseOutputWithContext(context.Background())
}

func (i *SslCertsInsertResponse) ToSslCertsInsertResponseOutputWithContext(ctx context.Context) SslCertsInsertResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertsInsertResponseOutput)
}

type SslCertsInsertResponseOutput struct {
	*pulumi.OutputState
}

func (SslCertsInsertResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertsInsertResponse)(nil))
}

func (o SslCertsInsertResponseOutput) ToSslCertsInsertResponseOutput() SslCertsInsertResponseOutput {
	return o
}

func (o SslCertsInsertResponseOutput) ToSslCertsInsertResponseOutputWithContext(ctx context.Context) SslCertsInsertResponseOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SslCertsInsertResponseOutput{})
}
