// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new `BuildTrigger`. This API is experimental.
type BuildTrigger struct {
	pulumi.CustomResourceState
}

// NewBuildTrigger registers a new resource with the given unique name, arguments, and options.
func NewBuildTrigger(ctx *pulumi.Context,
	name string, args *BuildTriggerArgs, opts ...pulumi.ResourceOption) (*BuildTrigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	var resource BuildTrigger
	err := ctx.RegisterResource("google-cloud:cloudbuild/v1:BuildTrigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBuildTrigger gets an existing BuildTrigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBuildTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BuildTriggerState, opts ...pulumi.ResourceOption) (*BuildTrigger, error) {
	var resource BuildTrigger
	err := ctx.ReadResource("google-cloud:cloudbuild/v1:BuildTrigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BuildTrigger resources.
type buildTriggerState struct {
}

type BuildTriggerState struct {
}

func (BuildTriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*buildTriggerState)(nil)).Elem()
}

type buildTriggerArgs struct {
	// Contents of the build template.
	Build *BuildType `pulumi:"build"`
	// Output only. Time when the trigger was created.
	CreateTime *string `pulumi:"createTime"`
	// Human-readable description of this trigger.
	Description *string `pulumi:"description"`
	// If true, the trigger will never automatically execute a build.
	Disabled *bool `pulumi:"disabled"`
	// Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).
	Filename *string `pulumi:"filename"`
	// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.
	Github *GitHubEventsConfig `pulumi:"github"`
	// Output only. Unique identifier of the trigger.
	Id *string `pulumi:"id"`
	// ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for "**". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.
	IgnoredFiles []string `pulumi:"ignoredFiles"`
	// If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build.
	IncludedFiles []string `pulumi:"includedFiles"`
	// User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
	Name *string `pulumi:"name"`
	// Required. ID of the project for which to configure automatic builds.
	ProjectId string `pulumi:"projectId"`
	// Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.
	Substitutions map[string]string `pulumi:"substitutions"`
	// Tags for annotation of a `BuildTrigger`
	Tags []string `pulumi:"tags"`
	// Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.
	TriggerTemplate *RepoSource `pulumi:"triggerTemplate"`
}

// The set of arguments for constructing a BuildTrigger resource.
type BuildTriggerArgs struct {
	// Contents of the build template.
	Build BuildTypePtrInput
	// Output only. Time when the trigger was created.
	CreateTime pulumi.StringPtrInput
	// Human-readable description of this trigger.
	Description pulumi.StringPtrInput
	// If true, the trigger will never automatically execute a build.
	Disabled pulumi.BoolPtrInput
	// Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).
	Filename pulumi.StringPtrInput
	// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.
	Github GitHubEventsConfigPtrInput
	// Output only. Unique identifier of the trigger.
	Id pulumi.StringPtrInput
	// ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for "**". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.
	IgnoredFiles pulumi.StringArrayInput
	// If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build.
	IncludedFiles pulumi.StringArrayInput
	// User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
	Name pulumi.StringPtrInput
	// Required. ID of the project for which to configure automatic builds.
	ProjectId pulumi.StringInput
	// Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.
	Substitutions pulumi.StringMapInput
	// Tags for annotation of a `BuildTrigger`
	Tags pulumi.StringArrayInput
	// Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.
	TriggerTemplate RepoSourcePtrInput
}

func (BuildTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*buildTriggerArgs)(nil)).Elem()
}

type BuildTriggerInput interface {
	pulumi.Input

	ToBuildTriggerOutput() BuildTriggerOutput
	ToBuildTriggerOutputWithContext(ctx context.Context) BuildTriggerOutput
}

func (*BuildTrigger) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildTrigger)(nil))
}

func (i *BuildTrigger) ToBuildTriggerOutput() BuildTriggerOutput {
	return i.ToBuildTriggerOutputWithContext(context.Background())
}

func (i *BuildTrigger) ToBuildTriggerOutputWithContext(ctx context.Context) BuildTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildTriggerOutput)
}

type BuildTriggerOutput struct {
	*pulumi.OutputState
}

func (BuildTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildTrigger)(nil))
}

func (o BuildTriggerOutput) ToBuildTriggerOutput() BuildTriggerOutput {
	return o
}

func (o BuildTriggerOutput) ToBuildTriggerOutputWithContext(ctx context.Context) BuildTriggerOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(BuildTriggerOutput{})
}
