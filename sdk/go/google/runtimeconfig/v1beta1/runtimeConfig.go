// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new RuntimeConfig resource. The configuration name must be unique within project.
type RuntimeConfig struct {
	pulumi.CustomResourceState
}

// NewRuntimeConfig registers a new resource with the given unique name, arguments, and options.
func NewRuntimeConfig(ctx *pulumi.Context,
	name string, args *RuntimeConfigArgs, opts ...pulumi.ResourceOption) (*RuntimeConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	var resource RuntimeConfig
	err := ctx.RegisterResource("google-cloud:runtimeconfig/v1beta1:RuntimeConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuntimeConfig gets an existing RuntimeConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuntimeConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuntimeConfigState, opts ...pulumi.ResourceOption) (*RuntimeConfig, error) {
	var resource RuntimeConfig
	err := ctx.ReadResource("google-cloud:runtimeconfig/v1beta1:RuntimeConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuntimeConfig resources.
type runtimeConfigState struct {
}

type RuntimeConfigState struct {
}

func (RuntimeConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*runtimeConfigState)(nil)).Elem()
}

type runtimeConfigArgs struct {
	// An optional description of the RuntimeConfig object.
	Description *string `pulumi:"description"`
	// The resource name of a runtime config. The name must have the format: projects/[PROJECT_ID]/configs/[CONFIG_NAME] The `[PROJECT_ID]` must be a valid project ID, and `[CONFIG_NAME]` is an arbitrary name that matches the `[0-9A-Za-z](?:[_.A-Za-z0-9-]{0,62}[_.A-Za-z0-9])?` regular expression. The length of `[CONFIG_NAME]` must be less than 64 characters. You pick the RuntimeConfig resource name, but the server will validate that the name adheres to this format. After you create the resource, you cannot change the resource's name.
	Name *string `pulumi:"name"`
	// The [project ID](https://support.google.com/cloud/answer/6158840?hl=en&ref_topic=6158848) for this request, in the format `projects/[PROJECT_ID]`.
	Parent string `pulumi:"parent"`
	// An optional but recommended unique `request_id`. If the server receives two `create()` requests with the same `request_id`, then the second request will be ignored and the first resource created and stored in the backend is returned. Empty `request_id` fields are ignored. It is responsibility of the client to ensure uniqueness of the `request_id` strings. `request_id` strings are limited to 64 characters.
	RequestId *string `pulumi:"requestId"`
}

// The set of arguments for constructing a RuntimeConfig resource.
type RuntimeConfigArgs struct {
	// An optional description of the RuntimeConfig object.
	Description pulumi.StringPtrInput
	// The resource name of a runtime config. The name must have the format: projects/[PROJECT_ID]/configs/[CONFIG_NAME] The `[PROJECT_ID]` must be a valid project ID, and `[CONFIG_NAME]` is an arbitrary name that matches the `[0-9A-Za-z](?:[_.A-Za-z0-9-]{0,62}[_.A-Za-z0-9])?` regular expression. The length of `[CONFIG_NAME]` must be less than 64 characters. You pick the RuntimeConfig resource name, but the server will validate that the name adheres to this format. After you create the resource, you cannot change the resource's name.
	Name pulumi.StringPtrInput
	// The [project ID](https://support.google.com/cloud/answer/6158840?hl=en&ref_topic=6158848) for this request, in the format `projects/[PROJECT_ID]`.
	Parent pulumi.StringInput
	// An optional but recommended unique `request_id`. If the server receives two `create()` requests with the same `request_id`, then the second request will be ignored and the first resource created and stored in the backend is returned. Empty `request_id` fields are ignored. It is responsibility of the client to ensure uniqueness of the `request_id` strings. `request_id` strings are limited to 64 characters.
	RequestId pulumi.StringPtrInput
}

func (RuntimeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*runtimeConfigArgs)(nil)).Elem()
}

type RuntimeConfigInput interface {
	pulumi.Input

	ToRuntimeConfigOutput() RuntimeConfigOutput
	ToRuntimeConfigOutputWithContext(ctx context.Context) RuntimeConfigOutput
}

func (*RuntimeConfig) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeConfig)(nil))
}

func (i *RuntimeConfig) ToRuntimeConfigOutput() RuntimeConfigOutput {
	return i.ToRuntimeConfigOutputWithContext(context.Background())
}

func (i *RuntimeConfig) ToRuntimeConfigOutputWithContext(ctx context.Context) RuntimeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeConfigOutput)
}

type RuntimeConfigOutput struct {
	*pulumi.OutputState
}

func (RuntimeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeConfig)(nil))
}

func (o RuntimeConfigOutput) ToRuntimeConfigOutput() RuntimeConfigOutput {
	return o
}

func (o RuntimeConfigOutput) ToRuntimeConfigOutputWithContext(ctx context.Context) RuntimeConfigOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RuntimeConfigOutput{})
}
