// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// AWS access key (see [AWS Security Credentials](https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html)). For information on our data retention policy for user credentials, see [User credentials](data-retention#user-credentials).
type AwsAccessKey struct {
	// Required. AWS access key ID.
	AccessKeyId *string `pulumi:"accessKeyId"`
	// Required. AWS secret access key. This field is not returned in RPC responses.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
}

// AwsAccessKeyInput is an input type that accepts AwsAccessKeyArgs and AwsAccessKeyOutput values.
// You can construct a concrete instance of `AwsAccessKeyInput` via:
//
//          AwsAccessKeyArgs{...}
type AwsAccessKeyInput interface {
	pulumi.Input

	ToAwsAccessKeyOutput() AwsAccessKeyOutput
	ToAwsAccessKeyOutputWithContext(context.Context) AwsAccessKeyOutput
}

// AWS access key (see [AWS Security Credentials](https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html)). For information on our data retention policy for user credentials, see [User credentials](data-retention#user-credentials).
type AwsAccessKeyArgs struct {
	// Required. AWS access key ID.
	AccessKeyId pulumi.StringPtrInput `pulumi:"accessKeyId"`
	// Required. AWS secret access key. This field is not returned in RPC responses.
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
}

func (AwsAccessKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsAccessKey)(nil)).Elem()
}

func (i AwsAccessKeyArgs) ToAwsAccessKeyOutput() AwsAccessKeyOutput {
	return i.ToAwsAccessKeyOutputWithContext(context.Background())
}

func (i AwsAccessKeyArgs) ToAwsAccessKeyOutputWithContext(ctx context.Context) AwsAccessKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsAccessKeyOutput)
}

func (i AwsAccessKeyArgs) ToAwsAccessKeyPtrOutput() AwsAccessKeyPtrOutput {
	return i.ToAwsAccessKeyPtrOutputWithContext(context.Background())
}

func (i AwsAccessKeyArgs) ToAwsAccessKeyPtrOutputWithContext(ctx context.Context) AwsAccessKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsAccessKeyOutput).ToAwsAccessKeyPtrOutputWithContext(ctx)
}

// AwsAccessKeyPtrInput is an input type that accepts AwsAccessKeyArgs, AwsAccessKeyPtr and AwsAccessKeyPtrOutput values.
// You can construct a concrete instance of `AwsAccessKeyPtrInput` via:
//
//          AwsAccessKeyArgs{...}
//
//  or:
//
//          nil
type AwsAccessKeyPtrInput interface {
	pulumi.Input

	ToAwsAccessKeyPtrOutput() AwsAccessKeyPtrOutput
	ToAwsAccessKeyPtrOutputWithContext(context.Context) AwsAccessKeyPtrOutput
}

type awsAccessKeyPtrType AwsAccessKeyArgs

func AwsAccessKeyPtr(v *AwsAccessKeyArgs) AwsAccessKeyPtrInput {
	return (*awsAccessKeyPtrType)(v)
}

func (*awsAccessKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsAccessKey)(nil)).Elem()
}

func (i *awsAccessKeyPtrType) ToAwsAccessKeyPtrOutput() AwsAccessKeyPtrOutput {
	return i.ToAwsAccessKeyPtrOutputWithContext(context.Background())
}

func (i *awsAccessKeyPtrType) ToAwsAccessKeyPtrOutputWithContext(ctx context.Context) AwsAccessKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsAccessKeyPtrOutput)
}

// AWS access key (see [AWS Security Credentials](https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html)). For information on our data retention policy for user credentials, see [User credentials](data-retention#user-credentials).
type AwsAccessKeyOutput struct{ *pulumi.OutputState }

func (AwsAccessKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsAccessKey)(nil)).Elem()
}

func (o AwsAccessKeyOutput) ToAwsAccessKeyOutput() AwsAccessKeyOutput {
	return o
}

func (o AwsAccessKeyOutput) ToAwsAccessKeyOutputWithContext(ctx context.Context) AwsAccessKeyOutput {
	return o
}

func (o AwsAccessKeyOutput) ToAwsAccessKeyPtrOutput() AwsAccessKeyPtrOutput {
	return o.ToAwsAccessKeyPtrOutputWithContext(context.Background())
}

func (o AwsAccessKeyOutput) ToAwsAccessKeyPtrOutputWithContext(ctx context.Context) AwsAccessKeyPtrOutput {
	return o.ApplyT(func(v AwsAccessKey) *AwsAccessKey {
		return &v
	}).(AwsAccessKeyPtrOutput)
}

// Required. AWS access key ID.
func (o AwsAccessKeyOutput) AccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AwsAccessKey) *string { return v.AccessKeyId }).(pulumi.StringPtrOutput)
}

// Required. AWS secret access key. This field is not returned in RPC responses.
func (o AwsAccessKeyOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AwsAccessKey) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

type AwsAccessKeyPtrOutput struct{ *pulumi.OutputState }

func (AwsAccessKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsAccessKey)(nil)).Elem()
}

func (o AwsAccessKeyPtrOutput) ToAwsAccessKeyPtrOutput() AwsAccessKeyPtrOutput {
	return o
}

func (o AwsAccessKeyPtrOutput) ToAwsAccessKeyPtrOutputWithContext(ctx context.Context) AwsAccessKeyPtrOutput {
	return o
}

func (o AwsAccessKeyPtrOutput) Elem() AwsAccessKeyOutput {
	return o.ApplyT(func(v *AwsAccessKey) AwsAccessKey { return *v }).(AwsAccessKeyOutput)
}

// Required. AWS access key ID.
func (o AwsAccessKeyPtrOutput) AccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsAccessKey) *string {
		if v == nil {
			return nil
		}
		return v.AccessKeyId
	}).(pulumi.StringPtrOutput)
}

// Required. AWS secret access key. This field is not returned in RPC responses.
func (o AwsAccessKeyPtrOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsAccessKey) *string {
		if v == nil {
			return nil
		}
		return v.SecretAccessKey
	}).(pulumi.StringPtrOutput)
}

// An AwsS3Data resource can be a data source, but not a data sink. In an AwsS3Data resource, an object's name is the S3 object's key name.
type AwsS3Data struct {
	// Required. Input only. AWS access key used to sign the API requests to the AWS S3 bucket. Permissions on the bucket must be granted to the access ID of the AWS access key. For information on our data retention policy for user credentials, see [User credentials](data-retention#user-credentials).
	AwsAccessKey *AwsAccessKey `pulumi:"awsAccessKey"`
	// Required. S3 Bucket name (see [Creating a bucket](https://docs.aws.amazon.com/AmazonS3/latest/dev/create-bucket-get-location-example.html)).
	BucketName *string `pulumi:"bucketName"`
}

// AwsS3DataInput is an input type that accepts AwsS3DataArgs and AwsS3DataOutput values.
// You can construct a concrete instance of `AwsS3DataInput` via:
//
//          AwsS3DataArgs{...}
type AwsS3DataInput interface {
	pulumi.Input

	ToAwsS3DataOutput() AwsS3DataOutput
	ToAwsS3DataOutputWithContext(context.Context) AwsS3DataOutput
}

// An AwsS3Data resource can be a data source, but not a data sink. In an AwsS3Data resource, an object's name is the S3 object's key name.
type AwsS3DataArgs struct {
	// Required. Input only. AWS access key used to sign the API requests to the AWS S3 bucket. Permissions on the bucket must be granted to the access ID of the AWS access key. For information on our data retention policy for user credentials, see [User credentials](data-retention#user-credentials).
	AwsAccessKey AwsAccessKeyPtrInput `pulumi:"awsAccessKey"`
	// Required. S3 Bucket name (see [Creating a bucket](https://docs.aws.amazon.com/AmazonS3/latest/dev/create-bucket-get-location-example.html)).
	BucketName pulumi.StringPtrInput `pulumi:"bucketName"`
}

func (AwsS3DataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsS3Data)(nil)).Elem()
}

func (i AwsS3DataArgs) ToAwsS3DataOutput() AwsS3DataOutput {
	return i.ToAwsS3DataOutputWithContext(context.Background())
}

func (i AwsS3DataArgs) ToAwsS3DataOutputWithContext(ctx context.Context) AwsS3DataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsS3DataOutput)
}

func (i AwsS3DataArgs) ToAwsS3DataPtrOutput() AwsS3DataPtrOutput {
	return i.ToAwsS3DataPtrOutputWithContext(context.Background())
}

func (i AwsS3DataArgs) ToAwsS3DataPtrOutputWithContext(ctx context.Context) AwsS3DataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsS3DataOutput).ToAwsS3DataPtrOutputWithContext(ctx)
}

// AwsS3DataPtrInput is an input type that accepts AwsS3DataArgs, AwsS3DataPtr and AwsS3DataPtrOutput values.
// You can construct a concrete instance of `AwsS3DataPtrInput` via:
//
//          AwsS3DataArgs{...}
//
//  or:
//
//          nil
type AwsS3DataPtrInput interface {
	pulumi.Input

	ToAwsS3DataPtrOutput() AwsS3DataPtrOutput
	ToAwsS3DataPtrOutputWithContext(context.Context) AwsS3DataPtrOutput
}

type awsS3DataPtrType AwsS3DataArgs

func AwsS3DataPtr(v *AwsS3DataArgs) AwsS3DataPtrInput {
	return (*awsS3DataPtrType)(v)
}

func (*awsS3DataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsS3Data)(nil)).Elem()
}

func (i *awsS3DataPtrType) ToAwsS3DataPtrOutput() AwsS3DataPtrOutput {
	return i.ToAwsS3DataPtrOutputWithContext(context.Background())
}

func (i *awsS3DataPtrType) ToAwsS3DataPtrOutputWithContext(ctx context.Context) AwsS3DataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsS3DataPtrOutput)
}

// An AwsS3Data resource can be a data source, but not a data sink. In an AwsS3Data resource, an object's name is the S3 object's key name.
type AwsS3DataOutput struct{ *pulumi.OutputState }

func (AwsS3DataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsS3Data)(nil)).Elem()
}

func (o AwsS3DataOutput) ToAwsS3DataOutput() AwsS3DataOutput {
	return o
}

func (o AwsS3DataOutput) ToAwsS3DataOutputWithContext(ctx context.Context) AwsS3DataOutput {
	return o
}

func (o AwsS3DataOutput) ToAwsS3DataPtrOutput() AwsS3DataPtrOutput {
	return o.ToAwsS3DataPtrOutputWithContext(context.Background())
}

func (o AwsS3DataOutput) ToAwsS3DataPtrOutputWithContext(ctx context.Context) AwsS3DataPtrOutput {
	return o.ApplyT(func(v AwsS3Data) *AwsS3Data {
		return &v
	}).(AwsS3DataPtrOutput)
}

// Required. Input only. AWS access key used to sign the API requests to the AWS S3 bucket. Permissions on the bucket must be granted to the access ID of the AWS access key. For information on our data retention policy for user credentials, see [User credentials](data-retention#user-credentials).
func (o AwsS3DataOutput) AwsAccessKey() AwsAccessKeyPtrOutput {
	return o.ApplyT(func(v AwsS3Data) *AwsAccessKey { return v.AwsAccessKey }).(AwsAccessKeyPtrOutput)
}

// Required. S3 Bucket name (see [Creating a bucket](https://docs.aws.amazon.com/AmazonS3/latest/dev/create-bucket-get-location-example.html)).
func (o AwsS3DataOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AwsS3Data) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

type AwsS3DataPtrOutput struct{ *pulumi.OutputState }

func (AwsS3DataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsS3Data)(nil)).Elem()
}

func (o AwsS3DataPtrOutput) ToAwsS3DataPtrOutput() AwsS3DataPtrOutput {
	return o
}

func (o AwsS3DataPtrOutput) ToAwsS3DataPtrOutputWithContext(ctx context.Context) AwsS3DataPtrOutput {
	return o
}

func (o AwsS3DataPtrOutput) Elem() AwsS3DataOutput {
	return o.ApplyT(func(v *AwsS3Data) AwsS3Data { return *v }).(AwsS3DataOutput)
}

// Required. Input only. AWS access key used to sign the API requests to the AWS S3 bucket. Permissions on the bucket must be granted to the access ID of the AWS access key. For information on our data retention policy for user credentials, see [User credentials](data-retention#user-credentials).
func (o AwsS3DataPtrOutput) AwsAccessKey() AwsAccessKeyPtrOutput {
	return o.ApplyT(func(v *AwsS3Data) *AwsAccessKey {
		if v == nil {
			return nil
		}
		return v.AwsAccessKey
	}).(AwsAccessKeyPtrOutput)
}

// Required. S3 Bucket name (see [Creating a bucket](https://docs.aws.amazon.com/AmazonS3/latest/dev/create-bucket-get-location-example.html)).
func (o AwsS3DataPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsS3Data) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

// An AzureBlobStorageData resource can be a data source, but not a data sink. An AzureBlobStorageData resource represents one Azure container. The storage account determines the [Azure endpoint](https://docs.microsoft.com/en-us/azure/storage/common/storage-create-storage-account#storage-account-endpoints). In an AzureBlobStorageData resource, a blobs's name is the [Azure Blob Storage blob's key name](https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata#blob-names).
type AzureBlobStorageData struct {
	// Required. Input only. Credentials used to authenticate API requests to Azure. For information on our data retention policy for user credentials, see [User credentials](data-retention#user-credentials).
	AzureCredentials *AzureCredentials `pulumi:"azureCredentials"`
	// Required. The container to transfer from the Azure Storage account.
	Container *string `pulumi:"container"`
	// Required. The name of the Azure Storage account.
	StorageAccount *string `pulumi:"storageAccount"`
}

// AzureBlobStorageDataInput is an input type that accepts AzureBlobStorageDataArgs and AzureBlobStorageDataOutput values.
// You can construct a concrete instance of `AzureBlobStorageDataInput` via:
//
//          AzureBlobStorageDataArgs{...}
type AzureBlobStorageDataInput interface {
	pulumi.Input

	ToAzureBlobStorageDataOutput() AzureBlobStorageDataOutput
	ToAzureBlobStorageDataOutputWithContext(context.Context) AzureBlobStorageDataOutput
}

// An AzureBlobStorageData resource can be a data source, but not a data sink. An AzureBlobStorageData resource represents one Azure container. The storage account determines the [Azure endpoint](https://docs.microsoft.com/en-us/azure/storage/common/storage-create-storage-account#storage-account-endpoints). In an AzureBlobStorageData resource, a blobs's name is the [Azure Blob Storage blob's key name](https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata#blob-names).
type AzureBlobStorageDataArgs struct {
	// Required. Input only. Credentials used to authenticate API requests to Azure. For information on our data retention policy for user credentials, see [User credentials](data-retention#user-credentials).
	AzureCredentials AzureCredentialsPtrInput `pulumi:"azureCredentials"`
	// Required. The container to transfer from the Azure Storage account.
	Container pulumi.StringPtrInput `pulumi:"container"`
	// Required. The name of the Azure Storage account.
	StorageAccount pulumi.StringPtrInput `pulumi:"storageAccount"`
}

func (AzureBlobStorageDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageData)(nil)).Elem()
}

func (i AzureBlobStorageDataArgs) ToAzureBlobStorageDataOutput() AzureBlobStorageDataOutput {
	return i.ToAzureBlobStorageDataOutputWithContext(context.Background())
}

func (i AzureBlobStorageDataArgs) ToAzureBlobStorageDataOutputWithContext(ctx context.Context) AzureBlobStorageDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobStorageDataOutput)
}

func (i AzureBlobStorageDataArgs) ToAzureBlobStorageDataPtrOutput() AzureBlobStorageDataPtrOutput {
	return i.ToAzureBlobStorageDataPtrOutputWithContext(context.Background())
}

func (i AzureBlobStorageDataArgs) ToAzureBlobStorageDataPtrOutputWithContext(ctx context.Context) AzureBlobStorageDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobStorageDataOutput).ToAzureBlobStorageDataPtrOutputWithContext(ctx)
}

// AzureBlobStorageDataPtrInput is an input type that accepts AzureBlobStorageDataArgs, AzureBlobStorageDataPtr and AzureBlobStorageDataPtrOutput values.
// You can construct a concrete instance of `AzureBlobStorageDataPtrInput` via:
//
//          AzureBlobStorageDataArgs{...}
//
//  or:
//
//          nil
type AzureBlobStorageDataPtrInput interface {
	pulumi.Input

	ToAzureBlobStorageDataPtrOutput() AzureBlobStorageDataPtrOutput
	ToAzureBlobStorageDataPtrOutputWithContext(context.Context) AzureBlobStorageDataPtrOutput
}

type azureBlobStorageDataPtrType AzureBlobStorageDataArgs

func AzureBlobStorageDataPtr(v *AzureBlobStorageDataArgs) AzureBlobStorageDataPtrInput {
	return (*azureBlobStorageDataPtrType)(v)
}

func (*azureBlobStorageDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobStorageData)(nil)).Elem()
}

func (i *azureBlobStorageDataPtrType) ToAzureBlobStorageDataPtrOutput() AzureBlobStorageDataPtrOutput {
	return i.ToAzureBlobStorageDataPtrOutputWithContext(context.Background())
}

func (i *azureBlobStorageDataPtrType) ToAzureBlobStorageDataPtrOutputWithContext(ctx context.Context) AzureBlobStorageDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobStorageDataPtrOutput)
}

// An AzureBlobStorageData resource can be a data source, but not a data sink. An AzureBlobStorageData resource represents one Azure container. The storage account determines the [Azure endpoint](https://docs.microsoft.com/en-us/azure/storage/common/storage-create-storage-account#storage-account-endpoints). In an AzureBlobStorageData resource, a blobs's name is the [Azure Blob Storage blob's key name](https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata#blob-names).
type AzureBlobStorageDataOutput struct{ *pulumi.OutputState }

func (AzureBlobStorageDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageData)(nil)).Elem()
}

func (o AzureBlobStorageDataOutput) ToAzureBlobStorageDataOutput() AzureBlobStorageDataOutput {
	return o
}

func (o AzureBlobStorageDataOutput) ToAzureBlobStorageDataOutputWithContext(ctx context.Context) AzureBlobStorageDataOutput {
	return o
}

func (o AzureBlobStorageDataOutput) ToAzureBlobStorageDataPtrOutput() AzureBlobStorageDataPtrOutput {
	return o.ToAzureBlobStorageDataPtrOutputWithContext(context.Background())
}

func (o AzureBlobStorageDataOutput) ToAzureBlobStorageDataPtrOutputWithContext(ctx context.Context) AzureBlobStorageDataPtrOutput {
	return o.ApplyT(func(v AzureBlobStorageData) *AzureBlobStorageData {
		return &v
	}).(AzureBlobStorageDataPtrOutput)
}

// Required. Input only. Credentials used to authenticate API requests to Azure. For information on our data retention policy for user credentials, see [User credentials](data-retention#user-credentials).
func (o AzureBlobStorageDataOutput) AzureCredentials() AzureCredentialsPtrOutput {
	return o.ApplyT(func(v AzureBlobStorageData) *AzureCredentials { return v.AzureCredentials }).(AzureCredentialsPtrOutput)
}

// Required. The container to transfer from the Azure Storage account.
func (o AzureBlobStorageDataOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobStorageData) *string { return v.Container }).(pulumi.StringPtrOutput)
}

// Required. The name of the Azure Storage account.
func (o AzureBlobStorageDataOutput) StorageAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobStorageData) *string { return v.StorageAccount }).(pulumi.StringPtrOutput)
}

type AzureBlobStorageDataPtrOutput struct{ *pulumi.OutputState }

func (AzureBlobStorageDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobStorageData)(nil)).Elem()
}

func (o AzureBlobStorageDataPtrOutput) ToAzureBlobStorageDataPtrOutput() AzureBlobStorageDataPtrOutput {
	return o
}

func (o AzureBlobStorageDataPtrOutput) ToAzureBlobStorageDataPtrOutputWithContext(ctx context.Context) AzureBlobStorageDataPtrOutput {
	return o
}

func (o AzureBlobStorageDataPtrOutput) Elem() AzureBlobStorageDataOutput {
	return o.ApplyT(func(v *AzureBlobStorageData) AzureBlobStorageData { return *v }).(AzureBlobStorageDataOutput)
}

// Required. Input only. Credentials used to authenticate API requests to Azure. For information on our data retention policy for user credentials, see [User credentials](data-retention#user-credentials).
func (o AzureBlobStorageDataPtrOutput) AzureCredentials() AzureCredentialsPtrOutput {
	return o.ApplyT(func(v *AzureBlobStorageData) *AzureCredentials {
		if v == nil {
			return nil
		}
		return v.AzureCredentials
	}).(AzureCredentialsPtrOutput)
}

// Required. The container to transfer from the Azure Storage account.
func (o AzureBlobStorageDataPtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobStorageData) *string {
		if v == nil {
			return nil
		}
		return v.Container
	}).(pulumi.StringPtrOutput)
}

// Required. The name of the Azure Storage account.
func (o AzureBlobStorageDataPtrOutput) StorageAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobStorageData) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccount
	}).(pulumi.StringPtrOutput)
}

// Azure credentials For information on our data retention policy for user credentials, see [User credentials](data-retention#user-credentials).
type AzureCredentials struct {
	// Required. Azure shared access signature. (see [Grant limited access to Azure Storage resources using shared access signatures (SAS)](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview)).
	SasToken *string `pulumi:"sasToken"`
}

// AzureCredentialsInput is an input type that accepts AzureCredentialsArgs and AzureCredentialsOutput values.
// You can construct a concrete instance of `AzureCredentialsInput` via:
//
//          AzureCredentialsArgs{...}
type AzureCredentialsInput interface {
	pulumi.Input

	ToAzureCredentialsOutput() AzureCredentialsOutput
	ToAzureCredentialsOutputWithContext(context.Context) AzureCredentialsOutput
}

// Azure credentials For information on our data retention policy for user credentials, see [User credentials](data-retention#user-credentials).
type AzureCredentialsArgs struct {
	// Required. Azure shared access signature. (see [Grant limited access to Azure Storage resources using shared access signatures (SAS)](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview)).
	SasToken pulumi.StringPtrInput `pulumi:"sasToken"`
}

func (AzureCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureCredentials)(nil)).Elem()
}

func (i AzureCredentialsArgs) ToAzureCredentialsOutput() AzureCredentialsOutput {
	return i.ToAzureCredentialsOutputWithContext(context.Background())
}

func (i AzureCredentialsArgs) ToAzureCredentialsOutputWithContext(ctx context.Context) AzureCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureCredentialsOutput)
}

func (i AzureCredentialsArgs) ToAzureCredentialsPtrOutput() AzureCredentialsPtrOutput {
	return i.ToAzureCredentialsPtrOutputWithContext(context.Background())
}

func (i AzureCredentialsArgs) ToAzureCredentialsPtrOutputWithContext(ctx context.Context) AzureCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureCredentialsOutput).ToAzureCredentialsPtrOutputWithContext(ctx)
}

// AzureCredentialsPtrInput is an input type that accepts AzureCredentialsArgs, AzureCredentialsPtr and AzureCredentialsPtrOutput values.
// You can construct a concrete instance of `AzureCredentialsPtrInput` via:
//
//          AzureCredentialsArgs{...}
//
//  or:
//
//          nil
type AzureCredentialsPtrInput interface {
	pulumi.Input

	ToAzureCredentialsPtrOutput() AzureCredentialsPtrOutput
	ToAzureCredentialsPtrOutputWithContext(context.Context) AzureCredentialsPtrOutput
}

type azureCredentialsPtrType AzureCredentialsArgs

func AzureCredentialsPtr(v *AzureCredentialsArgs) AzureCredentialsPtrInput {
	return (*azureCredentialsPtrType)(v)
}

func (*azureCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureCredentials)(nil)).Elem()
}

func (i *azureCredentialsPtrType) ToAzureCredentialsPtrOutput() AzureCredentialsPtrOutput {
	return i.ToAzureCredentialsPtrOutputWithContext(context.Background())
}

func (i *azureCredentialsPtrType) ToAzureCredentialsPtrOutputWithContext(ctx context.Context) AzureCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureCredentialsPtrOutput)
}

// Azure credentials For information on our data retention policy for user credentials, see [User credentials](data-retention#user-credentials).
type AzureCredentialsOutput struct{ *pulumi.OutputState }

func (AzureCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureCredentials)(nil)).Elem()
}

func (o AzureCredentialsOutput) ToAzureCredentialsOutput() AzureCredentialsOutput {
	return o
}

func (o AzureCredentialsOutput) ToAzureCredentialsOutputWithContext(ctx context.Context) AzureCredentialsOutput {
	return o
}

func (o AzureCredentialsOutput) ToAzureCredentialsPtrOutput() AzureCredentialsPtrOutput {
	return o.ToAzureCredentialsPtrOutputWithContext(context.Background())
}

func (o AzureCredentialsOutput) ToAzureCredentialsPtrOutputWithContext(ctx context.Context) AzureCredentialsPtrOutput {
	return o.ApplyT(func(v AzureCredentials) *AzureCredentials {
		return &v
	}).(AzureCredentialsPtrOutput)
}

// Required. Azure shared access signature. (see [Grant limited access to Azure Storage resources using shared access signatures (SAS)](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview)).
func (o AzureCredentialsOutput) SasToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureCredentials) *string { return v.SasToken }).(pulumi.StringPtrOutput)
}

type AzureCredentialsPtrOutput struct{ *pulumi.OutputState }

func (AzureCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureCredentials)(nil)).Elem()
}

func (o AzureCredentialsPtrOutput) ToAzureCredentialsPtrOutput() AzureCredentialsPtrOutput {
	return o
}

func (o AzureCredentialsPtrOutput) ToAzureCredentialsPtrOutputWithContext(ctx context.Context) AzureCredentialsPtrOutput {
	return o
}

func (o AzureCredentialsPtrOutput) Elem() AzureCredentialsOutput {
	return o.ApplyT(func(v *AzureCredentials) AzureCredentials { return *v }).(AzureCredentialsOutput)
}

// Required. Azure shared access signature. (see [Grant limited access to Azure Storage resources using shared access signatures (SAS)](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview)).
func (o AzureCredentialsPtrOutput) SasToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureCredentials) *string {
		if v == nil {
			return nil
		}
		return v.SasToken
	}).(pulumi.StringPtrOutput)
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`.
type Date struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `pulumi:"day"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `pulumi:"month"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `pulumi:"year"`
}

// DateInput is an input type that accepts DateArgs and DateOutput values.
// You can construct a concrete instance of `DateInput` via:
//
//          DateArgs{...}
type DateInput interface {
	pulumi.Input

	ToDateOutput() DateOutput
	ToDateOutputWithContext(context.Context) DateOutput
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`.
type DateArgs struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day pulumi.IntPtrInput `pulumi:"day"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month pulumi.IntPtrInput `pulumi:"month"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year pulumi.IntPtrInput `pulumi:"year"`
}

func (DateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Date)(nil)).Elem()
}

func (i DateArgs) ToDateOutput() DateOutput {
	return i.ToDateOutputWithContext(context.Background())
}

func (i DateArgs) ToDateOutputWithContext(ctx context.Context) DateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DateOutput)
}

func (i DateArgs) ToDatePtrOutput() DatePtrOutput {
	return i.ToDatePtrOutputWithContext(context.Background())
}

func (i DateArgs) ToDatePtrOutputWithContext(ctx context.Context) DatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DateOutput).ToDatePtrOutputWithContext(ctx)
}

// DatePtrInput is an input type that accepts DateArgs, DatePtr and DatePtrOutput values.
// You can construct a concrete instance of `DatePtrInput` via:
//
//          DateArgs{...}
//
//  or:
//
//          nil
type DatePtrInput interface {
	pulumi.Input

	ToDatePtrOutput() DatePtrOutput
	ToDatePtrOutputWithContext(context.Context) DatePtrOutput
}

type datePtrType DateArgs

func DatePtr(v *DateArgs) DatePtrInput {
	return (*datePtrType)(v)
}

func (*datePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Date)(nil)).Elem()
}

func (i *datePtrType) ToDatePtrOutput() DatePtrOutput {
	return i.ToDatePtrOutputWithContext(context.Background())
}

func (i *datePtrType) ToDatePtrOutputWithContext(ctx context.Context) DatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatePtrOutput)
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`.
type DateOutput struct{ *pulumi.OutputState }

func (DateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Date)(nil)).Elem()
}

func (o DateOutput) ToDateOutput() DateOutput {
	return o
}

func (o DateOutput) ToDateOutputWithContext(ctx context.Context) DateOutput {
	return o
}

func (o DateOutput) ToDatePtrOutput() DatePtrOutput {
	return o.ToDatePtrOutputWithContext(context.Background())
}

func (o DateOutput) ToDatePtrOutputWithContext(ctx context.Context) DatePtrOutput {
	return o.ApplyT(func(v Date) *Date {
		return &v
	}).(DatePtrOutput)
}

// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
func (o DateOutput) Day() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Date) *int { return v.Day }).(pulumi.IntPtrOutput)
}

// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
func (o DateOutput) Month() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Date) *int { return v.Month }).(pulumi.IntPtrOutput)
}

// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
func (o DateOutput) Year() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Date) *int { return v.Year }).(pulumi.IntPtrOutput)
}

type DatePtrOutput struct{ *pulumi.OutputState }

func (DatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Date)(nil)).Elem()
}

func (o DatePtrOutput) ToDatePtrOutput() DatePtrOutput {
	return o
}

func (o DatePtrOutput) ToDatePtrOutputWithContext(ctx context.Context) DatePtrOutput {
	return o
}

func (o DatePtrOutput) Elem() DateOutput {
	return o.ApplyT(func(v *Date) Date { return *v }).(DateOutput)
}

// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
func (o DatePtrOutput) Day() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Date) *int {
		if v == nil {
			return nil
		}
		return v.Day
	}).(pulumi.IntPtrOutput)
}

// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
func (o DatePtrOutput) Month() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Date) *int {
		if v == nil {
			return nil
		}
		return v.Month
	}).(pulumi.IntPtrOutput)
}

// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
func (o DatePtrOutput) Year() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Date) *int {
		if v == nil {
			return nil
		}
		return v.Year
	}).(pulumi.IntPtrOutput)
}

// In a GcsData resource, an object's name is the Cloud Storage object's name and its "last modification time" refers to the object's `updated` property of Cloud Storage objects, which changes when the content or the metadata of the object is updated.
type GcsData struct {
	// Required. Cloud Storage bucket name (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/naming#requirements)).
	BucketName *string `pulumi:"bucketName"`
}

// GcsDataInput is an input type that accepts GcsDataArgs and GcsDataOutput values.
// You can construct a concrete instance of `GcsDataInput` via:
//
//          GcsDataArgs{...}
type GcsDataInput interface {
	pulumi.Input

	ToGcsDataOutput() GcsDataOutput
	ToGcsDataOutputWithContext(context.Context) GcsDataOutput
}

// In a GcsData resource, an object's name is the Cloud Storage object's name and its "last modification time" refers to the object's `updated` property of Cloud Storage objects, which changes when the content or the metadata of the object is updated.
type GcsDataArgs struct {
	// Required. Cloud Storage bucket name (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/naming#requirements)).
	BucketName pulumi.StringPtrInput `pulumi:"bucketName"`
}

func (GcsDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsData)(nil)).Elem()
}

func (i GcsDataArgs) ToGcsDataOutput() GcsDataOutput {
	return i.ToGcsDataOutputWithContext(context.Background())
}

func (i GcsDataArgs) ToGcsDataOutputWithContext(ctx context.Context) GcsDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsDataOutput)
}

func (i GcsDataArgs) ToGcsDataPtrOutput() GcsDataPtrOutput {
	return i.ToGcsDataPtrOutputWithContext(context.Background())
}

func (i GcsDataArgs) ToGcsDataPtrOutputWithContext(ctx context.Context) GcsDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsDataOutput).ToGcsDataPtrOutputWithContext(ctx)
}

// GcsDataPtrInput is an input type that accepts GcsDataArgs, GcsDataPtr and GcsDataPtrOutput values.
// You can construct a concrete instance of `GcsDataPtrInput` via:
//
//          GcsDataArgs{...}
//
//  or:
//
//          nil
type GcsDataPtrInput interface {
	pulumi.Input

	ToGcsDataPtrOutput() GcsDataPtrOutput
	ToGcsDataPtrOutputWithContext(context.Context) GcsDataPtrOutput
}

type gcsDataPtrType GcsDataArgs

func GcsDataPtr(v *GcsDataArgs) GcsDataPtrInput {
	return (*gcsDataPtrType)(v)
}

func (*gcsDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsData)(nil)).Elem()
}

func (i *gcsDataPtrType) ToGcsDataPtrOutput() GcsDataPtrOutput {
	return i.ToGcsDataPtrOutputWithContext(context.Background())
}

func (i *gcsDataPtrType) ToGcsDataPtrOutputWithContext(ctx context.Context) GcsDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsDataPtrOutput)
}

// In a GcsData resource, an object's name is the Cloud Storage object's name and its "last modification time" refers to the object's `updated` property of Cloud Storage objects, which changes when the content or the metadata of the object is updated.
type GcsDataOutput struct{ *pulumi.OutputState }

func (GcsDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsData)(nil)).Elem()
}

func (o GcsDataOutput) ToGcsDataOutput() GcsDataOutput {
	return o
}

func (o GcsDataOutput) ToGcsDataOutputWithContext(ctx context.Context) GcsDataOutput {
	return o
}

func (o GcsDataOutput) ToGcsDataPtrOutput() GcsDataPtrOutput {
	return o.ToGcsDataPtrOutputWithContext(context.Background())
}

func (o GcsDataOutput) ToGcsDataPtrOutputWithContext(ctx context.Context) GcsDataPtrOutput {
	return o.ApplyT(func(v GcsData) *GcsData {
		return &v
	}).(GcsDataPtrOutput)
}

// Required. Cloud Storage bucket name (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/naming#requirements)).
func (o GcsDataOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsData) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

type GcsDataPtrOutput struct{ *pulumi.OutputState }

func (GcsDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsData)(nil)).Elem()
}

func (o GcsDataPtrOutput) ToGcsDataPtrOutput() GcsDataPtrOutput {
	return o
}

func (o GcsDataPtrOutput) ToGcsDataPtrOutputWithContext(ctx context.Context) GcsDataPtrOutput {
	return o
}

func (o GcsDataPtrOutput) Elem() GcsDataOutput {
	return o.ApplyT(func(v *GcsData) GcsData { return *v }).(GcsDataOutput)
}

// Required. Cloud Storage bucket name (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/naming#requirements)).
func (o GcsDataPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsData) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

// An HttpData resource specifies a list of objects on the web to be transferred over HTTP. The information of the objects to be transferred is contained in a file referenced by a URL. The first line in the file must be `"TsvHttpData-1.0"`, which specifies the format of the file. Subsequent lines specify the information of the list of objects, one object per list entry. Each entry has the following tab-delimited fields: * **HTTP URL** — The location of the object. * **Length** — The size of the object in bytes. * **MD5** — The base64-encoded MD5 hash of the object. For an example of a valid TSV file, see [Transferring data from URLs](https://cloud.google.com/storage-transfer/docs/create-url-list). When transferring data based on a URL list, keep the following in mind: * When an object located at `http(s)://hostname:port/` is transferred to a data sink, the name of the object at the data sink is `/`. * If the specified size of an object does not match the actual size of the object fetched, the object will not be transferred. * If the specified MD5 does not match the MD5 computed from the transferred bytes, the object transfer will fail. For more information, see [Generating MD5 hashes] (https://cloud.google.com/storage-transfer/docs/create-url-list#md5-checksum) * Ensure that each URL you specify is publicly accessible. For example, in Cloud Storage you can [share an object publicly] (https://cloud.google.com/storage/docs/cloud-console#_sharingdata) and get a link to it. * Storage Transfer Service obeys `robots.txt` rules and requires the source HTTP server to support `Range` requests and to return a `Content-Length` header in each response. * ObjectConditions have no effect when filtering objects to transfer.
type HttpData struct {
	// Required. The URL that points to the file that stores the object list entries. This file must allow public access. Currently, only URLs with HTTP and HTTPS schemes are supported.
	ListUrl *string `pulumi:"listUrl"`
}

// HttpDataInput is an input type that accepts HttpDataArgs and HttpDataOutput values.
// You can construct a concrete instance of `HttpDataInput` via:
//
//          HttpDataArgs{...}
type HttpDataInput interface {
	pulumi.Input

	ToHttpDataOutput() HttpDataOutput
	ToHttpDataOutputWithContext(context.Context) HttpDataOutput
}

// An HttpData resource specifies a list of objects on the web to be transferred over HTTP. The information of the objects to be transferred is contained in a file referenced by a URL. The first line in the file must be `"TsvHttpData-1.0"`, which specifies the format of the file. Subsequent lines specify the information of the list of objects, one object per list entry. Each entry has the following tab-delimited fields: * **HTTP URL** — The location of the object. * **Length** — The size of the object in bytes. * **MD5** — The base64-encoded MD5 hash of the object. For an example of a valid TSV file, see [Transferring data from URLs](https://cloud.google.com/storage-transfer/docs/create-url-list). When transferring data based on a URL list, keep the following in mind: * When an object located at `http(s)://hostname:port/` is transferred to a data sink, the name of the object at the data sink is `/`. * If the specified size of an object does not match the actual size of the object fetched, the object will not be transferred. * If the specified MD5 does not match the MD5 computed from the transferred bytes, the object transfer will fail. For more information, see [Generating MD5 hashes] (https://cloud.google.com/storage-transfer/docs/create-url-list#md5-checksum) * Ensure that each URL you specify is publicly accessible. For example, in Cloud Storage you can [share an object publicly] (https://cloud.google.com/storage/docs/cloud-console#_sharingdata) and get a link to it. * Storage Transfer Service obeys `robots.txt` rules and requires the source HTTP server to support `Range` requests and to return a `Content-Length` header in each response. * ObjectConditions have no effect when filtering objects to transfer.
type HttpDataArgs struct {
	// Required. The URL that points to the file that stores the object list entries. This file must allow public access. Currently, only URLs with HTTP and HTTPS schemes are supported.
	ListUrl pulumi.StringPtrInput `pulumi:"listUrl"`
}

func (HttpDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpData)(nil)).Elem()
}

func (i HttpDataArgs) ToHttpDataOutput() HttpDataOutput {
	return i.ToHttpDataOutputWithContext(context.Background())
}

func (i HttpDataArgs) ToHttpDataOutputWithContext(ctx context.Context) HttpDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpDataOutput)
}

func (i HttpDataArgs) ToHttpDataPtrOutput() HttpDataPtrOutput {
	return i.ToHttpDataPtrOutputWithContext(context.Background())
}

func (i HttpDataArgs) ToHttpDataPtrOutputWithContext(ctx context.Context) HttpDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpDataOutput).ToHttpDataPtrOutputWithContext(ctx)
}

// HttpDataPtrInput is an input type that accepts HttpDataArgs, HttpDataPtr and HttpDataPtrOutput values.
// You can construct a concrete instance of `HttpDataPtrInput` via:
//
//          HttpDataArgs{...}
//
//  or:
//
//          nil
type HttpDataPtrInput interface {
	pulumi.Input

	ToHttpDataPtrOutput() HttpDataPtrOutput
	ToHttpDataPtrOutputWithContext(context.Context) HttpDataPtrOutput
}

type httpDataPtrType HttpDataArgs

func HttpDataPtr(v *HttpDataArgs) HttpDataPtrInput {
	return (*httpDataPtrType)(v)
}

func (*httpDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpData)(nil)).Elem()
}

func (i *httpDataPtrType) ToHttpDataPtrOutput() HttpDataPtrOutput {
	return i.ToHttpDataPtrOutputWithContext(context.Background())
}

func (i *httpDataPtrType) ToHttpDataPtrOutputWithContext(ctx context.Context) HttpDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpDataPtrOutput)
}

// An HttpData resource specifies a list of objects on the web to be transferred over HTTP. The information of the objects to be transferred is contained in a file referenced by a URL. The first line in the file must be `"TsvHttpData-1.0"`, which specifies the format of the file. Subsequent lines specify the information of the list of objects, one object per list entry. Each entry has the following tab-delimited fields: * **HTTP URL** — The location of the object. * **Length** — The size of the object in bytes. * **MD5** — The base64-encoded MD5 hash of the object. For an example of a valid TSV file, see [Transferring data from URLs](https://cloud.google.com/storage-transfer/docs/create-url-list). When transferring data based on a URL list, keep the following in mind: * When an object located at `http(s)://hostname:port/` is transferred to a data sink, the name of the object at the data sink is `/`. * If the specified size of an object does not match the actual size of the object fetched, the object will not be transferred. * If the specified MD5 does not match the MD5 computed from the transferred bytes, the object transfer will fail. For more information, see [Generating MD5 hashes] (https://cloud.google.com/storage-transfer/docs/create-url-list#md5-checksum) * Ensure that each URL you specify is publicly accessible. For example, in Cloud Storage you can [share an object publicly] (https://cloud.google.com/storage/docs/cloud-console#_sharingdata) and get a link to it. * Storage Transfer Service obeys `robots.txt` rules and requires the source HTTP server to support `Range` requests and to return a `Content-Length` header in each response. * ObjectConditions have no effect when filtering objects to transfer.
type HttpDataOutput struct{ *pulumi.OutputState }

func (HttpDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpData)(nil)).Elem()
}

func (o HttpDataOutput) ToHttpDataOutput() HttpDataOutput {
	return o
}

func (o HttpDataOutput) ToHttpDataOutputWithContext(ctx context.Context) HttpDataOutput {
	return o
}

func (o HttpDataOutput) ToHttpDataPtrOutput() HttpDataPtrOutput {
	return o.ToHttpDataPtrOutputWithContext(context.Background())
}

func (o HttpDataOutput) ToHttpDataPtrOutputWithContext(ctx context.Context) HttpDataPtrOutput {
	return o.ApplyT(func(v HttpData) *HttpData {
		return &v
	}).(HttpDataPtrOutput)
}

// Required. The URL that points to the file that stores the object list entries. This file must allow public access. Currently, only URLs with HTTP and HTTPS schemes are supported.
func (o HttpDataOutput) ListUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpData) *string { return v.ListUrl }).(pulumi.StringPtrOutput)
}

type HttpDataPtrOutput struct{ *pulumi.OutputState }

func (HttpDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpData)(nil)).Elem()
}

func (o HttpDataPtrOutput) ToHttpDataPtrOutput() HttpDataPtrOutput {
	return o
}

func (o HttpDataPtrOutput) ToHttpDataPtrOutputWithContext(ctx context.Context) HttpDataPtrOutput {
	return o
}

func (o HttpDataPtrOutput) Elem() HttpDataOutput {
	return o.ApplyT(func(v *HttpData) HttpData { return *v }).(HttpDataOutput)
}

// Required. The URL that points to the file that stores the object list entries. This file must allow public access. Currently, only URLs with HTTP and HTTPS schemes are supported.
func (o HttpDataPtrOutput) ListUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpData) *string {
		if v == nil {
			return nil
		}
		return v.ListUrl
	}).(pulumi.StringPtrOutput)
}

// Specification to configure notifications published to Cloud Pub/Sub. Notifications will be published to the customer-provided topic using the following `PubsubMessage.attributes`: * `"eventType"`: one of the EventType values * `"payloadFormat"`: one of the PayloadFormat values * `"projectId"`: the project_id of the `TransferOperation` * `"transferJobName"`: the transfer_job_name of the `TransferOperation` * `"transferOperationName"`: the name of the `TransferOperation` The `PubsubMessage.data` will contain a TransferOperation resource formatted according to the specified `PayloadFormat`.
type NotificationConfig struct {
	// Event types for which a notification is desired. If empty, send notifications for all event types.
	EventTypes []string `pulumi:"eventTypes"`
	// Required. The desired format of the notification message payloads.
	PayloadFormat *string `pulumi:"payloadFormat"`
	// Required. The `Topic.name` of the Cloud Pub/Sub topic to which to publish notifications. Must be of the format: `projects/{project}/topics/{topic}`. Not matching this format will result in an INVALID_ARGUMENT error.
	PubsubTopic *string `pulumi:"pubsubTopic"`
}

// NotificationConfigInput is an input type that accepts NotificationConfigArgs and NotificationConfigOutput values.
// You can construct a concrete instance of `NotificationConfigInput` via:
//
//          NotificationConfigArgs{...}
type NotificationConfigInput interface {
	pulumi.Input

	ToNotificationConfigOutput() NotificationConfigOutput
	ToNotificationConfigOutputWithContext(context.Context) NotificationConfigOutput
}

// Specification to configure notifications published to Cloud Pub/Sub. Notifications will be published to the customer-provided topic using the following `PubsubMessage.attributes`: * `"eventType"`: one of the EventType values * `"payloadFormat"`: one of the PayloadFormat values * `"projectId"`: the project_id of the `TransferOperation` * `"transferJobName"`: the transfer_job_name of the `TransferOperation` * `"transferOperationName"`: the name of the `TransferOperation` The `PubsubMessage.data` will contain a TransferOperation resource formatted according to the specified `PayloadFormat`.
type NotificationConfigArgs struct {
	// Event types for which a notification is desired. If empty, send notifications for all event types.
	EventTypes pulumi.StringArrayInput `pulumi:"eventTypes"`
	// Required. The desired format of the notification message payloads.
	PayloadFormat pulumi.StringPtrInput `pulumi:"payloadFormat"`
	// Required. The `Topic.name` of the Cloud Pub/Sub topic to which to publish notifications. Must be of the format: `projects/{project}/topics/{topic}`. Not matching this format will result in an INVALID_ARGUMENT error.
	PubsubTopic pulumi.StringPtrInput `pulumi:"pubsubTopic"`
}

func (NotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationConfig)(nil)).Elem()
}

func (i NotificationConfigArgs) ToNotificationConfigOutput() NotificationConfigOutput {
	return i.ToNotificationConfigOutputWithContext(context.Background())
}

func (i NotificationConfigArgs) ToNotificationConfigOutputWithContext(ctx context.Context) NotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigOutput)
}

func (i NotificationConfigArgs) ToNotificationConfigPtrOutput() NotificationConfigPtrOutput {
	return i.ToNotificationConfigPtrOutputWithContext(context.Background())
}

func (i NotificationConfigArgs) ToNotificationConfigPtrOutputWithContext(ctx context.Context) NotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigOutput).ToNotificationConfigPtrOutputWithContext(ctx)
}

// NotificationConfigPtrInput is an input type that accepts NotificationConfigArgs, NotificationConfigPtr and NotificationConfigPtrOutput values.
// You can construct a concrete instance of `NotificationConfigPtrInput` via:
//
//          NotificationConfigArgs{...}
//
//  or:
//
//          nil
type NotificationConfigPtrInput interface {
	pulumi.Input

	ToNotificationConfigPtrOutput() NotificationConfigPtrOutput
	ToNotificationConfigPtrOutputWithContext(context.Context) NotificationConfigPtrOutput
}

type notificationConfigPtrType NotificationConfigArgs

func NotificationConfigPtr(v *NotificationConfigArgs) NotificationConfigPtrInput {
	return (*notificationConfigPtrType)(v)
}

func (*notificationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationConfig)(nil)).Elem()
}

func (i *notificationConfigPtrType) ToNotificationConfigPtrOutput() NotificationConfigPtrOutput {
	return i.ToNotificationConfigPtrOutputWithContext(context.Background())
}

func (i *notificationConfigPtrType) ToNotificationConfigPtrOutputWithContext(ctx context.Context) NotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigPtrOutput)
}

// Specification to configure notifications published to Cloud Pub/Sub. Notifications will be published to the customer-provided topic using the following `PubsubMessage.attributes`: * `"eventType"`: one of the EventType values * `"payloadFormat"`: one of the PayloadFormat values * `"projectId"`: the project_id of the `TransferOperation` * `"transferJobName"`: the transfer_job_name of the `TransferOperation` * `"transferOperationName"`: the name of the `TransferOperation` The `PubsubMessage.data` will contain a TransferOperation resource formatted according to the specified `PayloadFormat`.
type NotificationConfigOutput struct{ *pulumi.OutputState }

func (NotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationConfig)(nil)).Elem()
}

func (o NotificationConfigOutput) ToNotificationConfigOutput() NotificationConfigOutput {
	return o
}

func (o NotificationConfigOutput) ToNotificationConfigOutputWithContext(ctx context.Context) NotificationConfigOutput {
	return o
}

func (o NotificationConfigOutput) ToNotificationConfigPtrOutput() NotificationConfigPtrOutput {
	return o.ToNotificationConfigPtrOutputWithContext(context.Background())
}

func (o NotificationConfigOutput) ToNotificationConfigPtrOutputWithContext(ctx context.Context) NotificationConfigPtrOutput {
	return o.ApplyT(func(v NotificationConfig) *NotificationConfig {
		return &v
	}).(NotificationConfigPtrOutput)
}

// Event types for which a notification is desired. If empty, send notifications for all event types.
func (o NotificationConfigOutput) EventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationConfig) []string { return v.EventTypes }).(pulumi.StringArrayOutput)
}

// Required. The desired format of the notification message payloads.
func (o NotificationConfigOutput) PayloadFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationConfig) *string { return v.PayloadFormat }).(pulumi.StringPtrOutput)
}

// Required. The `Topic.name` of the Cloud Pub/Sub topic to which to publish notifications. Must be of the format: `projects/{project}/topics/{topic}`. Not matching this format will result in an INVALID_ARGUMENT error.
func (o NotificationConfigOutput) PubsubTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationConfig) *string { return v.PubsubTopic }).(pulumi.StringPtrOutput)
}

type NotificationConfigPtrOutput struct{ *pulumi.OutputState }

func (NotificationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationConfig)(nil)).Elem()
}

func (o NotificationConfigPtrOutput) ToNotificationConfigPtrOutput() NotificationConfigPtrOutput {
	return o
}

func (o NotificationConfigPtrOutput) ToNotificationConfigPtrOutputWithContext(ctx context.Context) NotificationConfigPtrOutput {
	return o
}

func (o NotificationConfigPtrOutput) Elem() NotificationConfigOutput {
	return o.ApplyT(func(v *NotificationConfig) NotificationConfig { return *v }).(NotificationConfigOutput)
}

// Event types for which a notification is desired. If empty, send notifications for all event types.
func (o NotificationConfigPtrOutput) EventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NotificationConfig) []string {
		if v == nil {
			return nil
		}
		return v.EventTypes
	}).(pulumi.StringArrayOutput)
}

// Required. The desired format of the notification message payloads.
func (o NotificationConfigPtrOutput) PayloadFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationConfig) *string {
		if v == nil {
			return nil
		}
		return v.PayloadFormat
	}).(pulumi.StringPtrOutput)
}

// Required. The `Topic.name` of the Cloud Pub/Sub topic to which to publish notifications. Must be of the format: `projects/{project}/topics/{topic}`. Not matching this format will result in an INVALID_ARGUMENT error.
func (o NotificationConfigPtrOutput) PubsubTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationConfig) *string {
		if v == nil {
			return nil
		}
		return v.PubsubTopic
	}).(pulumi.StringPtrOutput)
}

// Conditions that determine which objects will be transferred. Applies only to Cloud Data Sources such as S3, Azure, and Cloud Storage. The "last modification time" refers to the time of the last change to the object's content or metadata — specifically, this is the `updated` property of Cloud Storage objects, the `LastModified` field of S3 objects, and the `Last-Modified` header of Azure blobs.
type ObjectConditions struct {
	// `exclude_prefixes` must follow the requirements described for include_prefixes. The max size of `exclude_prefixes` is 1000.
	ExcludePrefixes []string `pulumi:"excludePrefixes"`
	// If `include_prefixes` is specified, objects that satisfy the object conditions must have names that start with one of the `include_prefixes` and that do not start with any of the exclude_prefixes. If `include_prefixes` is not specified, all objects except those that have names starting with one of the `exclude_prefixes` must satisfy the object conditions. Requirements: * Each include-prefix and exclude-prefix can contain any sequence of Unicode characters, to a max length of 1024 bytes when UTF8-encoded, and must not contain Carriage Return or Line Feed characters. Wildcard matching and regular expression matching are not supported. * Each include-prefix and exclude-prefix must omit the leading slash. For example, to include the `requests.gz` object in a transfer from `s3://my-aws-bucket/logs/y=2015/requests.gz`, specify the include prefix as `logs/y=2015/requests.gz`. * None of the include-prefix or the exclude-prefix values can be empty, if specified. * Each include-prefix must include a distinct portion of the object namespace. No include-prefix may be a prefix of another include-prefix. * Each exclude-prefix must exclude a distinct portion of the object namespace. No exclude-prefix may be a prefix of another exclude-prefix. * If `include_prefixes` is specified, then each exclude-prefix must start with the value of a path explicitly included by `include_prefixes`. The max size of `include_prefixes` is 1000.
	IncludePrefixes []string `pulumi:"includePrefixes"`
	// If specified, only objects with a "last modification time" before this timestamp and objects that don't have a "last modification time" will be transferred.
	LastModifiedBefore *string `pulumi:"lastModifiedBefore"`
	// If specified, only objects with a "last modification time" on or after this timestamp and objects that don't have a "last modification time" are transferred. The `last_modified_since` and `last_modified_before` fields can be used together for chunked data processing. For example, consider a script that processes each day's worth of data at a time. For that you'd set each of the fields as follows: * `last_modified_since` to the start of the day * `last_modified_before` to the end of the day
	LastModifiedSince *string `pulumi:"lastModifiedSince"`
	// If specified, only objects with a "last modification time" on or after `NOW` - `max_time_elapsed_since_last_modification` and objects that don't have a "last modification time" are transferred. For each TransferOperation started by this TransferJob, `NOW` refers to the start_time of the `TransferOperation`.
	MaxTimeElapsedSinceLastModification *string `pulumi:"maxTimeElapsedSinceLastModification"`
	// If specified, only objects with a "last modification time" before `NOW` - `min_time_elapsed_since_last_modification` and objects that don't have a "last modification time" are transferred. For each TransferOperation started by this TransferJob, `NOW` refers to the start_time of the `TransferOperation`.
	MinTimeElapsedSinceLastModification *string `pulumi:"minTimeElapsedSinceLastModification"`
}

// ObjectConditionsInput is an input type that accepts ObjectConditionsArgs and ObjectConditionsOutput values.
// You can construct a concrete instance of `ObjectConditionsInput` via:
//
//          ObjectConditionsArgs{...}
type ObjectConditionsInput interface {
	pulumi.Input

	ToObjectConditionsOutput() ObjectConditionsOutput
	ToObjectConditionsOutputWithContext(context.Context) ObjectConditionsOutput
}

// Conditions that determine which objects will be transferred. Applies only to Cloud Data Sources such as S3, Azure, and Cloud Storage. The "last modification time" refers to the time of the last change to the object's content or metadata — specifically, this is the `updated` property of Cloud Storage objects, the `LastModified` field of S3 objects, and the `Last-Modified` header of Azure blobs.
type ObjectConditionsArgs struct {
	// `exclude_prefixes` must follow the requirements described for include_prefixes. The max size of `exclude_prefixes` is 1000.
	ExcludePrefixes pulumi.StringArrayInput `pulumi:"excludePrefixes"`
	// If `include_prefixes` is specified, objects that satisfy the object conditions must have names that start with one of the `include_prefixes` and that do not start with any of the exclude_prefixes. If `include_prefixes` is not specified, all objects except those that have names starting with one of the `exclude_prefixes` must satisfy the object conditions. Requirements: * Each include-prefix and exclude-prefix can contain any sequence of Unicode characters, to a max length of 1024 bytes when UTF8-encoded, and must not contain Carriage Return or Line Feed characters. Wildcard matching and regular expression matching are not supported. * Each include-prefix and exclude-prefix must omit the leading slash. For example, to include the `requests.gz` object in a transfer from `s3://my-aws-bucket/logs/y=2015/requests.gz`, specify the include prefix as `logs/y=2015/requests.gz`. * None of the include-prefix or the exclude-prefix values can be empty, if specified. * Each include-prefix must include a distinct portion of the object namespace. No include-prefix may be a prefix of another include-prefix. * Each exclude-prefix must exclude a distinct portion of the object namespace. No exclude-prefix may be a prefix of another exclude-prefix. * If `include_prefixes` is specified, then each exclude-prefix must start with the value of a path explicitly included by `include_prefixes`. The max size of `include_prefixes` is 1000.
	IncludePrefixes pulumi.StringArrayInput `pulumi:"includePrefixes"`
	// If specified, only objects with a "last modification time" before this timestamp and objects that don't have a "last modification time" will be transferred.
	LastModifiedBefore pulumi.StringPtrInput `pulumi:"lastModifiedBefore"`
	// If specified, only objects with a "last modification time" on or after this timestamp and objects that don't have a "last modification time" are transferred. The `last_modified_since` and `last_modified_before` fields can be used together for chunked data processing. For example, consider a script that processes each day's worth of data at a time. For that you'd set each of the fields as follows: * `last_modified_since` to the start of the day * `last_modified_before` to the end of the day
	LastModifiedSince pulumi.StringPtrInput `pulumi:"lastModifiedSince"`
	// If specified, only objects with a "last modification time" on or after `NOW` - `max_time_elapsed_since_last_modification` and objects that don't have a "last modification time" are transferred. For each TransferOperation started by this TransferJob, `NOW` refers to the start_time of the `TransferOperation`.
	MaxTimeElapsedSinceLastModification pulumi.StringPtrInput `pulumi:"maxTimeElapsedSinceLastModification"`
	// If specified, only objects with a "last modification time" before `NOW` - `min_time_elapsed_since_last_modification` and objects that don't have a "last modification time" are transferred. For each TransferOperation started by this TransferJob, `NOW` refers to the start_time of the `TransferOperation`.
	MinTimeElapsedSinceLastModification pulumi.StringPtrInput `pulumi:"minTimeElapsedSinceLastModification"`
}

func (ObjectConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectConditions)(nil)).Elem()
}

func (i ObjectConditionsArgs) ToObjectConditionsOutput() ObjectConditionsOutput {
	return i.ToObjectConditionsOutputWithContext(context.Background())
}

func (i ObjectConditionsArgs) ToObjectConditionsOutputWithContext(ctx context.Context) ObjectConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectConditionsOutput)
}

func (i ObjectConditionsArgs) ToObjectConditionsPtrOutput() ObjectConditionsPtrOutput {
	return i.ToObjectConditionsPtrOutputWithContext(context.Background())
}

func (i ObjectConditionsArgs) ToObjectConditionsPtrOutputWithContext(ctx context.Context) ObjectConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectConditionsOutput).ToObjectConditionsPtrOutputWithContext(ctx)
}

// ObjectConditionsPtrInput is an input type that accepts ObjectConditionsArgs, ObjectConditionsPtr and ObjectConditionsPtrOutput values.
// You can construct a concrete instance of `ObjectConditionsPtrInput` via:
//
//          ObjectConditionsArgs{...}
//
//  or:
//
//          nil
type ObjectConditionsPtrInput interface {
	pulumi.Input

	ToObjectConditionsPtrOutput() ObjectConditionsPtrOutput
	ToObjectConditionsPtrOutputWithContext(context.Context) ObjectConditionsPtrOutput
}

type objectConditionsPtrType ObjectConditionsArgs

func ObjectConditionsPtr(v *ObjectConditionsArgs) ObjectConditionsPtrInput {
	return (*objectConditionsPtrType)(v)
}

func (*objectConditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectConditions)(nil)).Elem()
}

func (i *objectConditionsPtrType) ToObjectConditionsPtrOutput() ObjectConditionsPtrOutput {
	return i.ToObjectConditionsPtrOutputWithContext(context.Background())
}

func (i *objectConditionsPtrType) ToObjectConditionsPtrOutputWithContext(ctx context.Context) ObjectConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectConditionsPtrOutput)
}

// Conditions that determine which objects will be transferred. Applies only to Cloud Data Sources such as S3, Azure, and Cloud Storage. The "last modification time" refers to the time of the last change to the object's content or metadata — specifically, this is the `updated` property of Cloud Storage objects, the `LastModified` field of S3 objects, and the `Last-Modified` header of Azure blobs.
type ObjectConditionsOutput struct{ *pulumi.OutputState }

func (ObjectConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectConditions)(nil)).Elem()
}

func (o ObjectConditionsOutput) ToObjectConditionsOutput() ObjectConditionsOutput {
	return o
}

func (o ObjectConditionsOutput) ToObjectConditionsOutputWithContext(ctx context.Context) ObjectConditionsOutput {
	return o
}

func (o ObjectConditionsOutput) ToObjectConditionsPtrOutput() ObjectConditionsPtrOutput {
	return o.ToObjectConditionsPtrOutputWithContext(context.Background())
}

func (o ObjectConditionsOutput) ToObjectConditionsPtrOutputWithContext(ctx context.Context) ObjectConditionsPtrOutput {
	return o.ApplyT(func(v ObjectConditions) *ObjectConditions {
		return &v
	}).(ObjectConditionsPtrOutput)
}

// `exclude_prefixes` must follow the requirements described for include_prefixes. The max size of `exclude_prefixes` is 1000.
func (o ObjectConditionsOutput) ExcludePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ObjectConditions) []string { return v.ExcludePrefixes }).(pulumi.StringArrayOutput)
}

// If `include_prefixes` is specified, objects that satisfy the object conditions must have names that start with one of the `include_prefixes` and that do not start with any of the exclude_prefixes. If `include_prefixes` is not specified, all objects except those that have names starting with one of the `exclude_prefixes` must satisfy the object conditions. Requirements: * Each include-prefix and exclude-prefix can contain any sequence of Unicode characters, to a max length of 1024 bytes when UTF8-encoded, and must not contain Carriage Return or Line Feed characters. Wildcard matching and regular expression matching are not supported. * Each include-prefix and exclude-prefix must omit the leading slash. For example, to include the `requests.gz` object in a transfer from `s3://my-aws-bucket/logs/y=2015/requests.gz`, specify the include prefix as `logs/y=2015/requests.gz`. * None of the include-prefix or the exclude-prefix values can be empty, if specified. * Each include-prefix must include a distinct portion of the object namespace. No include-prefix may be a prefix of another include-prefix. * Each exclude-prefix must exclude a distinct portion of the object namespace. No exclude-prefix may be a prefix of another exclude-prefix. * If `include_prefixes` is specified, then each exclude-prefix must start with the value of a path explicitly included by `include_prefixes`. The max size of `include_prefixes` is 1000.
func (o ObjectConditionsOutput) IncludePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ObjectConditions) []string { return v.IncludePrefixes }).(pulumi.StringArrayOutput)
}

// If specified, only objects with a "last modification time" before this timestamp and objects that don't have a "last modification time" will be transferred.
func (o ObjectConditionsOutput) LastModifiedBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectConditions) *string { return v.LastModifiedBefore }).(pulumi.StringPtrOutput)
}

// If specified, only objects with a "last modification time" on or after this timestamp and objects that don't have a "last modification time" are transferred. The `last_modified_since` and `last_modified_before` fields can be used together for chunked data processing. For example, consider a script that processes each day's worth of data at a time. For that you'd set each of the fields as follows: * `last_modified_since` to the start of the day * `last_modified_before` to the end of the day
func (o ObjectConditionsOutput) LastModifiedSince() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectConditions) *string { return v.LastModifiedSince }).(pulumi.StringPtrOutput)
}

// If specified, only objects with a "last modification time" on or after `NOW` - `max_time_elapsed_since_last_modification` and objects that don't have a "last modification time" are transferred. For each TransferOperation started by this TransferJob, `NOW` refers to the start_time of the `TransferOperation`.
func (o ObjectConditionsOutput) MaxTimeElapsedSinceLastModification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectConditions) *string { return v.MaxTimeElapsedSinceLastModification }).(pulumi.StringPtrOutput)
}

// If specified, only objects with a "last modification time" before `NOW` - `min_time_elapsed_since_last_modification` and objects that don't have a "last modification time" are transferred. For each TransferOperation started by this TransferJob, `NOW` refers to the start_time of the `TransferOperation`.
func (o ObjectConditionsOutput) MinTimeElapsedSinceLastModification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectConditions) *string { return v.MinTimeElapsedSinceLastModification }).(pulumi.StringPtrOutput)
}

type ObjectConditionsPtrOutput struct{ *pulumi.OutputState }

func (ObjectConditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectConditions)(nil)).Elem()
}

func (o ObjectConditionsPtrOutput) ToObjectConditionsPtrOutput() ObjectConditionsPtrOutput {
	return o
}

func (o ObjectConditionsPtrOutput) ToObjectConditionsPtrOutputWithContext(ctx context.Context) ObjectConditionsPtrOutput {
	return o
}

func (o ObjectConditionsPtrOutput) Elem() ObjectConditionsOutput {
	return o.ApplyT(func(v *ObjectConditions) ObjectConditions { return *v }).(ObjectConditionsOutput)
}

// `exclude_prefixes` must follow the requirements described for include_prefixes. The max size of `exclude_prefixes` is 1000.
func (o ObjectConditionsPtrOutput) ExcludePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ObjectConditions) []string {
		if v == nil {
			return nil
		}
		return v.ExcludePrefixes
	}).(pulumi.StringArrayOutput)
}

// If `include_prefixes` is specified, objects that satisfy the object conditions must have names that start with one of the `include_prefixes` and that do not start with any of the exclude_prefixes. If `include_prefixes` is not specified, all objects except those that have names starting with one of the `exclude_prefixes` must satisfy the object conditions. Requirements: * Each include-prefix and exclude-prefix can contain any sequence of Unicode characters, to a max length of 1024 bytes when UTF8-encoded, and must not contain Carriage Return or Line Feed characters. Wildcard matching and regular expression matching are not supported. * Each include-prefix and exclude-prefix must omit the leading slash. For example, to include the `requests.gz` object in a transfer from `s3://my-aws-bucket/logs/y=2015/requests.gz`, specify the include prefix as `logs/y=2015/requests.gz`. * None of the include-prefix or the exclude-prefix values can be empty, if specified. * Each include-prefix must include a distinct portion of the object namespace. No include-prefix may be a prefix of another include-prefix. * Each exclude-prefix must exclude a distinct portion of the object namespace. No exclude-prefix may be a prefix of another exclude-prefix. * If `include_prefixes` is specified, then each exclude-prefix must start with the value of a path explicitly included by `include_prefixes`. The max size of `include_prefixes` is 1000.
func (o ObjectConditionsPtrOutput) IncludePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ObjectConditions) []string {
		if v == nil {
			return nil
		}
		return v.IncludePrefixes
	}).(pulumi.StringArrayOutput)
}

// If specified, only objects with a "last modification time" before this timestamp and objects that don't have a "last modification time" will be transferred.
func (o ObjectConditionsPtrOutput) LastModifiedBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectConditions) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedBefore
	}).(pulumi.StringPtrOutput)
}

// If specified, only objects with a "last modification time" on or after this timestamp and objects that don't have a "last modification time" are transferred. The `last_modified_since` and `last_modified_before` fields can be used together for chunked data processing. For example, consider a script that processes each day's worth of data at a time. For that you'd set each of the fields as follows: * `last_modified_since` to the start of the day * `last_modified_before` to the end of the day
func (o ObjectConditionsPtrOutput) LastModifiedSince() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectConditions) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedSince
	}).(pulumi.StringPtrOutput)
}

// If specified, only objects with a "last modification time" on or after `NOW` - `max_time_elapsed_since_last_modification` and objects that don't have a "last modification time" are transferred. For each TransferOperation started by this TransferJob, `NOW` refers to the start_time of the `TransferOperation`.
func (o ObjectConditionsPtrOutput) MaxTimeElapsedSinceLastModification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectConditions) *string {
		if v == nil {
			return nil
		}
		return v.MaxTimeElapsedSinceLastModification
	}).(pulumi.StringPtrOutput)
}

// If specified, only objects with a "last modification time" before `NOW` - `min_time_elapsed_since_last_modification` and objects that don't have a "last modification time" are transferred. For each TransferOperation started by this TransferJob, `NOW` refers to the start_time of the `TransferOperation`.
func (o ObjectConditionsPtrOutput) MinTimeElapsedSinceLastModification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectConditions) *string {
		if v == nil {
			return nil
		}
		return v.MinTimeElapsedSinceLastModification
	}).(pulumi.StringPtrOutput)
}

// Transfers can be scheduled to recur or to run just once.
type Schedule struct {
	// The time in UTC that no further transfer operations are scheduled. Combined with schedule_end_date, `end_time_of_day` specifies the end date and time for starting new transfer operations. This field must be greater than or equal to the timestamp corresponding to the combintation of schedule_start_date and start_time_of_day, and is subject to the following: * If `end_time_of_day` is not set and `schedule_end_date` is set, then a default value of `23:59:59` is used for `end_time_of_day`. * If `end_time_of_day` is set and `schedule_end_date` is not set, then INVALID_ARGUMENT is returned.
	EndTimeOfDay *TimeOfDay `pulumi:"endTimeOfDay"`
	// Interval between the start of each scheduled TransferOperation. If unspecified, the default value is 24 hours. This value may not be less than 1 hour.
	RepeatInterval *string `pulumi:"repeatInterval"`
	// The last day a transfer runs. Date boundaries are determined relative to UTC time. A job will run once per 24 hours within the following guidelines: * If `schedule_end_date` and schedule_start_date are the same and in the future relative to UTC, the transfer is executed only one time. * If `schedule_end_date` is later than `schedule_start_date` and `schedule_end_date` is in the future relative to UTC, the job will run each day at start_time_of_day through `schedule_end_date`.
	ScheduleEndDate *Date `pulumi:"scheduleEndDate"`
	// Required. The start date of a transfer. Date boundaries are determined relative to UTC time. If `schedule_start_date` and start_time_of_day are in the past relative to the job's creation time, the transfer starts the day after you schedule the transfer request. **Note:** When starting jobs at or near midnight UTC it is possible that a job will start later than expected. For example, if you send an outbound request on June 1 one millisecond prior to midnight UTC and the Storage Transfer Service server receives the request on June 2, then it will create a TransferJob with `schedule_start_date` set to June 2 and a `start_time_of_day` set to midnight UTC. The first scheduled TransferOperation will take place on June 3 at midnight UTC.
	ScheduleStartDate *Date `pulumi:"scheduleStartDate"`
	// The time in UTC that a transfer job is scheduled to run. Transfers may start later than this time. If `start_time_of_day` is not specified: * One-time transfers run immediately. * Recurring transfers run immediately, and each day at midnight UTC, through schedule_end_date. If `start_time_of_day` is specified: * One-time transfers run at the specified time. * Recurring transfers run at the specified time each day, through `schedule_end_date`.
	StartTimeOfDay *TimeOfDay `pulumi:"startTimeOfDay"`
}

// ScheduleInput is an input type that accepts ScheduleArgs and ScheduleOutput values.
// You can construct a concrete instance of `ScheduleInput` via:
//
//          ScheduleArgs{...}
type ScheduleInput interface {
	pulumi.Input

	ToScheduleOutput() ScheduleOutput
	ToScheduleOutputWithContext(context.Context) ScheduleOutput
}

// Transfers can be scheduled to recur or to run just once.
type ScheduleArgs struct {
	// The time in UTC that no further transfer operations are scheduled. Combined with schedule_end_date, `end_time_of_day` specifies the end date and time for starting new transfer operations. This field must be greater than or equal to the timestamp corresponding to the combintation of schedule_start_date and start_time_of_day, and is subject to the following: * If `end_time_of_day` is not set and `schedule_end_date` is set, then a default value of `23:59:59` is used for `end_time_of_day`. * If `end_time_of_day` is set and `schedule_end_date` is not set, then INVALID_ARGUMENT is returned.
	EndTimeOfDay TimeOfDayPtrInput `pulumi:"endTimeOfDay"`
	// Interval between the start of each scheduled TransferOperation. If unspecified, the default value is 24 hours. This value may not be less than 1 hour.
	RepeatInterval pulumi.StringPtrInput `pulumi:"repeatInterval"`
	// The last day a transfer runs. Date boundaries are determined relative to UTC time. A job will run once per 24 hours within the following guidelines: * If `schedule_end_date` and schedule_start_date are the same and in the future relative to UTC, the transfer is executed only one time. * If `schedule_end_date` is later than `schedule_start_date` and `schedule_end_date` is in the future relative to UTC, the job will run each day at start_time_of_day through `schedule_end_date`.
	ScheduleEndDate DatePtrInput `pulumi:"scheduleEndDate"`
	// Required. The start date of a transfer. Date boundaries are determined relative to UTC time. If `schedule_start_date` and start_time_of_day are in the past relative to the job's creation time, the transfer starts the day after you schedule the transfer request. **Note:** When starting jobs at or near midnight UTC it is possible that a job will start later than expected. For example, if you send an outbound request on June 1 one millisecond prior to midnight UTC and the Storage Transfer Service server receives the request on June 2, then it will create a TransferJob with `schedule_start_date` set to June 2 and a `start_time_of_day` set to midnight UTC. The first scheduled TransferOperation will take place on June 3 at midnight UTC.
	ScheduleStartDate DatePtrInput `pulumi:"scheduleStartDate"`
	// The time in UTC that a transfer job is scheduled to run. Transfers may start later than this time. If `start_time_of_day` is not specified: * One-time transfers run immediately. * Recurring transfers run immediately, and each day at midnight UTC, through schedule_end_date. If `start_time_of_day` is specified: * One-time transfers run at the specified time. * Recurring transfers run at the specified time each day, through `schedule_end_date`.
	StartTimeOfDay TimeOfDayPtrInput `pulumi:"startTimeOfDay"`
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil)).Elem()
}

func (i ScheduleArgs) ToScheduleOutput() ScheduleOutput {
	return i.ToScheduleOutputWithContext(context.Background())
}

func (i ScheduleArgs) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput)
}

func (i ScheduleArgs) ToSchedulePtrOutput() SchedulePtrOutput {
	return i.ToSchedulePtrOutputWithContext(context.Background())
}

func (i ScheduleArgs) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput).ToSchedulePtrOutputWithContext(ctx)
}

// SchedulePtrInput is an input type that accepts ScheduleArgs, SchedulePtr and SchedulePtrOutput values.
// You can construct a concrete instance of `SchedulePtrInput` via:
//
//          ScheduleArgs{...}
//
//  or:
//
//          nil
type SchedulePtrInput interface {
	pulumi.Input

	ToSchedulePtrOutput() SchedulePtrOutput
	ToSchedulePtrOutputWithContext(context.Context) SchedulePtrOutput
}

type schedulePtrType ScheduleArgs

func SchedulePtr(v *ScheduleArgs) SchedulePtrInput {
	return (*schedulePtrType)(v)
}

func (*schedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (i *schedulePtrType) ToSchedulePtrOutput() SchedulePtrOutput {
	return i.ToSchedulePtrOutputWithContext(context.Background())
}

func (i *schedulePtrType) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulePtrOutput)
}

// Transfers can be scheduled to recur or to run just once.
type ScheduleOutput struct{ *pulumi.OutputState }

func (ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil)).Elem()
}

func (o ScheduleOutput) ToScheduleOutput() ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToSchedulePtrOutput() SchedulePtrOutput {
	return o.ToSchedulePtrOutputWithContext(context.Background())
}

func (o ScheduleOutput) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return o.ApplyT(func(v Schedule) *Schedule {
		return &v
	}).(SchedulePtrOutput)
}

// The time in UTC that no further transfer operations are scheduled. Combined with schedule_end_date, `end_time_of_day` specifies the end date and time for starting new transfer operations. This field must be greater than or equal to the timestamp corresponding to the combintation of schedule_start_date and start_time_of_day, and is subject to the following: * If `end_time_of_day` is not set and `schedule_end_date` is set, then a default value of `23:59:59` is used for `end_time_of_day`. * If `end_time_of_day` is set and `schedule_end_date` is not set, then INVALID_ARGUMENT is returned.
func (o ScheduleOutput) EndTimeOfDay() TimeOfDayPtrOutput {
	return o.ApplyT(func(v Schedule) *TimeOfDay { return v.EndTimeOfDay }).(TimeOfDayPtrOutput)
}

// Interval between the start of each scheduled TransferOperation. If unspecified, the default value is 24 hours. This value may not be less than 1 hour.
func (o ScheduleOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Schedule) *string { return v.RepeatInterval }).(pulumi.StringPtrOutput)
}

// The last day a transfer runs. Date boundaries are determined relative to UTC time. A job will run once per 24 hours within the following guidelines: * If `schedule_end_date` and schedule_start_date are the same and in the future relative to UTC, the transfer is executed only one time. * If `schedule_end_date` is later than `schedule_start_date` and `schedule_end_date` is in the future relative to UTC, the job will run each day at start_time_of_day through `schedule_end_date`.
func (o ScheduleOutput) ScheduleEndDate() DatePtrOutput {
	return o.ApplyT(func(v Schedule) *Date { return v.ScheduleEndDate }).(DatePtrOutput)
}

// Required. The start date of a transfer. Date boundaries are determined relative to UTC time. If `schedule_start_date` and start_time_of_day are in the past relative to the job's creation time, the transfer starts the day after you schedule the transfer request. **Note:** When starting jobs at or near midnight UTC it is possible that a job will start later than expected. For example, if you send an outbound request on June 1 one millisecond prior to midnight UTC and the Storage Transfer Service server receives the request on June 2, then it will create a TransferJob with `schedule_start_date` set to June 2 and a `start_time_of_day` set to midnight UTC. The first scheduled TransferOperation will take place on June 3 at midnight UTC.
func (o ScheduleOutput) ScheduleStartDate() DatePtrOutput {
	return o.ApplyT(func(v Schedule) *Date { return v.ScheduleStartDate }).(DatePtrOutput)
}

// The time in UTC that a transfer job is scheduled to run. Transfers may start later than this time. If `start_time_of_day` is not specified: * One-time transfers run immediately. * Recurring transfers run immediately, and each day at midnight UTC, through schedule_end_date. If `start_time_of_day` is specified: * One-time transfers run at the specified time. * Recurring transfers run at the specified time each day, through `schedule_end_date`.
func (o ScheduleOutput) StartTimeOfDay() TimeOfDayPtrOutput {
	return o.ApplyT(func(v Schedule) *TimeOfDay { return v.StartTimeOfDay }).(TimeOfDayPtrOutput)
}

type SchedulePtrOutput struct{ *pulumi.OutputState }

func (SchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (o SchedulePtrOutput) ToSchedulePtrOutput() SchedulePtrOutput {
	return o
}

func (o SchedulePtrOutput) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return o
}

func (o SchedulePtrOutput) Elem() ScheduleOutput {
	return o.ApplyT(func(v *Schedule) Schedule { return *v }).(ScheduleOutput)
}

// The time in UTC that no further transfer operations are scheduled. Combined with schedule_end_date, `end_time_of_day` specifies the end date and time for starting new transfer operations. This field must be greater than or equal to the timestamp corresponding to the combintation of schedule_start_date and start_time_of_day, and is subject to the following: * If `end_time_of_day` is not set and `schedule_end_date` is set, then a default value of `23:59:59` is used for `end_time_of_day`. * If `end_time_of_day` is set and `schedule_end_date` is not set, then INVALID_ARGUMENT is returned.
func (o SchedulePtrOutput) EndTimeOfDay() TimeOfDayPtrOutput {
	return o.ApplyT(func(v *Schedule) *TimeOfDay {
		if v == nil {
			return nil
		}
		return v.EndTimeOfDay
	}).(TimeOfDayPtrOutput)
}

// Interval between the start of each scheduled TransferOperation. If unspecified, the default value is 24 hours. This value may not be less than 1 hour.
func (o SchedulePtrOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schedule) *string {
		if v == nil {
			return nil
		}
		return v.RepeatInterval
	}).(pulumi.StringPtrOutput)
}

// The last day a transfer runs. Date boundaries are determined relative to UTC time. A job will run once per 24 hours within the following guidelines: * If `schedule_end_date` and schedule_start_date are the same and in the future relative to UTC, the transfer is executed only one time. * If `schedule_end_date` is later than `schedule_start_date` and `schedule_end_date` is in the future relative to UTC, the job will run each day at start_time_of_day through `schedule_end_date`.
func (o SchedulePtrOutput) ScheduleEndDate() DatePtrOutput {
	return o.ApplyT(func(v *Schedule) *Date {
		if v == nil {
			return nil
		}
		return v.ScheduleEndDate
	}).(DatePtrOutput)
}

// Required. The start date of a transfer. Date boundaries are determined relative to UTC time. If `schedule_start_date` and start_time_of_day are in the past relative to the job's creation time, the transfer starts the day after you schedule the transfer request. **Note:** When starting jobs at or near midnight UTC it is possible that a job will start later than expected. For example, if you send an outbound request on June 1 one millisecond prior to midnight UTC and the Storage Transfer Service server receives the request on June 2, then it will create a TransferJob with `schedule_start_date` set to June 2 and a `start_time_of_day` set to midnight UTC. The first scheduled TransferOperation will take place on June 3 at midnight UTC.
func (o SchedulePtrOutput) ScheduleStartDate() DatePtrOutput {
	return o.ApplyT(func(v *Schedule) *Date {
		if v == nil {
			return nil
		}
		return v.ScheduleStartDate
	}).(DatePtrOutput)
}

// The time in UTC that a transfer job is scheduled to run. Transfers may start later than this time. If `start_time_of_day` is not specified: * One-time transfers run immediately. * Recurring transfers run immediately, and each day at midnight UTC, through schedule_end_date. If `start_time_of_day` is specified: * One-time transfers run at the specified time. * Recurring transfers run at the specified time each day, through `schedule_end_date`.
func (o SchedulePtrOutput) StartTimeOfDay() TimeOfDayPtrOutput {
	return o.ApplyT(func(v *Schedule) *TimeOfDay {
		if v == nil {
			return nil
		}
		return v.StartTimeOfDay
	}).(TimeOfDayPtrOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDay struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours *int `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes *int `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos *int `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds *int `pulumi:"seconds"`
}

// TimeOfDayInput is an input type that accepts TimeOfDayArgs and TimeOfDayOutput values.
// You can construct a concrete instance of `TimeOfDayInput` via:
//
//          TimeOfDayArgs{...}
type TimeOfDayInput interface {
	pulumi.Input

	ToTimeOfDayOutput() TimeOfDayOutput
	ToTimeOfDayOutputWithContext(context.Context) TimeOfDayOutput
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayArgs struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours pulumi.IntPtrInput `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes pulumi.IntPtrInput `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds pulumi.IntPtrInput `pulumi:"seconds"`
}

func (TimeOfDayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDay)(nil)).Elem()
}

func (i TimeOfDayArgs) ToTimeOfDayOutput() TimeOfDayOutput {
	return i.ToTimeOfDayOutputWithContext(context.Background())
}

func (i TimeOfDayArgs) ToTimeOfDayOutputWithContext(ctx context.Context) TimeOfDayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOfDayOutput)
}

func (i TimeOfDayArgs) ToTimeOfDayPtrOutput() TimeOfDayPtrOutput {
	return i.ToTimeOfDayPtrOutputWithContext(context.Background())
}

func (i TimeOfDayArgs) ToTimeOfDayPtrOutputWithContext(ctx context.Context) TimeOfDayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOfDayOutput).ToTimeOfDayPtrOutputWithContext(ctx)
}

// TimeOfDayPtrInput is an input type that accepts TimeOfDayArgs, TimeOfDayPtr and TimeOfDayPtrOutput values.
// You can construct a concrete instance of `TimeOfDayPtrInput` via:
//
//          TimeOfDayArgs{...}
//
//  or:
//
//          nil
type TimeOfDayPtrInput interface {
	pulumi.Input

	ToTimeOfDayPtrOutput() TimeOfDayPtrOutput
	ToTimeOfDayPtrOutputWithContext(context.Context) TimeOfDayPtrOutput
}

type timeOfDayPtrType TimeOfDayArgs

func TimeOfDayPtr(v *TimeOfDayArgs) TimeOfDayPtrInput {
	return (*timeOfDayPtrType)(v)
}

func (*timeOfDayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeOfDay)(nil)).Elem()
}

func (i *timeOfDayPtrType) ToTimeOfDayPtrOutput() TimeOfDayPtrOutput {
	return i.ToTimeOfDayPtrOutputWithContext(context.Background())
}

func (i *timeOfDayPtrType) ToTimeOfDayPtrOutputWithContext(ctx context.Context) TimeOfDayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOfDayPtrOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayOutput struct{ *pulumi.OutputState }

func (TimeOfDayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDay)(nil)).Elem()
}

func (o TimeOfDayOutput) ToTimeOfDayOutput() TimeOfDayOutput {
	return o
}

func (o TimeOfDayOutput) ToTimeOfDayOutputWithContext(ctx context.Context) TimeOfDayOutput {
	return o
}

func (o TimeOfDayOutput) ToTimeOfDayPtrOutput() TimeOfDayPtrOutput {
	return o.ToTimeOfDayPtrOutputWithContext(context.Background())
}

func (o TimeOfDayOutput) ToTimeOfDayPtrOutputWithContext(ctx context.Context) TimeOfDayPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *TimeOfDay {
		return &v
	}).(TimeOfDayPtrOutput)
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o TimeOfDayOutput) Hours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Hours }).(pulumi.IntPtrOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o TimeOfDayOutput) Minutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Minutes }).(pulumi.IntPtrOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o TimeOfDayOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o TimeOfDayOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Seconds }).(pulumi.IntPtrOutput)
}

type TimeOfDayPtrOutput struct{ *pulumi.OutputState }

func (TimeOfDayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeOfDay)(nil)).Elem()
}

func (o TimeOfDayPtrOutput) ToTimeOfDayPtrOutput() TimeOfDayPtrOutput {
	return o
}

func (o TimeOfDayPtrOutput) ToTimeOfDayPtrOutputWithContext(ctx context.Context) TimeOfDayPtrOutput {
	return o
}

func (o TimeOfDayPtrOutput) Elem() TimeOfDayOutput {
	return o.ApplyT(func(v *TimeOfDay) TimeOfDay { return *v }).(TimeOfDayOutput)
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o TimeOfDayPtrOutput) Hours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOfDay) *int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntPtrOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o TimeOfDayPtrOutput) Minutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOfDay) *int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntPtrOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o TimeOfDayPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOfDay) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o TimeOfDayPtrOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOfDay) *int {
		if v == nil {
			return nil
		}
		return v.Seconds
	}).(pulumi.IntPtrOutput)
}

// TransferOptions define the actions to be performed on objects in a transfer.
type TransferOptions struct {
	// Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.
	DeleteObjectsFromSourceAfterTransfer *bool `pulumi:"deleteObjectsFromSourceAfterTransfer"`
	// Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.
	DeleteObjectsUniqueInSink *bool `pulumi:"deleteObjectsUniqueInSink"`
	// When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source will be overwritten with the source object.
	OverwriteObjectsAlreadyExistingInSink *bool `pulumi:"overwriteObjectsAlreadyExistingInSink"`
}

// TransferOptionsInput is an input type that accepts TransferOptionsArgs and TransferOptionsOutput values.
// You can construct a concrete instance of `TransferOptionsInput` via:
//
//          TransferOptionsArgs{...}
type TransferOptionsInput interface {
	pulumi.Input

	ToTransferOptionsOutput() TransferOptionsOutput
	ToTransferOptionsOutputWithContext(context.Context) TransferOptionsOutput
}

// TransferOptions define the actions to be performed on objects in a transfer.
type TransferOptionsArgs struct {
	// Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.
	DeleteObjectsFromSourceAfterTransfer pulumi.BoolPtrInput `pulumi:"deleteObjectsFromSourceAfterTransfer"`
	// Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.
	DeleteObjectsUniqueInSink pulumi.BoolPtrInput `pulumi:"deleteObjectsUniqueInSink"`
	// When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source will be overwritten with the source object.
	OverwriteObjectsAlreadyExistingInSink pulumi.BoolPtrInput `pulumi:"overwriteObjectsAlreadyExistingInSink"`
}

func (TransferOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransferOptions)(nil)).Elem()
}

func (i TransferOptionsArgs) ToTransferOptionsOutput() TransferOptionsOutput {
	return i.ToTransferOptionsOutputWithContext(context.Background())
}

func (i TransferOptionsArgs) ToTransferOptionsOutputWithContext(ctx context.Context) TransferOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransferOptionsOutput)
}

func (i TransferOptionsArgs) ToTransferOptionsPtrOutput() TransferOptionsPtrOutput {
	return i.ToTransferOptionsPtrOutputWithContext(context.Background())
}

func (i TransferOptionsArgs) ToTransferOptionsPtrOutputWithContext(ctx context.Context) TransferOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransferOptionsOutput).ToTransferOptionsPtrOutputWithContext(ctx)
}

// TransferOptionsPtrInput is an input type that accepts TransferOptionsArgs, TransferOptionsPtr and TransferOptionsPtrOutput values.
// You can construct a concrete instance of `TransferOptionsPtrInput` via:
//
//          TransferOptionsArgs{...}
//
//  or:
//
//          nil
type TransferOptionsPtrInput interface {
	pulumi.Input

	ToTransferOptionsPtrOutput() TransferOptionsPtrOutput
	ToTransferOptionsPtrOutputWithContext(context.Context) TransferOptionsPtrOutput
}

type transferOptionsPtrType TransferOptionsArgs

func TransferOptionsPtr(v *TransferOptionsArgs) TransferOptionsPtrInput {
	return (*transferOptionsPtrType)(v)
}

func (*transferOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransferOptions)(nil)).Elem()
}

func (i *transferOptionsPtrType) ToTransferOptionsPtrOutput() TransferOptionsPtrOutput {
	return i.ToTransferOptionsPtrOutputWithContext(context.Background())
}

func (i *transferOptionsPtrType) ToTransferOptionsPtrOutputWithContext(ctx context.Context) TransferOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransferOptionsPtrOutput)
}

// TransferOptions define the actions to be performed on objects in a transfer.
type TransferOptionsOutput struct{ *pulumi.OutputState }

func (TransferOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransferOptions)(nil)).Elem()
}

func (o TransferOptionsOutput) ToTransferOptionsOutput() TransferOptionsOutput {
	return o
}

func (o TransferOptionsOutput) ToTransferOptionsOutputWithContext(ctx context.Context) TransferOptionsOutput {
	return o
}

func (o TransferOptionsOutput) ToTransferOptionsPtrOutput() TransferOptionsPtrOutput {
	return o.ToTransferOptionsPtrOutputWithContext(context.Background())
}

func (o TransferOptionsOutput) ToTransferOptionsPtrOutputWithContext(ctx context.Context) TransferOptionsPtrOutput {
	return o.ApplyT(func(v TransferOptions) *TransferOptions {
		return &v
	}).(TransferOptionsPtrOutput)
}

// Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.
func (o TransferOptionsOutput) DeleteObjectsFromSourceAfterTransfer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TransferOptions) *bool { return v.DeleteObjectsFromSourceAfterTransfer }).(pulumi.BoolPtrOutput)
}

// Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.
func (o TransferOptionsOutput) DeleteObjectsUniqueInSink() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TransferOptions) *bool { return v.DeleteObjectsUniqueInSink }).(pulumi.BoolPtrOutput)
}

// When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source will be overwritten with the source object.
func (o TransferOptionsOutput) OverwriteObjectsAlreadyExistingInSink() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TransferOptions) *bool { return v.OverwriteObjectsAlreadyExistingInSink }).(pulumi.BoolPtrOutput)
}

type TransferOptionsPtrOutput struct{ *pulumi.OutputState }

func (TransferOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransferOptions)(nil)).Elem()
}

func (o TransferOptionsPtrOutput) ToTransferOptionsPtrOutput() TransferOptionsPtrOutput {
	return o
}

func (o TransferOptionsPtrOutput) ToTransferOptionsPtrOutputWithContext(ctx context.Context) TransferOptionsPtrOutput {
	return o
}

func (o TransferOptionsPtrOutput) Elem() TransferOptionsOutput {
	return o.ApplyT(func(v *TransferOptions) TransferOptions { return *v }).(TransferOptionsOutput)
}

// Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.
func (o TransferOptionsPtrOutput) DeleteObjectsFromSourceAfterTransfer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TransferOptions) *bool {
		if v == nil {
			return nil
		}
		return v.DeleteObjectsFromSourceAfterTransfer
	}).(pulumi.BoolPtrOutput)
}

// Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.
func (o TransferOptionsPtrOutput) DeleteObjectsUniqueInSink() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TransferOptions) *bool {
		if v == nil {
			return nil
		}
		return v.DeleteObjectsUniqueInSink
	}).(pulumi.BoolPtrOutput)
}

// When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source will be overwritten with the source object.
func (o TransferOptionsPtrOutput) OverwriteObjectsAlreadyExistingInSink() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TransferOptions) *bool {
		if v == nil {
			return nil
		}
		return v.OverwriteObjectsAlreadyExistingInSink
	}).(pulumi.BoolPtrOutput)
}

// Configuration for running a transfer.
type TransferSpec struct {
	// An AWS S3 data source.
	AwsS3DataSource *AwsS3Data `pulumi:"awsS3DataSource"`
	// An Azure Blob Storage data source.
	AzureBlobStorageDataSource *AzureBlobStorageData `pulumi:"azureBlobStorageDataSource"`
	// A Cloud Storage data sink.
	GcsDataSink *GcsData `pulumi:"gcsDataSink"`
	// A Cloud Storage data source.
	GcsDataSource *GcsData `pulumi:"gcsDataSource"`
	// An HTTP URL data source.
	HttpDataSource *HttpData `pulumi:"httpDataSource"`
	// Only objects that satisfy these object conditions are included in the set of data source and data sink objects. Object conditions based on objects' "last modification time" do not exclude objects in a data sink.
	ObjectConditions *ObjectConditions `pulumi:"objectConditions"`
	// If the option delete_objects_unique_in_sink is `true` and time-based object conditions such as 'last modification time' are specified, the request fails with an INVALID_ARGUMENT error.
	TransferOptions *TransferOptions `pulumi:"transferOptions"`
}

// TransferSpecInput is an input type that accepts TransferSpecArgs and TransferSpecOutput values.
// You can construct a concrete instance of `TransferSpecInput` via:
//
//          TransferSpecArgs{...}
type TransferSpecInput interface {
	pulumi.Input

	ToTransferSpecOutput() TransferSpecOutput
	ToTransferSpecOutputWithContext(context.Context) TransferSpecOutput
}

// Configuration for running a transfer.
type TransferSpecArgs struct {
	// An AWS S3 data source.
	AwsS3DataSource AwsS3DataPtrInput `pulumi:"awsS3DataSource"`
	// An Azure Blob Storage data source.
	AzureBlobStorageDataSource AzureBlobStorageDataPtrInput `pulumi:"azureBlobStorageDataSource"`
	// A Cloud Storage data sink.
	GcsDataSink GcsDataPtrInput `pulumi:"gcsDataSink"`
	// A Cloud Storage data source.
	GcsDataSource GcsDataPtrInput `pulumi:"gcsDataSource"`
	// An HTTP URL data source.
	HttpDataSource HttpDataPtrInput `pulumi:"httpDataSource"`
	// Only objects that satisfy these object conditions are included in the set of data source and data sink objects. Object conditions based on objects' "last modification time" do not exclude objects in a data sink.
	ObjectConditions ObjectConditionsPtrInput `pulumi:"objectConditions"`
	// If the option delete_objects_unique_in_sink is `true` and time-based object conditions such as 'last modification time' are specified, the request fails with an INVALID_ARGUMENT error.
	TransferOptions TransferOptionsPtrInput `pulumi:"transferOptions"`
}

func (TransferSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransferSpec)(nil)).Elem()
}

func (i TransferSpecArgs) ToTransferSpecOutput() TransferSpecOutput {
	return i.ToTransferSpecOutputWithContext(context.Background())
}

func (i TransferSpecArgs) ToTransferSpecOutputWithContext(ctx context.Context) TransferSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransferSpecOutput)
}

func (i TransferSpecArgs) ToTransferSpecPtrOutput() TransferSpecPtrOutput {
	return i.ToTransferSpecPtrOutputWithContext(context.Background())
}

func (i TransferSpecArgs) ToTransferSpecPtrOutputWithContext(ctx context.Context) TransferSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransferSpecOutput).ToTransferSpecPtrOutputWithContext(ctx)
}

// TransferSpecPtrInput is an input type that accepts TransferSpecArgs, TransferSpecPtr and TransferSpecPtrOutput values.
// You can construct a concrete instance of `TransferSpecPtrInput` via:
//
//          TransferSpecArgs{...}
//
//  or:
//
//          nil
type TransferSpecPtrInput interface {
	pulumi.Input

	ToTransferSpecPtrOutput() TransferSpecPtrOutput
	ToTransferSpecPtrOutputWithContext(context.Context) TransferSpecPtrOutput
}

type transferSpecPtrType TransferSpecArgs

func TransferSpecPtr(v *TransferSpecArgs) TransferSpecPtrInput {
	return (*transferSpecPtrType)(v)
}

func (*transferSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransferSpec)(nil)).Elem()
}

func (i *transferSpecPtrType) ToTransferSpecPtrOutput() TransferSpecPtrOutput {
	return i.ToTransferSpecPtrOutputWithContext(context.Background())
}

func (i *transferSpecPtrType) ToTransferSpecPtrOutputWithContext(ctx context.Context) TransferSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransferSpecPtrOutput)
}

// Configuration for running a transfer.
type TransferSpecOutput struct{ *pulumi.OutputState }

func (TransferSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransferSpec)(nil)).Elem()
}

func (o TransferSpecOutput) ToTransferSpecOutput() TransferSpecOutput {
	return o
}

func (o TransferSpecOutput) ToTransferSpecOutputWithContext(ctx context.Context) TransferSpecOutput {
	return o
}

func (o TransferSpecOutput) ToTransferSpecPtrOutput() TransferSpecPtrOutput {
	return o.ToTransferSpecPtrOutputWithContext(context.Background())
}

func (o TransferSpecOutput) ToTransferSpecPtrOutputWithContext(ctx context.Context) TransferSpecPtrOutput {
	return o.ApplyT(func(v TransferSpec) *TransferSpec {
		return &v
	}).(TransferSpecPtrOutput)
}

// An AWS S3 data source.
func (o TransferSpecOutput) AwsS3DataSource() AwsS3DataPtrOutput {
	return o.ApplyT(func(v TransferSpec) *AwsS3Data { return v.AwsS3DataSource }).(AwsS3DataPtrOutput)
}

// An Azure Blob Storage data source.
func (o TransferSpecOutput) AzureBlobStorageDataSource() AzureBlobStorageDataPtrOutput {
	return o.ApplyT(func(v TransferSpec) *AzureBlobStorageData { return v.AzureBlobStorageDataSource }).(AzureBlobStorageDataPtrOutput)
}

// A Cloud Storage data sink.
func (o TransferSpecOutput) GcsDataSink() GcsDataPtrOutput {
	return o.ApplyT(func(v TransferSpec) *GcsData { return v.GcsDataSink }).(GcsDataPtrOutput)
}

// A Cloud Storage data source.
func (o TransferSpecOutput) GcsDataSource() GcsDataPtrOutput {
	return o.ApplyT(func(v TransferSpec) *GcsData { return v.GcsDataSource }).(GcsDataPtrOutput)
}

// An HTTP URL data source.
func (o TransferSpecOutput) HttpDataSource() HttpDataPtrOutput {
	return o.ApplyT(func(v TransferSpec) *HttpData { return v.HttpDataSource }).(HttpDataPtrOutput)
}

// Only objects that satisfy these object conditions are included in the set of data source and data sink objects. Object conditions based on objects' "last modification time" do not exclude objects in a data sink.
func (o TransferSpecOutput) ObjectConditions() ObjectConditionsPtrOutput {
	return o.ApplyT(func(v TransferSpec) *ObjectConditions { return v.ObjectConditions }).(ObjectConditionsPtrOutput)
}

// If the option delete_objects_unique_in_sink is `true` and time-based object conditions such as 'last modification time' are specified, the request fails with an INVALID_ARGUMENT error.
func (o TransferSpecOutput) TransferOptions() TransferOptionsPtrOutput {
	return o.ApplyT(func(v TransferSpec) *TransferOptions { return v.TransferOptions }).(TransferOptionsPtrOutput)
}

type TransferSpecPtrOutput struct{ *pulumi.OutputState }

func (TransferSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransferSpec)(nil)).Elem()
}

func (o TransferSpecPtrOutput) ToTransferSpecPtrOutput() TransferSpecPtrOutput {
	return o
}

func (o TransferSpecPtrOutput) ToTransferSpecPtrOutputWithContext(ctx context.Context) TransferSpecPtrOutput {
	return o
}

func (o TransferSpecPtrOutput) Elem() TransferSpecOutput {
	return o.ApplyT(func(v *TransferSpec) TransferSpec { return *v }).(TransferSpecOutput)
}

// An AWS S3 data source.
func (o TransferSpecPtrOutput) AwsS3DataSource() AwsS3DataPtrOutput {
	return o.ApplyT(func(v *TransferSpec) *AwsS3Data {
		if v == nil {
			return nil
		}
		return v.AwsS3DataSource
	}).(AwsS3DataPtrOutput)
}

// An Azure Blob Storage data source.
func (o TransferSpecPtrOutput) AzureBlobStorageDataSource() AzureBlobStorageDataPtrOutput {
	return o.ApplyT(func(v *TransferSpec) *AzureBlobStorageData {
		if v == nil {
			return nil
		}
		return v.AzureBlobStorageDataSource
	}).(AzureBlobStorageDataPtrOutput)
}

// A Cloud Storage data sink.
func (o TransferSpecPtrOutput) GcsDataSink() GcsDataPtrOutput {
	return o.ApplyT(func(v *TransferSpec) *GcsData {
		if v == nil {
			return nil
		}
		return v.GcsDataSink
	}).(GcsDataPtrOutput)
}

// A Cloud Storage data source.
func (o TransferSpecPtrOutput) GcsDataSource() GcsDataPtrOutput {
	return o.ApplyT(func(v *TransferSpec) *GcsData {
		if v == nil {
			return nil
		}
		return v.GcsDataSource
	}).(GcsDataPtrOutput)
}

// An HTTP URL data source.
func (o TransferSpecPtrOutput) HttpDataSource() HttpDataPtrOutput {
	return o.ApplyT(func(v *TransferSpec) *HttpData {
		if v == nil {
			return nil
		}
		return v.HttpDataSource
	}).(HttpDataPtrOutput)
}

// Only objects that satisfy these object conditions are included in the set of data source and data sink objects. Object conditions based on objects' "last modification time" do not exclude objects in a data sink.
func (o TransferSpecPtrOutput) ObjectConditions() ObjectConditionsPtrOutput {
	return o.ApplyT(func(v *TransferSpec) *ObjectConditions {
		if v == nil {
			return nil
		}
		return v.ObjectConditions
	}).(ObjectConditionsPtrOutput)
}

// If the option delete_objects_unique_in_sink is `true` and time-based object conditions such as 'last modification time' are specified, the request fails with an INVALID_ARGUMENT error.
func (o TransferSpecPtrOutput) TransferOptions() TransferOptionsPtrOutput {
	return o.ApplyT(func(v *TransferSpec) *TransferOptions {
		if v == nil {
			return nil
		}
		return v.TransferOptions
	}).(TransferOptionsPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AwsAccessKeyOutput{})
	pulumi.RegisterOutputType(AwsAccessKeyPtrOutput{})
	pulumi.RegisterOutputType(AwsS3DataOutput{})
	pulumi.RegisterOutputType(AwsS3DataPtrOutput{})
	pulumi.RegisterOutputType(AzureBlobStorageDataOutput{})
	pulumi.RegisterOutputType(AzureBlobStorageDataPtrOutput{})
	pulumi.RegisterOutputType(AzureCredentialsOutput{})
	pulumi.RegisterOutputType(AzureCredentialsPtrOutput{})
	pulumi.RegisterOutputType(DateOutput{})
	pulumi.RegisterOutputType(DatePtrOutput{})
	pulumi.RegisterOutputType(GcsDataOutput{})
	pulumi.RegisterOutputType(GcsDataPtrOutput{})
	pulumi.RegisterOutputType(HttpDataOutput{})
	pulumi.RegisterOutputType(HttpDataPtrOutput{})
	pulumi.RegisterOutputType(NotificationConfigOutput{})
	pulumi.RegisterOutputType(NotificationConfigPtrOutput{})
	pulumi.RegisterOutputType(ObjectConditionsOutput{})
	pulumi.RegisterOutputType(ObjectConditionsPtrOutput{})
	pulumi.RegisterOutputType(ScheduleOutput{})
	pulumi.RegisterOutputType(SchedulePtrOutput{})
	pulumi.RegisterOutputType(TimeOfDayOutput{})
	pulumi.RegisterOutputType(TimeOfDayPtrOutput{})
	pulumi.RegisterOutputType(TransferOptionsOutput{})
	pulumi.RegisterOutputType(TransferOptionsPtrOutput{})
	pulumi.RegisterOutputType(TransferSpecOutput{})
	pulumi.RegisterOutputType(TransferSpecPtrOutput{})
}
