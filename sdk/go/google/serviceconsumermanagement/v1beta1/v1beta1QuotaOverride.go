// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a producer override. A producer override is applied by the owner or administrator of a service to increase or decrease the amount of quota a consumer of the service is allowed to use. To create multiple overrides at once, use ImportProducerOverrides instead. If an override with the specified dimensions already exists, this call will fail. To overwrite an existing override if one is already present ("upsert" semantics), use ImportProducerOverrides instead.
type V1Beta1QuotaOverride struct {
	pulumi.CustomResourceState
}

// NewV1Beta1QuotaOverride registers a new resource with the given unique name, arguments, and options.
func NewV1Beta1QuotaOverride(ctx *pulumi.Context,
	name string, args *V1Beta1QuotaOverrideArgs, opts ...pulumi.ResourceOption) (*V1Beta1QuotaOverride, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	var resource V1Beta1QuotaOverride
	err := ctx.RegisterResource("google-cloud:serviceconsumermanagement/v1beta1:V1Beta1QuotaOverride", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV1Beta1QuotaOverride gets an existing V1Beta1QuotaOverride resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV1Beta1QuotaOverride(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V1Beta1QuotaOverrideState, opts ...pulumi.ResourceOption) (*V1Beta1QuotaOverride, error) {
	var resource V1Beta1QuotaOverride
	err := ctx.ReadResource("google-cloud:serviceconsumermanagement/v1beta1:V1Beta1QuotaOverride", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V1Beta1QuotaOverride resources.
type v1beta1QuotaOverrideState struct {
}

type V1Beta1QuotaOverrideState struct {
}

func (V1Beta1QuotaOverrideState) ElementType() reflect.Type {
	return reflect.TypeOf((*v1beta1QuotaOverrideState)(nil)).Elem()
}

type v1beta1QuotaOverrideArgs struct {
	// The resource name of the ancestor that requested the override. For example: "organizations/12345" or "folders/67890". Used by admin overrides only.
	AdminOverrideAncestor *string `pulumi:"adminOverrideAncestor"`
	//  If this map is nonempty, then this override applies only to specific values for dimensions defined in the limit unit. For example, an override on a limit with the unit 1/{project}/{region} could contain an entry with the key "region" and the value "us-east-1"; the override is only applied to quota consumed in that region. This map has the following restrictions: * Keys that are not defined in the limit's unit are not valid keys. Any string appearing in {brackets} in the unit (besides {project} or {user}) is a defined key. * "project" is not a valid key; the project is already specified in the parent resource name. * "user" is not a valid key; the API does not support quota overrides that apply only to a specific user. * If "region" appears as a key, its value must be a valid Cloud region. * If "zone" appears as a key, its value must be a valid Cloud zone. * If any valid key other than "region" or "zone" appears in the map, then all valid keys other than "region" or "zone" must also appear in the map.
	Dimensions map[string]string `pulumi:"dimensions"`
	// Whether to force the creation of the quota override. If creating an override would cause the effective quota for the consumer to decrease by more than 10 percent, the call is rejected, as a safety measure to avoid accidentally decreasing quota too quickly. Setting the force parameter to true ignores this restriction.
	Force *bool `pulumi:"force"`
	// The name of the metric to which this override applies. An example name would be: `compute.googleapis.com/cpus`
	Metric *string `pulumi:"metric"`
	// The resource name of the producer override. An example name would be: `services/compute.googleapis.com/projects/123/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/producerOverrides/4a3f2c1d`
	Name *string `pulumi:"name"`
	// The overriding quota limit value. Can be any nonnegative integer, or -1 (unlimited quota).
	OverrideValue *string `pulumi:"overrideValue"`
	// The resource name of the parent quota limit, returned by a ListConsumerQuotaMetrics or GetConsumerQuotaMetric call. An example name would be: `services/compute.googleapis.com/projects/123/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
	Parent string `pulumi:"parent"`
	// The limit unit of the limit to which this override applies. An example unit would be: `1/{project}/{region}` Note that `{project}` and `{region}` are not placeholders in this example; the literal characters `{` and `}` occur in the string.
	Unit *string `pulumi:"unit"`
}

// The set of arguments for constructing a V1Beta1QuotaOverride resource.
type V1Beta1QuotaOverrideArgs struct {
	// The resource name of the ancestor that requested the override. For example: "organizations/12345" or "folders/67890". Used by admin overrides only.
	AdminOverrideAncestor pulumi.StringPtrInput
	//  If this map is nonempty, then this override applies only to specific values for dimensions defined in the limit unit. For example, an override on a limit with the unit 1/{project}/{region} could contain an entry with the key "region" and the value "us-east-1"; the override is only applied to quota consumed in that region. This map has the following restrictions: * Keys that are not defined in the limit's unit are not valid keys. Any string appearing in {brackets} in the unit (besides {project} or {user}) is a defined key. * "project" is not a valid key; the project is already specified in the parent resource name. * "user" is not a valid key; the API does not support quota overrides that apply only to a specific user. * If "region" appears as a key, its value must be a valid Cloud region. * If "zone" appears as a key, its value must be a valid Cloud zone. * If any valid key other than "region" or "zone" appears in the map, then all valid keys other than "region" or "zone" must also appear in the map.
	Dimensions pulumi.StringMapInput
	// Whether to force the creation of the quota override. If creating an override would cause the effective quota for the consumer to decrease by more than 10 percent, the call is rejected, as a safety measure to avoid accidentally decreasing quota too quickly. Setting the force parameter to true ignores this restriction.
	Force pulumi.BoolPtrInput
	// The name of the metric to which this override applies. An example name would be: `compute.googleapis.com/cpus`
	Metric pulumi.StringPtrInput
	// The resource name of the producer override. An example name would be: `services/compute.googleapis.com/projects/123/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/producerOverrides/4a3f2c1d`
	Name pulumi.StringPtrInput
	// The overriding quota limit value. Can be any nonnegative integer, or -1 (unlimited quota).
	OverrideValue pulumi.StringPtrInput
	// The resource name of the parent quota limit, returned by a ListConsumerQuotaMetrics or GetConsumerQuotaMetric call. An example name would be: `services/compute.googleapis.com/projects/123/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
	Parent pulumi.StringInput
	// The limit unit of the limit to which this override applies. An example unit would be: `1/{project}/{region}` Note that `{project}` and `{region}` are not placeholders in this example; the literal characters `{` and `}` occur in the string.
	Unit pulumi.StringPtrInput
}

func (V1Beta1QuotaOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v1beta1QuotaOverrideArgs)(nil)).Elem()
}

type V1Beta1QuotaOverrideInput interface {
	pulumi.Input

	ToV1Beta1QuotaOverrideOutput() V1Beta1QuotaOverrideOutput
	ToV1Beta1QuotaOverrideOutputWithContext(ctx context.Context) V1Beta1QuotaOverrideOutput
}

func (*V1Beta1QuotaOverride) ElementType() reflect.Type {
	return reflect.TypeOf((*V1Beta1QuotaOverride)(nil))
}

func (i *V1Beta1QuotaOverride) ToV1Beta1QuotaOverrideOutput() V1Beta1QuotaOverrideOutput {
	return i.ToV1Beta1QuotaOverrideOutputWithContext(context.Background())
}

func (i *V1Beta1QuotaOverride) ToV1Beta1QuotaOverrideOutputWithContext(ctx context.Context) V1Beta1QuotaOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V1Beta1QuotaOverrideOutput)
}

type V1Beta1QuotaOverrideOutput struct {
	*pulumi.OutputState
}

func (V1Beta1QuotaOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*V1Beta1QuotaOverride)(nil))
}

func (o V1Beta1QuotaOverrideOutput) ToV1Beta1QuotaOverrideOutput() V1Beta1QuotaOverrideOutput {
	return o
}

func (o V1Beta1QuotaOverrideOutput) ToV1Beta1QuotaOverrideOutputWithContext(ctx context.Context) V1Beta1QuotaOverrideOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(V1Beta1QuotaOverrideOutput{})
}
