// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Allowed IP range with user-provided description.
type AllowedIpRange struct {
	// Optional. User-provided description. It must contain at most 300 characters.
	Description *string `pulumi:"description"`
	// IP address or range, defined using CIDR notation, of requests that this rule applies to. Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`. IP range prefixes should be properly truncated. For example, `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to `2001:db8::/32`.
	Value *string `pulumi:"value"`
}

// AllowedIpRangeInput is an input type that accepts AllowedIpRangeArgs and AllowedIpRangeOutput values.
// You can construct a concrete instance of `AllowedIpRangeInput` via:
//
//          AllowedIpRangeArgs{...}
type AllowedIpRangeInput interface {
	pulumi.Input

	ToAllowedIpRangeOutput() AllowedIpRangeOutput
	ToAllowedIpRangeOutputWithContext(context.Context) AllowedIpRangeOutput
}

// Allowed IP range with user-provided description.
type AllowedIpRangeArgs struct {
	// Optional. User-provided description. It must contain at most 300 characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// IP address or range, defined using CIDR notation, of requests that this rule applies to. Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`. IP range prefixes should be properly truncated. For example, `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to `2001:db8::/32`.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (AllowedIpRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedIpRange)(nil)).Elem()
}

func (i AllowedIpRangeArgs) ToAllowedIpRangeOutput() AllowedIpRangeOutput {
	return i.ToAllowedIpRangeOutputWithContext(context.Background())
}

func (i AllowedIpRangeArgs) ToAllowedIpRangeOutputWithContext(ctx context.Context) AllowedIpRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedIpRangeOutput)
}

// AllowedIpRangeArrayInput is an input type that accepts AllowedIpRangeArray and AllowedIpRangeArrayOutput values.
// You can construct a concrete instance of `AllowedIpRangeArrayInput` via:
//
//          AllowedIpRangeArray{ AllowedIpRangeArgs{...} }
type AllowedIpRangeArrayInput interface {
	pulumi.Input

	ToAllowedIpRangeArrayOutput() AllowedIpRangeArrayOutput
	ToAllowedIpRangeArrayOutputWithContext(context.Context) AllowedIpRangeArrayOutput
}

type AllowedIpRangeArray []AllowedIpRangeInput

func (AllowedIpRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedIpRange)(nil)).Elem()
}

func (i AllowedIpRangeArray) ToAllowedIpRangeArrayOutput() AllowedIpRangeArrayOutput {
	return i.ToAllowedIpRangeArrayOutputWithContext(context.Background())
}

func (i AllowedIpRangeArray) ToAllowedIpRangeArrayOutputWithContext(ctx context.Context) AllowedIpRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedIpRangeArrayOutput)
}

// Allowed IP range with user-provided description.
type AllowedIpRangeOutput struct{ *pulumi.OutputState }

func (AllowedIpRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedIpRange)(nil)).Elem()
}

func (o AllowedIpRangeOutput) ToAllowedIpRangeOutput() AllowedIpRangeOutput {
	return o
}

func (o AllowedIpRangeOutput) ToAllowedIpRangeOutputWithContext(ctx context.Context) AllowedIpRangeOutput {
	return o
}

// Optional. User-provided description. It must contain at most 300 characters.
func (o AllowedIpRangeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllowedIpRange) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// IP address or range, defined using CIDR notation, of requests that this rule applies to. Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`. IP range prefixes should be properly truncated. For example, `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to `2001:db8::/32`.
func (o AllowedIpRangeOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllowedIpRange) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AllowedIpRangeArrayOutput struct{ *pulumi.OutputState }

func (AllowedIpRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedIpRange)(nil)).Elem()
}

func (o AllowedIpRangeArrayOutput) ToAllowedIpRangeArrayOutput() AllowedIpRangeArrayOutput {
	return o
}

func (o AllowedIpRangeArrayOutput) ToAllowedIpRangeArrayOutputWithContext(ctx context.Context) AllowedIpRangeArrayOutput {
	return o
}

func (o AllowedIpRangeArrayOutput) Index(i pulumi.IntInput) AllowedIpRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowedIpRange {
		return vs[0].([]AllowedIpRange)[vs[1].(int)]
	}).(AllowedIpRangeOutput)
}

// The configuration of Cloud SQL instance that is used by the Apache Airflow software.
type DatabaseConfig struct {
	// Optional. Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. If not specified, db-n1-standard-2 will be used.
	MachineType *string `pulumi:"machineType"`
}

// DatabaseConfigInput is an input type that accepts DatabaseConfigArgs and DatabaseConfigOutput values.
// You can construct a concrete instance of `DatabaseConfigInput` via:
//
//          DatabaseConfigArgs{...}
type DatabaseConfigInput interface {
	pulumi.Input

	ToDatabaseConfigOutput() DatabaseConfigOutput
	ToDatabaseConfigOutputWithContext(context.Context) DatabaseConfigOutput
}

// The configuration of Cloud SQL instance that is used by the Apache Airflow software.
type DatabaseConfigArgs struct {
	// Optional. Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. If not specified, db-n1-standard-2 will be used.
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
}

func (DatabaseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseConfig)(nil)).Elem()
}

func (i DatabaseConfigArgs) ToDatabaseConfigOutput() DatabaseConfigOutput {
	return i.ToDatabaseConfigOutputWithContext(context.Background())
}

func (i DatabaseConfigArgs) ToDatabaseConfigOutputWithContext(ctx context.Context) DatabaseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseConfigOutput)
}

func (i DatabaseConfigArgs) ToDatabaseConfigPtrOutput() DatabaseConfigPtrOutput {
	return i.ToDatabaseConfigPtrOutputWithContext(context.Background())
}

func (i DatabaseConfigArgs) ToDatabaseConfigPtrOutputWithContext(ctx context.Context) DatabaseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseConfigOutput).ToDatabaseConfigPtrOutputWithContext(ctx)
}

// DatabaseConfigPtrInput is an input type that accepts DatabaseConfigArgs, DatabaseConfigPtr and DatabaseConfigPtrOutput values.
// You can construct a concrete instance of `DatabaseConfigPtrInput` via:
//
//          DatabaseConfigArgs{...}
//
//  or:
//
//          nil
type DatabaseConfigPtrInput interface {
	pulumi.Input

	ToDatabaseConfigPtrOutput() DatabaseConfigPtrOutput
	ToDatabaseConfigPtrOutputWithContext(context.Context) DatabaseConfigPtrOutput
}

type databaseConfigPtrType DatabaseConfigArgs

func DatabaseConfigPtr(v *DatabaseConfigArgs) DatabaseConfigPtrInput {
	return (*databaseConfigPtrType)(v)
}

func (*databaseConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseConfig)(nil)).Elem()
}

func (i *databaseConfigPtrType) ToDatabaseConfigPtrOutput() DatabaseConfigPtrOutput {
	return i.ToDatabaseConfigPtrOutputWithContext(context.Background())
}

func (i *databaseConfigPtrType) ToDatabaseConfigPtrOutputWithContext(ctx context.Context) DatabaseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseConfigPtrOutput)
}

// The configuration of Cloud SQL instance that is used by the Apache Airflow software.
type DatabaseConfigOutput struct{ *pulumi.OutputState }

func (DatabaseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseConfig)(nil)).Elem()
}

func (o DatabaseConfigOutput) ToDatabaseConfigOutput() DatabaseConfigOutput {
	return o
}

func (o DatabaseConfigOutput) ToDatabaseConfigOutputWithContext(ctx context.Context) DatabaseConfigOutput {
	return o
}

func (o DatabaseConfigOutput) ToDatabaseConfigPtrOutput() DatabaseConfigPtrOutput {
	return o.ToDatabaseConfigPtrOutputWithContext(context.Background())
}

func (o DatabaseConfigOutput) ToDatabaseConfigPtrOutputWithContext(ctx context.Context) DatabaseConfigPtrOutput {
	return o.ApplyT(func(v DatabaseConfig) *DatabaseConfig {
		return &v
	}).(DatabaseConfigPtrOutput)
}

// Optional. Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. If not specified, db-n1-standard-2 will be used.
func (o DatabaseConfigOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseConfig) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

type DatabaseConfigPtrOutput struct{ *pulumi.OutputState }

func (DatabaseConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseConfig)(nil)).Elem()
}

func (o DatabaseConfigPtrOutput) ToDatabaseConfigPtrOutput() DatabaseConfigPtrOutput {
	return o
}

func (o DatabaseConfigPtrOutput) ToDatabaseConfigPtrOutputWithContext(ctx context.Context) DatabaseConfigPtrOutput {
	return o
}

func (o DatabaseConfigPtrOutput) Elem() DatabaseConfigOutput {
	return o.ApplyT(func(v *DatabaseConfig) DatabaseConfig { return *v }).(DatabaseConfigOutput)
}

// Optional. Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. If not specified, db-n1-standard-2 will be used.
func (o DatabaseConfigPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseConfig) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// The encryption options for the Composer environment and its dependencies.
type EncryptionConfig struct {
	// Optional. Customer-managed Encryption Key available through Google's Key Management Service. Cannot be updated. If not specified, Google-managed key will be used.
	KmsKeyName *string `pulumi:"kmsKeyName"`
}

// EncryptionConfigInput is an input type that accepts EncryptionConfigArgs and EncryptionConfigOutput values.
// You can construct a concrete instance of `EncryptionConfigInput` via:
//
//          EncryptionConfigArgs{...}
type EncryptionConfigInput interface {
	pulumi.Input

	ToEncryptionConfigOutput() EncryptionConfigOutput
	ToEncryptionConfigOutputWithContext(context.Context) EncryptionConfigOutput
}

// The encryption options for the Composer environment and its dependencies.
type EncryptionConfigArgs struct {
	// Optional. Customer-managed Encryption Key available through Google's Key Management Service. Cannot be updated. If not specified, Google-managed key will be used.
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
}

func (EncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil)).Elem()
}

func (i EncryptionConfigArgs) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return i.ToEncryptionConfigOutputWithContext(context.Background())
}

func (i EncryptionConfigArgs) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput)
}

func (i EncryptionConfigArgs) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i EncryptionConfigArgs) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput).ToEncryptionConfigPtrOutputWithContext(ctx)
}

// EncryptionConfigPtrInput is an input type that accepts EncryptionConfigArgs, EncryptionConfigPtr and EncryptionConfigPtrOutput values.
// You can construct a concrete instance of `EncryptionConfigPtrInput` via:
//
//          EncryptionConfigArgs{...}
//
//  or:
//
//          nil
type EncryptionConfigPtrInput interface {
	pulumi.Input

	ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput
	ToEncryptionConfigPtrOutputWithContext(context.Context) EncryptionConfigPtrOutput
}

type encryptionConfigPtrType EncryptionConfigArgs

func EncryptionConfigPtr(v *EncryptionConfigArgs) EncryptionConfigPtrInput {
	return (*encryptionConfigPtrType)(v)
}

func (*encryptionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil)).Elem()
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigPtrOutput)
}

// The encryption options for the Composer environment and its dependencies.
type EncryptionConfigOutput struct{ *pulumi.OutputState }

func (EncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil)).Elem()
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o.ApplyT(func(v EncryptionConfig) *EncryptionConfig {
		return &v
	}).(EncryptionConfigPtrOutput)
}

// Optional. Customer-managed Encryption Key available through Google's Key Management Service. Cannot be updated. If not specified, Google-managed key will be used.
func (o EncryptionConfigOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionConfig) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

type EncryptionConfigPtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil)).Elem()
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) Elem() EncryptionConfigOutput {
	return o.ApplyT(func(v *EncryptionConfig) EncryptionConfig { return *v }).(EncryptionConfigOutput)
}

// Optional. Customer-managed Encryption Key available through Google's Key Management Service. Cannot be updated. If not specified, Google-managed key will be used.
func (o EncryptionConfigPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfig) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// Configuration information for an environment.
type EnvironmentConfig struct {
	// Output only. The URI of the Apache Airflow Web UI hosted within this environment (see [Airflow web interface](/composer/docs/how-to/accessing/airflow-web-interface)).
	AirflowUri *string `pulumi:"airflowUri"`
	// Output only. The Cloud Storage prefix of the DAGs for this environment. Although Cloud Storage objects reside in a flat namespace, a hierarchical file tree can be simulated using "/"-delimited object name prefixes. DAG objects for this environment reside in a simulated directory with the given prefix.
	DagGcsPrefix *string `pulumi:"dagGcsPrefix"`
	// Optional. The configuration settings for Cloud SQL instance used internally by Apache Airflow software.
	DatabaseConfig *DatabaseConfig `pulumi:"databaseConfig"`
	// Optional. The encryption options for the Composer environment and its dependencies. Cannot be updated.
	EncryptionConfig *EncryptionConfig `pulumi:"encryptionConfig"`
	// Output only. The Kubernetes Engine cluster used to run this environment.
	GkeCluster *string `pulumi:"gkeCluster"`
	// Optional. The maintenance window is the period when Cloud Composer components may undergo maintenance. It is defined so that maintenance is not executed during peak hours or critical time periods. The system will not be under maintenance for every occurrence of this window, but when maintenance is planned, it will be scheduled during the window. The maintenance window period must encompass at least 12 hours per week. This may be split into multiple chunks, each with a size of at least 4 hours. If this value is omitted, Cloud Composer components may be subject to maintenance at any time.
	MaintenanceWindow *MaintenanceWindow `pulumi:"maintenanceWindow"`
	// The configuration used for the Kubernetes Engine cluster.
	NodeConfig *NodeConfig `pulumi:"nodeConfig"`
	// The number of nodes in the Kubernetes Engine cluster that will be used to run this environment.
	NodeCount *int `pulumi:"nodeCount"`
	// The configuration used for the Private IP Cloud Composer environment.
	PrivateEnvironmentConfig *PrivateEnvironmentConfig `pulumi:"privateEnvironmentConfig"`
	// The configuration settings for software inside the environment.
	SoftwareConfig *SoftwareConfig `pulumi:"softwareConfig"`
	// Optional. The configuration settings for the Airflow web server App Engine instance.
	WebServerConfig *WebServerConfig `pulumi:"webServerConfig"`
	// Optional. The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied.
	WebServerNetworkAccessControl *WebServerNetworkAccessControl `pulumi:"webServerNetworkAccessControl"`
}

// EnvironmentConfigInput is an input type that accepts EnvironmentConfigArgs and EnvironmentConfigOutput values.
// You can construct a concrete instance of `EnvironmentConfigInput` via:
//
//          EnvironmentConfigArgs{...}
type EnvironmentConfigInput interface {
	pulumi.Input

	ToEnvironmentConfigOutput() EnvironmentConfigOutput
	ToEnvironmentConfigOutputWithContext(context.Context) EnvironmentConfigOutput
}

// Configuration information for an environment.
type EnvironmentConfigArgs struct {
	// Output only. The URI of the Apache Airflow Web UI hosted within this environment (see [Airflow web interface](/composer/docs/how-to/accessing/airflow-web-interface)).
	AirflowUri pulumi.StringPtrInput `pulumi:"airflowUri"`
	// Output only. The Cloud Storage prefix of the DAGs for this environment. Although Cloud Storage objects reside in a flat namespace, a hierarchical file tree can be simulated using "/"-delimited object name prefixes. DAG objects for this environment reside in a simulated directory with the given prefix.
	DagGcsPrefix pulumi.StringPtrInput `pulumi:"dagGcsPrefix"`
	// Optional. The configuration settings for Cloud SQL instance used internally by Apache Airflow software.
	DatabaseConfig DatabaseConfigPtrInput `pulumi:"databaseConfig"`
	// Optional. The encryption options for the Composer environment and its dependencies. Cannot be updated.
	EncryptionConfig EncryptionConfigPtrInput `pulumi:"encryptionConfig"`
	// Output only. The Kubernetes Engine cluster used to run this environment.
	GkeCluster pulumi.StringPtrInput `pulumi:"gkeCluster"`
	// Optional. The maintenance window is the period when Cloud Composer components may undergo maintenance. It is defined so that maintenance is not executed during peak hours or critical time periods. The system will not be under maintenance for every occurrence of this window, but when maintenance is planned, it will be scheduled during the window. The maintenance window period must encompass at least 12 hours per week. This may be split into multiple chunks, each with a size of at least 4 hours. If this value is omitted, Cloud Composer components may be subject to maintenance at any time.
	MaintenanceWindow MaintenanceWindowPtrInput `pulumi:"maintenanceWindow"`
	// The configuration used for the Kubernetes Engine cluster.
	NodeConfig NodeConfigPtrInput `pulumi:"nodeConfig"`
	// The number of nodes in the Kubernetes Engine cluster that will be used to run this environment.
	NodeCount pulumi.IntPtrInput `pulumi:"nodeCount"`
	// The configuration used for the Private IP Cloud Composer environment.
	PrivateEnvironmentConfig PrivateEnvironmentConfigPtrInput `pulumi:"privateEnvironmentConfig"`
	// The configuration settings for software inside the environment.
	SoftwareConfig SoftwareConfigPtrInput `pulumi:"softwareConfig"`
	// Optional. The configuration settings for the Airflow web server App Engine instance.
	WebServerConfig WebServerConfigPtrInput `pulumi:"webServerConfig"`
	// Optional. The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied.
	WebServerNetworkAccessControl WebServerNetworkAccessControlPtrInput `pulumi:"webServerNetworkAccessControl"`
}

func (EnvironmentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentConfig)(nil)).Elem()
}

func (i EnvironmentConfigArgs) ToEnvironmentConfigOutput() EnvironmentConfigOutput {
	return i.ToEnvironmentConfigOutputWithContext(context.Background())
}

func (i EnvironmentConfigArgs) ToEnvironmentConfigOutputWithContext(ctx context.Context) EnvironmentConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigOutput)
}

func (i EnvironmentConfigArgs) ToEnvironmentConfigPtrOutput() EnvironmentConfigPtrOutput {
	return i.ToEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (i EnvironmentConfigArgs) ToEnvironmentConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigOutput).ToEnvironmentConfigPtrOutputWithContext(ctx)
}

// EnvironmentConfigPtrInput is an input type that accepts EnvironmentConfigArgs, EnvironmentConfigPtr and EnvironmentConfigPtrOutput values.
// You can construct a concrete instance of `EnvironmentConfigPtrInput` via:
//
//          EnvironmentConfigArgs{...}
//
//  or:
//
//          nil
type EnvironmentConfigPtrInput interface {
	pulumi.Input

	ToEnvironmentConfigPtrOutput() EnvironmentConfigPtrOutput
	ToEnvironmentConfigPtrOutputWithContext(context.Context) EnvironmentConfigPtrOutput
}

type environmentConfigPtrType EnvironmentConfigArgs

func EnvironmentConfigPtr(v *EnvironmentConfigArgs) EnvironmentConfigPtrInput {
	return (*environmentConfigPtrType)(v)
}

func (*environmentConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentConfig)(nil)).Elem()
}

func (i *environmentConfigPtrType) ToEnvironmentConfigPtrOutput() EnvironmentConfigPtrOutput {
	return i.ToEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (i *environmentConfigPtrType) ToEnvironmentConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigPtrOutput)
}

// Configuration information for an environment.
type EnvironmentConfigOutput struct{ *pulumi.OutputState }

func (EnvironmentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentConfig)(nil)).Elem()
}

func (o EnvironmentConfigOutput) ToEnvironmentConfigOutput() EnvironmentConfigOutput {
	return o
}

func (o EnvironmentConfigOutput) ToEnvironmentConfigOutputWithContext(ctx context.Context) EnvironmentConfigOutput {
	return o
}

func (o EnvironmentConfigOutput) ToEnvironmentConfigPtrOutput() EnvironmentConfigPtrOutput {
	return o.ToEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (o EnvironmentConfigOutput) ToEnvironmentConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *EnvironmentConfig {
		return &v
	}).(EnvironmentConfigPtrOutput)
}

// Output only. The URI of the Apache Airflow Web UI hosted within this environment (see [Airflow web interface](/composer/docs/how-to/accessing/airflow-web-interface)).
func (o EnvironmentConfigOutput) AirflowUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *string { return v.AirflowUri }).(pulumi.StringPtrOutput)
}

// Output only. The Cloud Storage prefix of the DAGs for this environment. Although Cloud Storage objects reside in a flat namespace, a hierarchical file tree can be simulated using "/"-delimited object name prefixes. DAG objects for this environment reside in a simulated directory with the given prefix.
func (o EnvironmentConfigOutput) DagGcsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *string { return v.DagGcsPrefix }).(pulumi.StringPtrOutput)
}

// Optional. The configuration settings for Cloud SQL instance used internally by Apache Airflow software.
func (o EnvironmentConfigOutput) DatabaseConfig() DatabaseConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *DatabaseConfig { return v.DatabaseConfig }).(DatabaseConfigPtrOutput)
}

// Optional. The encryption options for the Composer environment and its dependencies. Cannot be updated.
func (o EnvironmentConfigOutput) EncryptionConfig() EncryptionConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *EncryptionConfig { return v.EncryptionConfig }).(EncryptionConfigPtrOutput)
}

// Output only. The Kubernetes Engine cluster used to run this environment.
func (o EnvironmentConfigOutput) GkeCluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *string { return v.GkeCluster }).(pulumi.StringPtrOutput)
}

// Optional. The maintenance window is the period when Cloud Composer components may undergo maintenance. It is defined so that maintenance is not executed during peak hours or critical time periods. The system will not be under maintenance for every occurrence of this window, but when maintenance is planned, it will be scheduled during the window. The maintenance window period must encompass at least 12 hours per week. This may be split into multiple chunks, each with a size of at least 4 hours. If this value is omitted, Cloud Composer components may be subject to maintenance at any time.
func (o EnvironmentConfigOutput) MaintenanceWindow() MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *MaintenanceWindow { return v.MaintenanceWindow }).(MaintenanceWindowPtrOutput)
}

// The configuration used for the Kubernetes Engine cluster.
func (o EnvironmentConfigOutput) NodeConfig() NodeConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *NodeConfig { return v.NodeConfig }).(NodeConfigPtrOutput)
}

// The number of nodes in the Kubernetes Engine cluster that will be used to run this environment.
func (o EnvironmentConfigOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *int { return v.NodeCount }).(pulumi.IntPtrOutput)
}

// The configuration used for the Private IP Cloud Composer environment.
func (o EnvironmentConfigOutput) PrivateEnvironmentConfig() PrivateEnvironmentConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *PrivateEnvironmentConfig { return v.PrivateEnvironmentConfig }).(PrivateEnvironmentConfigPtrOutput)
}

// The configuration settings for software inside the environment.
func (o EnvironmentConfigOutput) SoftwareConfig() SoftwareConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *SoftwareConfig { return v.SoftwareConfig }).(SoftwareConfigPtrOutput)
}

// Optional. The configuration settings for the Airflow web server App Engine instance.
func (o EnvironmentConfigOutput) WebServerConfig() WebServerConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *WebServerConfig { return v.WebServerConfig }).(WebServerConfigPtrOutput)
}

// Optional. The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied.
func (o EnvironmentConfigOutput) WebServerNetworkAccessControl() WebServerNetworkAccessControlPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *WebServerNetworkAccessControl { return v.WebServerNetworkAccessControl }).(WebServerNetworkAccessControlPtrOutput)
}

type EnvironmentConfigPtrOutput struct{ *pulumi.OutputState }

func (EnvironmentConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentConfig)(nil)).Elem()
}

func (o EnvironmentConfigPtrOutput) ToEnvironmentConfigPtrOutput() EnvironmentConfigPtrOutput {
	return o
}

func (o EnvironmentConfigPtrOutput) ToEnvironmentConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigPtrOutput {
	return o
}

func (o EnvironmentConfigPtrOutput) Elem() EnvironmentConfigOutput {
	return o.ApplyT(func(v *EnvironmentConfig) EnvironmentConfig { return *v }).(EnvironmentConfigOutput)
}

// Output only. The URI of the Apache Airflow Web UI hosted within this environment (see [Airflow web interface](/composer/docs/how-to/accessing/airflow-web-interface)).
func (o EnvironmentConfigPtrOutput) AirflowUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *string {
		if v == nil {
			return nil
		}
		return v.AirflowUri
	}).(pulumi.StringPtrOutput)
}

// Output only. The Cloud Storage prefix of the DAGs for this environment. Although Cloud Storage objects reside in a flat namespace, a hierarchical file tree can be simulated using "/"-delimited object name prefixes. DAG objects for this environment reside in a simulated directory with the given prefix.
func (o EnvironmentConfigPtrOutput) DagGcsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *string {
		if v == nil {
			return nil
		}
		return v.DagGcsPrefix
	}).(pulumi.StringPtrOutput)
}

// Optional. The configuration settings for Cloud SQL instance used internally by Apache Airflow software.
func (o EnvironmentConfigPtrOutput) DatabaseConfig() DatabaseConfigPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *DatabaseConfig {
		if v == nil {
			return nil
		}
		return v.DatabaseConfig
	}).(DatabaseConfigPtrOutput)
}

// Optional. The encryption options for the Composer environment and its dependencies. Cannot be updated.
func (o EnvironmentConfigPtrOutput) EncryptionConfig() EncryptionConfigPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *EncryptionConfig {
		if v == nil {
			return nil
		}
		return v.EncryptionConfig
	}).(EncryptionConfigPtrOutput)
}

// Output only. The Kubernetes Engine cluster used to run this environment.
func (o EnvironmentConfigPtrOutput) GkeCluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *string {
		if v == nil {
			return nil
		}
		return v.GkeCluster
	}).(pulumi.StringPtrOutput)
}

// Optional. The maintenance window is the period when Cloud Composer components may undergo maintenance. It is defined so that maintenance is not executed during peak hours or critical time periods. The system will not be under maintenance for every occurrence of this window, but when maintenance is planned, it will be scheduled during the window. The maintenance window period must encompass at least 12 hours per week. This may be split into multiple chunks, each with a size of at least 4 hours. If this value is omitted, Cloud Composer components may be subject to maintenance at any time.
func (o EnvironmentConfigPtrOutput) MaintenanceWindow() MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *MaintenanceWindow {
		if v == nil {
			return nil
		}
		return v.MaintenanceWindow
	}).(MaintenanceWindowPtrOutput)
}

// The configuration used for the Kubernetes Engine cluster.
func (o EnvironmentConfigPtrOutput) NodeConfig() NodeConfigPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *NodeConfig {
		if v == nil {
			return nil
		}
		return v.NodeConfig
	}).(NodeConfigPtrOutput)
}

// The number of nodes in the Kubernetes Engine cluster that will be used to run this environment.
func (o EnvironmentConfigPtrOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *int {
		if v == nil {
			return nil
		}
		return v.NodeCount
	}).(pulumi.IntPtrOutput)
}

// The configuration used for the Private IP Cloud Composer environment.
func (o EnvironmentConfigPtrOutput) PrivateEnvironmentConfig() PrivateEnvironmentConfigPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *PrivateEnvironmentConfig {
		if v == nil {
			return nil
		}
		return v.PrivateEnvironmentConfig
	}).(PrivateEnvironmentConfigPtrOutput)
}

// The configuration settings for software inside the environment.
func (o EnvironmentConfigPtrOutput) SoftwareConfig() SoftwareConfigPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *SoftwareConfig {
		if v == nil {
			return nil
		}
		return v.SoftwareConfig
	}).(SoftwareConfigPtrOutput)
}

// Optional. The configuration settings for the Airflow web server App Engine instance.
func (o EnvironmentConfigPtrOutput) WebServerConfig() WebServerConfigPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *WebServerConfig {
		if v == nil {
			return nil
		}
		return v.WebServerConfig
	}).(WebServerConfigPtrOutput)
}

// Optional. The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied.
func (o EnvironmentConfigPtrOutput) WebServerNetworkAccessControl() WebServerNetworkAccessControlPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *WebServerNetworkAccessControl {
		if v == nil {
			return nil
		}
		return v.WebServerNetworkAccessControl
	}).(WebServerNetworkAccessControlPtrOutput)
}

// Configuration for controlling how IPs are allocated in the GKE cluster.
type IPAllocationPolicy struct {
	// Optional. The IP address range used to allocate IP addresses to pods in the cluster. This field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both.
	ClusterIpv4CidrBlock *string `pulumi:"clusterIpv4CidrBlock"`
	// Optional. The name of the cluster's secondary range used to allocate IP addresses to pods. Specify either `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both. This field is applicable only when `use_ip_aliases` is true.
	ClusterSecondaryRangeName *string `pulumi:"clusterSecondaryRangeName"`
	// Optional. The IP address range of the services IP addresses in this cluster. This field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `services_secondary_range_name` or `services_ipv4_cidr_block` but not both.
	ServicesIpv4CidrBlock *string `pulumi:"servicesIpv4CidrBlock"`
	// Optional. The name of the services' secondary range used to allocate IP addresses to the cluster. Specify either `services_secondary_range_name` or `services_ipv4_cidr_block` but not both. This field is applicable only when `use_ip_aliases` is true.
	ServicesSecondaryRangeName *string `pulumi:"servicesSecondaryRangeName"`
	// Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created.
	UseIpAliases *bool `pulumi:"useIpAliases"`
}

// IPAllocationPolicyInput is an input type that accepts IPAllocationPolicyArgs and IPAllocationPolicyOutput values.
// You can construct a concrete instance of `IPAllocationPolicyInput` via:
//
//          IPAllocationPolicyArgs{...}
type IPAllocationPolicyInput interface {
	pulumi.Input

	ToIPAllocationPolicyOutput() IPAllocationPolicyOutput
	ToIPAllocationPolicyOutputWithContext(context.Context) IPAllocationPolicyOutput
}

// Configuration for controlling how IPs are allocated in the GKE cluster.
type IPAllocationPolicyArgs struct {
	// Optional. The IP address range used to allocate IP addresses to pods in the cluster. This field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both.
	ClusterIpv4CidrBlock pulumi.StringPtrInput `pulumi:"clusterIpv4CidrBlock"`
	// Optional. The name of the cluster's secondary range used to allocate IP addresses to pods. Specify either `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both. This field is applicable only when `use_ip_aliases` is true.
	ClusterSecondaryRangeName pulumi.StringPtrInput `pulumi:"clusterSecondaryRangeName"`
	// Optional. The IP address range of the services IP addresses in this cluster. This field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `services_secondary_range_name` or `services_ipv4_cidr_block` but not both.
	ServicesIpv4CidrBlock pulumi.StringPtrInput `pulumi:"servicesIpv4CidrBlock"`
	// Optional. The name of the services' secondary range used to allocate IP addresses to the cluster. Specify either `services_secondary_range_name` or `services_ipv4_cidr_block` but not both. This field is applicable only when `use_ip_aliases` is true.
	ServicesSecondaryRangeName pulumi.StringPtrInput `pulumi:"servicesSecondaryRangeName"`
	// Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created.
	UseIpAliases pulumi.BoolPtrInput `pulumi:"useIpAliases"`
}

func (IPAllocationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAllocationPolicy)(nil)).Elem()
}

func (i IPAllocationPolicyArgs) ToIPAllocationPolicyOutput() IPAllocationPolicyOutput {
	return i.ToIPAllocationPolicyOutputWithContext(context.Background())
}

func (i IPAllocationPolicyArgs) ToIPAllocationPolicyOutputWithContext(ctx context.Context) IPAllocationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAllocationPolicyOutput)
}

func (i IPAllocationPolicyArgs) ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput {
	return i.ToIPAllocationPolicyPtrOutputWithContext(context.Background())
}

func (i IPAllocationPolicyArgs) ToIPAllocationPolicyPtrOutputWithContext(ctx context.Context) IPAllocationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAllocationPolicyOutput).ToIPAllocationPolicyPtrOutputWithContext(ctx)
}

// IPAllocationPolicyPtrInput is an input type that accepts IPAllocationPolicyArgs, IPAllocationPolicyPtr and IPAllocationPolicyPtrOutput values.
// You can construct a concrete instance of `IPAllocationPolicyPtrInput` via:
//
//          IPAllocationPolicyArgs{...}
//
//  or:
//
//          nil
type IPAllocationPolicyPtrInput interface {
	pulumi.Input

	ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput
	ToIPAllocationPolicyPtrOutputWithContext(context.Context) IPAllocationPolicyPtrOutput
}

type ipallocationPolicyPtrType IPAllocationPolicyArgs

func IPAllocationPolicyPtr(v *IPAllocationPolicyArgs) IPAllocationPolicyPtrInput {
	return (*ipallocationPolicyPtrType)(v)
}

func (*ipallocationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAllocationPolicy)(nil)).Elem()
}

func (i *ipallocationPolicyPtrType) ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput {
	return i.ToIPAllocationPolicyPtrOutputWithContext(context.Background())
}

func (i *ipallocationPolicyPtrType) ToIPAllocationPolicyPtrOutputWithContext(ctx context.Context) IPAllocationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAllocationPolicyPtrOutput)
}

// Configuration for controlling how IPs are allocated in the GKE cluster.
type IPAllocationPolicyOutput struct{ *pulumi.OutputState }

func (IPAllocationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAllocationPolicy)(nil)).Elem()
}

func (o IPAllocationPolicyOutput) ToIPAllocationPolicyOutput() IPAllocationPolicyOutput {
	return o
}

func (o IPAllocationPolicyOutput) ToIPAllocationPolicyOutputWithContext(ctx context.Context) IPAllocationPolicyOutput {
	return o
}

func (o IPAllocationPolicyOutput) ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput {
	return o.ToIPAllocationPolicyPtrOutputWithContext(context.Background())
}

func (o IPAllocationPolicyOutput) ToIPAllocationPolicyPtrOutputWithContext(ctx context.Context) IPAllocationPolicyPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *IPAllocationPolicy {
		return &v
	}).(IPAllocationPolicyPtrOutput)
}

// Optional. The IP address range used to allocate IP addresses to pods in the cluster. This field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both.
func (o IPAllocationPolicyOutput) ClusterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ClusterIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// Optional. The name of the cluster's secondary range used to allocate IP addresses to pods. Specify either `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both. This field is applicable only when `use_ip_aliases` is true.
func (o IPAllocationPolicyOutput) ClusterSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ClusterSecondaryRangeName }).(pulumi.StringPtrOutput)
}

// Optional. The IP address range of the services IP addresses in this cluster. This field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `services_secondary_range_name` or `services_ipv4_cidr_block` but not both.
func (o IPAllocationPolicyOutput) ServicesIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ServicesIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// Optional. The name of the services' secondary range used to allocate IP addresses to the cluster. Specify either `services_secondary_range_name` or `services_ipv4_cidr_block` but not both. This field is applicable only when `use_ip_aliases` is true.
func (o IPAllocationPolicyOutput) ServicesSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ServicesSecondaryRangeName }).(pulumi.StringPtrOutput)
}

// Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created.
func (o IPAllocationPolicyOutput) UseIpAliases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *bool { return v.UseIpAliases }).(pulumi.BoolPtrOutput)
}

type IPAllocationPolicyPtrOutput struct{ *pulumi.OutputState }

func (IPAllocationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAllocationPolicy)(nil)).Elem()
}

func (o IPAllocationPolicyPtrOutput) ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput {
	return o
}

func (o IPAllocationPolicyPtrOutput) ToIPAllocationPolicyPtrOutputWithContext(ctx context.Context) IPAllocationPolicyPtrOutput {
	return o
}

func (o IPAllocationPolicyPtrOutput) Elem() IPAllocationPolicyOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) IPAllocationPolicy { return *v }).(IPAllocationPolicyOutput)
}

// Optional. The IP address range used to allocate IP addresses to pods in the cluster. This field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both.
func (o IPAllocationPolicyPtrOutput) ClusterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// Optional. The name of the cluster's secondary range used to allocate IP addresses to pods. Specify either `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both. This field is applicable only when `use_ip_aliases` is true.
func (o IPAllocationPolicyPtrOutput) ClusterSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClusterSecondaryRangeName
	}).(pulumi.StringPtrOutput)
}

// Optional. The IP address range of the services IP addresses in this cluster. This field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `services_secondary_range_name` or `services_ipv4_cidr_block` but not both.
func (o IPAllocationPolicyPtrOutput) ServicesIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ServicesIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// Optional. The name of the services' secondary range used to allocate IP addresses to the cluster. Specify either `services_secondary_range_name` or `services_ipv4_cidr_block` but not both. This field is applicable only when `use_ip_aliases` is true.
func (o IPAllocationPolicyPtrOutput) ServicesSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ServicesSecondaryRangeName
	}).(pulumi.StringPtrOutput)
}

// Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created.
func (o IPAllocationPolicyPtrOutput) UseIpAliases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.UseIpAliases
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings for Cloud Composer maintenance window. The following example: { "startTime":"2019-08-01T01:00:00Z" "endTime":"2019-08-01T07:00:00Z" "recurrence":"FREQ=WEEKLY;BYDAY=TU,WE" } would define a maintenance window between 01 and 07 hours UTC during each Tuesday and Wednesday.
type MaintenanceWindow struct {
	// Required. Maintenance window end time. It is used only to calculate the duration of the maintenance window. The value for end_time must be in the future, relative to `start_time`.
	EndTime *string `pulumi:"endTime"`
	// Required. Maintenance window recurrence. Format is a subset of [RFC-5545](https://tools.ietf.org/html/rfc5545) `RRULE`. The only allowed values for `FREQ` field are `FREQ=DAILY` and `FREQ=WEEKLY;BYDAY=...` Example values: `FREQ=WEEKLY;BYDAY=TU,WE`, `FREQ=DAILY`.
	Recurrence *string `pulumi:"recurrence"`
	// Required. Start time of the first recurrence of the maintenance window.
	StartTime *string `pulumi:"startTime"`
}

// MaintenanceWindowInput is an input type that accepts MaintenanceWindowArgs and MaintenanceWindowOutput values.
// You can construct a concrete instance of `MaintenanceWindowInput` via:
//
//          MaintenanceWindowArgs{...}
type MaintenanceWindowInput interface {
	pulumi.Input

	ToMaintenanceWindowOutput() MaintenanceWindowOutput
	ToMaintenanceWindowOutputWithContext(context.Context) MaintenanceWindowOutput
}

// The configuration settings for Cloud Composer maintenance window. The following example: { "startTime":"2019-08-01T01:00:00Z" "endTime":"2019-08-01T07:00:00Z" "recurrence":"FREQ=WEEKLY;BYDAY=TU,WE" } would define a maintenance window between 01 and 07 hours UTC during each Tuesday and Wednesday.
type MaintenanceWindowArgs struct {
	// Required. Maintenance window end time. It is used only to calculate the duration of the maintenance window. The value for end_time must be in the future, relative to `start_time`.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Required. Maintenance window recurrence. Format is a subset of [RFC-5545](https://tools.ietf.org/html/rfc5545) `RRULE`. The only allowed values for `FREQ` field are `FREQ=DAILY` and `FREQ=WEEKLY;BYDAY=...` Example values: `FREQ=WEEKLY;BYDAY=TU,WE`, `FREQ=DAILY`.
	Recurrence pulumi.StringPtrInput `pulumi:"recurrence"`
	// Required. Start time of the first recurrence of the maintenance window.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (MaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return i.ToMaintenanceWindowOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput)
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput).ToMaintenanceWindowPtrOutputWithContext(ctx)
}

// MaintenanceWindowPtrInput is an input type that accepts MaintenanceWindowArgs, MaintenanceWindowPtr and MaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `MaintenanceWindowPtrInput` via:
//
//          MaintenanceWindowArgs{...}
//
//  or:
//
//          nil
type MaintenanceWindowPtrInput interface {
	pulumi.Input

	ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput
	ToMaintenanceWindowPtrOutputWithContext(context.Context) MaintenanceWindowPtrOutput
}

type maintenanceWindowPtrType MaintenanceWindowArgs

func MaintenanceWindowPtr(v *MaintenanceWindowArgs) MaintenanceWindowPtrInput {
	return (*maintenanceWindowPtrType)(v)
}

func (*maintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowPtrOutput)
}

// The configuration settings for Cloud Composer maintenance window. The following example: { "startTime":"2019-08-01T01:00:00Z" "endTime":"2019-08-01T07:00:00Z" "recurrence":"FREQ=WEEKLY;BYDAY=TU,WE" } would define a maintenance window between 01 and 07 hours UTC during each Tuesday and Wednesday.
type MaintenanceWindowOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *MaintenanceWindow {
		return &v
	}).(MaintenanceWindowPtrOutput)
}

// Required. Maintenance window end time. It is used only to calculate the duration of the maintenance window. The value for end_time must be in the future, relative to `start_time`.
func (o MaintenanceWindowOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Required. Maintenance window recurrence. Format is a subset of [RFC-5545](https://tools.ietf.org/html/rfc5545) `RRULE`. The only allowed values for `FREQ` field are `FREQ=DAILY` and `FREQ=WEEKLY;BYDAY=...` Example values: `FREQ=WEEKLY;BYDAY=TU,WE`, `FREQ=DAILY`.
func (o MaintenanceWindowOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *string { return v.Recurrence }).(pulumi.StringPtrOutput)
}

// Required. Start time of the first recurrence of the maintenance window.
func (o MaintenanceWindowOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type MaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) Elem() MaintenanceWindowOutput {
	return o.ApplyT(func(v *MaintenanceWindow) MaintenanceWindow { return *v }).(MaintenanceWindowOutput)
}

// Required. Maintenance window end time. It is used only to calculate the duration of the maintenance window. The value for end_time must be in the future, relative to `start_time`.
func (o MaintenanceWindowPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Required. Maintenance window recurrence. Format is a subset of [RFC-5545](https://tools.ietf.org/html/rfc5545) `RRULE`. The only allowed values for `FREQ` field are `FREQ=DAILY` and `FREQ=WEEKLY;BYDAY=...` Example values: `FREQ=WEEKLY;BYDAY=TU,WE`, `FREQ=DAILY`.
func (o MaintenanceWindowPtrOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return v.Recurrence
	}).(pulumi.StringPtrOutput)
}

// Required. Start time of the first recurrence of the maintenance window.
func (o MaintenanceWindowPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The configuration information for the Kubernetes Engine nodes running the Apache Airflow software.
type NodeConfig struct {
	// Optional. The disk size in GB used for node VMs. Minimum size is 20GB. If unspecified, defaults to 100GB. Cannot be updated.
	DiskSizeGb *int `pulumi:"diskSizeGb"`
	// Optional. The IPAllocationPolicy fields for the GKE cluster.
	IpAllocationPolicy *IPAllocationPolicy `pulumi:"ipAllocationPolicy"`
	// Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which to deploy the VMs used to run the Apache Airflow software, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}". This `location` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.machineType` are specified, `nodeConfig.machineType` must belong to this `location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If only one field (`location` or `nodeConfig.machineType`) is specified, the location information from the specified field will be propagated to the unspecified field.
	Location *string `pulumi:"location"`
	// Optional. The Compute Engine [machine type](/compute/docs/machine-types) used for cluster instances, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}". The `machineType` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.location` are specified, this `machineType` must belong to the `nodeConfig.location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If exactly one of this field and `nodeConfig.location` is specified, the location information from the specified field will be propagated to the unspecified field. The `machineTypeId` must not be a [shared-core machine type](/compute/docs/machine-types#sharedcore). If this field is unspecified, the `machineTypeId` defaults to "n1-standard-1".
	MachineType *string `pulumi:"machineType"`
	// Optional. The maximum number of pods per node in the Cloud Composer GKE cluster. The value must be between 8 and 110 and it can be set only if the environment is VPC-native. The default value is 32. Values of this field will be propagated both to the `default-pool` node pool of the newly created GKE cluster, and to the default "Maximum Pods per Node" value which is used for newly created node pools if their value is not explicitly set during node pool creation. For more information, see [Optimizing IP address allocation] (https://cloud.google.com/kubernetes-engine/docs/how-to/flexible-pod-cidr). Cannot be updated.
	MaxPodsPerNode *int `pulumi:"maxPodsPerNode"`
	// Optional. The Compute Engine network to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/global/networks/{networkId}". If unspecified, the default network in the environment's project is used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided, `nodeConfig.subnetwork` must also be provided. For [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see `nodeConfig.subnetwork`.
	Network *string `pulumi:"network"`
	// Optional. The set of Google API scopes to be made available on all node VMs. If `oauth_scopes` is empty, defaults to ["https://www.googleapis.com/auth/cloud-platform"]. Cannot be updated.
	OauthScopes []string `pulumi:"oauthScopes"`
	// Optional. The Google Cloud Platform Service Account to be used by the node VMs. If a service account is not specified, the "default" Compute Engine service account is used. Cannot be updated.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Optional. The Compute Engine subnetwork to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}" If a subnetwork is provided, `nodeConfig.network` must also be provided, and the subnetwork must belong to the enclosing environment's project and location.
	Subnetwork *string `pulumi:"subnetwork"`
	// Optional. The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Cannot be updated.
	Tags []string `pulumi:"tags"`
}

// NodeConfigInput is an input type that accepts NodeConfigArgs and NodeConfigOutput values.
// You can construct a concrete instance of `NodeConfigInput` via:
//
//          NodeConfigArgs{...}
type NodeConfigInput interface {
	pulumi.Input

	ToNodeConfigOutput() NodeConfigOutput
	ToNodeConfigOutputWithContext(context.Context) NodeConfigOutput
}

// The configuration information for the Kubernetes Engine nodes running the Apache Airflow software.
type NodeConfigArgs struct {
	// Optional. The disk size in GB used for node VMs. Minimum size is 20GB. If unspecified, defaults to 100GB. Cannot be updated.
	DiskSizeGb pulumi.IntPtrInput `pulumi:"diskSizeGb"`
	// Optional. The IPAllocationPolicy fields for the GKE cluster.
	IpAllocationPolicy IPAllocationPolicyPtrInput `pulumi:"ipAllocationPolicy"`
	// Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which to deploy the VMs used to run the Apache Airflow software, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}". This `location` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.machineType` are specified, `nodeConfig.machineType` must belong to this `location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If only one field (`location` or `nodeConfig.machineType`) is specified, the location information from the specified field will be propagated to the unspecified field.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. The Compute Engine [machine type](/compute/docs/machine-types) used for cluster instances, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}". The `machineType` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.location` are specified, this `machineType` must belong to the `nodeConfig.location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If exactly one of this field and `nodeConfig.location` is specified, the location information from the specified field will be propagated to the unspecified field. The `machineTypeId` must not be a [shared-core machine type](/compute/docs/machine-types#sharedcore). If this field is unspecified, the `machineTypeId` defaults to "n1-standard-1".
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
	// Optional. The maximum number of pods per node in the Cloud Composer GKE cluster. The value must be between 8 and 110 and it can be set only if the environment is VPC-native. The default value is 32. Values of this field will be propagated both to the `default-pool` node pool of the newly created GKE cluster, and to the default "Maximum Pods per Node" value which is used for newly created node pools if their value is not explicitly set during node pool creation. For more information, see [Optimizing IP address allocation] (https://cloud.google.com/kubernetes-engine/docs/how-to/flexible-pod-cidr). Cannot be updated.
	MaxPodsPerNode pulumi.IntPtrInput `pulumi:"maxPodsPerNode"`
	// Optional. The Compute Engine network to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/global/networks/{networkId}". If unspecified, the default network in the environment's project is used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided, `nodeConfig.subnetwork` must also be provided. For [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see `nodeConfig.subnetwork`.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// Optional. The set of Google API scopes to be made available on all node VMs. If `oauth_scopes` is empty, defaults to ["https://www.googleapis.com/auth/cloud-platform"]. Cannot be updated.
	OauthScopes pulumi.StringArrayInput `pulumi:"oauthScopes"`
	// Optional. The Google Cloud Platform Service Account to be used by the node VMs. If a service account is not specified, the "default" Compute Engine service account is used. Cannot be updated.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// Optional. The Compute Engine subnetwork to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}" If a subnetwork is provided, `nodeConfig.network` must also be provided, and the subnetwork must belong to the enclosing environment's project and location.
	Subnetwork pulumi.StringPtrInput `pulumi:"subnetwork"`
	// Optional. The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Cannot be updated.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (NodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfig)(nil)).Elem()
}

func (i NodeConfigArgs) ToNodeConfigOutput() NodeConfigOutput {
	return i.ToNodeConfigOutputWithContext(context.Background())
}

func (i NodeConfigArgs) ToNodeConfigOutputWithContext(ctx context.Context) NodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigOutput)
}

func (i NodeConfigArgs) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return i.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (i NodeConfigArgs) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigOutput).ToNodeConfigPtrOutputWithContext(ctx)
}

// NodeConfigPtrInput is an input type that accepts NodeConfigArgs, NodeConfigPtr and NodeConfigPtrOutput values.
// You can construct a concrete instance of `NodeConfigPtrInput` via:
//
//          NodeConfigArgs{...}
//
//  or:
//
//          nil
type NodeConfigPtrInput interface {
	pulumi.Input

	ToNodeConfigPtrOutput() NodeConfigPtrOutput
	ToNodeConfigPtrOutputWithContext(context.Context) NodeConfigPtrOutput
}

type nodeConfigPtrType NodeConfigArgs

func NodeConfigPtr(v *NodeConfigArgs) NodeConfigPtrInput {
	return (*nodeConfigPtrType)(v)
}

func (*nodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfig)(nil)).Elem()
}

func (i *nodeConfigPtrType) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return i.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (i *nodeConfigPtrType) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigPtrOutput)
}

// The configuration information for the Kubernetes Engine nodes running the Apache Airflow software.
type NodeConfigOutput struct{ *pulumi.OutputState }

func (NodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfig)(nil)).Elem()
}

func (o NodeConfigOutput) ToNodeConfigOutput() NodeConfigOutput {
	return o
}

func (o NodeConfigOutput) ToNodeConfigOutputWithContext(ctx context.Context) NodeConfigOutput {
	return o
}

func (o NodeConfigOutput) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return o.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (o NodeConfigOutput) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *NodeConfig {
		return &v
	}).(NodeConfigPtrOutput)
}

// Optional. The disk size in GB used for node VMs. Minimum size is 20GB. If unspecified, defaults to 100GB. Cannot be updated.
func (o NodeConfigOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeConfig) *int { return v.DiskSizeGb }).(pulumi.IntPtrOutput)
}

// Optional. The IPAllocationPolicy fields for the GKE cluster.
func (o NodeConfigOutput) IpAllocationPolicy() IPAllocationPolicyPtrOutput {
	return o.ApplyT(func(v NodeConfig) *IPAllocationPolicy { return v.IpAllocationPolicy }).(IPAllocationPolicyPtrOutput)
}

// Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which to deploy the VMs used to run the Apache Airflow software, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}". This `location` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.machineType` are specified, `nodeConfig.machineType` must belong to this `location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If only one field (`location` or `nodeConfig.machineType`) is specified, the location information from the specified field will be propagated to the unspecified field.
func (o NodeConfigOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. The Compute Engine [machine type](/compute/docs/machine-types) used for cluster instances, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}". The `machineType` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.location` are specified, this `machineType` must belong to the `nodeConfig.location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If exactly one of this field and `nodeConfig.location` is specified, the location information from the specified field will be propagated to the unspecified field. The `machineTypeId` must not be a [shared-core machine type](/compute/docs/machine-types#sharedcore). If this field is unspecified, the `machineTypeId` defaults to "n1-standard-1".
func (o NodeConfigOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

// Optional. The maximum number of pods per node in the Cloud Composer GKE cluster. The value must be between 8 and 110 and it can be set only if the environment is VPC-native. The default value is 32. Values of this field will be propagated both to the `default-pool` node pool of the newly created GKE cluster, and to the default "Maximum Pods per Node" value which is used for newly created node pools if their value is not explicitly set during node pool creation. For more information, see [Optimizing IP address allocation] (https://cloud.google.com/kubernetes-engine/docs/how-to/flexible-pod-cidr). Cannot be updated.
func (o NodeConfigOutput) MaxPodsPerNode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeConfig) *int { return v.MaxPodsPerNode }).(pulumi.IntPtrOutput)
}

// Optional. The Compute Engine network to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/global/networks/{networkId}". If unspecified, the default network in the environment's project is used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided, `nodeConfig.subnetwork` must also be provided. For [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see `nodeConfig.subnetwork`.
func (o NodeConfigOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// Optional. The set of Google API scopes to be made available on all node VMs. If `oauth_scopes` is empty, defaults to ["https://www.googleapis.com/auth/cloud-platform"]. Cannot be updated.
func (o NodeConfigOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeConfig) []string { return v.OauthScopes }).(pulumi.StringArrayOutput)
}

// Optional. The Google Cloud Platform Service Account to be used by the node VMs. If a service account is not specified, the "default" Compute Engine service account is used. Cannot be updated.
func (o NodeConfigOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Optional. The Compute Engine subnetwork to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}" If a subnetwork is provided, `nodeConfig.network` must also be provided, and the subnetwork must belong to the enclosing environment's project and location.
func (o NodeConfigOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

// Optional. The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Cannot be updated.
func (o NodeConfigOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeConfig) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type NodeConfigPtrOutput struct{ *pulumi.OutputState }

func (NodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfig)(nil)).Elem()
}

func (o NodeConfigPtrOutput) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return o
}

func (o NodeConfigPtrOutput) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return o
}

func (o NodeConfigPtrOutput) Elem() NodeConfigOutput {
	return o.ApplyT(func(v *NodeConfig) NodeConfig { return *v }).(NodeConfigOutput)
}

// Optional. The disk size in GB used for node VMs. Minimum size is 20GB. If unspecified, defaults to 100GB. Cannot be updated.
func (o NodeConfigPtrOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGb
	}).(pulumi.IntPtrOutput)
}

// Optional. The IPAllocationPolicy fields for the GKE cluster.
func (o NodeConfigPtrOutput) IpAllocationPolicy() IPAllocationPolicyPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *IPAllocationPolicy {
		if v == nil {
			return nil
		}
		return v.IpAllocationPolicy
	}).(IPAllocationPolicyPtrOutput)
}

// Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which to deploy the VMs used to run the Apache Airflow software, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}". This `location` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.machineType` are specified, `nodeConfig.machineType` must belong to this `location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If only one field (`location` or `nodeConfig.machineType`) is specified, the location information from the specified field will be propagated to the unspecified field.
func (o NodeConfigPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. The Compute Engine [machine type](/compute/docs/machine-types) used for cluster instances, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}". The `machineType` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.location` are specified, this `machineType` must belong to the `nodeConfig.location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If exactly one of this field and `nodeConfig.location` is specified, the location information from the specified field will be propagated to the unspecified field. The `machineTypeId` must not be a [shared-core machine type](/compute/docs/machine-types#sharedcore). If this field is unspecified, the `machineTypeId` defaults to "n1-standard-1".
func (o NodeConfigPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// Optional. The maximum number of pods per node in the Cloud Composer GKE cluster. The value must be between 8 and 110 and it can be set only if the environment is VPC-native. The default value is 32. Values of this field will be propagated both to the `default-pool` node pool of the newly created GKE cluster, and to the default "Maximum Pods per Node" value which is used for newly created node pools if their value is not explicitly set during node pool creation. For more information, see [Optimizing IP address allocation] (https://cloud.google.com/kubernetes-engine/docs/how-to/flexible-pod-cidr). Cannot be updated.
func (o NodeConfigPtrOutput) MaxPodsPerNode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxPodsPerNode
	}).(pulumi.IntPtrOutput)
}

// Optional. The Compute Engine network to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/global/networks/{networkId}". If unspecified, the default network in the environment's project is used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided, `nodeConfig.subnetwork` must also be provided. For [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see `nodeConfig.subnetwork`.
func (o NodeConfigPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// Optional. The set of Google API scopes to be made available on all node VMs. If `oauth_scopes` is empty, defaults to ["https://www.googleapis.com/auth/cloud-platform"]. Cannot be updated.
func (o NodeConfigPtrOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeConfig) []string {
		if v == nil {
			return nil
		}
		return v.OauthScopes
	}).(pulumi.StringArrayOutput)
}

// Optional. The Google Cloud Platform Service Account to be used by the node VMs. If a service account is not specified, the "default" Compute Engine service account is used. Cannot be updated.
func (o NodeConfigPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// Optional. The Compute Engine subnetwork to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}" If a subnetwork is provided, `nodeConfig.network` must also be provided, and the subnetwork must belong to the enclosing environment's project and location.
func (o NodeConfigPtrOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.Subnetwork
	}).(pulumi.StringPtrOutput)
}

// Optional. The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Cannot be updated.
func (o NodeConfigPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeConfig) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// Configuration options for the private GKE cluster in a Cloud Composer environment.
type PrivateClusterConfig struct {
	// Optional. If `true`, access to the public endpoint of the GKE cluster is denied.
	EnablePrivateEndpoint *bool `pulumi:"enablePrivateEndpoint"`
	// Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used.
	MasterIpv4CidrBlock *string `pulumi:"masterIpv4CidrBlock"`
	// Output only. The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster's network.
	MasterIpv4ReservedRange *string `pulumi:"masterIpv4ReservedRange"`
}

// PrivateClusterConfigInput is an input type that accepts PrivateClusterConfigArgs and PrivateClusterConfigOutput values.
// You can construct a concrete instance of `PrivateClusterConfigInput` via:
//
//          PrivateClusterConfigArgs{...}
type PrivateClusterConfigInput interface {
	pulumi.Input

	ToPrivateClusterConfigOutput() PrivateClusterConfigOutput
	ToPrivateClusterConfigOutputWithContext(context.Context) PrivateClusterConfigOutput
}

// Configuration options for the private GKE cluster in a Cloud Composer environment.
type PrivateClusterConfigArgs struct {
	// Optional. If `true`, access to the public endpoint of the GKE cluster is denied.
	EnablePrivateEndpoint pulumi.BoolPtrInput `pulumi:"enablePrivateEndpoint"`
	// Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used.
	MasterIpv4CidrBlock pulumi.StringPtrInput `pulumi:"masterIpv4CidrBlock"`
	// Output only. The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster's network.
	MasterIpv4ReservedRange pulumi.StringPtrInput `pulumi:"masterIpv4ReservedRange"`
}

func (PrivateClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterConfig)(nil)).Elem()
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigOutput() PrivateClusterConfigOutput {
	return i.ToPrivateClusterConfigOutputWithContext(context.Background())
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigOutputWithContext(ctx context.Context) PrivateClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigOutput)
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return i.ToPrivateClusterConfigPtrOutputWithContext(context.Background())
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigOutput).ToPrivateClusterConfigPtrOutputWithContext(ctx)
}

// PrivateClusterConfigPtrInput is an input type that accepts PrivateClusterConfigArgs, PrivateClusterConfigPtr and PrivateClusterConfigPtrOutput values.
// You can construct a concrete instance of `PrivateClusterConfigPtrInput` via:
//
//          PrivateClusterConfigArgs{...}
//
//  or:
//
//          nil
type PrivateClusterConfigPtrInput interface {
	pulumi.Input

	ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput
	ToPrivateClusterConfigPtrOutputWithContext(context.Context) PrivateClusterConfigPtrOutput
}

type privateClusterConfigPtrType PrivateClusterConfigArgs

func PrivateClusterConfigPtr(v *PrivateClusterConfigArgs) PrivateClusterConfigPtrInput {
	return (*privateClusterConfigPtrType)(v)
}

func (*privateClusterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterConfig)(nil)).Elem()
}

func (i *privateClusterConfigPtrType) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return i.ToPrivateClusterConfigPtrOutputWithContext(context.Background())
}

func (i *privateClusterConfigPtrType) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigPtrOutput)
}

// Configuration options for the private GKE cluster in a Cloud Composer environment.
type PrivateClusterConfigOutput struct{ *pulumi.OutputState }

func (PrivateClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterConfig)(nil)).Elem()
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigOutput() PrivateClusterConfigOutput {
	return o
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigOutputWithContext(ctx context.Context) PrivateClusterConfigOutput {
	return o
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return o.ToPrivateClusterConfigPtrOutputWithContext(context.Background())
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *PrivateClusterConfig {
		return &v
	}).(PrivateClusterConfigPtrOutput)
}

// Optional. If `true`, access to the public endpoint of the GKE cluster is denied.
func (o PrivateClusterConfigOutput) EnablePrivateEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *bool { return v.EnablePrivateEndpoint }).(pulumi.BoolPtrOutput)
}

// Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used.
func (o PrivateClusterConfigOutput) MasterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *string { return v.MasterIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// Output only. The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster's network.
func (o PrivateClusterConfigOutput) MasterIpv4ReservedRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *string { return v.MasterIpv4ReservedRange }).(pulumi.StringPtrOutput)
}

type PrivateClusterConfigPtrOutput struct{ *pulumi.OutputState }

func (PrivateClusterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterConfig)(nil)).Elem()
}

func (o PrivateClusterConfigPtrOutput) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return o
}

func (o PrivateClusterConfigPtrOutput) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return o
}

func (o PrivateClusterConfigPtrOutput) Elem() PrivateClusterConfigOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) PrivateClusterConfig { return *v }).(PrivateClusterConfigOutput)
}

// Optional. If `true`, access to the public endpoint of the GKE cluster is denied.
func (o PrivateClusterConfigPtrOutput) EnablePrivateEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateEndpoint
	}).(pulumi.BoolPtrOutput)
}

// Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used.
func (o PrivateClusterConfigPtrOutput) MasterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *string {
		if v == nil {
			return nil
		}
		return v.MasterIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// Output only. The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster's network.
func (o PrivateClusterConfigPtrOutput) MasterIpv4ReservedRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *string {
		if v == nil {
			return nil
		}
		return v.MasterIpv4ReservedRange
	}).(pulumi.StringPtrOutput)
}

// The configuration information for configuring a Private IP Cloud Composer environment.
type PrivateEnvironmentConfig struct {
	// Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block
	CloudSqlIpv4CidrBlock *string `pulumi:"cloudSqlIpv4CidrBlock"`
	// Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true.
	EnablePrivateEnvironment *bool `pulumi:"enablePrivateEnvironment"`
	// Optional. Configuration for the private GKE cluster for a Private IP Cloud Composer environment.
	PrivateClusterConfig *PrivateClusterConfig `pulumi:"privateClusterConfig"`
	// Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block.
	WebServerIpv4CidrBlock *string `pulumi:"webServerIpv4CidrBlock"`
	// Output only. The IP range reserved for the tenant project's App Engine VMs.
	WebServerIpv4ReservedRange *string `pulumi:"webServerIpv4ReservedRange"`
}

// PrivateEnvironmentConfigInput is an input type that accepts PrivateEnvironmentConfigArgs and PrivateEnvironmentConfigOutput values.
// You can construct a concrete instance of `PrivateEnvironmentConfigInput` via:
//
//          PrivateEnvironmentConfigArgs{...}
type PrivateEnvironmentConfigInput interface {
	pulumi.Input

	ToPrivateEnvironmentConfigOutput() PrivateEnvironmentConfigOutput
	ToPrivateEnvironmentConfigOutputWithContext(context.Context) PrivateEnvironmentConfigOutput
}

// The configuration information for configuring a Private IP Cloud Composer environment.
type PrivateEnvironmentConfigArgs struct {
	// Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block
	CloudSqlIpv4CidrBlock pulumi.StringPtrInput `pulumi:"cloudSqlIpv4CidrBlock"`
	// Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true.
	EnablePrivateEnvironment pulumi.BoolPtrInput `pulumi:"enablePrivateEnvironment"`
	// Optional. Configuration for the private GKE cluster for a Private IP Cloud Composer environment.
	PrivateClusterConfig PrivateClusterConfigPtrInput `pulumi:"privateClusterConfig"`
	// Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block.
	WebServerIpv4CidrBlock pulumi.StringPtrInput `pulumi:"webServerIpv4CidrBlock"`
	// Output only. The IP range reserved for the tenant project's App Engine VMs.
	WebServerIpv4ReservedRange pulumi.StringPtrInput `pulumi:"webServerIpv4ReservedRange"`
}

func (PrivateEnvironmentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEnvironmentConfig)(nil)).Elem()
}

func (i PrivateEnvironmentConfigArgs) ToPrivateEnvironmentConfigOutput() PrivateEnvironmentConfigOutput {
	return i.ToPrivateEnvironmentConfigOutputWithContext(context.Background())
}

func (i PrivateEnvironmentConfigArgs) ToPrivateEnvironmentConfigOutputWithContext(ctx context.Context) PrivateEnvironmentConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEnvironmentConfigOutput)
}

func (i PrivateEnvironmentConfigArgs) ToPrivateEnvironmentConfigPtrOutput() PrivateEnvironmentConfigPtrOutput {
	return i.ToPrivateEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (i PrivateEnvironmentConfigArgs) ToPrivateEnvironmentConfigPtrOutputWithContext(ctx context.Context) PrivateEnvironmentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEnvironmentConfigOutput).ToPrivateEnvironmentConfigPtrOutputWithContext(ctx)
}

// PrivateEnvironmentConfigPtrInput is an input type that accepts PrivateEnvironmentConfigArgs, PrivateEnvironmentConfigPtr and PrivateEnvironmentConfigPtrOutput values.
// You can construct a concrete instance of `PrivateEnvironmentConfigPtrInput` via:
//
//          PrivateEnvironmentConfigArgs{...}
//
//  or:
//
//          nil
type PrivateEnvironmentConfigPtrInput interface {
	pulumi.Input

	ToPrivateEnvironmentConfigPtrOutput() PrivateEnvironmentConfigPtrOutput
	ToPrivateEnvironmentConfigPtrOutputWithContext(context.Context) PrivateEnvironmentConfigPtrOutput
}

type privateEnvironmentConfigPtrType PrivateEnvironmentConfigArgs

func PrivateEnvironmentConfigPtr(v *PrivateEnvironmentConfigArgs) PrivateEnvironmentConfigPtrInput {
	return (*privateEnvironmentConfigPtrType)(v)
}

func (*privateEnvironmentConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEnvironmentConfig)(nil)).Elem()
}

func (i *privateEnvironmentConfigPtrType) ToPrivateEnvironmentConfigPtrOutput() PrivateEnvironmentConfigPtrOutput {
	return i.ToPrivateEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (i *privateEnvironmentConfigPtrType) ToPrivateEnvironmentConfigPtrOutputWithContext(ctx context.Context) PrivateEnvironmentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEnvironmentConfigPtrOutput)
}

// The configuration information for configuring a Private IP Cloud Composer environment.
type PrivateEnvironmentConfigOutput struct{ *pulumi.OutputState }

func (PrivateEnvironmentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEnvironmentConfig)(nil)).Elem()
}

func (o PrivateEnvironmentConfigOutput) ToPrivateEnvironmentConfigOutput() PrivateEnvironmentConfigOutput {
	return o
}

func (o PrivateEnvironmentConfigOutput) ToPrivateEnvironmentConfigOutputWithContext(ctx context.Context) PrivateEnvironmentConfigOutput {
	return o
}

func (o PrivateEnvironmentConfigOutput) ToPrivateEnvironmentConfigPtrOutput() PrivateEnvironmentConfigPtrOutput {
	return o.ToPrivateEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (o PrivateEnvironmentConfigOutput) ToPrivateEnvironmentConfigPtrOutputWithContext(ctx context.Context) PrivateEnvironmentConfigPtrOutput {
	return o.ApplyT(func(v PrivateEnvironmentConfig) *PrivateEnvironmentConfig {
		return &v
	}).(PrivateEnvironmentConfigPtrOutput)
}

// Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block
func (o PrivateEnvironmentConfigOutput) CloudSqlIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEnvironmentConfig) *string { return v.CloudSqlIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true.
func (o PrivateEnvironmentConfigOutput) EnablePrivateEnvironment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PrivateEnvironmentConfig) *bool { return v.EnablePrivateEnvironment }).(pulumi.BoolPtrOutput)
}

// Optional. Configuration for the private GKE cluster for a Private IP Cloud Composer environment.
func (o PrivateEnvironmentConfigOutput) PrivateClusterConfig() PrivateClusterConfigPtrOutput {
	return o.ApplyT(func(v PrivateEnvironmentConfig) *PrivateClusterConfig { return v.PrivateClusterConfig }).(PrivateClusterConfigPtrOutput)
}

// Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block.
func (o PrivateEnvironmentConfigOutput) WebServerIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEnvironmentConfig) *string { return v.WebServerIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// Output only. The IP range reserved for the tenant project's App Engine VMs.
func (o PrivateEnvironmentConfigOutput) WebServerIpv4ReservedRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEnvironmentConfig) *string { return v.WebServerIpv4ReservedRange }).(pulumi.StringPtrOutput)
}

type PrivateEnvironmentConfigPtrOutput struct{ *pulumi.OutputState }

func (PrivateEnvironmentConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEnvironmentConfig)(nil)).Elem()
}

func (o PrivateEnvironmentConfigPtrOutput) ToPrivateEnvironmentConfigPtrOutput() PrivateEnvironmentConfigPtrOutput {
	return o
}

func (o PrivateEnvironmentConfigPtrOutput) ToPrivateEnvironmentConfigPtrOutputWithContext(ctx context.Context) PrivateEnvironmentConfigPtrOutput {
	return o
}

func (o PrivateEnvironmentConfigPtrOutput) Elem() PrivateEnvironmentConfigOutput {
	return o.ApplyT(func(v *PrivateEnvironmentConfig) PrivateEnvironmentConfig { return *v }).(PrivateEnvironmentConfigOutput)
}

// Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block
func (o PrivateEnvironmentConfigPtrOutput) CloudSqlIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEnvironmentConfig) *string {
		if v == nil {
			return nil
		}
		return v.CloudSqlIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true.
func (o PrivateEnvironmentConfigPtrOutput) EnablePrivateEnvironment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateEnvironmentConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateEnvironment
	}).(pulumi.BoolPtrOutput)
}

// Optional. Configuration for the private GKE cluster for a Private IP Cloud Composer environment.
func (o PrivateEnvironmentConfigPtrOutput) PrivateClusterConfig() PrivateClusterConfigPtrOutput {
	return o.ApplyT(func(v *PrivateEnvironmentConfig) *PrivateClusterConfig {
		if v == nil {
			return nil
		}
		return v.PrivateClusterConfig
	}).(PrivateClusterConfigPtrOutput)
}

// Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block.
func (o PrivateEnvironmentConfigPtrOutput) WebServerIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEnvironmentConfig) *string {
		if v == nil {
			return nil
		}
		return v.WebServerIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// Output only. The IP range reserved for the tenant project's App Engine VMs.
func (o PrivateEnvironmentConfigPtrOutput) WebServerIpv4ReservedRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEnvironmentConfig) *string {
		if v == nil {
			return nil
		}
		return v.WebServerIpv4ReservedRange
	}).(pulumi.StringPtrOutput)
}

// Specifies the selection and configuration of software inside the environment.
type SoftwareConfig struct {
	// Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example "core-dags_are_paused_at_creation". Section names must not contain hyphens ("-"), opening square brackets ("["), or closing square brackets ("]"). The property name must not be empty and must not contain an equals sign ("=") or semicolon (";"). Section and property names must not contain a period ("."). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.
	AirflowConfigOverrides map[string]string `pulumi:"airflowConfigOverrides"`
	// Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
	EnvVariables map[string]string `pulumi:"envVariables"`
	// The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+\.[0-9]+\.[0-9]+|latest)-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the version is a [semantic version](https://semver.org) or `latest`. When the patch version is omitted, the current Cloud Composer patch version is selected. When `latest` is provided instead of an explicit version number, the server replaces `latest` with the current Cloud Composer version and stores that version number in the same field. The portion of the image version that follows *airflow-* is an official Apache Airflow repository [release name](https://github.com/apache/incubator-airflow/releases). See also [Version List](/composer/docs/concepts/versioning/composer-versions).
	ImageVersion *string `pulumi:"imageVersion"`
	// Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as "numpy" and values are the lowercase extras and version specifier such as "==1.12.0", "[devel,gcp_api]", or "[devel]>=1.8.2, <1.9.2". To specify a package without pinning it to a version specifier, use the empty string as the value.
	PypiPackages map[string]string `pulumi:"pypiPackages"`
	// Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '2'. Cannot be updated.
	PythonVersion *string `pulumi:"pythonVersion"`
}

// SoftwareConfigInput is an input type that accepts SoftwareConfigArgs and SoftwareConfigOutput values.
// You can construct a concrete instance of `SoftwareConfigInput` via:
//
//          SoftwareConfigArgs{...}
type SoftwareConfigInput interface {
	pulumi.Input

	ToSoftwareConfigOutput() SoftwareConfigOutput
	ToSoftwareConfigOutputWithContext(context.Context) SoftwareConfigOutput
}

// Specifies the selection and configuration of software inside the environment.
type SoftwareConfigArgs struct {
	// Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example "core-dags_are_paused_at_creation". Section names must not contain hyphens ("-"), opening square brackets ("["), or closing square brackets ("]"). The property name must not be empty and must not contain an equals sign ("=") or semicolon (";"). Section and property names must not contain a period ("."). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.
	AirflowConfigOverrides pulumi.StringMapInput `pulumi:"airflowConfigOverrides"`
	// Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
	EnvVariables pulumi.StringMapInput `pulumi:"envVariables"`
	// The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+\.[0-9]+\.[0-9]+|latest)-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the version is a [semantic version](https://semver.org) or `latest`. When the patch version is omitted, the current Cloud Composer patch version is selected. When `latest` is provided instead of an explicit version number, the server replaces `latest` with the current Cloud Composer version and stores that version number in the same field. The portion of the image version that follows *airflow-* is an official Apache Airflow repository [release name](https://github.com/apache/incubator-airflow/releases). See also [Version List](/composer/docs/concepts/versioning/composer-versions).
	ImageVersion pulumi.StringPtrInput `pulumi:"imageVersion"`
	// Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as "numpy" and values are the lowercase extras and version specifier such as "==1.12.0", "[devel,gcp_api]", or "[devel]>=1.8.2, <1.9.2". To specify a package without pinning it to a version specifier, use the empty string as the value.
	PypiPackages pulumi.StringMapInput `pulumi:"pypiPackages"`
	// Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '2'. Cannot be updated.
	PythonVersion pulumi.StringPtrInput `pulumi:"pythonVersion"`
}

func (SoftwareConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareConfig)(nil)).Elem()
}

func (i SoftwareConfigArgs) ToSoftwareConfigOutput() SoftwareConfigOutput {
	return i.ToSoftwareConfigOutputWithContext(context.Background())
}

func (i SoftwareConfigArgs) ToSoftwareConfigOutputWithContext(ctx context.Context) SoftwareConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareConfigOutput)
}

func (i SoftwareConfigArgs) ToSoftwareConfigPtrOutput() SoftwareConfigPtrOutput {
	return i.ToSoftwareConfigPtrOutputWithContext(context.Background())
}

func (i SoftwareConfigArgs) ToSoftwareConfigPtrOutputWithContext(ctx context.Context) SoftwareConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareConfigOutput).ToSoftwareConfigPtrOutputWithContext(ctx)
}

// SoftwareConfigPtrInput is an input type that accepts SoftwareConfigArgs, SoftwareConfigPtr and SoftwareConfigPtrOutput values.
// You can construct a concrete instance of `SoftwareConfigPtrInput` via:
//
//          SoftwareConfigArgs{...}
//
//  or:
//
//          nil
type SoftwareConfigPtrInput interface {
	pulumi.Input

	ToSoftwareConfigPtrOutput() SoftwareConfigPtrOutput
	ToSoftwareConfigPtrOutputWithContext(context.Context) SoftwareConfigPtrOutput
}

type softwareConfigPtrType SoftwareConfigArgs

func SoftwareConfigPtr(v *SoftwareConfigArgs) SoftwareConfigPtrInput {
	return (*softwareConfigPtrType)(v)
}

func (*softwareConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareConfig)(nil)).Elem()
}

func (i *softwareConfigPtrType) ToSoftwareConfigPtrOutput() SoftwareConfigPtrOutput {
	return i.ToSoftwareConfigPtrOutputWithContext(context.Background())
}

func (i *softwareConfigPtrType) ToSoftwareConfigPtrOutputWithContext(ctx context.Context) SoftwareConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareConfigPtrOutput)
}

// Specifies the selection and configuration of software inside the environment.
type SoftwareConfigOutput struct{ *pulumi.OutputState }

func (SoftwareConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareConfig)(nil)).Elem()
}

func (o SoftwareConfigOutput) ToSoftwareConfigOutput() SoftwareConfigOutput {
	return o
}

func (o SoftwareConfigOutput) ToSoftwareConfigOutputWithContext(ctx context.Context) SoftwareConfigOutput {
	return o
}

func (o SoftwareConfigOutput) ToSoftwareConfigPtrOutput() SoftwareConfigPtrOutput {
	return o.ToSoftwareConfigPtrOutputWithContext(context.Background())
}

func (o SoftwareConfigOutput) ToSoftwareConfigPtrOutputWithContext(ctx context.Context) SoftwareConfigPtrOutput {
	return o.ApplyT(func(v SoftwareConfig) *SoftwareConfig {
		return &v
	}).(SoftwareConfigPtrOutput)
}

// Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example "core-dags_are_paused_at_creation". Section names must not contain hyphens ("-"), opening square brackets ("["), or closing square brackets ("]"). The property name must not be empty and must not contain an equals sign ("=") or semicolon (";"). Section and property names must not contain a period ("."). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.
func (o SoftwareConfigOutput) AirflowConfigOverrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v SoftwareConfig) map[string]string { return v.AirflowConfigOverrides }).(pulumi.StringMapOutput)
}

// Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
func (o SoftwareConfigOutput) EnvVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v SoftwareConfig) map[string]string { return v.EnvVariables }).(pulumi.StringMapOutput)
}

// The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+\.[0-9]+\.[0-9]+|latest)-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the version is a [semantic version](https://semver.org) or `latest`. When the patch version is omitted, the current Cloud Composer patch version is selected. When `latest` is provided instead of an explicit version number, the server replaces `latest` with the current Cloud Composer version and stores that version number in the same field. The portion of the image version that follows *airflow-* is an official Apache Airflow repository [release name](https://github.com/apache/incubator-airflow/releases). See also [Version List](/composer/docs/concepts/versioning/composer-versions).
func (o SoftwareConfigOutput) ImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareConfig) *string { return v.ImageVersion }).(pulumi.StringPtrOutput)
}

// Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as "numpy" and values are the lowercase extras and version specifier such as "==1.12.0", "[devel,gcp_api]", or "[devel]>=1.8.2, <1.9.2". To specify a package without pinning it to a version specifier, use the empty string as the value.
func (o SoftwareConfigOutput) PypiPackages() pulumi.StringMapOutput {
	return o.ApplyT(func(v SoftwareConfig) map[string]string { return v.PypiPackages }).(pulumi.StringMapOutput)
}

// Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '2'. Cannot be updated.
func (o SoftwareConfigOutput) PythonVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareConfig) *string { return v.PythonVersion }).(pulumi.StringPtrOutput)
}

type SoftwareConfigPtrOutput struct{ *pulumi.OutputState }

func (SoftwareConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareConfig)(nil)).Elem()
}

func (o SoftwareConfigPtrOutput) ToSoftwareConfigPtrOutput() SoftwareConfigPtrOutput {
	return o
}

func (o SoftwareConfigPtrOutput) ToSoftwareConfigPtrOutputWithContext(ctx context.Context) SoftwareConfigPtrOutput {
	return o
}

func (o SoftwareConfigPtrOutput) Elem() SoftwareConfigOutput {
	return o.ApplyT(func(v *SoftwareConfig) SoftwareConfig { return *v }).(SoftwareConfigOutput)
}

// Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example "core-dags_are_paused_at_creation". Section names must not contain hyphens ("-"), opening square brackets ("["), or closing square brackets ("]"). The property name must not be empty and must not contain an equals sign ("=") or semicolon (";"). Section and property names must not contain a period ("."). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.
func (o SoftwareConfigPtrOutput) AirflowConfigOverrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SoftwareConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.AirflowConfigOverrides
	}).(pulumi.StringMapOutput)
}

// Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
func (o SoftwareConfigPtrOutput) EnvVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SoftwareConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.EnvVariables
	}).(pulumi.StringMapOutput)
}

// The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+\.[0-9]+\.[0-9]+|latest)-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the version is a [semantic version](https://semver.org) or `latest`. When the patch version is omitted, the current Cloud Composer patch version is selected. When `latest` is provided instead of an explicit version number, the server replaces `latest` with the current Cloud Composer version and stores that version number in the same field. The portion of the image version that follows *airflow-* is an official Apache Airflow repository [release name](https://github.com/apache/incubator-airflow/releases). See also [Version List](/composer/docs/concepts/versioning/composer-versions).
func (o SoftwareConfigPtrOutput) ImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareConfig) *string {
		if v == nil {
			return nil
		}
		return v.ImageVersion
	}).(pulumi.StringPtrOutput)
}

// Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as "numpy" and values are the lowercase extras and version specifier such as "==1.12.0", "[devel,gcp_api]", or "[devel]>=1.8.2, <1.9.2". To specify a package without pinning it to a version specifier, use the empty string as the value.
func (o SoftwareConfigPtrOutput) PypiPackages() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SoftwareConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.PypiPackages
	}).(pulumi.StringMapOutput)
}

// Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '2'. Cannot be updated.
func (o SoftwareConfigPtrOutput) PythonVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareConfig) *string {
		if v == nil {
			return nil
		}
		return v.PythonVersion
	}).(pulumi.StringPtrOutput)
}

// The configuration settings for the Airflow web server App Engine instance.
type WebServerConfig struct {
	// Optional. Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. If not specified, composer-n1-webserver-2 will be used. Value custom is returned only in response, if Airflow web server parameters were manually changed to a non-standard values.
	MachineType *string `pulumi:"machineType"`
}

// WebServerConfigInput is an input type that accepts WebServerConfigArgs and WebServerConfigOutput values.
// You can construct a concrete instance of `WebServerConfigInput` via:
//
//          WebServerConfigArgs{...}
type WebServerConfigInput interface {
	pulumi.Input

	ToWebServerConfigOutput() WebServerConfigOutput
	ToWebServerConfigOutputWithContext(context.Context) WebServerConfigOutput
}

// The configuration settings for the Airflow web server App Engine instance.
type WebServerConfigArgs struct {
	// Optional. Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. If not specified, composer-n1-webserver-2 will be used. Value custom is returned only in response, if Airflow web server parameters were manually changed to a non-standard values.
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
}

func (WebServerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebServerConfig)(nil)).Elem()
}

func (i WebServerConfigArgs) ToWebServerConfigOutput() WebServerConfigOutput {
	return i.ToWebServerConfigOutputWithContext(context.Background())
}

func (i WebServerConfigArgs) ToWebServerConfigOutputWithContext(ctx context.Context) WebServerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebServerConfigOutput)
}

func (i WebServerConfigArgs) ToWebServerConfigPtrOutput() WebServerConfigPtrOutput {
	return i.ToWebServerConfigPtrOutputWithContext(context.Background())
}

func (i WebServerConfigArgs) ToWebServerConfigPtrOutputWithContext(ctx context.Context) WebServerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebServerConfigOutput).ToWebServerConfigPtrOutputWithContext(ctx)
}

// WebServerConfigPtrInput is an input type that accepts WebServerConfigArgs, WebServerConfigPtr and WebServerConfigPtrOutput values.
// You can construct a concrete instance of `WebServerConfigPtrInput` via:
//
//          WebServerConfigArgs{...}
//
//  or:
//
//          nil
type WebServerConfigPtrInput interface {
	pulumi.Input

	ToWebServerConfigPtrOutput() WebServerConfigPtrOutput
	ToWebServerConfigPtrOutputWithContext(context.Context) WebServerConfigPtrOutput
}

type webServerConfigPtrType WebServerConfigArgs

func WebServerConfigPtr(v *WebServerConfigArgs) WebServerConfigPtrInput {
	return (*webServerConfigPtrType)(v)
}

func (*webServerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebServerConfig)(nil)).Elem()
}

func (i *webServerConfigPtrType) ToWebServerConfigPtrOutput() WebServerConfigPtrOutput {
	return i.ToWebServerConfigPtrOutputWithContext(context.Background())
}

func (i *webServerConfigPtrType) ToWebServerConfigPtrOutputWithContext(ctx context.Context) WebServerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebServerConfigPtrOutput)
}

// The configuration settings for the Airflow web server App Engine instance.
type WebServerConfigOutput struct{ *pulumi.OutputState }

func (WebServerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebServerConfig)(nil)).Elem()
}

func (o WebServerConfigOutput) ToWebServerConfigOutput() WebServerConfigOutput {
	return o
}

func (o WebServerConfigOutput) ToWebServerConfigOutputWithContext(ctx context.Context) WebServerConfigOutput {
	return o
}

func (o WebServerConfigOutput) ToWebServerConfigPtrOutput() WebServerConfigPtrOutput {
	return o.ToWebServerConfigPtrOutputWithContext(context.Background())
}

func (o WebServerConfigOutput) ToWebServerConfigPtrOutputWithContext(ctx context.Context) WebServerConfigPtrOutput {
	return o.ApplyT(func(v WebServerConfig) *WebServerConfig {
		return &v
	}).(WebServerConfigPtrOutput)
}

// Optional. Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. If not specified, composer-n1-webserver-2 will be used. Value custom is returned only in response, if Airflow web server parameters were manually changed to a non-standard values.
func (o WebServerConfigOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebServerConfig) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

type WebServerConfigPtrOutput struct{ *pulumi.OutputState }

func (WebServerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebServerConfig)(nil)).Elem()
}

func (o WebServerConfigPtrOutput) ToWebServerConfigPtrOutput() WebServerConfigPtrOutput {
	return o
}

func (o WebServerConfigPtrOutput) ToWebServerConfigPtrOutputWithContext(ctx context.Context) WebServerConfigPtrOutput {
	return o
}

func (o WebServerConfigPtrOutput) Elem() WebServerConfigOutput {
	return o.ApplyT(func(v *WebServerConfig) WebServerConfig { return *v }).(WebServerConfigOutput)
}

// Optional. Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. If not specified, composer-n1-webserver-2 will be used. Value custom is returned only in response, if Airflow web server parameters were manually changed to a non-standard values.
func (o WebServerConfigPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebServerConfig) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// Network-level access control policy for the Airflow web server.
type WebServerNetworkAccessControl struct {
	// A collection of allowed IP ranges with descriptions.
	AllowedIpRanges []AllowedIpRange `pulumi:"allowedIpRanges"`
}

// WebServerNetworkAccessControlInput is an input type that accepts WebServerNetworkAccessControlArgs and WebServerNetworkAccessControlOutput values.
// You can construct a concrete instance of `WebServerNetworkAccessControlInput` via:
//
//          WebServerNetworkAccessControlArgs{...}
type WebServerNetworkAccessControlInput interface {
	pulumi.Input

	ToWebServerNetworkAccessControlOutput() WebServerNetworkAccessControlOutput
	ToWebServerNetworkAccessControlOutputWithContext(context.Context) WebServerNetworkAccessControlOutput
}

// Network-level access control policy for the Airflow web server.
type WebServerNetworkAccessControlArgs struct {
	// A collection of allowed IP ranges with descriptions.
	AllowedIpRanges AllowedIpRangeArrayInput `pulumi:"allowedIpRanges"`
}

func (WebServerNetworkAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebServerNetworkAccessControl)(nil)).Elem()
}

func (i WebServerNetworkAccessControlArgs) ToWebServerNetworkAccessControlOutput() WebServerNetworkAccessControlOutput {
	return i.ToWebServerNetworkAccessControlOutputWithContext(context.Background())
}

func (i WebServerNetworkAccessControlArgs) ToWebServerNetworkAccessControlOutputWithContext(ctx context.Context) WebServerNetworkAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebServerNetworkAccessControlOutput)
}

func (i WebServerNetworkAccessControlArgs) ToWebServerNetworkAccessControlPtrOutput() WebServerNetworkAccessControlPtrOutput {
	return i.ToWebServerNetworkAccessControlPtrOutputWithContext(context.Background())
}

func (i WebServerNetworkAccessControlArgs) ToWebServerNetworkAccessControlPtrOutputWithContext(ctx context.Context) WebServerNetworkAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebServerNetworkAccessControlOutput).ToWebServerNetworkAccessControlPtrOutputWithContext(ctx)
}

// WebServerNetworkAccessControlPtrInput is an input type that accepts WebServerNetworkAccessControlArgs, WebServerNetworkAccessControlPtr and WebServerNetworkAccessControlPtrOutput values.
// You can construct a concrete instance of `WebServerNetworkAccessControlPtrInput` via:
//
//          WebServerNetworkAccessControlArgs{...}
//
//  or:
//
//          nil
type WebServerNetworkAccessControlPtrInput interface {
	pulumi.Input

	ToWebServerNetworkAccessControlPtrOutput() WebServerNetworkAccessControlPtrOutput
	ToWebServerNetworkAccessControlPtrOutputWithContext(context.Context) WebServerNetworkAccessControlPtrOutput
}

type webServerNetworkAccessControlPtrType WebServerNetworkAccessControlArgs

func WebServerNetworkAccessControlPtr(v *WebServerNetworkAccessControlArgs) WebServerNetworkAccessControlPtrInput {
	return (*webServerNetworkAccessControlPtrType)(v)
}

func (*webServerNetworkAccessControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebServerNetworkAccessControl)(nil)).Elem()
}

func (i *webServerNetworkAccessControlPtrType) ToWebServerNetworkAccessControlPtrOutput() WebServerNetworkAccessControlPtrOutput {
	return i.ToWebServerNetworkAccessControlPtrOutputWithContext(context.Background())
}

func (i *webServerNetworkAccessControlPtrType) ToWebServerNetworkAccessControlPtrOutputWithContext(ctx context.Context) WebServerNetworkAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebServerNetworkAccessControlPtrOutput)
}

// Network-level access control policy for the Airflow web server.
type WebServerNetworkAccessControlOutput struct{ *pulumi.OutputState }

func (WebServerNetworkAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebServerNetworkAccessControl)(nil)).Elem()
}

func (o WebServerNetworkAccessControlOutput) ToWebServerNetworkAccessControlOutput() WebServerNetworkAccessControlOutput {
	return o
}

func (o WebServerNetworkAccessControlOutput) ToWebServerNetworkAccessControlOutputWithContext(ctx context.Context) WebServerNetworkAccessControlOutput {
	return o
}

func (o WebServerNetworkAccessControlOutput) ToWebServerNetworkAccessControlPtrOutput() WebServerNetworkAccessControlPtrOutput {
	return o.ToWebServerNetworkAccessControlPtrOutputWithContext(context.Background())
}

func (o WebServerNetworkAccessControlOutput) ToWebServerNetworkAccessControlPtrOutputWithContext(ctx context.Context) WebServerNetworkAccessControlPtrOutput {
	return o.ApplyT(func(v WebServerNetworkAccessControl) *WebServerNetworkAccessControl {
		return &v
	}).(WebServerNetworkAccessControlPtrOutput)
}

// A collection of allowed IP ranges with descriptions.
func (o WebServerNetworkAccessControlOutput) AllowedIpRanges() AllowedIpRangeArrayOutput {
	return o.ApplyT(func(v WebServerNetworkAccessControl) []AllowedIpRange { return v.AllowedIpRanges }).(AllowedIpRangeArrayOutput)
}

type WebServerNetworkAccessControlPtrOutput struct{ *pulumi.OutputState }

func (WebServerNetworkAccessControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebServerNetworkAccessControl)(nil)).Elem()
}

func (o WebServerNetworkAccessControlPtrOutput) ToWebServerNetworkAccessControlPtrOutput() WebServerNetworkAccessControlPtrOutput {
	return o
}

func (o WebServerNetworkAccessControlPtrOutput) ToWebServerNetworkAccessControlPtrOutputWithContext(ctx context.Context) WebServerNetworkAccessControlPtrOutput {
	return o
}

func (o WebServerNetworkAccessControlPtrOutput) Elem() WebServerNetworkAccessControlOutput {
	return o.ApplyT(func(v *WebServerNetworkAccessControl) WebServerNetworkAccessControl { return *v }).(WebServerNetworkAccessControlOutput)
}

// A collection of allowed IP ranges with descriptions.
func (o WebServerNetworkAccessControlPtrOutput) AllowedIpRanges() AllowedIpRangeArrayOutput {
	return o.ApplyT(func(v *WebServerNetworkAccessControl) []AllowedIpRange {
		if v == nil {
			return nil
		}
		return v.AllowedIpRanges
	}).(AllowedIpRangeArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(AllowedIpRangeOutput{})
	pulumi.RegisterOutputType(AllowedIpRangeArrayOutput{})
	pulumi.RegisterOutputType(DatabaseConfigOutput{})
	pulumi.RegisterOutputType(DatabaseConfigPtrOutput{})
	pulumi.RegisterOutputType(EncryptionConfigOutput{})
	pulumi.RegisterOutputType(EncryptionConfigPtrOutput{})
	pulumi.RegisterOutputType(EnvironmentConfigOutput{})
	pulumi.RegisterOutputType(EnvironmentConfigPtrOutput{})
	pulumi.RegisterOutputType(IPAllocationPolicyOutput{})
	pulumi.RegisterOutputType(IPAllocationPolicyPtrOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(NodeConfigOutput{})
	pulumi.RegisterOutputType(NodeConfigPtrOutput{})
	pulumi.RegisterOutputType(PrivateClusterConfigOutput{})
	pulumi.RegisterOutputType(PrivateClusterConfigPtrOutput{})
	pulumi.RegisterOutputType(PrivateEnvironmentConfigOutput{})
	pulumi.RegisterOutputType(PrivateEnvironmentConfigPtrOutput{})
	pulumi.RegisterOutputType(SoftwareConfigOutput{})
	pulumi.RegisterOutputType(SoftwareConfigPtrOutput{})
	pulumi.RegisterOutputType(WebServerConfigOutput{})
	pulumi.RegisterOutputType(WebServerConfigPtrOutput{})
	pulumi.RegisterOutputType(WebServerNetworkAccessControlOutput{})
	pulumi.RegisterOutputType(WebServerNetworkAccessControlPtrOutput{})
}
