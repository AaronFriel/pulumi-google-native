// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Create a new trigger in a particular project and location.
type GoogleLongrunningOperation struct {
	pulumi.CustomResourceState
}

// NewGoogleLongrunningOperation registers a new resource with the given unique name, arguments, and options.
func NewGoogleLongrunningOperation(ctx *pulumi.Context,
	name string, args *GoogleLongrunningOperationArgs, opts ...pulumi.ResourceOption) (*GoogleLongrunningOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	var resource GoogleLongrunningOperation
	err := ctx.RegisterResource("google-cloud:eventarc/v1:GoogleLongrunningOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGoogleLongrunningOperation gets an existing GoogleLongrunningOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGoogleLongrunningOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GoogleLongrunningOperationState, opts ...pulumi.ResourceOption) (*GoogleLongrunningOperation, error) {
	var resource GoogleLongrunningOperation
	err := ctx.ReadResource("google-cloud:eventarc/v1:GoogleLongrunningOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GoogleLongrunningOperation resources.
type googleLongrunningOperationState struct {
}

type GoogleLongrunningOperationState struct {
}

func (GoogleLongrunningOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*googleLongrunningOperationState)(nil)).Elem()
}

type googleLongrunningOperationArgs struct {
	// Output only. The creation time.
	CreateTime *string `pulumi:"createTime"`
	// Required. Destination specifies where the events should be sent to.
	Destination *Destination `pulumi:"destination"`
	// Output only. This checksum is computed by the server based on the value of other fields, and may be sent only on create requests to ensure the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Required. null The list of filters that applies to event attributes. Only events that match all the provided filters will be sent to the destination.
	EventFilters []EventFilter `pulumi:"eventFilters"`
	// Optional. User labels attached to the triggers that can be used to group resources.
	Labels map[string]string `pulumi:"labels"`
	// Required. The resource name of the trigger. Must be unique within the location on the project and must be in `projects/{project}/locations/{location}/triggers/{trigger}` format.
	Name *string `pulumi:"name"`
	// Required. The parent collection in which to add this trigger.
	Parent string `pulumi:"parent"`
	// Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The principal who calls this API must have `iam.serviceAccounts.actAs` permission in the service account. See https://cloud.google.com/iam/docs/understanding-service-accounts?hl=en#sa_common for more information. For Cloud Run destinations, this service account is used to generate identity tokens when invoking the service. See https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have `roles/eventarc.eventReceiver` IAM role.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Optional. In order to deliver messages, Eventarc may use other GCP products as transport intermediary. This field contains a reference to that transport intermediary. This information can be used for debugging purposes.
	Transport *Transport `pulumi:"transport"`
	// Required. The user-provided ID to be assigned to the trigger.
	TriggerId *string `pulumi:"triggerId"`
	// Output only. Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
	Uid *string `pulumi:"uid"`
	// Output only. The last-modified time.
	UpdateTime *string `pulumi:"updateTime"`
	// Required. If set, validate the request and preview the review, but do not actually post it.
	ValidateOnly *bool `pulumi:"validateOnly"`
}

// The set of arguments for constructing a GoogleLongrunningOperation resource.
type GoogleLongrunningOperationArgs struct {
	// Output only. The creation time.
	CreateTime pulumi.StringPtrInput
	// Required. Destination specifies where the events should be sent to.
	Destination DestinationPtrInput
	// Output only. This checksum is computed by the server based on the value of other fields, and may be sent only on create requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Required. null The list of filters that applies to event attributes. Only events that match all the provided filters will be sent to the destination.
	EventFilters EventFilterArrayInput
	// Optional. User labels attached to the triggers that can be used to group resources.
	Labels pulumi.StringMapInput
	// Required. The resource name of the trigger. Must be unique within the location on the project and must be in `projects/{project}/locations/{location}/triggers/{trigger}` format.
	Name pulumi.StringPtrInput
	// Required. The parent collection in which to add this trigger.
	Parent pulumi.StringInput
	// Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The principal who calls this API must have `iam.serviceAccounts.actAs` permission in the service account. See https://cloud.google.com/iam/docs/understanding-service-accounts?hl=en#sa_common for more information. For Cloud Run destinations, this service account is used to generate identity tokens when invoking the service. See https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have `roles/eventarc.eventReceiver` IAM role.
	ServiceAccount pulumi.StringPtrInput
	// Optional. In order to deliver messages, Eventarc may use other GCP products as transport intermediary. This field contains a reference to that transport intermediary. This information can be used for debugging purposes.
	Transport TransportPtrInput
	// Required. The user-provided ID to be assigned to the trigger.
	TriggerId pulumi.StringPtrInput
	// Output only. Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
	Uid pulumi.StringPtrInput
	// Output only. The last-modified time.
	UpdateTime pulumi.StringPtrInput
	// Required. If set, validate the request and preview the review, but do not actually post it.
	ValidateOnly pulumi.BoolPtrInput
}

func (GoogleLongrunningOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*googleLongrunningOperationArgs)(nil)).Elem()
}

type GoogleLongrunningOperationInput interface {
	pulumi.Input

	ToGoogleLongrunningOperationOutput() GoogleLongrunningOperationOutput
	ToGoogleLongrunningOperationOutputWithContext(ctx context.Context) GoogleLongrunningOperationOutput
}

func (*GoogleLongrunningOperation) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleLongrunningOperation)(nil))
}

func (i *GoogleLongrunningOperation) ToGoogleLongrunningOperationOutput() GoogleLongrunningOperationOutput {
	return i.ToGoogleLongrunningOperationOutputWithContext(context.Background())
}

func (i *GoogleLongrunningOperation) ToGoogleLongrunningOperationOutputWithContext(ctx context.Context) GoogleLongrunningOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleLongrunningOperationOutput)
}

type GoogleLongrunningOperationOutput struct {
	*pulumi.OutputState
}

func (GoogleLongrunningOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleLongrunningOperation)(nil))
}

func (o GoogleLongrunningOperationOutput) ToGoogleLongrunningOperationOutput() GoogleLongrunningOperationOutput {
	return o
}

func (o GoogleLongrunningOperationOutput) ToGoogleLongrunningOperationOutputWithContext(ctx context.Context) GoogleLongrunningOperationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GoogleLongrunningOperationOutput{})
}
