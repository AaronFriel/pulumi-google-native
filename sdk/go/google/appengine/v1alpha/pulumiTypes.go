// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// An SSL certificate obtained from a certificate authority.
type CertificateRawData struct {
	// Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: -----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY----- @InputOnly
	PrivateKey *string `pulumi:"privateKey"`
	// PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: -----BEGIN CERTIFICATE----- -----END CERTIFICATE-----
	PublicCertificate *string `pulumi:"publicCertificate"`
}

// CertificateRawDataInput is an input type that accepts CertificateRawDataArgs and CertificateRawDataOutput values.
// You can construct a concrete instance of `CertificateRawDataInput` via:
//
//          CertificateRawDataArgs{...}
type CertificateRawDataInput interface {
	pulumi.Input

	ToCertificateRawDataOutput() CertificateRawDataOutput
	ToCertificateRawDataOutputWithContext(context.Context) CertificateRawDataOutput
}

// An SSL certificate obtained from a certificate authority.
type CertificateRawDataArgs struct {
	// Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: -----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY----- @InputOnly
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: -----BEGIN CERTIFICATE----- -----END CERTIFICATE-----
	PublicCertificate pulumi.StringPtrInput `pulumi:"publicCertificate"`
}

func (CertificateRawDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateRawData)(nil)).Elem()
}

func (i CertificateRawDataArgs) ToCertificateRawDataOutput() CertificateRawDataOutput {
	return i.ToCertificateRawDataOutputWithContext(context.Background())
}

func (i CertificateRawDataArgs) ToCertificateRawDataOutputWithContext(ctx context.Context) CertificateRawDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRawDataOutput)
}

func (i CertificateRawDataArgs) ToCertificateRawDataPtrOutput() CertificateRawDataPtrOutput {
	return i.ToCertificateRawDataPtrOutputWithContext(context.Background())
}

func (i CertificateRawDataArgs) ToCertificateRawDataPtrOutputWithContext(ctx context.Context) CertificateRawDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRawDataOutput).ToCertificateRawDataPtrOutputWithContext(ctx)
}

// CertificateRawDataPtrInput is an input type that accepts CertificateRawDataArgs, CertificateRawDataPtr and CertificateRawDataPtrOutput values.
// You can construct a concrete instance of `CertificateRawDataPtrInput` via:
//
//          CertificateRawDataArgs{...}
//
//  or:
//
//          nil
type CertificateRawDataPtrInput interface {
	pulumi.Input

	ToCertificateRawDataPtrOutput() CertificateRawDataPtrOutput
	ToCertificateRawDataPtrOutputWithContext(context.Context) CertificateRawDataPtrOutput
}

type certificateRawDataPtrType CertificateRawDataArgs

func CertificateRawDataPtr(v *CertificateRawDataArgs) CertificateRawDataPtrInput {
	return (*certificateRawDataPtrType)(v)
}

func (*certificateRawDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateRawData)(nil)).Elem()
}

func (i *certificateRawDataPtrType) ToCertificateRawDataPtrOutput() CertificateRawDataPtrOutput {
	return i.ToCertificateRawDataPtrOutputWithContext(context.Background())
}

func (i *certificateRawDataPtrType) ToCertificateRawDataPtrOutputWithContext(ctx context.Context) CertificateRawDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRawDataPtrOutput)
}

// An SSL certificate obtained from a certificate authority.
type CertificateRawDataOutput struct{ *pulumi.OutputState }

func (CertificateRawDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateRawData)(nil)).Elem()
}

func (o CertificateRawDataOutput) ToCertificateRawDataOutput() CertificateRawDataOutput {
	return o
}

func (o CertificateRawDataOutput) ToCertificateRawDataOutputWithContext(ctx context.Context) CertificateRawDataOutput {
	return o
}

func (o CertificateRawDataOutput) ToCertificateRawDataPtrOutput() CertificateRawDataPtrOutput {
	return o.ToCertificateRawDataPtrOutputWithContext(context.Background())
}

func (o CertificateRawDataOutput) ToCertificateRawDataPtrOutputWithContext(ctx context.Context) CertificateRawDataPtrOutput {
	return o.ApplyT(func(v CertificateRawData) *CertificateRawData {
		return &v
	}).(CertificateRawDataPtrOutput)
}

// Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: -----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY----- @InputOnly
func (o CertificateRawDataOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateRawData) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: -----BEGIN CERTIFICATE----- -----END CERTIFICATE-----
func (o CertificateRawDataOutput) PublicCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateRawData) *string { return v.PublicCertificate }).(pulumi.StringPtrOutput)
}

type CertificateRawDataPtrOutput struct{ *pulumi.OutputState }

func (CertificateRawDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateRawData)(nil)).Elem()
}

func (o CertificateRawDataPtrOutput) ToCertificateRawDataPtrOutput() CertificateRawDataPtrOutput {
	return o
}

func (o CertificateRawDataPtrOutput) ToCertificateRawDataPtrOutputWithContext(ctx context.Context) CertificateRawDataPtrOutput {
	return o
}

func (o CertificateRawDataPtrOutput) Elem() CertificateRawDataOutput {
	return o.ApplyT(func(v *CertificateRawData) CertificateRawData { return *v }).(CertificateRawDataOutput)
}

// Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: -----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY----- @InputOnly
func (o CertificateRawDataPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateRawData) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: -----BEGIN CERTIFICATE----- -----END CERTIFICATE-----
func (o CertificateRawDataPtrOutput) PublicCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateRawData) *string {
		if v == nil {
			return nil
		}
		return v.PublicCertificate
	}).(pulumi.StringPtrOutput)
}

// A certificate managed by App Engine.
type ManagedCertificate struct {
	// Time at which the certificate was last renewed. The renewal process is fully managed. Certificate renewal will automatically occur before the certificate expires. Renewal errors can be tracked via ManagementStatus.@OutputOnly
	LastRenewalTime *string `pulumi:"lastRenewalTime"`
	// Status of certificate management. Refers to the most recent certificate acquisition or renewal attempt.@OutputOnly
	Status *string `pulumi:"status"`
}

// ManagedCertificateInput is an input type that accepts ManagedCertificateArgs and ManagedCertificateOutput values.
// You can construct a concrete instance of `ManagedCertificateInput` via:
//
//          ManagedCertificateArgs{...}
type ManagedCertificateInput interface {
	pulumi.Input

	ToManagedCertificateOutput() ManagedCertificateOutput
	ToManagedCertificateOutputWithContext(context.Context) ManagedCertificateOutput
}

// A certificate managed by App Engine.
type ManagedCertificateArgs struct {
	// Time at which the certificate was last renewed. The renewal process is fully managed. Certificate renewal will automatically occur before the certificate expires. Renewal errors can be tracked via ManagementStatus.@OutputOnly
	LastRenewalTime pulumi.StringPtrInput `pulumi:"lastRenewalTime"`
	// Status of certificate management. Refers to the most recent certificate acquisition or renewal attempt.@OutputOnly
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ManagedCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedCertificate)(nil)).Elem()
}

func (i ManagedCertificateArgs) ToManagedCertificateOutput() ManagedCertificateOutput {
	return i.ToManagedCertificateOutputWithContext(context.Background())
}

func (i ManagedCertificateArgs) ToManagedCertificateOutputWithContext(ctx context.Context) ManagedCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedCertificateOutput)
}

func (i ManagedCertificateArgs) ToManagedCertificatePtrOutput() ManagedCertificatePtrOutput {
	return i.ToManagedCertificatePtrOutputWithContext(context.Background())
}

func (i ManagedCertificateArgs) ToManagedCertificatePtrOutputWithContext(ctx context.Context) ManagedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedCertificateOutput).ToManagedCertificatePtrOutputWithContext(ctx)
}

// ManagedCertificatePtrInput is an input type that accepts ManagedCertificateArgs, ManagedCertificatePtr and ManagedCertificatePtrOutput values.
// You can construct a concrete instance of `ManagedCertificatePtrInput` via:
//
//          ManagedCertificateArgs{...}
//
//  or:
//
//          nil
type ManagedCertificatePtrInput interface {
	pulumi.Input

	ToManagedCertificatePtrOutput() ManagedCertificatePtrOutput
	ToManagedCertificatePtrOutputWithContext(context.Context) ManagedCertificatePtrOutput
}

type managedCertificatePtrType ManagedCertificateArgs

func ManagedCertificatePtr(v *ManagedCertificateArgs) ManagedCertificatePtrInput {
	return (*managedCertificatePtrType)(v)
}

func (*managedCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedCertificate)(nil)).Elem()
}

func (i *managedCertificatePtrType) ToManagedCertificatePtrOutput() ManagedCertificatePtrOutput {
	return i.ToManagedCertificatePtrOutputWithContext(context.Background())
}

func (i *managedCertificatePtrType) ToManagedCertificatePtrOutputWithContext(ctx context.Context) ManagedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedCertificatePtrOutput)
}

// A certificate managed by App Engine.
type ManagedCertificateOutput struct{ *pulumi.OutputState }

func (ManagedCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedCertificate)(nil)).Elem()
}

func (o ManagedCertificateOutput) ToManagedCertificateOutput() ManagedCertificateOutput {
	return o
}

func (o ManagedCertificateOutput) ToManagedCertificateOutputWithContext(ctx context.Context) ManagedCertificateOutput {
	return o
}

func (o ManagedCertificateOutput) ToManagedCertificatePtrOutput() ManagedCertificatePtrOutput {
	return o.ToManagedCertificatePtrOutputWithContext(context.Background())
}

func (o ManagedCertificateOutput) ToManagedCertificatePtrOutputWithContext(ctx context.Context) ManagedCertificatePtrOutput {
	return o.ApplyT(func(v ManagedCertificate) *ManagedCertificate {
		return &v
	}).(ManagedCertificatePtrOutput)
}

// Time at which the certificate was last renewed. The renewal process is fully managed. Certificate renewal will automatically occur before the certificate expires. Renewal errors can be tracked via ManagementStatus.@OutputOnly
func (o ManagedCertificateOutput) LastRenewalTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedCertificate) *string { return v.LastRenewalTime }).(pulumi.StringPtrOutput)
}

// Status of certificate management. Refers to the most recent certificate acquisition or renewal attempt.@OutputOnly
func (o ManagedCertificateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedCertificate) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ManagedCertificatePtrOutput struct{ *pulumi.OutputState }

func (ManagedCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedCertificate)(nil)).Elem()
}

func (o ManagedCertificatePtrOutput) ToManagedCertificatePtrOutput() ManagedCertificatePtrOutput {
	return o
}

func (o ManagedCertificatePtrOutput) ToManagedCertificatePtrOutputWithContext(ctx context.Context) ManagedCertificatePtrOutput {
	return o
}

func (o ManagedCertificatePtrOutput) Elem() ManagedCertificateOutput {
	return o.ApplyT(func(v *ManagedCertificate) ManagedCertificate { return *v }).(ManagedCertificateOutput)
}

// Time at which the certificate was last renewed. The renewal process is fully managed. Certificate renewal will automatically occur before the certificate expires. Renewal errors can be tracked via ManagementStatus.@OutputOnly
func (o ManagedCertificatePtrOutput) LastRenewalTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedCertificate) *string {
		if v == nil {
			return nil
		}
		return v.LastRenewalTime
	}).(pulumi.StringPtrOutput)
}

// Status of certificate management. Refers to the most recent certificate acquisition or renewal attempt.@OutputOnly
func (o ManagedCertificatePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedCertificate) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// A DNS resource record.
type ResourceRecord struct {
	// Relative name of the object affected by this record. Only applicable for CNAME records. Example: 'www'.
	Name *string `pulumi:"name"`
	// Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).
	Rrdata *string `pulumi:"rrdata"`
	// Resource record type. Example: AAAA.
	Type *string `pulumi:"type"`
}

// ResourceRecordInput is an input type that accepts ResourceRecordArgs and ResourceRecordOutput values.
// You can construct a concrete instance of `ResourceRecordInput` via:
//
//          ResourceRecordArgs{...}
type ResourceRecordInput interface {
	pulumi.Input

	ToResourceRecordOutput() ResourceRecordOutput
	ToResourceRecordOutputWithContext(context.Context) ResourceRecordOutput
}

// A DNS resource record.
type ResourceRecordArgs struct {
	// Relative name of the object affected by this record. Only applicable for CNAME records. Example: 'www'.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).
	Rrdata pulumi.StringPtrInput `pulumi:"rrdata"`
	// Resource record type. Example: AAAA.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ResourceRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRecord)(nil)).Elem()
}

func (i ResourceRecordArgs) ToResourceRecordOutput() ResourceRecordOutput {
	return i.ToResourceRecordOutputWithContext(context.Background())
}

func (i ResourceRecordArgs) ToResourceRecordOutputWithContext(ctx context.Context) ResourceRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRecordOutput)
}

// ResourceRecordArrayInput is an input type that accepts ResourceRecordArray and ResourceRecordArrayOutput values.
// You can construct a concrete instance of `ResourceRecordArrayInput` via:
//
//          ResourceRecordArray{ ResourceRecordArgs{...} }
type ResourceRecordArrayInput interface {
	pulumi.Input

	ToResourceRecordArrayOutput() ResourceRecordArrayOutput
	ToResourceRecordArrayOutputWithContext(context.Context) ResourceRecordArrayOutput
}

type ResourceRecordArray []ResourceRecordInput

func (ResourceRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRecord)(nil)).Elem()
}

func (i ResourceRecordArray) ToResourceRecordArrayOutput() ResourceRecordArrayOutput {
	return i.ToResourceRecordArrayOutputWithContext(context.Background())
}

func (i ResourceRecordArray) ToResourceRecordArrayOutputWithContext(ctx context.Context) ResourceRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRecordArrayOutput)
}

// A DNS resource record.
type ResourceRecordOutput struct{ *pulumi.OutputState }

func (ResourceRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRecord)(nil)).Elem()
}

func (o ResourceRecordOutput) ToResourceRecordOutput() ResourceRecordOutput {
	return o
}

func (o ResourceRecordOutput) ToResourceRecordOutputWithContext(ctx context.Context) ResourceRecordOutput {
	return o
}

// Relative name of the object affected by this record. Only applicable for CNAME records. Example: 'www'.
func (o ResourceRecordOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRecord) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).
func (o ResourceRecordOutput) Rrdata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRecord) *string { return v.Rrdata }).(pulumi.StringPtrOutput)
}

// Resource record type. Example: AAAA.
func (o ResourceRecordOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRecord) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ResourceRecordArrayOutput struct{ *pulumi.OutputState }

func (ResourceRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRecord)(nil)).Elem()
}

func (o ResourceRecordArrayOutput) ToResourceRecordArrayOutput() ResourceRecordArrayOutput {
	return o
}

func (o ResourceRecordArrayOutput) ToResourceRecordArrayOutputWithContext(ctx context.Context) ResourceRecordArrayOutput {
	return o
}

func (o ResourceRecordArrayOutput) Index(i pulumi.IntInput) ResourceRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceRecord {
		return vs[0].([]ResourceRecord)[vs[1].(int)]
	}).(ResourceRecordOutput)
}

// SSL configuration for a DomainMapping resource.
type SslSettings struct {
	// ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will remove SSL support.By default, a managed certificate is automatically created for every domain mapping. To omit SSL support or to configure SSL manually, specify no_managed_certificate on a CREATE or UPDATE request. You must be authorized to administer the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example: 12345.
	CertificateId *string `pulumi:"certificateId"`
	// Whether the mapped certificate is an App Engine managed certificate. Managed certificates are created by default with a domain mapping. To opt out, specify no_managed_certificate on a CREATE or UPDATE request.@OutputOnly
	IsManagedCertificate *bool `pulumi:"isManagedCertificate"`
}

// SslSettingsInput is an input type that accepts SslSettingsArgs and SslSettingsOutput values.
// You can construct a concrete instance of `SslSettingsInput` via:
//
//          SslSettingsArgs{...}
type SslSettingsInput interface {
	pulumi.Input

	ToSslSettingsOutput() SslSettingsOutput
	ToSslSettingsOutputWithContext(context.Context) SslSettingsOutput
}

// SSL configuration for a DomainMapping resource.
type SslSettingsArgs struct {
	// ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will remove SSL support.By default, a managed certificate is automatically created for every domain mapping. To omit SSL support or to configure SSL manually, specify no_managed_certificate on a CREATE or UPDATE request. You must be authorized to administer the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example: 12345.
	CertificateId pulumi.StringPtrInput `pulumi:"certificateId"`
	// Whether the mapped certificate is an App Engine managed certificate. Managed certificates are created by default with a domain mapping. To opt out, specify no_managed_certificate on a CREATE or UPDATE request.@OutputOnly
	IsManagedCertificate pulumi.BoolPtrInput `pulumi:"isManagedCertificate"`
}

func (SslSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslSettings)(nil)).Elem()
}

func (i SslSettingsArgs) ToSslSettingsOutput() SslSettingsOutput {
	return i.ToSslSettingsOutputWithContext(context.Background())
}

func (i SslSettingsArgs) ToSslSettingsOutputWithContext(ctx context.Context) SslSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslSettingsOutput)
}

func (i SslSettingsArgs) ToSslSettingsPtrOutput() SslSettingsPtrOutput {
	return i.ToSslSettingsPtrOutputWithContext(context.Background())
}

func (i SslSettingsArgs) ToSslSettingsPtrOutputWithContext(ctx context.Context) SslSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslSettingsOutput).ToSslSettingsPtrOutputWithContext(ctx)
}

// SslSettingsPtrInput is an input type that accepts SslSettingsArgs, SslSettingsPtr and SslSettingsPtrOutput values.
// You can construct a concrete instance of `SslSettingsPtrInput` via:
//
//          SslSettingsArgs{...}
//
//  or:
//
//          nil
type SslSettingsPtrInput interface {
	pulumi.Input

	ToSslSettingsPtrOutput() SslSettingsPtrOutput
	ToSslSettingsPtrOutputWithContext(context.Context) SslSettingsPtrOutput
}

type sslSettingsPtrType SslSettingsArgs

func SslSettingsPtr(v *SslSettingsArgs) SslSettingsPtrInput {
	return (*sslSettingsPtrType)(v)
}

func (*sslSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SslSettings)(nil)).Elem()
}

func (i *sslSettingsPtrType) ToSslSettingsPtrOutput() SslSettingsPtrOutput {
	return i.ToSslSettingsPtrOutputWithContext(context.Background())
}

func (i *sslSettingsPtrType) ToSslSettingsPtrOutputWithContext(ctx context.Context) SslSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslSettingsPtrOutput)
}

// SSL configuration for a DomainMapping resource.
type SslSettingsOutput struct{ *pulumi.OutputState }

func (SslSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslSettings)(nil)).Elem()
}

func (o SslSettingsOutput) ToSslSettingsOutput() SslSettingsOutput {
	return o
}

func (o SslSettingsOutput) ToSslSettingsOutputWithContext(ctx context.Context) SslSettingsOutput {
	return o
}

func (o SslSettingsOutput) ToSslSettingsPtrOutput() SslSettingsPtrOutput {
	return o.ToSslSettingsPtrOutputWithContext(context.Background())
}

func (o SslSettingsOutput) ToSslSettingsPtrOutputWithContext(ctx context.Context) SslSettingsPtrOutput {
	return o.ApplyT(func(v SslSettings) *SslSettings {
		return &v
	}).(SslSettingsPtrOutput)
}

// ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will remove SSL support.By default, a managed certificate is automatically created for every domain mapping. To omit SSL support or to configure SSL manually, specify no_managed_certificate on a CREATE or UPDATE request. You must be authorized to administer the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example: 12345.
func (o SslSettingsOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslSettings) *string { return v.CertificateId }).(pulumi.StringPtrOutput)
}

// Whether the mapped certificate is an App Engine managed certificate. Managed certificates are created by default with a domain mapping. To opt out, specify no_managed_certificate on a CREATE or UPDATE request.@OutputOnly
func (o SslSettingsOutput) IsManagedCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SslSettings) *bool { return v.IsManagedCertificate }).(pulumi.BoolPtrOutput)
}

type SslSettingsPtrOutput struct{ *pulumi.OutputState }

func (SslSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslSettings)(nil)).Elem()
}

func (o SslSettingsPtrOutput) ToSslSettingsPtrOutput() SslSettingsPtrOutput {
	return o
}

func (o SslSettingsPtrOutput) ToSslSettingsPtrOutputWithContext(ctx context.Context) SslSettingsPtrOutput {
	return o
}

func (o SslSettingsPtrOutput) Elem() SslSettingsOutput {
	return o.ApplyT(func(v *SslSettings) SslSettings { return *v }).(SslSettingsOutput)
}

// ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will remove SSL support.By default, a managed certificate is automatically created for every domain mapping. To omit SSL support or to configure SSL manually, specify no_managed_certificate on a CREATE or UPDATE request. You must be authorized to administer the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example: 12345.
func (o SslSettingsPtrOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslSettings) *string {
		if v == nil {
			return nil
		}
		return v.CertificateId
	}).(pulumi.StringPtrOutput)
}

// Whether the mapped certificate is an App Engine managed certificate. Managed certificates are created by default with a domain mapping. To opt out, specify no_managed_certificate on a CREATE or UPDATE request.@OutputOnly
func (o SslSettingsPtrOutput) IsManagedCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SslSettings) *bool {
		if v == nil {
			return nil
		}
		return v.IsManagedCertificate
	}).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CertificateRawDataOutput{})
	pulumi.RegisterOutputType(CertificateRawDataPtrOutput{})
	pulumi.RegisterOutputType(ManagedCertificateOutput{})
	pulumi.RegisterOutputType(ManagedCertificatePtrOutput{})
	pulumi.RegisterOutputType(ResourceRecordOutput{})
	pulumi.RegisterOutputType(ResourceRecordArrayOutput{})
	pulumi.RegisterOutputType(SslSettingsOutput{})
	pulumi.RegisterOutputType(SslSettingsPtrOutput{})
}
