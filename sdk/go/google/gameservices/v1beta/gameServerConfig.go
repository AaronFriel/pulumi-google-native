// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new game server config in a given project, location, and game server deployment. Game server configs are immutable, and are not applied until referenced in the game server deployment rollout resource.
type GameServerConfig struct {
	pulumi.CustomResourceState
}

// NewGameServerConfig registers a new resource with the given unique name, arguments, and options.
func NewGameServerConfig(ctx *pulumi.Context,
	name string, args *GameServerConfigArgs, opts ...pulumi.ResourceOption) (*GameServerConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	var resource GameServerConfig
	err := ctx.RegisterResource("google-cloud:gameservices/v1beta:GameServerConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGameServerConfig gets an existing GameServerConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGameServerConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GameServerConfigState, opts ...pulumi.ResourceOption) (*GameServerConfig, error) {
	var resource GameServerConfig
	err := ctx.ReadResource("google-cloud:gameservices/v1beta:GameServerConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GameServerConfig resources.
type gameServerConfigState struct {
}

type GameServerConfigState struct {
}

func (GameServerConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*gameServerConfigState)(nil)).Elem()
}

type gameServerConfigArgs struct {
	// Required. The ID of the game server config resource to be created.
	ConfigId *string `pulumi:"configId"`
	// Output only. The creation time.
	CreateTime *string `pulumi:"createTime"`
	// The description of the game server config.
	Description *string `pulumi:"description"`
	// FleetConfig contains a list of Agones fleet specs. Only one FleetConfig is allowed.
	FleetConfigs []FleetConfig `pulumi:"fleetConfigs"`
	// The labels associated with this game server config. Each label is a key-value pair.
	Labels map[string]string `pulumi:"labels"`
	// The resource name of the game server config, in the following form: `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/configs/{config}`. For example, `projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config`.
	Name *string `pulumi:"name"`
	// Required. The parent resource name, in the following form: `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/`.
	Parent string `pulumi:"parent"`
	// The autoscaling settings.
	ScalingConfigs []ScalingConfig `pulumi:"scalingConfigs"`
	// Output only. The last-modified time.
	UpdateTime *string `pulumi:"updateTime"`
}

// The set of arguments for constructing a GameServerConfig resource.
type GameServerConfigArgs struct {
	// Required. The ID of the game server config resource to be created.
	ConfigId pulumi.StringPtrInput
	// Output only. The creation time.
	CreateTime pulumi.StringPtrInput
	// The description of the game server config.
	Description pulumi.StringPtrInput
	// FleetConfig contains a list of Agones fleet specs. Only one FleetConfig is allowed.
	FleetConfigs FleetConfigArrayInput
	// The labels associated with this game server config. Each label is a key-value pair.
	Labels pulumi.StringMapInput
	// The resource name of the game server config, in the following form: `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/configs/{config}`. For example, `projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config`.
	Name pulumi.StringPtrInput
	// Required. The parent resource name, in the following form: `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/`.
	Parent pulumi.StringInput
	// The autoscaling settings.
	ScalingConfigs ScalingConfigArrayInput
	// Output only. The last-modified time.
	UpdateTime pulumi.StringPtrInput
}

func (GameServerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gameServerConfigArgs)(nil)).Elem()
}

type GameServerConfigInput interface {
	pulumi.Input

	ToGameServerConfigOutput() GameServerConfigOutput
	ToGameServerConfigOutputWithContext(ctx context.Context) GameServerConfigOutput
}

func (*GameServerConfig) ElementType() reflect.Type {
	return reflect.TypeOf((*GameServerConfig)(nil))
}

func (i *GameServerConfig) ToGameServerConfigOutput() GameServerConfigOutput {
	return i.ToGameServerConfigOutputWithContext(context.Background())
}

func (i *GameServerConfig) ToGameServerConfigOutputWithContext(ctx context.Context) GameServerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GameServerConfigOutput)
}

type GameServerConfigOutput struct {
	*pulumi.OutputState
}

func (GameServerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GameServerConfig)(nil))
}

func (o GameServerConfigOutput) ToGameServerConfigOutput() GameServerConfigOutput {
	return o
}

func (o GameServerConfigOutput) ToGameServerConfigOutputWithContext(ctx context.Context) GameServerConfigOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GameServerConfigOutput{})
}
