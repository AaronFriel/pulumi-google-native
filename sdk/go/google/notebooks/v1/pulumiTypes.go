// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are not supported.
type AcceleratorConfig struct {
	// Count of cores of this accelerator.
	CoreCount *string `pulumi:"coreCount"`
	// Type of this accelerator.
	Type *string `pulumi:"type"`
}

// AcceleratorConfigInput is an input type that accepts AcceleratorConfigArgs and AcceleratorConfigOutput values.
// You can construct a concrete instance of `AcceleratorConfigInput` via:
//
//          AcceleratorConfigArgs{...}
type AcceleratorConfigInput interface {
	pulumi.Input

	ToAcceleratorConfigOutput() AcceleratorConfigOutput
	ToAcceleratorConfigOutputWithContext(context.Context) AcceleratorConfigOutput
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are not supported.
type AcceleratorConfigArgs struct {
	// Count of cores of this accelerator.
	CoreCount pulumi.StringPtrInput `pulumi:"coreCount"`
	// Type of this accelerator.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (AcceleratorConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfig)(nil)).Elem()
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigOutput() AcceleratorConfigOutput {
	return i.ToAcceleratorConfigOutputWithContext(context.Background())
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigOutputWithContext(ctx context.Context) AcceleratorConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigOutput)
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigPtrOutput() AcceleratorConfigPtrOutput {
	return i.ToAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigPtrOutputWithContext(ctx context.Context) AcceleratorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigOutput).ToAcceleratorConfigPtrOutputWithContext(ctx)
}

// AcceleratorConfigPtrInput is an input type that accepts AcceleratorConfigArgs, AcceleratorConfigPtr and AcceleratorConfigPtrOutput values.
// You can construct a concrete instance of `AcceleratorConfigPtrInput` via:
//
//          AcceleratorConfigArgs{...}
//
//  or:
//
//          nil
type AcceleratorConfigPtrInput interface {
	pulumi.Input

	ToAcceleratorConfigPtrOutput() AcceleratorConfigPtrOutput
	ToAcceleratorConfigPtrOutputWithContext(context.Context) AcceleratorConfigPtrOutput
}

type acceleratorConfigPtrType AcceleratorConfigArgs

func AcceleratorConfigPtr(v *AcceleratorConfigArgs) AcceleratorConfigPtrInput {
	return (*acceleratorConfigPtrType)(v)
}

func (*acceleratorConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AcceleratorConfig)(nil)).Elem()
}

func (i *acceleratorConfigPtrType) ToAcceleratorConfigPtrOutput() AcceleratorConfigPtrOutput {
	return i.ToAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (i *acceleratorConfigPtrType) ToAcceleratorConfigPtrOutputWithContext(ctx context.Context) AcceleratorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigPtrOutput)
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are not supported.
type AcceleratorConfigOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfig)(nil)).Elem()
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigOutput() AcceleratorConfigOutput {
	return o
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigOutputWithContext(ctx context.Context) AcceleratorConfigOutput {
	return o
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigPtrOutput() AcceleratorConfigPtrOutput {
	return o.ToAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigPtrOutputWithContext(ctx context.Context) AcceleratorConfigPtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *AcceleratorConfig {
		return &v
	}).(AcceleratorConfigPtrOutput)
}

// Count of cores of this accelerator.
func (o AcceleratorConfigOutput) CoreCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *string { return v.CoreCount }).(pulumi.StringPtrOutput)
}

// Type of this accelerator.
func (o AcceleratorConfigOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type AcceleratorConfigPtrOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AcceleratorConfig)(nil)).Elem()
}

func (o AcceleratorConfigPtrOutput) ToAcceleratorConfigPtrOutput() AcceleratorConfigPtrOutput {
	return o
}

func (o AcceleratorConfigPtrOutput) ToAcceleratorConfigPtrOutputWithContext(ctx context.Context) AcceleratorConfigPtrOutput {
	return o
}

func (o AcceleratorConfigPtrOutput) Elem() AcceleratorConfigOutput {
	return o.ApplyT(func(v *AcceleratorConfig) AcceleratorConfig { return *v }).(AcceleratorConfigOutput)
}

// Count of cores of this accelerator.
func (o AcceleratorConfigPtrOutput) CoreCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AcceleratorConfig) *string {
		if v == nil {
			return nil
		}
		return v.CoreCount
	}).(pulumi.StringPtrOutput)
}

// Type of this accelerator.
func (o AcceleratorConfigPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AcceleratorConfig) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Definition of a container image for starting a notebook instance with the environment installed in a container.
type ContainerImage struct {
	// Required. The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
	Repository *string `pulumi:"repository"`
	// The tag of the container image. If not specified, this defaults to the latest tag.
	Tag *string `pulumi:"tag"`
}

// ContainerImageInput is an input type that accepts ContainerImageArgs and ContainerImageOutput values.
// You can construct a concrete instance of `ContainerImageInput` via:
//
//          ContainerImageArgs{...}
type ContainerImageInput interface {
	pulumi.Input

	ToContainerImageOutput() ContainerImageOutput
	ToContainerImageOutputWithContext(context.Context) ContainerImageOutput
}

// Definition of a container image for starting a notebook instance with the environment installed in a container.
type ContainerImageArgs struct {
	// Required. The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
	Repository pulumi.StringPtrInput `pulumi:"repository"`
	// The tag of the container image. If not specified, this defaults to the latest tag.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (ContainerImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImage)(nil)).Elem()
}

func (i ContainerImageArgs) ToContainerImageOutput() ContainerImageOutput {
	return i.ToContainerImageOutputWithContext(context.Background())
}

func (i ContainerImageArgs) ToContainerImageOutputWithContext(ctx context.Context) ContainerImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageOutput)
}

func (i ContainerImageArgs) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return i.ToContainerImagePtrOutputWithContext(context.Background())
}

func (i ContainerImageArgs) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageOutput).ToContainerImagePtrOutputWithContext(ctx)
}

// ContainerImagePtrInput is an input type that accepts ContainerImageArgs, ContainerImagePtr and ContainerImagePtrOutput values.
// You can construct a concrete instance of `ContainerImagePtrInput` via:
//
//          ContainerImageArgs{...}
//
//  or:
//
//          nil
type ContainerImagePtrInput interface {
	pulumi.Input

	ToContainerImagePtrOutput() ContainerImagePtrOutput
	ToContainerImagePtrOutputWithContext(context.Context) ContainerImagePtrOutput
}

type containerImagePtrType ContainerImageArgs

func ContainerImagePtr(v *ContainerImageArgs) ContainerImagePtrInput {
	return (*containerImagePtrType)(v)
}

func (*containerImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerImage)(nil)).Elem()
}

func (i *containerImagePtrType) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return i.ToContainerImagePtrOutputWithContext(context.Background())
}

func (i *containerImagePtrType) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImagePtrOutput)
}

// Definition of a container image for starting a notebook instance with the environment installed in a container.
type ContainerImageOutput struct{ *pulumi.OutputState }

func (ContainerImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImage)(nil)).Elem()
}

func (o ContainerImageOutput) ToContainerImageOutput() ContainerImageOutput {
	return o
}

func (o ContainerImageOutput) ToContainerImageOutputWithContext(ctx context.Context) ContainerImageOutput {
	return o
}

func (o ContainerImageOutput) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return o.ToContainerImagePtrOutputWithContext(context.Background())
}

func (o ContainerImageOutput) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return o.ApplyT(func(v ContainerImage) *ContainerImage {
		return &v
	}).(ContainerImagePtrOutput)
}

// Required. The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
func (o ContainerImageOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerImage) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

// The tag of the container image. If not specified, this defaults to the latest tag.
func (o ContainerImageOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerImage) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type ContainerImagePtrOutput struct{ *pulumi.OutputState }

func (ContainerImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerImage)(nil)).Elem()
}

func (o ContainerImagePtrOutput) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return o
}

func (o ContainerImagePtrOutput) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return o
}

func (o ContainerImagePtrOutput) Elem() ContainerImageOutput {
	return o.ApplyT(func(v *ContainerImage) ContainerImage { return *v }).(ContainerImageOutput)
}

// Required. The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
func (o ContainerImagePtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerImage) *string {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(pulumi.StringPtrOutput)
}

// The tag of the container image. If not specified, this defaults to the latest tag.
func (o ContainerImagePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerImage) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// An instance-attached disk resource.
type Disk struct {
	// Indicates whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
	AutoDelete *bool `pulumi:"autoDelete"`
	// Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
	Boot *bool `pulumi:"boot"`
	// Indicates a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine.This field is only applicable for persistent disks.
	DeviceName *string `pulumi:"deviceName"`
	// Indicates the size of the disk in base-2 GB.
	DiskSizeGb *string `pulumi:"diskSizeGb"`
	// Indicates a list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
	GuestOsFeatures []GuestOsFeature `pulumi:"guestOsFeatures"`
	// A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
	Index *string `pulumi:"index"`
	// Indicates the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. Valid values: NVME SCSI
	Interface *string `pulumi:"interface"`
	// Type of the resource. Always compute#attachedDisk for attached disks.
	Kind *string `pulumi:"kind"`
	// A list of publicly visible licenses. Reserved for Google's use. A License represents billing and aggregate usage data for public and marketplace images.
	Licenses []string `pulumi:"licenses"`
	// The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode. Valid values: READ_ONLY READ_WRITE
	Mode *string `pulumi:"mode"`
	// Indicates a valid partial or full URL to an existing Persistent Disk resource.
	Source *string `pulumi:"source"`
	// Indicates the type of the disk, either SCRATCH or PERSISTENT. Valid values: PERSISTENT SCRATCH
	Type *string `pulumi:"type"`
}

// DiskInput is an input type that accepts DiskArgs and DiskOutput values.
// You can construct a concrete instance of `DiskInput` via:
//
//          DiskArgs{...}
type DiskInput interface {
	pulumi.Input

	ToDiskOutput() DiskOutput
	ToDiskOutputWithContext(context.Context) DiskOutput
}

// An instance-attached disk resource.
type DiskArgs struct {
	// Indicates whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
	AutoDelete pulumi.BoolPtrInput `pulumi:"autoDelete"`
	// Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
	Boot pulumi.BoolPtrInput `pulumi:"boot"`
	// Indicates a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine.This field is only applicable for persistent disks.
	DeviceName pulumi.StringPtrInput `pulumi:"deviceName"`
	// Indicates the size of the disk in base-2 GB.
	DiskSizeGb pulumi.StringPtrInput `pulumi:"diskSizeGb"`
	// Indicates a list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
	GuestOsFeatures GuestOsFeatureArrayInput `pulumi:"guestOsFeatures"`
	// A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
	Index pulumi.StringPtrInput `pulumi:"index"`
	// Indicates the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. Valid values: NVME SCSI
	Interface pulumi.StringPtrInput `pulumi:"interface"`
	// Type of the resource. Always compute#attachedDisk for attached disks.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// A list of publicly visible licenses. Reserved for Google's use. A License represents billing and aggregate usage data for public and marketplace images.
	Licenses pulumi.StringArrayInput `pulumi:"licenses"`
	// The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode. Valid values: READ_ONLY READ_WRITE
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Indicates a valid partial or full URL to an existing Persistent Disk resource.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// Indicates the type of the disk, either SCRATCH or PERSISTENT. Valid values: PERSISTENT SCRATCH
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk)(nil)).Elem()
}

func (i DiskArgs) ToDiskOutput() DiskOutput {
	return i.ToDiskOutputWithContext(context.Background())
}

func (i DiskArgs) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskOutput)
}

// DiskArrayInput is an input type that accepts DiskArray and DiskArrayOutput values.
// You can construct a concrete instance of `DiskArrayInput` via:
//
//          DiskArray{ DiskArgs{...} }
type DiskArrayInput interface {
	pulumi.Input

	ToDiskArrayOutput() DiskArrayOutput
	ToDiskArrayOutputWithContext(context.Context) DiskArrayOutput
}

type DiskArray []DiskInput

func (DiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Disk)(nil)).Elem()
}

func (i DiskArray) ToDiskArrayOutput() DiskArrayOutput {
	return i.ToDiskArrayOutputWithContext(context.Background())
}

func (i DiskArray) ToDiskArrayOutputWithContext(ctx context.Context) DiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskArrayOutput)
}

// An instance-attached disk resource.
type DiskOutput struct{ *pulumi.OutputState }

func (DiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk)(nil)).Elem()
}

func (o DiskOutput) ToDiskOutput() DiskOutput {
	return o
}

func (o DiskOutput) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return o
}

// Indicates whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
func (o DiskOutput) AutoDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Disk) *bool { return v.AutoDelete }).(pulumi.BoolPtrOutput)
}

// Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
func (o DiskOutput) Boot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Disk) *bool { return v.Boot }).(pulumi.BoolPtrOutput)
}

// Indicates a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine.This field is only applicable for persistent disks.
func (o DiskOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Disk) *string { return v.DeviceName }).(pulumi.StringPtrOutput)
}

// Indicates the size of the disk in base-2 GB.
func (o DiskOutput) DiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Disk) *string { return v.DiskSizeGb }).(pulumi.StringPtrOutput)
}

// Indicates a list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
func (o DiskOutput) GuestOsFeatures() GuestOsFeatureArrayOutput {
	return o.ApplyT(func(v Disk) []GuestOsFeature { return v.GuestOsFeatures }).(GuestOsFeatureArrayOutput)
}

// A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
func (o DiskOutput) Index() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Disk) *string { return v.Index }).(pulumi.StringPtrOutput)
}

// Indicates the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. Valid values: NVME SCSI
func (o DiskOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Disk) *string { return v.Interface }).(pulumi.StringPtrOutput)
}

// Type of the resource. Always compute#attachedDisk for attached disks.
func (o DiskOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Disk) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// A list of publicly visible licenses. Reserved for Google's use. A License represents billing and aggregate usage data for public and marketplace images.
func (o DiskOutput) Licenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Disk) []string { return v.Licenses }).(pulumi.StringArrayOutput)
}

// The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode. Valid values: READ_ONLY READ_WRITE
func (o DiskOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Disk) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Indicates a valid partial or full URL to an existing Persistent Disk resource.
func (o DiskOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Disk) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Indicates the type of the disk, either SCRATCH or PERSISTENT. Valid values: PERSISTENT SCRATCH
func (o DiskOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Disk) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DiskArrayOutput struct{ *pulumi.OutputState }

func (DiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Disk)(nil)).Elem()
}

func (o DiskArrayOutput) ToDiskArrayOutput() DiskArrayOutput {
	return o
}

func (o DiskArrayOutput) ToDiskArrayOutputWithContext(ctx context.Context) DiskArrayOutput {
	return o
}

func (o DiskArrayOutput) Index(i pulumi.IntInput) DiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Disk {
		return vs[0].([]Disk)[vs[1].(int)]
	}).(DiskOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Guest OS features for boot disk.
type GuestOsFeature struct {
	// The ID of a supported feature. Read Enabling guest operating system features to see a list of available options. Valid values: FEATURE_TYPE_UNSPECIFIED MULTI_IP_SUBNET SECURE_BOOT UEFI_COMPATIBLE VIRTIO_SCSI_MULTIQUEUE WINDOWS
	Type *string `pulumi:"type"`
}

// GuestOsFeatureInput is an input type that accepts GuestOsFeatureArgs and GuestOsFeatureOutput values.
// You can construct a concrete instance of `GuestOsFeatureInput` via:
//
//          GuestOsFeatureArgs{...}
type GuestOsFeatureInput interface {
	pulumi.Input

	ToGuestOsFeatureOutput() GuestOsFeatureOutput
	ToGuestOsFeatureOutputWithContext(context.Context) GuestOsFeatureOutput
}

// Guest OS features for boot disk.
type GuestOsFeatureArgs struct {
	// The ID of a supported feature. Read Enabling guest operating system features to see a list of available options. Valid values: FEATURE_TYPE_UNSPECIFIED MULTI_IP_SUBNET SECURE_BOOT UEFI_COMPATIBLE VIRTIO_SCSI_MULTIQUEUE WINDOWS
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GuestOsFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GuestOsFeature)(nil)).Elem()
}

func (i GuestOsFeatureArgs) ToGuestOsFeatureOutput() GuestOsFeatureOutput {
	return i.ToGuestOsFeatureOutputWithContext(context.Background())
}

func (i GuestOsFeatureArgs) ToGuestOsFeatureOutputWithContext(ctx context.Context) GuestOsFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestOsFeatureOutput)
}

// GuestOsFeatureArrayInput is an input type that accepts GuestOsFeatureArray and GuestOsFeatureArrayOutput values.
// You can construct a concrete instance of `GuestOsFeatureArrayInput` via:
//
//          GuestOsFeatureArray{ GuestOsFeatureArgs{...} }
type GuestOsFeatureArrayInput interface {
	pulumi.Input

	ToGuestOsFeatureArrayOutput() GuestOsFeatureArrayOutput
	ToGuestOsFeatureArrayOutputWithContext(context.Context) GuestOsFeatureArrayOutput
}

type GuestOsFeatureArray []GuestOsFeatureInput

func (GuestOsFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GuestOsFeature)(nil)).Elem()
}

func (i GuestOsFeatureArray) ToGuestOsFeatureArrayOutput() GuestOsFeatureArrayOutput {
	return i.ToGuestOsFeatureArrayOutputWithContext(context.Background())
}

func (i GuestOsFeatureArray) ToGuestOsFeatureArrayOutputWithContext(ctx context.Context) GuestOsFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestOsFeatureArrayOutput)
}

// Guest OS features for boot disk.
type GuestOsFeatureOutput struct{ *pulumi.OutputState }

func (GuestOsFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GuestOsFeature)(nil)).Elem()
}

func (o GuestOsFeatureOutput) ToGuestOsFeatureOutput() GuestOsFeatureOutput {
	return o
}

func (o GuestOsFeatureOutput) ToGuestOsFeatureOutputWithContext(ctx context.Context) GuestOsFeatureOutput {
	return o
}

// The ID of a supported feature. Read Enabling guest operating system features to see a list of available options. Valid values: FEATURE_TYPE_UNSPECIFIED MULTI_IP_SUBNET SECURE_BOOT UEFI_COMPATIBLE VIRTIO_SCSI_MULTIQUEUE WINDOWS
func (o GuestOsFeatureOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuestOsFeature) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GuestOsFeatureArrayOutput struct{ *pulumi.OutputState }

func (GuestOsFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GuestOsFeature)(nil)).Elem()
}

func (o GuestOsFeatureArrayOutput) ToGuestOsFeatureArrayOutput() GuestOsFeatureArrayOutput {
	return o
}

func (o GuestOsFeatureArrayOutput) ToGuestOsFeatureArrayOutputWithContext(ctx context.Context) GuestOsFeatureArrayOutput {
	return o
}

func (o GuestOsFeatureArrayOutput) Index(i pulumi.IntInput) GuestOsFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GuestOsFeature {
		return vs[0].([]GuestOsFeature)[vs[1].(int)]
	}).(GuestOsFeatureOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyType struct {
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings []Binding `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag *string `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version *int `pulumi:"version"`
}

// PolicyTypeInput is an input type that accepts PolicyTypeArgs and PolicyTypeOutput values.
// You can construct a concrete instance of `PolicyTypeInput` via:
//
//          PolicyTypeArgs{...}
type PolicyTypeInput interface {
	pulumi.Input

	ToPolicyTypeOutput() PolicyTypeOutput
	ToPolicyTypeOutputWithContext(context.Context) PolicyTypeOutput
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyTypeArgs struct {
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings BindingArrayInput `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (PolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyType)(nil)).Elem()
}

func (i PolicyTypeArgs) ToPolicyTypeOutput() PolicyTypeOutput {
	return i.ToPolicyTypeOutputWithContext(context.Background())
}

func (i PolicyTypeArgs) ToPolicyTypeOutputWithContext(ctx context.Context) PolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyTypeOutput)
}

func (i PolicyTypeArgs) ToPolicyTypePtrOutput() PolicyTypePtrOutput {
	return i.ToPolicyTypePtrOutputWithContext(context.Background())
}

func (i PolicyTypeArgs) ToPolicyTypePtrOutputWithContext(ctx context.Context) PolicyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyTypeOutput).ToPolicyTypePtrOutputWithContext(ctx)
}

// PolicyTypePtrInput is an input type that accepts PolicyTypeArgs, PolicyTypePtr and PolicyTypePtrOutput values.
// You can construct a concrete instance of `PolicyTypePtrInput` via:
//
//          PolicyTypeArgs{...}
//
//  or:
//
//          nil
type PolicyTypePtrInput interface {
	pulumi.Input

	ToPolicyTypePtrOutput() PolicyTypePtrOutput
	ToPolicyTypePtrOutputWithContext(context.Context) PolicyTypePtrOutput
}

type policyTypePtrType PolicyTypeArgs

func PolicyTypePtr(v *PolicyTypeArgs) PolicyTypePtrInput {
	return (*policyTypePtrType)(v)
}

func (*policyTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyType)(nil)).Elem()
}

func (i *policyTypePtrType) ToPolicyTypePtrOutput() PolicyTypePtrOutput {
	return i.ToPolicyTypePtrOutputWithContext(context.Background())
}

func (i *policyTypePtrType) ToPolicyTypePtrOutputWithContext(ctx context.Context) PolicyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyTypePtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyTypeOutput struct{ *pulumi.OutputState }

func (PolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyType)(nil)).Elem()
}

func (o PolicyTypeOutput) ToPolicyTypeOutput() PolicyTypeOutput {
	return o
}

func (o PolicyTypeOutput) ToPolicyTypeOutputWithContext(ctx context.Context) PolicyTypeOutput {
	return o
}

func (o PolicyTypeOutput) ToPolicyTypePtrOutput() PolicyTypePtrOutput {
	return o.ToPolicyTypePtrOutputWithContext(context.Background())
}

func (o PolicyTypeOutput) ToPolicyTypePtrOutputWithContext(ctx context.Context) PolicyTypePtrOutput {
	return o.ApplyT(func(v PolicyType) *PolicyType {
		return &v
	}).(PolicyTypePtrOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyTypeOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v PolicyType) []Binding { return v.Bindings }).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyTypeOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyType) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyTypeOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyType) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type PolicyTypePtrOutput struct{ *pulumi.OutputState }

func (PolicyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyType)(nil)).Elem()
}

func (o PolicyTypePtrOutput) ToPolicyTypePtrOutput() PolicyTypePtrOutput {
	return o
}

func (o PolicyTypePtrOutput) ToPolicyTypePtrOutputWithContext(ctx context.Context) PolicyTypePtrOutput {
	return o
}

func (o PolicyTypePtrOutput) Elem() PolicyTypeOutput {
	return o.ApplyT(func(v *PolicyType) PolicyType { return *v }).(PolicyTypeOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyTypePtrOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v *PolicyType) []Binding {
		if v == nil {
			return nil
		}
		return v.Bindings
	}).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyTypePtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyType) *string {
		if v == nil {
			return nil
		}
		return v.Etag
	}).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyTypePtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyType) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

type UpgradeHistoryEntry struct {
	// The container image before this instance upgrade.
	ContainerImage *string `pulumi:"containerImage"`
	// The time that this instance upgrade history entry is created.
	CreateTime *string `pulumi:"createTime"`
	// The framework of this notebook instance.
	Framework *string `pulumi:"framework"`
	// The snapshot of the boot disk of this notebook instance before upgrade.
	Snapshot *string `pulumi:"snapshot"`
	// The state of this instance upgrade history entry.
	State *string `pulumi:"state"`
	// The version of the notebook instance before this upgrade.
	Version *string `pulumi:"version"`
	// The VM image before this instance upgrade.
	VmImage *string `pulumi:"vmImage"`
}

// UpgradeHistoryEntryInput is an input type that accepts UpgradeHistoryEntryArgs and UpgradeHistoryEntryOutput values.
// You can construct a concrete instance of `UpgradeHistoryEntryInput` via:
//
//          UpgradeHistoryEntryArgs{...}
type UpgradeHistoryEntryInput interface {
	pulumi.Input

	ToUpgradeHistoryEntryOutput() UpgradeHistoryEntryOutput
	ToUpgradeHistoryEntryOutputWithContext(context.Context) UpgradeHistoryEntryOutput
}

type UpgradeHistoryEntryArgs struct {
	// The container image before this instance upgrade.
	ContainerImage pulumi.StringPtrInput `pulumi:"containerImage"`
	// The time that this instance upgrade history entry is created.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// The framework of this notebook instance.
	Framework pulumi.StringPtrInput `pulumi:"framework"`
	// The snapshot of the boot disk of this notebook instance before upgrade.
	Snapshot pulumi.StringPtrInput `pulumi:"snapshot"`
	// The state of this instance upgrade history entry.
	State pulumi.StringPtrInput `pulumi:"state"`
	// The version of the notebook instance before this upgrade.
	Version pulumi.StringPtrInput `pulumi:"version"`
	// The VM image before this instance upgrade.
	VmImage pulumi.StringPtrInput `pulumi:"vmImage"`
}

func (UpgradeHistoryEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeHistoryEntry)(nil)).Elem()
}

func (i UpgradeHistoryEntryArgs) ToUpgradeHistoryEntryOutput() UpgradeHistoryEntryOutput {
	return i.ToUpgradeHistoryEntryOutputWithContext(context.Background())
}

func (i UpgradeHistoryEntryArgs) ToUpgradeHistoryEntryOutputWithContext(ctx context.Context) UpgradeHistoryEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeHistoryEntryOutput)
}

// UpgradeHistoryEntryArrayInput is an input type that accepts UpgradeHistoryEntryArray and UpgradeHistoryEntryArrayOutput values.
// You can construct a concrete instance of `UpgradeHistoryEntryArrayInput` via:
//
//          UpgradeHistoryEntryArray{ UpgradeHistoryEntryArgs{...} }
type UpgradeHistoryEntryArrayInput interface {
	pulumi.Input

	ToUpgradeHistoryEntryArrayOutput() UpgradeHistoryEntryArrayOutput
	ToUpgradeHistoryEntryArrayOutputWithContext(context.Context) UpgradeHistoryEntryArrayOutput
}

type UpgradeHistoryEntryArray []UpgradeHistoryEntryInput

func (UpgradeHistoryEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpgradeHistoryEntry)(nil)).Elem()
}

func (i UpgradeHistoryEntryArray) ToUpgradeHistoryEntryArrayOutput() UpgradeHistoryEntryArrayOutput {
	return i.ToUpgradeHistoryEntryArrayOutputWithContext(context.Background())
}

func (i UpgradeHistoryEntryArray) ToUpgradeHistoryEntryArrayOutputWithContext(ctx context.Context) UpgradeHistoryEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeHistoryEntryArrayOutput)
}

type UpgradeHistoryEntryOutput struct{ *pulumi.OutputState }

func (UpgradeHistoryEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeHistoryEntry)(nil)).Elem()
}

func (o UpgradeHistoryEntryOutput) ToUpgradeHistoryEntryOutput() UpgradeHistoryEntryOutput {
	return o
}

func (o UpgradeHistoryEntryOutput) ToUpgradeHistoryEntryOutputWithContext(ctx context.Context) UpgradeHistoryEntryOutput {
	return o
}

// The container image before this instance upgrade.
func (o UpgradeHistoryEntryOutput) ContainerImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.ContainerImage }).(pulumi.StringPtrOutput)
}

// The time that this instance upgrade history entry is created.
func (o UpgradeHistoryEntryOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// The framework of this notebook instance.
func (o UpgradeHistoryEntryOutput) Framework() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.Framework }).(pulumi.StringPtrOutput)
}

// The snapshot of the boot disk of this notebook instance before upgrade.
func (o UpgradeHistoryEntryOutput) Snapshot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.Snapshot }).(pulumi.StringPtrOutput)
}

// The state of this instance upgrade history entry.
func (o UpgradeHistoryEntryOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The version of the notebook instance before this upgrade.
func (o UpgradeHistoryEntryOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// The VM image before this instance upgrade.
func (o UpgradeHistoryEntryOutput) VmImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.VmImage }).(pulumi.StringPtrOutput)
}

type UpgradeHistoryEntryArrayOutput struct{ *pulumi.OutputState }

func (UpgradeHistoryEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpgradeHistoryEntry)(nil)).Elem()
}

func (o UpgradeHistoryEntryArrayOutput) ToUpgradeHistoryEntryArrayOutput() UpgradeHistoryEntryArrayOutput {
	return o
}

func (o UpgradeHistoryEntryArrayOutput) ToUpgradeHistoryEntryArrayOutputWithContext(ctx context.Context) UpgradeHistoryEntryArrayOutput {
	return o
}

func (o UpgradeHistoryEntryArrayOutput) Index(i pulumi.IntInput) UpgradeHistoryEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpgradeHistoryEntry {
		return vs[0].([]UpgradeHistoryEntry)[vs[1].(int)]
	}).(UpgradeHistoryEntryOutput)
}

// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
type VmImage struct {
	// Use this VM image family to find the image; the newest image in this family will be used.
	ImageFamily *string `pulumi:"imageFamily"`
	// Use VM image name to find the image.
	ImageName *string `pulumi:"imageName"`
	// Required. The name of the Google Cloud project that this VM image belongs to. Format: `projects/{project_id}`
	Project *string `pulumi:"project"`
}

// VmImageInput is an input type that accepts VmImageArgs and VmImageOutput values.
// You can construct a concrete instance of `VmImageInput` via:
//
//          VmImageArgs{...}
type VmImageInput interface {
	pulumi.Input

	ToVmImageOutput() VmImageOutput
	ToVmImageOutputWithContext(context.Context) VmImageOutput
}

// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
type VmImageArgs struct {
	// Use this VM image family to find the image; the newest image in this family will be used.
	ImageFamily pulumi.StringPtrInput `pulumi:"imageFamily"`
	// Use VM image name to find the image.
	ImageName pulumi.StringPtrInput `pulumi:"imageName"`
	// Required. The name of the Google Cloud project that this VM image belongs to. Format: `projects/{project_id}`
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (VmImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmImage)(nil)).Elem()
}

func (i VmImageArgs) ToVmImageOutput() VmImageOutput {
	return i.ToVmImageOutputWithContext(context.Background())
}

func (i VmImageArgs) ToVmImageOutputWithContext(ctx context.Context) VmImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmImageOutput)
}

func (i VmImageArgs) ToVmImagePtrOutput() VmImagePtrOutput {
	return i.ToVmImagePtrOutputWithContext(context.Background())
}

func (i VmImageArgs) ToVmImagePtrOutputWithContext(ctx context.Context) VmImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmImageOutput).ToVmImagePtrOutputWithContext(ctx)
}

// VmImagePtrInput is an input type that accepts VmImageArgs, VmImagePtr and VmImagePtrOutput values.
// You can construct a concrete instance of `VmImagePtrInput` via:
//
//          VmImageArgs{...}
//
//  or:
//
//          nil
type VmImagePtrInput interface {
	pulumi.Input

	ToVmImagePtrOutput() VmImagePtrOutput
	ToVmImagePtrOutputWithContext(context.Context) VmImagePtrOutput
}

type vmImagePtrType VmImageArgs

func VmImagePtr(v *VmImageArgs) VmImagePtrInput {
	return (*vmImagePtrType)(v)
}

func (*vmImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmImage)(nil)).Elem()
}

func (i *vmImagePtrType) ToVmImagePtrOutput() VmImagePtrOutput {
	return i.ToVmImagePtrOutputWithContext(context.Background())
}

func (i *vmImagePtrType) ToVmImagePtrOutputWithContext(ctx context.Context) VmImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmImagePtrOutput)
}

// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
type VmImageOutput struct{ *pulumi.OutputState }

func (VmImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmImage)(nil)).Elem()
}

func (o VmImageOutput) ToVmImageOutput() VmImageOutput {
	return o
}

func (o VmImageOutput) ToVmImageOutputWithContext(ctx context.Context) VmImageOutput {
	return o
}

func (o VmImageOutput) ToVmImagePtrOutput() VmImagePtrOutput {
	return o.ToVmImagePtrOutputWithContext(context.Background())
}

func (o VmImageOutput) ToVmImagePtrOutputWithContext(ctx context.Context) VmImagePtrOutput {
	return o.ApplyT(func(v VmImage) *VmImage {
		return &v
	}).(VmImagePtrOutput)
}

// Use this VM image family to find the image; the newest image in this family will be used.
func (o VmImageOutput) ImageFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmImage) *string { return v.ImageFamily }).(pulumi.StringPtrOutput)
}

// Use VM image name to find the image.
func (o VmImageOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmImage) *string { return v.ImageName }).(pulumi.StringPtrOutput)
}

// Required. The name of the Google Cloud project that this VM image belongs to. Format: `projects/{project_id}`
func (o VmImageOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmImage) *string { return v.Project }).(pulumi.StringPtrOutput)
}

type VmImagePtrOutput struct{ *pulumi.OutputState }

func (VmImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmImage)(nil)).Elem()
}

func (o VmImagePtrOutput) ToVmImagePtrOutput() VmImagePtrOutput {
	return o
}

func (o VmImagePtrOutput) ToVmImagePtrOutputWithContext(ctx context.Context) VmImagePtrOutput {
	return o
}

func (o VmImagePtrOutput) Elem() VmImageOutput {
	return o.ApplyT(func(v *VmImage) VmImage { return *v }).(VmImageOutput)
}

// Use this VM image family to find the image; the newest image in this family will be used.
func (o VmImagePtrOutput) ImageFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmImage) *string {
		if v == nil {
			return nil
		}
		return v.ImageFamily
	}).(pulumi.StringPtrOutput)
}

// Use VM image name to find the image.
func (o VmImagePtrOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmImage) *string {
		if v == nil {
			return nil
		}
		return v.ImageName
	}).(pulumi.StringPtrOutput)
}

// Required. The name of the Google Cloud project that this VM image belongs to. Format: `projects/{project_id}`
func (o VmImagePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmImage) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AcceleratorConfigOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigPtrOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(ContainerImageOutput{})
	pulumi.RegisterOutputType(ContainerImagePtrOutput{})
	pulumi.RegisterOutputType(DiskOutput{})
	pulumi.RegisterOutputType(DiskArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(GuestOsFeatureOutput{})
	pulumi.RegisterOutputType(GuestOsFeatureArrayOutput{})
	pulumi.RegisterOutputType(PolicyTypeOutput{})
	pulumi.RegisterOutputType(PolicyTypePtrOutput{})
	pulumi.RegisterOutputType(UpgradeHistoryEntryOutput{})
	pulumi.RegisterOutputType(UpgradeHistoryEntryArrayOutput{})
	pulumi.RegisterOutputType(VmImageOutput{})
	pulumi.RegisterOutputType(VmImagePtrOutput{})
}
