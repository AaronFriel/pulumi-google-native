// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a cluster in a project. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1beta2#clusteroperationmetadata).
type Cluster struct {
	pulumi.CustomResourceState
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	var resource Cluster
	err := ctx.RegisterResource("google-cloud:dataproc/v1beta2:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("google-cloud:dataproc/v1beta2:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
}

type ClusterState struct {
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// Required. The cluster name. Cluster names within a project must be unique. Names of deleted clusters can be reused.
	ClusterName *string `pulumi:"clusterName"`
	// Output only. A cluster UUID (Unique Universal Identifier). Dataproc generates this value when it creates the cluster.
	ClusterUuid *string `pulumi:"clusterUuid"`
	// Required. The cluster config. Note that Dataproc may set default values, and values may change when clusters are updated.
	Config *ClusterConfig `pulumi:"config"`
	// Optional. The labels to associate with this cluster. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
	Labels map[string]string `pulumi:"labels"`
	// Output only. Contains cluster daemon metrics such as HDFS and YARN stats.Beta Feature: This report is available for testing purposes only. It may be changed before final release.
	Metrics *ClusterMetrics `pulumi:"metrics"`
	// Required. The Google Cloud Platform project ID that the cluster belongs to.
	ProjectId string `pulumi:"projectId"`
	// Required. The Dataproc region in which to handle the request.
	Region string `pulumi:"region"`
	// Optional. A unique id used to identify the request. If the server receives two CreateClusterRequest requests with the same id, then the second request will be ignored and the first google.longrunning.Operation created and stored in the backend is returned.It is recommended to always set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
	RequestId *string `pulumi:"requestId"`
	// Output only. Cluster status.
	Status *ClusterStatus `pulumi:"status"`
	// Output only. The previous cluster status.
	StatusHistory []ClusterStatus `pulumi:"statusHistory"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Required. The cluster name. Cluster names within a project must be unique. Names of deleted clusters can be reused.
	ClusterName pulumi.StringPtrInput
	// Output only. A cluster UUID (Unique Universal Identifier). Dataproc generates this value when it creates the cluster.
	ClusterUuid pulumi.StringPtrInput
	// Required. The cluster config. Note that Dataproc may set default values, and values may change when clusters are updated.
	Config ClusterConfigPtrInput
	// Optional. The labels to associate with this cluster. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
	Labels pulumi.StringMapInput
	// Output only. Contains cluster daemon metrics such as HDFS and YARN stats.Beta Feature: This report is available for testing purposes only. It may be changed before final release.
	Metrics ClusterMetricsPtrInput
	// Required. The Google Cloud Platform project ID that the cluster belongs to.
	ProjectId pulumi.StringInput
	// Required. The Dataproc region in which to handle the request.
	Region pulumi.StringInput
	// Optional. A unique id used to identify the request. If the server receives two CreateClusterRequest requests with the same id, then the second request will be ignored and the first google.longrunning.Operation created and stored in the backend is returned.It is recommended to always set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
	RequestId pulumi.StringPtrInput
	// Output only. Cluster status.
	Status ClusterStatusPtrInput
	// Output only. The previous cluster status.
	StatusHistory ClusterStatusArrayInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil))
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

type ClusterOutput struct {
	*pulumi.OutputState
}

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil))
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ClusterOutput{})
}
