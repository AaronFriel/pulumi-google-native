// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a peered DNS domain which sends requests for records in given namespace originating in the service producer VPC network to the consumer VPC network to be resolved.
type PeeredDnsDomain struct {
	pulumi.CustomResourceState
}

// NewPeeredDnsDomain registers a new resource with the given unique name, arguments, and options.
func NewPeeredDnsDomain(ctx *pulumi.Context,
	name string, args *PeeredDnsDomainArgs, opts ...pulumi.ResourceOption) (*PeeredDnsDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	var resource PeeredDnsDomain
	err := ctx.RegisterResource("google-cloud:servicenetworking/v1:PeeredDnsDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeeredDnsDomain gets an existing PeeredDnsDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeeredDnsDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeeredDnsDomainState, opts ...pulumi.ResourceOption) (*PeeredDnsDomain, error) {
	var resource PeeredDnsDomain
	err := ctx.ReadResource("google-cloud:servicenetworking/v1:PeeredDnsDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PeeredDnsDomain resources.
type peeredDnsDomainState struct {
}

type PeeredDnsDomainState struct {
}

func (PeeredDnsDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*peeredDnsDomainState)(nil)).Elem()
}

type peeredDnsDomainArgs struct {
	// The DNS domain name suffix e.g. `example.com.`.
	DnsSuffix *string `pulumi:"dnsSuffix"`
	// User assigned name for this resource. Must be unique within the consumer network. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.
	Name *string `pulumi:"name"`
	// Required. Parent resource identifying the connection for which the peered DNS domain will be created in the format: `services/{service}/projects/{project}/global/networks/{network}` {service} is the peering service that is managing connectivity for the service producer's organization. For Google services that support this functionality, this value is `servicenetworking.googleapis.com`. {project} is the number of the project that contains the service consumer's VPC network e.g. `12345`. {network} is the name of the service consumer's VPC network.
	Parent string `pulumi:"parent"`
}

// The set of arguments for constructing a PeeredDnsDomain resource.
type PeeredDnsDomainArgs struct {
	// The DNS domain name suffix e.g. `example.com.`.
	DnsSuffix pulumi.StringPtrInput
	// User assigned name for this resource. Must be unique within the consumer network. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.
	Name pulumi.StringPtrInput
	// Required. Parent resource identifying the connection for which the peered DNS domain will be created in the format: `services/{service}/projects/{project}/global/networks/{network}` {service} is the peering service that is managing connectivity for the service producer's organization. For Google services that support this functionality, this value is `servicenetworking.googleapis.com`. {project} is the number of the project that contains the service consumer's VPC network e.g. `12345`. {network} is the name of the service consumer's VPC network.
	Parent pulumi.StringInput
}

func (PeeredDnsDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peeredDnsDomainArgs)(nil)).Elem()
}

type PeeredDnsDomainInput interface {
	pulumi.Input

	ToPeeredDnsDomainOutput() PeeredDnsDomainOutput
	ToPeeredDnsDomainOutputWithContext(ctx context.Context) PeeredDnsDomainOutput
}

func (*PeeredDnsDomain) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeredDnsDomain)(nil))
}

func (i *PeeredDnsDomain) ToPeeredDnsDomainOutput() PeeredDnsDomainOutput {
	return i.ToPeeredDnsDomainOutputWithContext(context.Background())
}

func (i *PeeredDnsDomain) ToPeeredDnsDomainOutputWithContext(ctx context.Context) PeeredDnsDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeredDnsDomainOutput)
}

type PeeredDnsDomainOutput struct {
	*pulumi.OutputState
}

func (PeeredDnsDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeredDnsDomain)(nil))
}

func (o PeeredDnsDomainOutput) ToPeeredDnsDomainOutput() PeeredDnsDomainOutput {
	return o
}

func (o PeeredDnsDomainOutput) ToPeeredDnsDomainOutputWithContext(ctx context.Context) PeeredDnsDomainOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(PeeredDnsDomainOutput{})
}
