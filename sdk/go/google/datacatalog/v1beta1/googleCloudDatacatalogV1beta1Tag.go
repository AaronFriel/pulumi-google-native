// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a tag on an Entry. Note: The project identified by the `parent` parameter for the [tag](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries.tags/create#path-parameters) and the [tag template](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/create#path-parameters) used to create the tag must be from the same organization.
type GoogleCloudDatacatalogV1beta1Tag struct {
	pulumi.CustomResourceState
}

// NewGoogleCloudDatacatalogV1beta1Tag registers a new resource with the given unique name, arguments, and options.
func NewGoogleCloudDatacatalogV1beta1Tag(ctx *pulumi.Context,
	name string, args *GoogleCloudDatacatalogV1beta1TagArgs, opts ...pulumi.ResourceOption) (*GoogleCloudDatacatalogV1beta1Tag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	var resource GoogleCloudDatacatalogV1beta1Tag
	err := ctx.RegisterResource("google-cloud:datacatalog/v1beta1:GoogleCloudDatacatalogV1beta1Tag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGoogleCloudDatacatalogV1beta1Tag gets an existing GoogleCloudDatacatalogV1beta1Tag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGoogleCloudDatacatalogV1beta1Tag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GoogleCloudDatacatalogV1beta1TagState, opts ...pulumi.ResourceOption) (*GoogleCloudDatacatalogV1beta1Tag, error) {
	var resource GoogleCloudDatacatalogV1beta1Tag
	err := ctx.ReadResource("google-cloud:datacatalog/v1beta1:GoogleCloudDatacatalogV1beta1Tag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GoogleCloudDatacatalogV1beta1Tag resources.
type googleCloudDatacatalogV1beta1TagState struct {
}

type GoogleCloudDatacatalogV1beta1TagState struct {
}

func (GoogleCloudDatacatalogV1beta1TagState) ElementType() reflect.Type {
	return reflect.TypeOf((*googleCloudDatacatalogV1beta1TagState)(nil)).Elem()
}

type googleCloudDatacatalogV1beta1TagArgs struct {
	// Resources like Entry can have schemas associated with them. This scope allows users to attach tags to an individual column based on that schema. For attaching a tag to a nested column, use `.` to separate the column names. Example: * `outer_column.inner_column`
	Column *string `pulumi:"column"`
	// Required. This maps the ID of a tag field to the value of and additional information about that field. Valid field IDs are defined by the tag's template. A tag must have at least 1 field and at most 500 fields.
	Fields map[string]string `pulumi:"fields"`
	// The resource name of the tag in URL format. Example: * projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}/tags/{tag_id} where `tag_id` is a system-generated identifier. Note that this Tag may not actually be stored in the location in this name.
	Name *string `pulumi:"name"`
	// Required. The name of the resource to attach this tag to. Tags can be attached to Entries. Example: * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id} Note that this Tag and its child resources may not actually be stored in the location in this name.
	Parent string `pulumi:"parent"`
	// Required. The resource name of the tag template that this tag uses. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id} This field cannot be modified after creation.
	Template *string `pulumi:"template"`
	// Output only. The display name of the tag template.
	TemplateDisplayName *string `pulumi:"templateDisplayName"`
}

// The set of arguments for constructing a GoogleCloudDatacatalogV1beta1Tag resource.
type GoogleCloudDatacatalogV1beta1TagArgs struct {
	// Resources like Entry can have schemas associated with them. This scope allows users to attach tags to an individual column based on that schema. For attaching a tag to a nested column, use `.` to separate the column names. Example: * `outer_column.inner_column`
	Column pulumi.StringPtrInput
	// Required. This maps the ID of a tag field to the value of and additional information about that field. Valid field IDs are defined by the tag's template. A tag must have at least 1 field and at most 500 fields.
	Fields pulumi.StringMapInput
	// The resource name of the tag in URL format. Example: * projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}/tags/{tag_id} where `tag_id` is a system-generated identifier. Note that this Tag may not actually be stored in the location in this name.
	Name pulumi.StringPtrInput
	// Required. The name of the resource to attach this tag to. Tags can be attached to Entries. Example: * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id} Note that this Tag and its child resources may not actually be stored in the location in this name.
	Parent pulumi.StringInput
	// Required. The resource name of the tag template that this tag uses. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id} This field cannot be modified after creation.
	Template pulumi.StringPtrInput
	// Output only. The display name of the tag template.
	TemplateDisplayName pulumi.StringPtrInput
}

func (GoogleCloudDatacatalogV1beta1TagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*googleCloudDatacatalogV1beta1TagArgs)(nil)).Elem()
}

type GoogleCloudDatacatalogV1beta1TagInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1TagOutput() GoogleCloudDatacatalogV1beta1TagOutput
	ToGoogleCloudDatacatalogV1beta1TagOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1TagOutput
}

func (*GoogleCloudDatacatalogV1beta1Tag) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1Tag)(nil))
}

func (i *GoogleCloudDatacatalogV1beta1Tag) ToGoogleCloudDatacatalogV1beta1TagOutput() GoogleCloudDatacatalogV1beta1TagOutput {
	return i.ToGoogleCloudDatacatalogV1beta1TagOutputWithContext(context.Background())
}

func (i *GoogleCloudDatacatalogV1beta1Tag) ToGoogleCloudDatacatalogV1beta1TagOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1TagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1TagOutput)
}

type GoogleCloudDatacatalogV1beta1TagOutput struct {
	*pulumi.OutputState
}

func (GoogleCloudDatacatalogV1beta1TagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1Tag)(nil))
}

func (o GoogleCloudDatacatalogV1beta1TagOutput) ToGoogleCloudDatacatalogV1beta1TagOutput() GoogleCloudDatacatalogV1beta1TagOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1TagOutput) ToGoogleCloudDatacatalogV1beta1TagOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1TagOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1TagOutput{})
}
