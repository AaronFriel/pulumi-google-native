// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members` with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// BindingResponseInput is an input type that accepts BindingResponseArgs and BindingResponseOutput values.
// You can construct a concrete instance of `BindingResponseInput` via:
//
//          BindingResponseArgs{...}
type BindingResponseInput interface {
	pulumi.Input

	ToBindingResponseOutput() BindingResponseOutput
	ToBindingResponseOutputWithContext(context.Context) BindingResponseOutput
}

// Associates `members` with a `role`.
type BindingResponseArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponseInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringInput `pulumi:"role"`
}

func (BindingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (i BindingResponseArgs) ToBindingResponseOutput() BindingResponseOutput {
	return i.ToBindingResponseOutputWithContext(context.Background())
}

func (i BindingResponseArgs) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingResponseOutput)
}

// BindingResponseArrayInput is an input type that accepts BindingResponseArray and BindingResponseArrayOutput values.
// You can construct a concrete instance of `BindingResponseArrayInput` via:
//
//          BindingResponseArray{ BindingResponseArgs{...} }
type BindingResponseArrayInput interface {
	pulumi.Input

	ToBindingResponseArrayOutput() BindingResponseArrayOutput
	ToBindingResponseArrayOutputWithContext(context.Context) BindingResponseArrayOutput
}

type BindingResponseArray []BindingResponseInput

func (BindingResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (i BindingResponseArray) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return i.ToBindingResponseArrayOutputWithContext(context.Background())
}

func (i BindingResponseArray) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingResponseArrayOutput)
}

// Associates `members` with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// ExprResponseInput is an input type that accepts ExprResponseArgs and ExprResponseOutput values.
// You can construct a concrete instance of `ExprResponseInput` via:
//
//          ExprResponseArgs{...}
type ExprResponseInput interface {
	pulumi.Input

	ToExprResponseOutput() ExprResponseOutput
	ToExprResponseOutputWithContext(context.Context) ExprResponseOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringInput `pulumi:"title"`
}

func (ExprResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (i ExprResponseArgs) ToExprResponseOutput() ExprResponseOutput {
	return i.ToExprResponseOutputWithContext(context.Background())
}

func (i ExprResponseArgs) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).
type GoogleCloudDatacatalogV1BigQueryDateShardedSpec struct {
}

// GoogleCloudDatacatalogV1BigQueryDateShardedSpecInput is an input type that accepts GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs and GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1BigQueryDateShardedSpecInput` via:
//
//          GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs{...}
type GoogleCloudDatacatalogV1BigQueryDateShardedSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput
	ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput
}

// Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).
type GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs struct {
}

func (GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryDateShardedSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput)
}

func (i GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput).ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs, GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtr and GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput
	ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput
}

type googleCloudDatacatalogV1BigQueryDateShardedSpecPtrType GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs

func GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtr(v *GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs) GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrInput {
	return (*googleCloudDatacatalogV1BigQueryDateShardedSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1BigQueryDateShardedSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1BigQueryDateShardedSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1BigQueryDateShardedSpecPtrType) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1BigQueryDateShardedSpecPtrType) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput)
}

// Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).
type GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryDateShardedSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryDateShardedSpec) *GoogleCloudDatacatalogV1BigQueryDateShardedSpec {
		return &v
	}).(GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput)
}

type GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1BigQueryDateShardedSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput) Elem() GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryDateShardedSpec) GoogleCloudDatacatalogV1BigQueryDateShardedSpec {
		return *v
	}).(GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput)
}

// Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).
type GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse struct {
	// The Data Catalog resource name of the dataset entry the current table belongs to. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`.
	Dataset string `pulumi:"dataset"`
	// Total number of shards.
	ShardCount string `pulumi:"shardCount"`
	// The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`. For example, for the `MyTable20180101` shard, the `table_prefix` is `MyTable`.
	TablePrefix string `pulumi:"tablePrefix"`
}

// GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseInput is an input type that accepts GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseArgs and GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseInput` via:
//
//          GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseArgs{...}
type GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput
	ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutputWithContext(context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput
}

// Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).
type GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseArgs struct {
	// The Data Catalog resource name of the dataset entry the current table belongs to. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`.
	Dataset pulumi.StringInput `pulumi:"dataset"`
	// Total number of shards.
	ShardCount pulumi.StringInput `pulumi:"shardCount"`
	// The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`. For example, for the `MyTable20180101` shard, the `table_prefix` is `MyTable`.
	TablePrefix pulumi.StringInput `pulumi:"tablePrefix"`
}

func (GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseArgs) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseArgs) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput)
}

func (i GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseArgs) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseArgs) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput).ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrInput is an input type that accepts GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseArgs, GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtr and GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrInput` via:
//
//          GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput
	ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput
}

type googleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrType GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseArgs

func GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtr(v *GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseArgs) GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrInput {
	return (*googleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrType)(v)
}

func (*googleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrType) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrType) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput)
}

// Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).
type GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput {
	return o.ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse) *GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse {
		return &v
	}).(GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput)
}

// The Data Catalog resource name of the dataset entry the current table belongs to. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`.
func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse) string { return v.Dataset }).(pulumi.StringOutput)
}

// Total number of shards.
func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput) ShardCount() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse) string { return v.ShardCount }).(pulumi.StringOutput)
}

// The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`. For example, for the `MyTable20180101` shard, the `table_prefix` is `MyTable`.
func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput) TablePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse) string { return v.TablePrefix }).(pulumi.StringOutput)
}

type GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput) Elem() GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse) GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse {
		return *v
	}).(GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput)
}

// The Data Catalog resource name of the dataset entry the current table belongs to. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`.
func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput) Dataset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Dataset
	}).(pulumi.StringPtrOutput)
}

// Total number of shards.
func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput) ShardCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ShardCount
	}).(pulumi.StringPtrOutput)
}

// The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`. For example, for the `MyTable20180101` shard, the `table_prefix` is `MyTable`.
func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput) TablePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TablePrefix
	}).(pulumi.StringPtrOutput)
}

// Describes a BigQuery table.
type GoogleCloudDatacatalogV1BigQueryTableSpec struct {
	// Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`.
	TableSpec *GoogleCloudDatacatalogV1TableSpec `pulumi:"tableSpec"`
	// Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.
	ViewSpec *GoogleCloudDatacatalogV1ViewSpec `pulumi:"viewSpec"`
}

// GoogleCloudDatacatalogV1BigQueryTableSpecInput is an input type that accepts GoogleCloudDatacatalogV1BigQueryTableSpecArgs and GoogleCloudDatacatalogV1BigQueryTableSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1BigQueryTableSpecInput` via:
//
//          GoogleCloudDatacatalogV1BigQueryTableSpecArgs{...}
type GoogleCloudDatacatalogV1BigQueryTableSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1BigQueryTableSpecOutput() GoogleCloudDatacatalogV1BigQueryTableSpecOutput
	ToGoogleCloudDatacatalogV1BigQueryTableSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecOutput
}

// Describes a BigQuery table.
type GoogleCloudDatacatalogV1BigQueryTableSpecArgs struct {
	// Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`.
	TableSpec GoogleCloudDatacatalogV1TableSpecPtrInput `pulumi:"tableSpec"`
	// Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.
	ViewSpec GoogleCloudDatacatalogV1ViewSpecPtrInput `pulumi:"viewSpec"`
}

func (GoogleCloudDatacatalogV1BigQueryTableSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryTableSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1BigQueryTableSpecArgs) ToGoogleCloudDatacatalogV1BigQueryTableSpecOutput() GoogleCloudDatacatalogV1BigQueryTableSpecOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryTableSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1BigQueryTableSpecArgs) ToGoogleCloudDatacatalogV1BigQueryTableSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryTableSpecOutput)
}

func (i GoogleCloudDatacatalogV1BigQueryTableSpecArgs) ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1BigQueryTableSpecArgs) ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryTableSpecOutput).ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1BigQueryTableSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1BigQueryTableSpecArgs, GoogleCloudDatacatalogV1BigQueryTableSpecPtr and GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1BigQueryTableSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1BigQueryTableSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1BigQueryTableSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput
	ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput
}

type googleCloudDatacatalogV1BigQueryTableSpecPtrType GoogleCloudDatacatalogV1BigQueryTableSpecArgs

func GoogleCloudDatacatalogV1BigQueryTableSpecPtr(v *GoogleCloudDatacatalogV1BigQueryTableSpecArgs) GoogleCloudDatacatalogV1BigQueryTableSpecPtrInput {
	return (*googleCloudDatacatalogV1BigQueryTableSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1BigQueryTableSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1BigQueryTableSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1BigQueryTableSpecPtrType) ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1BigQueryTableSpecPtrType) ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput)
}

// Describes a BigQuery table.
type GoogleCloudDatacatalogV1BigQueryTableSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BigQueryTableSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryTableSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecOutput) ToGoogleCloudDatacatalogV1BigQueryTableSpecOutput() GoogleCloudDatacatalogV1BigQueryTableSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecOutput) ToGoogleCloudDatacatalogV1BigQueryTableSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecOutput) ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecOutput) ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryTableSpec) *GoogleCloudDatacatalogV1BigQueryTableSpec {
		return &v
	}).(GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput)
}

// Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`.
func (o GoogleCloudDatacatalogV1BigQueryTableSpecOutput) TableSpec() GoogleCloudDatacatalogV1TableSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryTableSpec) *GoogleCloudDatacatalogV1TableSpec {
		return v.TableSpec
	}).(GoogleCloudDatacatalogV1TableSpecPtrOutput)
}

// Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.
func (o GoogleCloudDatacatalogV1BigQueryTableSpecOutput) ViewSpec() GoogleCloudDatacatalogV1ViewSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryTableSpec) *GoogleCloudDatacatalogV1ViewSpec { return v.ViewSpec }).(GoogleCloudDatacatalogV1ViewSpecPtrOutput)
}

type GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1BigQueryTableSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput) ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput) ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput) Elem() GoogleCloudDatacatalogV1BigQueryTableSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryTableSpec) GoogleCloudDatacatalogV1BigQueryTableSpec {
		return *v
	}).(GoogleCloudDatacatalogV1BigQueryTableSpecOutput)
}

// Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`.
func (o GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput) TableSpec() GoogleCloudDatacatalogV1TableSpecPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryTableSpec) *GoogleCloudDatacatalogV1TableSpec {
		if v == nil {
			return nil
		}
		return v.TableSpec
	}).(GoogleCloudDatacatalogV1TableSpecPtrOutput)
}

// Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.
func (o GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput) ViewSpec() GoogleCloudDatacatalogV1ViewSpecPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryTableSpec) *GoogleCloudDatacatalogV1ViewSpec {
		if v == nil {
			return nil
		}
		return v.ViewSpec
	}).(GoogleCloudDatacatalogV1ViewSpecPtrOutput)
}

// Describes a BigQuery table.
type GoogleCloudDatacatalogV1BigQueryTableSpecResponse struct {
	// The table source type.
	TableSourceType string `pulumi:"tableSourceType"`
	// Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`.
	TableSpec GoogleCloudDatacatalogV1TableSpecResponse `pulumi:"tableSpec"`
	// Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.
	ViewSpec GoogleCloudDatacatalogV1ViewSpecResponse `pulumi:"viewSpec"`
}

// GoogleCloudDatacatalogV1BigQueryTableSpecResponseInput is an input type that accepts GoogleCloudDatacatalogV1BigQueryTableSpecResponseArgs and GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1BigQueryTableSpecResponseInput` via:
//
//          GoogleCloudDatacatalogV1BigQueryTableSpecResponseArgs{...}
type GoogleCloudDatacatalogV1BigQueryTableSpecResponseInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput() GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput
	ToGoogleCloudDatacatalogV1BigQueryTableSpecResponseOutputWithContext(context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput
}

// Describes a BigQuery table.
type GoogleCloudDatacatalogV1BigQueryTableSpecResponseArgs struct {
	// The table source type.
	TableSourceType pulumi.StringInput `pulumi:"tableSourceType"`
	// Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`.
	TableSpec GoogleCloudDatacatalogV1TableSpecResponseInput `pulumi:"tableSpec"`
	// Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.
	ViewSpec GoogleCloudDatacatalogV1ViewSpecResponseInput `pulumi:"viewSpec"`
}

func (GoogleCloudDatacatalogV1BigQueryTableSpecResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryTableSpecResponse)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1BigQueryTableSpecResponseArgs) ToGoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput() GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryTableSpecResponseOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1BigQueryTableSpecResponseArgs) ToGoogleCloudDatacatalogV1BigQueryTableSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput)
}

func (i GoogleCloudDatacatalogV1BigQueryTableSpecResponseArgs) ToGoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput() GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1BigQueryTableSpecResponseArgs) ToGoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput).ToGoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrInput is an input type that accepts GoogleCloudDatacatalogV1BigQueryTableSpecResponseArgs, GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtr and GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrInput` via:
//
//          GoogleCloudDatacatalogV1BigQueryTableSpecResponseArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput() GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput
	ToGoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput
}

type googleCloudDatacatalogV1BigQueryTableSpecResponsePtrType GoogleCloudDatacatalogV1BigQueryTableSpecResponseArgs

func GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtr(v *GoogleCloudDatacatalogV1BigQueryTableSpecResponseArgs) GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrInput {
	return (*googleCloudDatacatalogV1BigQueryTableSpecResponsePtrType)(v)
}

func (*googleCloudDatacatalogV1BigQueryTableSpecResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1BigQueryTableSpecResponse)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1BigQueryTableSpecResponsePtrType) ToGoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput() GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1BigQueryTableSpecResponsePtrType) ToGoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput)
}

// Describes a BigQuery table.
type GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryTableSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput) ToGoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput() GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput) ToGoogleCloudDatacatalogV1BigQueryTableSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput) ToGoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput() GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput {
	return o.ToGoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput) ToGoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryTableSpecResponse) *GoogleCloudDatacatalogV1BigQueryTableSpecResponse {
		return &v
	}).(GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput)
}

// The table source type.
func (o GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput) TableSourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryTableSpecResponse) string { return v.TableSourceType }).(pulumi.StringOutput)
}

// Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`.
func (o GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput) TableSpec() GoogleCloudDatacatalogV1TableSpecResponseOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryTableSpecResponse) GoogleCloudDatacatalogV1TableSpecResponse {
		return v.TableSpec
	}).(GoogleCloudDatacatalogV1TableSpecResponseOutput)
}

// Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.
func (o GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput) ViewSpec() GoogleCloudDatacatalogV1ViewSpecResponseOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryTableSpecResponse) GoogleCloudDatacatalogV1ViewSpecResponse {
		return v.ViewSpec
	}).(GoogleCloudDatacatalogV1ViewSpecResponseOutput)
}

type GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1BigQueryTableSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput) ToGoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput() GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput) ToGoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput) Elem() GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryTableSpecResponse) GoogleCloudDatacatalogV1BigQueryTableSpecResponse {
		return *v
	}).(GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput)
}

// The table source type.
func (o GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput) TableSourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryTableSpecResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TableSourceType
	}).(pulumi.StringPtrOutput)
}

// Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`.
func (o GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput) TableSpec() GoogleCloudDatacatalogV1TableSpecResponsePtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryTableSpecResponse) *GoogleCloudDatacatalogV1TableSpecResponse {
		if v == nil {
			return nil
		}
		return &v.TableSpec
	}).(GoogleCloudDatacatalogV1TableSpecResponsePtrOutput)
}

// Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.
func (o GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput) ViewSpec() GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryTableSpecResponse) *GoogleCloudDatacatalogV1ViewSpecResponse {
		if v == nil {
			return nil
		}
		return &v.ViewSpec
	}).(GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput)
}

// A column within a schema. Columns can be nested inside other columns.
type GoogleCloudDatacatalogV1ColumnSchema struct {
	// Required. Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
	Column *string `pulumi:"column"`
	// Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
	Description *string `pulumi:"description"`
	// Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
	Mode *string `pulumi:"mode"`
	// Optional. Schema of sub-columns. A column can have zero or more sub-columns.
	Subcolumns []GoogleCloudDatacatalogV1ColumnSchema `pulumi:"subcolumns"`
	// Required. Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
	Type *string `pulumi:"type"`
}

// GoogleCloudDatacatalogV1ColumnSchemaInput is an input type that accepts GoogleCloudDatacatalogV1ColumnSchemaArgs and GoogleCloudDatacatalogV1ColumnSchemaOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1ColumnSchemaInput` via:
//
//          GoogleCloudDatacatalogV1ColumnSchemaArgs{...}
type GoogleCloudDatacatalogV1ColumnSchemaInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1ColumnSchemaOutput() GoogleCloudDatacatalogV1ColumnSchemaOutput
	ToGoogleCloudDatacatalogV1ColumnSchemaOutputWithContext(context.Context) GoogleCloudDatacatalogV1ColumnSchemaOutput
}

// A column within a schema. Columns can be nested inside other columns.
type GoogleCloudDatacatalogV1ColumnSchemaArgs struct {
	// Required. Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Optional. Schema of sub-columns. A column can have zero or more sub-columns.
	Subcolumns GoogleCloudDatacatalogV1ColumnSchemaArrayInput `pulumi:"subcolumns"`
	// Required. Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GoogleCloudDatacatalogV1ColumnSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1ColumnSchema)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1ColumnSchemaArgs) ToGoogleCloudDatacatalogV1ColumnSchemaOutput() GoogleCloudDatacatalogV1ColumnSchemaOutput {
	return i.ToGoogleCloudDatacatalogV1ColumnSchemaOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1ColumnSchemaArgs) ToGoogleCloudDatacatalogV1ColumnSchemaOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ColumnSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1ColumnSchemaOutput)
}

// GoogleCloudDatacatalogV1ColumnSchemaArrayInput is an input type that accepts GoogleCloudDatacatalogV1ColumnSchemaArray and GoogleCloudDatacatalogV1ColumnSchemaArrayOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1ColumnSchemaArrayInput` via:
//
//          GoogleCloudDatacatalogV1ColumnSchemaArray{ GoogleCloudDatacatalogV1ColumnSchemaArgs{...} }
type GoogleCloudDatacatalogV1ColumnSchemaArrayInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1ColumnSchemaArrayOutput() GoogleCloudDatacatalogV1ColumnSchemaArrayOutput
	ToGoogleCloudDatacatalogV1ColumnSchemaArrayOutputWithContext(context.Context) GoogleCloudDatacatalogV1ColumnSchemaArrayOutput
}

type GoogleCloudDatacatalogV1ColumnSchemaArray []GoogleCloudDatacatalogV1ColumnSchemaInput

func (GoogleCloudDatacatalogV1ColumnSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1ColumnSchema)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1ColumnSchemaArray) ToGoogleCloudDatacatalogV1ColumnSchemaArrayOutput() GoogleCloudDatacatalogV1ColumnSchemaArrayOutput {
	return i.ToGoogleCloudDatacatalogV1ColumnSchemaArrayOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1ColumnSchemaArray) ToGoogleCloudDatacatalogV1ColumnSchemaArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ColumnSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1ColumnSchemaArrayOutput)
}

// A column within a schema. Columns can be nested inside other columns.
type GoogleCloudDatacatalogV1ColumnSchemaOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ColumnSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1ColumnSchema)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ColumnSchemaOutput) ToGoogleCloudDatacatalogV1ColumnSchemaOutput() GoogleCloudDatacatalogV1ColumnSchemaOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ColumnSchemaOutput) ToGoogleCloudDatacatalogV1ColumnSchemaOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ColumnSchemaOutput {
	return o
}

// Required. Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
func (o GoogleCloudDatacatalogV1ColumnSchemaOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ColumnSchema) *string { return v.Column }).(pulumi.StringPtrOutput)
}

// Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
func (o GoogleCloudDatacatalogV1ColumnSchemaOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ColumnSchema) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
func (o GoogleCloudDatacatalogV1ColumnSchemaOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ColumnSchema) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Optional. Schema of sub-columns. A column can have zero or more sub-columns.
func (o GoogleCloudDatacatalogV1ColumnSchemaOutput) Subcolumns() GoogleCloudDatacatalogV1ColumnSchemaArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ColumnSchema) []GoogleCloudDatacatalogV1ColumnSchema {
		return v.Subcolumns
	}).(GoogleCloudDatacatalogV1ColumnSchemaArrayOutput)
}

// Required. Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
func (o GoogleCloudDatacatalogV1ColumnSchemaOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ColumnSchema) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GoogleCloudDatacatalogV1ColumnSchemaArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ColumnSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1ColumnSchema)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ColumnSchemaArrayOutput) ToGoogleCloudDatacatalogV1ColumnSchemaArrayOutput() GoogleCloudDatacatalogV1ColumnSchemaArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ColumnSchemaArrayOutput) ToGoogleCloudDatacatalogV1ColumnSchemaArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ColumnSchemaArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ColumnSchemaArrayOutput) Index(i pulumi.IntInput) GoogleCloudDatacatalogV1ColumnSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudDatacatalogV1ColumnSchema {
		return vs[0].([]GoogleCloudDatacatalogV1ColumnSchema)[vs[1].(int)]
	}).(GoogleCloudDatacatalogV1ColumnSchemaOutput)
}

// A column within a schema. Columns can be nested inside other columns.
type GoogleCloudDatacatalogV1ColumnSchemaResponse struct {
	// Required. Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
	Column string `pulumi:"column"`
	// Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
	Description string `pulumi:"description"`
	// Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
	Mode string `pulumi:"mode"`
	// Optional. Schema of sub-columns. A column can have zero or more sub-columns.
	Subcolumns []GoogleCloudDatacatalogV1ColumnSchemaResponse `pulumi:"subcolumns"`
	// Required. Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
	Type string `pulumi:"type"`
}

// GoogleCloudDatacatalogV1ColumnSchemaResponseInput is an input type that accepts GoogleCloudDatacatalogV1ColumnSchemaResponseArgs and GoogleCloudDatacatalogV1ColumnSchemaResponseOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1ColumnSchemaResponseInput` via:
//
//          GoogleCloudDatacatalogV1ColumnSchemaResponseArgs{...}
type GoogleCloudDatacatalogV1ColumnSchemaResponseInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1ColumnSchemaResponseOutput() GoogleCloudDatacatalogV1ColumnSchemaResponseOutput
	ToGoogleCloudDatacatalogV1ColumnSchemaResponseOutputWithContext(context.Context) GoogleCloudDatacatalogV1ColumnSchemaResponseOutput
}

// A column within a schema. Columns can be nested inside other columns.
type GoogleCloudDatacatalogV1ColumnSchemaResponseArgs struct {
	// Required. Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
	Column pulumi.StringInput `pulumi:"column"`
	// Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
	Description pulumi.StringInput `pulumi:"description"`
	// Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
	Mode pulumi.StringInput `pulumi:"mode"`
	// Optional. Schema of sub-columns. A column can have zero or more sub-columns.
	Subcolumns GoogleCloudDatacatalogV1ColumnSchemaResponseArrayInput `pulumi:"subcolumns"`
	// Required. Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GoogleCloudDatacatalogV1ColumnSchemaResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1ColumnSchemaResponse)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1ColumnSchemaResponseArgs) ToGoogleCloudDatacatalogV1ColumnSchemaResponseOutput() GoogleCloudDatacatalogV1ColumnSchemaResponseOutput {
	return i.ToGoogleCloudDatacatalogV1ColumnSchemaResponseOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1ColumnSchemaResponseArgs) ToGoogleCloudDatacatalogV1ColumnSchemaResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ColumnSchemaResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1ColumnSchemaResponseOutput)
}

// GoogleCloudDatacatalogV1ColumnSchemaResponseArrayInput is an input type that accepts GoogleCloudDatacatalogV1ColumnSchemaResponseArray and GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1ColumnSchemaResponseArrayInput` via:
//
//          GoogleCloudDatacatalogV1ColumnSchemaResponseArray{ GoogleCloudDatacatalogV1ColumnSchemaResponseArgs{...} }
type GoogleCloudDatacatalogV1ColumnSchemaResponseArrayInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput() GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput
	ToGoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutputWithContext(context.Context) GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput
}

type GoogleCloudDatacatalogV1ColumnSchemaResponseArray []GoogleCloudDatacatalogV1ColumnSchemaResponseInput

func (GoogleCloudDatacatalogV1ColumnSchemaResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1ColumnSchemaResponse)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1ColumnSchemaResponseArray) ToGoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput() GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput {
	return i.ToGoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1ColumnSchemaResponseArray) ToGoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput)
}

// A column within a schema. Columns can be nested inside other columns.
type GoogleCloudDatacatalogV1ColumnSchemaResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ColumnSchemaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1ColumnSchemaResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ColumnSchemaResponseOutput) ToGoogleCloudDatacatalogV1ColumnSchemaResponseOutput() GoogleCloudDatacatalogV1ColumnSchemaResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ColumnSchemaResponseOutput) ToGoogleCloudDatacatalogV1ColumnSchemaResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ColumnSchemaResponseOutput {
	return o
}

// Required. Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
func (o GoogleCloudDatacatalogV1ColumnSchemaResponseOutput) Column() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ColumnSchemaResponse) string { return v.Column }).(pulumi.StringOutput)
}

// Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
func (o GoogleCloudDatacatalogV1ColumnSchemaResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ColumnSchemaResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
func (o GoogleCloudDatacatalogV1ColumnSchemaResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ColumnSchemaResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// Optional. Schema of sub-columns. A column can have zero or more sub-columns.
func (o GoogleCloudDatacatalogV1ColumnSchemaResponseOutput) Subcolumns() GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ColumnSchemaResponse) []GoogleCloudDatacatalogV1ColumnSchemaResponse {
		return v.Subcolumns
	}).(GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput)
}

// Required. Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
func (o GoogleCloudDatacatalogV1ColumnSchemaResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ColumnSchemaResponse) string { return v.Type }).(pulumi.StringOutput)
}

type GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1ColumnSchemaResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput) ToGoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput() GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput) ToGoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudDatacatalogV1ColumnSchemaResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudDatacatalogV1ColumnSchemaResponse {
		return vs[0].([]GoogleCloudDatacatalogV1ColumnSchemaResponse)[vs[1].(int)]
	}).(GoogleCloudDatacatalogV1ColumnSchemaResponseOutput)
}

// Physical location of an entry.
type GoogleCloudDatacatalogV1DataSourceResponse struct {
	// Full name of a resource as defined by the service. For example: `//bigquery.googleapis.com/projects/{PROJECT_ID}/locations/{LOCATION}/datasets/{DATASET_ID}/tables/{TABLE_ID}`
	Resource string `pulumi:"resource"`
	// Service that physically stores the data.
	Service string `pulumi:"service"`
}

// GoogleCloudDatacatalogV1DataSourceResponseInput is an input type that accepts GoogleCloudDatacatalogV1DataSourceResponseArgs and GoogleCloudDatacatalogV1DataSourceResponseOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1DataSourceResponseInput` via:
//
//          GoogleCloudDatacatalogV1DataSourceResponseArgs{...}
type GoogleCloudDatacatalogV1DataSourceResponseInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1DataSourceResponseOutput() GoogleCloudDatacatalogV1DataSourceResponseOutput
	ToGoogleCloudDatacatalogV1DataSourceResponseOutputWithContext(context.Context) GoogleCloudDatacatalogV1DataSourceResponseOutput
}

// Physical location of an entry.
type GoogleCloudDatacatalogV1DataSourceResponseArgs struct {
	// Full name of a resource as defined by the service. For example: `//bigquery.googleapis.com/projects/{PROJECT_ID}/locations/{LOCATION}/datasets/{DATASET_ID}/tables/{TABLE_ID}`
	Resource pulumi.StringInput `pulumi:"resource"`
	// Service that physically stores the data.
	Service pulumi.StringInput `pulumi:"service"`
}

func (GoogleCloudDatacatalogV1DataSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1DataSourceResponse)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1DataSourceResponseArgs) ToGoogleCloudDatacatalogV1DataSourceResponseOutput() GoogleCloudDatacatalogV1DataSourceResponseOutput {
	return i.ToGoogleCloudDatacatalogV1DataSourceResponseOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1DataSourceResponseArgs) ToGoogleCloudDatacatalogV1DataSourceResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DataSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1DataSourceResponseOutput)
}

func (i GoogleCloudDatacatalogV1DataSourceResponseArgs) ToGoogleCloudDatacatalogV1DataSourceResponsePtrOutput() GoogleCloudDatacatalogV1DataSourceResponsePtrOutput {
	return i.ToGoogleCloudDatacatalogV1DataSourceResponsePtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1DataSourceResponseArgs) ToGoogleCloudDatacatalogV1DataSourceResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DataSourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1DataSourceResponseOutput).ToGoogleCloudDatacatalogV1DataSourceResponsePtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1DataSourceResponsePtrInput is an input type that accepts GoogleCloudDatacatalogV1DataSourceResponseArgs, GoogleCloudDatacatalogV1DataSourceResponsePtr and GoogleCloudDatacatalogV1DataSourceResponsePtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1DataSourceResponsePtrInput` via:
//
//          GoogleCloudDatacatalogV1DataSourceResponseArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1DataSourceResponsePtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1DataSourceResponsePtrOutput() GoogleCloudDatacatalogV1DataSourceResponsePtrOutput
	ToGoogleCloudDatacatalogV1DataSourceResponsePtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1DataSourceResponsePtrOutput
}

type googleCloudDatacatalogV1DataSourceResponsePtrType GoogleCloudDatacatalogV1DataSourceResponseArgs

func GoogleCloudDatacatalogV1DataSourceResponsePtr(v *GoogleCloudDatacatalogV1DataSourceResponseArgs) GoogleCloudDatacatalogV1DataSourceResponsePtrInput {
	return (*googleCloudDatacatalogV1DataSourceResponsePtrType)(v)
}

func (*googleCloudDatacatalogV1DataSourceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1DataSourceResponse)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1DataSourceResponsePtrType) ToGoogleCloudDatacatalogV1DataSourceResponsePtrOutput() GoogleCloudDatacatalogV1DataSourceResponsePtrOutput {
	return i.ToGoogleCloudDatacatalogV1DataSourceResponsePtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1DataSourceResponsePtrType) ToGoogleCloudDatacatalogV1DataSourceResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DataSourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1DataSourceResponsePtrOutput)
}

// Physical location of an entry.
type GoogleCloudDatacatalogV1DataSourceResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1DataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1DataSourceResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1DataSourceResponseOutput) ToGoogleCloudDatacatalogV1DataSourceResponseOutput() GoogleCloudDatacatalogV1DataSourceResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DataSourceResponseOutput) ToGoogleCloudDatacatalogV1DataSourceResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DataSourceResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DataSourceResponseOutput) ToGoogleCloudDatacatalogV1DataSourceResponsePtrOutput() GoogleCloudDatacatalogV1DataSourceResponsePtrOutput {
	return o.ToGoogleCloudDatacatalogV1DataSourceResponsePtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1DataSourceResponseOutput) ToGoogleCloudDatacatalogV1DataSourceResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DataSourceResponsePtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1DataSourceResponse) *GoogleCloudDatacatalogV1DataSourceResponse {
		return &v
	}).(GoogleCloudDatacatalogV1DataSourceResponsePtrOutput)
}

// Full name of a resource as defined by the service. For example: `//bigquery.googleapis.com/projects/{PROJECT_ID}/locations/{LOCATION}/datasets/{DATASET_ID}/tables/{TABLE_ID}`
func (o GoogleCloudDatacatalogV1DataSourceResponseOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1DataSourceResponse) string { return v.Resource }).(pulumi.StringOutput)
}

// Service that physically stores the data.
func (o GoogleCloudDatacatalogV1DataSourceResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1DataSourceResponse) string { return v.Service }).(pulumi.StringOutput)
}

type GoogleCloudDatacatalogV1DataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1DataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1DataSourceResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1DataSourceResponsePtrOutput) ToGoogleCloudDatacatalogV1DataSourceResponsePtrOutput() GoogleCloudDatacatalogV1DataSourceResponsePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DataSourceResponsePtrOutput) ToGoogleCloudDatacatalogV1DataSourceResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DataSourceResponsePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DataSourceResponsePtrOutput) Elem() GoogleCloudDatacatalogV1DataSourceResponseOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1DataSourceResponse) GoogleCloudDatacatalogV1DataSourceResponse {
		return *v
	}).(GoogleCloudDatacatalogV1DataSourceResponseOutput)
}

// Full name of a resource as defined by the service. For example: `//bigquery.googleapis.com/projects/{PROJECT_ID}/locations/{LOCATION}/datasets/{DATASET_ID}/tables/{TABLE_ID}`
func (o GoogleCloudDatacatalogV1DataSourceResponsePtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1DataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Service that physically stores the data.
func (o GoogleCloudDatacatalogV1DataSourceResponsePtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1DataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

// Specification that applies to a table resource. Valid only for entries with the `TABLE` type.
type GoogleCloudDatacatalogV1DatabaseTableSpec struct {
	// Type of this table.
	Type *string `pulumi:"type"`
}

// GoogleCloudDatacatalogV1DatabaseTableSpecInput is an input type that accepts GoogleCloudDatacatalogV1DatabaseTableSpecArgs and GoogleCloudDatacatalogV1DatabaseTableSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1DatabaseTableSpecInput` via:
//
//          GoogleCloudDatacatalogV1DatabaseTableSpecArgs{...}
type GoogleCloudDatacatalogV1DatabaseTableSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1DatabaseTableSpecOutput() GoogleCloudDatacatalogV1DatabaseTableSpecOutput
	ToGoogleCloudDatacatalogV1DatabaseTableSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecOutput
}

// Specification that applies to a table resource. Valid only for entries with the `TABLE` type.
type GoogleCloudDatacatalogV1DatabaseTableSpecArgs struct {
	// Type of this table.
	Type *GoogleCloudDatacatalogV1DatabaseTableSpecType `pulumi:"type"`
}

func (GoogleCloudDatacatalogV1DatabaseTableSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1DatabaseTableSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1DatabaseTableSpecArgs) ToGoogleCloudDatacatalogV1DatabaseTableSpecOutput() GoogleCloudDatacatalogV1DatabaseTableSpecOutput {
	return i.ToGoogleCloudDatacatalogV1DatabaseTableSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1DatabaseTableSpecArgs) ToGoogleCloudDatacatalogV1DatabaseTableSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1DatabaseTableSpecOutput)
}

func (i GoogleCloudDatacatalogV1DatabaseTableSpecArgs) ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput() GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1DatabaseTableSpecArgs) ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1DatabaseTableSpecOutput).ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1DatabaseTableSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1DatabaseTableSpecArgs, GoogleCloudDatacatalogV1DatabaseTableSpecPtr and GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1DatabaseTableSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1DatabaseTableSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1DatabaseTableSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput() GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput
	ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput
}

type googleCloudDatacatalogV1DatabaseTableSpecPtrType GoogleCloudDatacatalogV1DatabaseTableSpecArgs

func GoogleCloudDatacatalogV1DatabaseTableSpecPtr(v *GoogleCloudDatacatalogV1DatabaseTableSpecArgs) GoogleCloudDatacatalogV1DatabaseTableSpecPtrInput {
	return (*googleCloudDatacatalogV1DatabaseTableSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1DatabaseTableSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1DatabaseTableSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1DatabaseTableSpecPtrType) ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput() GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1DatabaseTableSpecPtrType) ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput)
}

// Specification that applies to a table resource. Valid only for entries with the `TABLE` type.
type GoogleCloudDatacatalogV1DatabaseTableSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1DatabaseTableSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1DatabaseTableSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecOutput) ToGoogleCloudDatacatalogV1DatabaseTableSpecOutput() GoogleCloudDatacatalogV1DatabaseTableSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecOutput) ToGoogleCloudDatacatalogV1DatabaseTableSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecOutput) ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput() GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecOutput) ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1DatabaseTableSpec) *GoogleCloudDatacatalogV1DatabaseTableSpec {
		return &v
	}).(GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput)
}

// Type of this table.
func (o GoogleCloudDatacatalogV1DatabaseTableSpecOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1DatabaseTableSpec) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1DatabaseTableSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput) ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput() GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput) ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput) Elem() GoogleCloudDatacatalogV1DatabaseTableSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1DatabaseTableSpec) GoogleCloudDatacatalogV1DatabaseTableSpec {
		return *v
	}).(GoogleCloudDatacatalogV1DatabaseTableSpecOutput)
}

// Type of this table.
func (o GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1DatabaseTableSpec) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Specification that applies to a table resource. Valid only for entries with the `TABLE` type.
type GoogleCloudDatacatalogV1DatabaseTableSpecResponse struct {
	// Type of this table.
	Type string `pulumi:"type"`
}

// GoogleCloudDatacatalogV1DatabaseTableSpecResponseInput is an input type that accepts GoogleCloudDatacatalogV1DatabaseTableSpecResponseArgs and GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1DatabaseTableSpecResponseInput` via:
//
//          GoogleCloudDatacatalogV1DatabaseTableSpecResponseArgs{...}
type GoogleCloudDatacatalogV1DatabaseTableSpecResponseInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput() GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput
	ToGoogleCloudDatacatalogV1DatabaseTableSpecResponseOutputWithContext(context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput
}

// Specification that applies to a table resource. Valid only for entries with the `TABLE` type.
type GoogleCloudDatacatalogV1DatabaseTableSpecResponseArgs struct {
	// Type of this table.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GoogleCloudDatacatalogV1DatabaseTableSpecResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1DatabaseTableSpecResponse)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1DatabaseTableSpecResponseArgs) ToGoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput() GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput {
	return i.ToGoogleCloudDatacatalogV1DatabaseTableSpecResponseOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1DatabaseTableSpecResponseArgs) ToGoogleCloudDatacatalogV1DatabaseTableSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput)
}

func (i GoogleCloudDatacatalogV1DatabaseTableSpecResponseArgs) ToGoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput() GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput {
	return i.ToGoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1DatabaseTableSpecResponseArgs) ToGoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput).ToGoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrInput is an input type that accepts GoogleCloudDatacatalogV1DatabaseTableSpecResponseArgs, GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtr and GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrInput` via:
//
//          GoogleCloudDatacatalogV1DatabaseTableSpecResponseArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput() GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput
	ToGoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput
}

type googleCloudDatacatalogV1DatabaseTableSpecResponsePtrType GoogleCloudDatacatalogV1DatabaseTableSpecResponseArgs

func GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtr(v *GoogleCloudDatacatalogV1DatabaseTableSpecResponseArgs) GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrInput {
	return (*googleCloudDatacatalogV1DatabaseTableSpecResponsePtrType)(v)
}

func (*googleCloudDatacatalogV1DatabaseTableSpecResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1DatabaseTableSpecResponse)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1DatabaseTableSpecResponsePtrType) ToGoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput() GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput {
	return i.ToGoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1DatabaseTableSpecResponsePtrType) ToGoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput)
}

// Specification that applies to a table resource. Valid only for entries with the `TABLE` type.
type GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1DatabaseTableSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput) ToGoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput() GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput) ToGoogleCloudDatacatalogV1DatabaseTableSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput) ToGoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput() GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput {
	return o.ToGoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput) ToGoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1DatabaseTableSpecResponse) *GoogleCloudDatacatalogV1DatabaseTableSpecResponse {
		return &v
	}).(GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput)
}

// Type of this table.
func (o GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1DatabaseTableSpecResponse) string { return v.Type }).(pulumi.StringOutput)
}

type GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1DatabaseTableSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput) ToGoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput() GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput) ToGoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput) Elem() GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1DatabaseTableSpecResponse) GoogleCloudDatacatalogV1DatabaseTableSpecResponse {
		return *v
	}).(GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput)
}

// Type of this table.
func (o GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1DatabaseTableSpecResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Specification of a single file in Cloud Storage.
type GoogleCloudDatacatalogV1GcsFileSpecResponse struct {
	// Required. Full file path. Example: `gs://bucket_name/a/b.txt`.
	FilePath string `pulumi:"filePath"`
	// Creation, modification, and expiration timestamps of a Cloud Storage file.
	GcsTimestamps GoogleCloudDatacatalogV1SystemTimestampsResponse `pulumi:"gcsTimestamps"`
	// File size in bytes.
	SizeBytes string `pulumi:"sizeBytes"`
}

// GoogleCloudDatacatalogV1GcsFileSpecResponseInput is an input type that accepts GoogleCloudDatacatalogV1GcsFileSpecResponseArgs and GoogleCloudDatacatalogV1GcsFileSpecResponseOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1GcsFileSpecResponseInput` via:
//
//          GoogleCloudDatacatalogV1GcsFileSpecResponseArgs{...}
type GoogleCloudDatacatalogV1GcsFileSpecResponseInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1GcsFileSpecResponseOutput() GoogleCloudDatacatalogV1GcsFileSpecResponseOutput
	ToGoogleCloudDatacatalogV1GcsFileSpecResponseOutputWithContext(context.Context) GoogleCloudDatacatalogV1GcsFileSpecResponseOutput
}

// Specification of a single file in Cloud Storage.
type GoogleCloudDatacatalogV1GcsFileSpecResponseArgs struct {
	// Required. Full file path. Example: `gs://bucket_name/a/b.txt`.
	FilePath pulumi.StringInput `pulumi:"filePath"`
	// Creation, modification, and expiration timestamps of a Cloud Storage file.
	GcsTimestamps GoogleCloudDatacatalogV1SystemTimestampsResponseInput `pulumi:"gcsTimestamps"`
	// File size in bytes.
	SizeBytes pulumi.StringInput `pulumi:"sizeBytes"`
}

func (GoogleCloudDatacatalogV1GcsFileSpecResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1GcsFileSpecResponse)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1GcsFileSpecResponseArgs) ToGoogleCloudDatacatalogV1GcsFileSpecResponseOutput() GoogleCloudDatacatalogV1GcsFileSpecResponseOutput {
	return i.ToGoogleCloudDatacatalogV1GcsFileSpecResponseOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1GcsFileSpecResponseArgs) ToGoogleCloudDatacatalogV1GcsFileSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFileSpecResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1GcsFileSpecResponseOutput)
}

// GoogleCloudDatacatalogV1GcsFileSpecResponseArrayInput is an input type that accepts GoogleCloudDatacatalogV1GcsFileSpecResponseArray and GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1GcsFileSpecResponseArrayInput` via:
//
//          GoogleCloudDatacatalogV1GcsFileSpecResponseArray{ GoogleCloudDatacatalogV1GcsFileSpecResponseArgs{...} }
type GoogleCloudDatacatalogV1GcsFileSpecResponseArrayInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput() GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput
	ToGoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutputWithContext(context.Context) GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput
}

type GoogleCloudDatacatalogV1GcsFileSpecResponseArray []GoogleCloudDatacatalogV1GcsFileSpecResponseInput

func (GoogleCloudDatacatalogV1GcsFileSpecResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1GcsFileSpecResponse)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1GcsFileSpecResponseArray) ToGoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput() GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput {
	return i.ToGoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1GcsFileSpecResponseArray) ToGoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput)
}

// Specification of a single file in Cloud Storage.
type GoogleCloudDatacatalogV1GcsFileSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1GcsFileSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1GcsFileSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1GcsFileSpecResponseOutput) ToGoogleCloudDatacatalogV1GcsFileSpecResponseOutput() GoogleCloudDatacatalogV1GcsFileSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1GcsFileSpecResponseOutput) ToGoogleCloudDatacatalogV1GcsFileSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFileSpecResponseOutput {
	return o
}

// Required. Full file path. Example: `gs://bucket_name/a/b.txt`.
func (o GoogleCloudDatacatalogV1GcsFileSpecResponseOutput) FilePath() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1GcsFileSpecResponse) string { return v.FilePath }).(pulumi.StringOutput)
}

// Creation, modification, and expiration timestamps of a Cloud Storage file.
func (o GoogleCloudDatacatalogV1GcsFileSpecResponseOutput) GcsTimestamps() GoogleCloudDatacatalogV1SystemTimestampsResponseOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1GcsFileSpecResponse) GoogleCloudDatacatalogV1SystemTimestampsResponse {
		return v.GcsTimestamps
	}).(GoogleCloudDatacatalogV1SystemTimestampsResponseOutput)
}

// File size in bytes.
func (o GoogleCloudDatacatalogV1GcsFileSpecResponseOutput) SizeBytes() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1GcsFileSpecResponse) string { return v.SizeBytes }).(pulumi.StringOutput)
}

type GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1GcsFileSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput) ToGoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput() GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput) ToGoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudDatacatalogV1GcsFileSpecResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudDatacatalogV1GcsFileSpecResponse {
		return vs[0].([]GoogleCloudDatacatalogV1GcsFileSpecResponse)[vs[1].(int)]
	}).(GoogleCloudDatacatalogV1GcsFileSpecResponseOutput)
}

// Describes a Cloud Storage fileset entry.
type GoogleCloudDatacatalogV1GcsFilesetSpec struct {
	// Required. Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`
	FilePatterns []string `pulumi:"filePatterns"`
}

// GoogleCloudDatacatalogV1GcsFilesetSpecInput is an input type that accepts GoogleCloudDatacatalogV1GcsFilesetSpecArgs and GoogleCloudDatacatalogV1GcsFilesetSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1GcsFilesetSpecInput` via:
//
//          GoogleCloudDatacatalogV1GcsFilesetSpecArgs{...}
type GoogleCloudDatacatalogV1GcsFilesetSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1GcsFilesetSpecOutput() GoogleCloudDatacatalogV1GcsFilesetSpecOutput
	ToGoogleCloudDatacatalogV1GcsFilesetSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecOutput
}

// Describes a Cloud Storage fileset entry.
type GoogleCloudDatacatalogV1GcsFilesetSpecArgs struct {
	// Required. Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`
	FilePatterns pulumi.StringArrayInput `pulumi:"filePatterns"`
}

func (GoogleCloudDatacatalogV1GcsFilesetSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1GcsFilesetSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1GcsFilesetSpecArgs) ToGoogleCloudDatacatalogV1GcsFilesetSpecOutput() GoogleCloudDatacatalogV1GcsFilesetSpecOutput {
	return i.ToGoogleCloudDatacatalogV1GcsFilesetSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1GcsFilesetSpecArgs) ToGoogleCloudDatacatalogV1GcsFilesetSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1GcsFilesetSpecOutput)
}

func (i GoogleCloudDatacatalogV1GcsFilesetSpecArgs) ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput() GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1GcsFilesetSpecArgs) ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1GcsFilesetSpecOutput).ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1GcsFilesetSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1GcsFilesetSpecArgs, GoogleCloudDatacatalogV1GcsFilesetSpecPtr and GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1GcsFilesetSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1GcsFilesetSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1GcsFilesetSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput() GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput
	ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput
}

type googleCloudDatacatalogV1GcsFilesetSpecPtrType GoogleCloudDatacatalogV1GcsFilesetSpecArgs

func GoogleCloudDatacatalogV1GcsFilesetSpecPtr(v *GoogleCloudDatacatalogV1GcsFilesetSpecArgs) GoogleCloudDatacatalogV1GcsFilesetSpecPtrInput {
	return (*googleCloudDatacatalogV1GcsFilesetSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1GcsFilesetSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1GcsFilesetSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1GcsFilesetSpecPtrType) ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput() GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1GcsFilesetSpecPtrType) ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput)
}

// Describes a Cloud Storage fileset entry.
type GoogleCloudDatacatalogV1GcsFilesetSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1GcsFilesetSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1GcsFilesetSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecOutput) ToGoogleCloudDatacatalogV1GcsFilesetSpecOutput() GoogleCloudDatacatalogV1GcsFilesetSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecOutput) ToGoogleCloudDatacatalogV1GcsFilesetSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecOutput) ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput() GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecOutput) ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1GcsFilesetSpec) *GoogleCloudDatacatalogV1GcsFilesetSpec {
		return &v
	}).(GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput)
}

// Required. Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`
func (o GoogleCloudDatacatalogV1GcsFilesetSpecOutput) FilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1GcsFilesetSpec) []string { return v.FilePatterns }).(pulumi.StringArrayOutput)
}

type GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1GcsFilesetSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput) ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput() GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput) ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput) Elem() GoogleCloudDatacatalogV1GcsFilesetSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1GcsFilesetSpec) GoogleCloudDatacatalogV1GcsFilesetSpec { return *v }).(GoogleCloudDatacatalogV1GcsFilesetSpecOutput)
}

// Required. Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`
func (o GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput) FilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1GcsFilesetSpec) []string {
		if v == nil {
			return nil
		}
		return v.FilePatterns
	}).(pulumi.StringArrayOutput)
}

// Describes a Cloud Storage fileset entry.
type GoogleCloudDatacatalogV1GcsFilesetSpecResponse struct {
	// Required. Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`
	FilePatterns []string `pulumi:"filePatterns"`
	// Sample files contained in this fileset, not all files contained in this fileset are represented here.
	SampleGcsFileSpecs []GoogleCloudDatacatalogV1GcsFileSpecResponse `pulumi:"sampleGcsFileSpecs"`
}

// GoogleCloudDatacatalogV1GcsFilesetSpecResponseInput is an input type that accepts GoogleCloudDatacatalogV1GcsFilesetSpecResponseArgs and GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1GcsFilesetSpecResponseInput` via:
//
//          GoogleCloudDatacatalogV1GcsFilesetSpecResponseArgs{...}
type GoogleCloudDatacatalogV1GcsFilesetSpecResponseInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput() GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput
	ToGoogleCloudDatacatalogV1GcsFilesetSpecResponseOutputWithContext(context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput
}

// Describes a Cloud Storage fileset entry.
type GoogleCloudDatacatalogV1GcsFilesetSpecResponseArgs struct {
	// Required. Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`
	FilePatterns pulumi.StringArrayInput `pulumi:"filePatterns"`
	// Sample files contained in this fileset, not all files contained in this fileset are represented here.
	SampleGcsFileSpecs GoogleCloudDatacatalogV1GcsFileSpecResponseArrayInput `pulumi:"sampleGcsFileSpecs"`
}

func (GoogleCloudDatacatalogV1GcsFilesetSpecResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1GcsFilesetSpecResponse)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1GcsFilesetSpecResponseArgs) ToGoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput() GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput {
	return i.ToGoogleCloudDatacatalogV1GcsFilesetSpecResponseOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1GcsFilesetSpecResponseArgs) ToGoogleCloudDatacatalogV1GcsFilesetSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput)
}

func (i GoogleCloudDatacatalogV1GcsFilesetSpecResponseArgs) ToGoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput() GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput {
	return i.ToGoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1GcsFilesetSpecResponseArgs) ToGoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput).ToGoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrInput is an input type that accepts GoogleCloudDatacatalogV1GcsFilesetSpecResponseArgs, GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtr and GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrInput` via:
//
//          GoogleCloudDatacatalogV1GcsFilesetSpecResponseArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput() GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput
	ToGoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput
}

type googleCloudDatacatalogV1GcsFilesetSpecResponsePtrType GoogleCloudDatacatalogV1GcsFilesetSpecResponseArgs

func GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtr(v *GoogleCloudDatacatalogV1GcsFilesetSpecResponseArgs) GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrInput {
	return (*googleCloudDatacatalogV1GcsFilesetSpecResponsePtrType)(v)
}

func (*googleCloudDatacatalogV1GcsFilesetSpecResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1GcsFilesetSpecResponse)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1GcsFilesetSpecResponsePtrType) ToGoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput() GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput {
	return i.ToGoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1GcsFilesetSpecResponsePtrType) ToGoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput)
}

// Describes a Cloud Storage fileset entry.
type GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1GcsFilesetSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput) ToGoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput() GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput) ToGoogleCloudDatacatalogV1GcsFilesetSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput) ToGoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput() GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput {
	return o.ToGoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput) ToGoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1GcsFilesetSpecResponse) *GoogleCloudDatacatalogV1GcsFilesetSpecResponse {
		return &v
	}).(GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput)
}

// Required. Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`
func (o GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput) FilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1GcsFilesetSpecResponse) []string { return v.FilePatterns }).(pulumi.StringArrayOutput)
}

// Sample files contained in this fileset, not all files contained in this fileset are represented here.
func (o GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput) SampleGcsFileSpecs() GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1GcsFilesetSpecResponse) []GoogleCloudDatacatalogV1GcsFileSpecResponse {
		return v.SampleGcsFileSpecs
	}).(GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput)
}

type GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1GcsFilesetSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput) ToGoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput() GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput) ToGoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput) Elem() GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1GcsFilesetSpecResponse) GoogleCloudDatacatalogV1GcsFilesetSpecResponse {
		return *v
	}).(GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput)
}

// Required. Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`
func (o GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput) FilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1GcsFilesetSpecResponse) []string {
		if v == nil {
			return nil
		}
		return v.FilePatterns
	}).(pulumi.StringArrayOutput)
}

// Sample files contained in this fileset, not all files contained in this fileset are represented here.
func (o GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput) SampleGcsFileSpecs() GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1GcsFilesetSpecResponse) []GoogleCloudDatacatalogV1GcsFileSpecResponse {
		if v == nil {
			return nil
		}
		return v.SampleGcsFileSpecs
	}).(GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput)
}

// Represents a schema, for example, a BigQuery, GoogleSQL, or Avro schema.
type GoogleCloudDatacatalogV1Schema struct {
	// The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.
	Columns []GoogleCloudDatacatalogV1ColumnSchema `pulumi:"columns"`
}

// GoogleCloudDatacatalogV1SchemaInput is an input type that accepts GoogleCloudDatacatalogV1SchemaArgs and GoogleCloudDatacatalogV1SchemaOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1SchemaInput` via:
//
//          GoogleCloudDatacatalogV1SchemaArgs{...}
type GoogleCloudDatacatalogV1SchemaInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1SchemaOutput() GoogleCloudDatacatalogV1SchemaOutput
	ToGoogleCloudDatacatalogV1SchemaOutputWithContext(context.Context) GoogleCloudDatacatalogV1SchemaOutput
}

// Represents a schema, for example, a BigQuery, GoogleSQL, or Avro schema.
type GoogleCloudDatacatalogV1SchemaArgs struct {
	// The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.
	Columns GoogleCloudDatacatalogV1ColumnSchemaArrayInput `pulumi:"columns"`
}

func (GoogleCloudDatacatalogV1SchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1Schema)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1SchemaArgs) ToGoogleCloudDatacatalogV1SchemaOutput() GoogleCloudDatacatalogV1SchemaOutput {
	return i.ToGoogleCloudDatacatalogV1SchemaOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1SchemaArgs) ToGoogleCloudDatacatalogV1SchemaOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1SchemaOutput)
}

func (i GoogleCloudDatacatalogV1SchemaArgs) ToGoogleCloudDatacatalogV1SchemaPtrOutput() GoogleCloudDatacatalogV1SchemaPtrOutput {
	return i.ToGoogleCloudDatacatalogV1SchemaPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1SchemaArgs) ToGoogleCloudDatacatalogV1SchemaPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1SchemaOutput).ToGoogleCloudDatacatalogV1SchemaPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1SchemaPtrInput is an input type that accepts GoogleCloudDatacatalogV1SchemaArgs, GoogleCloudDatacatalogV1SchemaPtr and GoogleCloudDatacatalogV1SchemaPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1SchemaPtrInput` via:
//
//          GoogleCloudDatacatalogV1SchemaArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1SchemaPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1SchemaPtrOutput() GoogleCloudDatacatalogV1SchemaPtrOutput
	ToGoogleCloudDatacatalogV1SchemaPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1SchemaPtrOutput
}

type googleCloudDatacatalogV1SchemaPtrType GoogleCloudDatacatalogV1SchemaArgs

func GoogleCloudDatacatalogV1SchemaPtr(v *GoogleCloudDatacatalogV1SchemaArgs) GoogleCloudDatacatalogV1SchemaPtrInput {
	return (*googleCloudDatacatalogV1SchemaPtrType)(v)
}

func (*googleCloudDatacatalogV1SchemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1Schema)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1SchemaPtrType) ToGoogleCloudDatacatalogV1SchemaPtrOutput() GoogleCloudDatacatalogV1SchemaPtrOutput {
	return i.ToGoogleCloudDatacatalogV1SchemaPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1SchemaPtrType) ToGoogleCloudDatacatalogV1SchemaPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1SchemaPtrOutput)
}

// Represents a schema, for example, a BigQuery, GoogleSQL, or Avro schema.
type GoogleCloudDatacatalogV1SchemaOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1SchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1Schema)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1SchemaOutput) ToGoogleCloudDatacatalogV1SchemaOutput() GoogleCloudDatacatalogV1SchemaOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SchemaOutput) ToGoogleCloudDatacatalogV1SchemaOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SchemaOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SchemaOutput) ToGoogleCloudDatacatalogV1SchemaPtrOutput() GoogleCloudDatacatalogV1SchemaPtrOutput {
	return o.ToGoogleCloudDatacatalogV1SchemaPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1SchemaOutput) ToGoogleCloudDatacatalogV1SchemaPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SchemaPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1Schema) *GoogleCloudDatacatalogV1Schema {
		return &v
	}).(GoogleCloudDatacatalogV1SchemaPtrOutput)
}

// The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.
func (o GoogleCloudDatacatalogV1SchemaOutput) Columns() GoogleCloudDatacatalogV1ColumnSchemaArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1Schema) []GoogleCloudDatacatalogV1ColumnSchema { return v.Columns }).(GoogleCloudDatacatalogV1ColumnSchemaArrayOutput)
}

type GoogleCloudDatacatalogV1SchemaPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1SchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1Schema)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1SchemaPtrOutput) ToGoogleCloudDatacatalogV1SchemaPtrOutput() GoogleCloudDatacatalogV1SchemaPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SchemaPtrOutput) ToGoogleCloudDatacatalogV1SchemaPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SchemaPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SchemaPtrOutput) Elem() GoogleCloudDatacatalogV1SchemaOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1Schema) GoogleCloudDatacatalogV1Schema { return *v }).(GoogleCloudDatacatalogV1SchemaOutput)
}

// The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.
func (o GoogleCloudDatacatalogV1SchemaPtrOutput) Columns() GoogleCloudDatacatalogV1ColumnSchemaArrayOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1Schema) []GoogleCloudDatacatalogV1ColumnSchema {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(GoogleCloudDatacatalogV1ColumnSchemaArrayOutput)
}

// Represents a schema, for example, a BigQuery, GoogleSQL, or Avro schema.
type GoogleCloudDatacatalogV1SchemaResponse struct {
	// The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.
	Columns []GoogleCloudDatacatalogV1ColumnSchemaResponse `pulumi:"columns"`
}

// GoogleCloudDatacatalogV1SchemaResponseInput is an input type that accepts GoogleCloudDatacatalogV1SchemaResponseArgs and GoogleCloudDatacatalogV1SchemaResponseOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1SchemaResponseInput` via:
//
//          GoogleCloudDatacatalogV1SchemaResponseArgs{...}
type GoogleCloudDatacatalogV1SchemaResponseInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1SchemaResponseOutput() GoogleCloudDatacatalogV1SchemaResponseOutput
	ToGoogleCloudDatacatalogV1SchemaResponseOutputWithContext(context.Context) GoogleCloudDatacatalogV1SchemaResponseOutput
}

// Represents a schema, for example, a BigQuery, GoogleSQL, or Avro schema.
type GoogleCloudDatacatalogV1SchemaResponseArgs struct {
	// The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.
	Columns GoogleCloudDatacatalogV1ColumnSchemaResponseArrayInput `pulumi:"columns"`
}

func (GoogleCloudDatacatalogV1SchemaResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1SchemaResponse)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1SchemaResponseArgs) ToGoogleCloudDatacatalogV1SchemaResponseOutput() GoogleCloudDatacatalogV1SchemaResponseOutput {
	return i.ToGoogleCloudDatacatalogV1SchemaResponseOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1SchemaResponseArgs) ToGoogleCloudDatacatalogV1SchemaResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SchemaResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1SchemaResponseOutput)
}

func (i GoogleCloudDatacatalogV1SchemaResponseArgs) ToGoogleCloudDatacatalogV1SchemaResponsePtrOutput() GoogleCloudDatacatalogV1SchemaResponsePtrOutput {
	return i.ToGoogleCloudDatacatalogV1SchemaResponsePtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1SchemaResponseArgs) ToGoogleCloudDatacatalogV1SchemaResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SchemaResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1SchemaResponseOutput).ToGoogleCloudDatacatalogV1SchemaResponsePtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1SchemaResponsePtrInput is an input type that accepts GoogleCloudDatacatalogV1SchemaResponseArgs, GoogleCloudDatacatalogV1SchemaResponsePtr and GoogleCloudDatacatalogV1SchemaResponsePtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1SchemaResponsePtrInput` via:
//
//          GoogleCloudDatacatalogV1SchemaResponseArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1SchemaResponsePtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1SchemaResponsePtrOutput() GoogleCloudDatacatalogV1SchemaResponsePtrOutput
	ToGoogleCloudDatacatalogV1SchemaResponsePtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1SchemaResponsePtrOutput
}

type googleCloudDatacatalogV1SchemaResponsePtrType GoogleCloudDatacatalogV1SchemaResponseArgs

func GoogleCloudDatacatalogV1SchemaResponsePtr(v *GoogleCloudDatacatalogV1SchemaResponseArgs) GoogleCloudDatacatalogV1SchemaResponsePtrInput {
	return (*googleCloudDatacatalogV1SchemaResponsePtrType)(v)
}

func (*googleCloudDatacatalogV1SchemaResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1SchemaResponse)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1SchemaResponsePtrType) ToGoogleCloudDatacatalogV1SchemaResponsePtrOutput() GoogleCloudDatacatalogV1SchemaResponsePtrOutput {
	return i.ToGoogleCloudDatacatalogV1SchemaResponsePtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1SchemaResponsePtrType) ToGoogleCloudDatacatalogV1SchemaResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SchemaResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1SchemaResponsePtrOutput)
}

// Represents a schema, for example, a BigQuery, GoogleSQL, or Avro schema.
type GoogleCloudDatacatalogV1SchemaResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1SchemaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1SchemaResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1SchemaResponseOutput) ToGoogleCloudDatacatalogV1SchemaResponseOutput() GoogleCloudDatacatalogV1SchemaResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SchemaResponseOutput) ToGoogleCloudDatacatalogV1SchemaResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SchemaResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SchemaResponseOutput) ToGoogleCloudDatacatalogV1SchemaResponsePtrOutput() GoogleCloudDatacatalogV1SchemaResponsePtrOutput {
	return o.ToGoogleCloudDatacatalogV1SchemaResponsePtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1SchemaResponseOutput) ToGoogleCloudDatacatalogV1SchemaResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SchemaResponsePtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1SchemaResponse) *GoogleCloudDatacatalogV1SchemaResponse {
		return &v
	}).(GoogleCloudDatacatalogV1SchemaResponsePtrOutput)
}

// The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.
func (o GoogleCloudDatacatalogV1SchemaResponseOutput) Columns() GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1SchemaResponse) []GoogleCloudDatacatalogV1ColumnSchemaResponse {
		return v.Columns
	}).(GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput)
}

type GoogleCloudDatacatalogV1SchemaResponsePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1SchemaResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1SchemaResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1SchemaResponsePtrOutput) ToGoogleCloudDatacatalogV1SchemaResponsePtrOutput() GoogleCloudDatacatalogV1SchemaResponsePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SchemaResponsePtrOutput) ToGoogleCloudDatacatalogV1SchemaResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SchemaResponsePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SchemaResponsePtrOutput) Elem() GoogleCloudDatacatalogV1SchemaResponseOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1SchemaResponse) GoogleCloudDatacatalogV1SchemaResponse { return *v }).(GoogleCloudDatacatalogV1SchemaResponseOutput)
}

// The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.
func (o GoogleCloudDatacatalogV1SchemaResponsePtrOutput) Columns() GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1SchemaResponse) []GoogleCloudDatacatalogV1ColumnSchemaResponse {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput)
}

// Timestamps associated with this resource in a particular system.
type GoogleCloudDatacatalogV1SystemTimestamps struct {
	// Creation timestamp of the resource within the given system.
	CreateTime *string `pulumi:"createTime"`
	// Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.
	UpdateTime *string `pulumi:"updateTime"`
}

// GoogleCloudDatacatalogV1SystemTimestampsInput is an input type that accepts GoogleCloudDatacatalogV1SystemTimestampsArgs and GoogleCloudDatacatalogV1SystemTimestampsOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1SystemTimestampsInput` via:
//
//          GoogleCloudDatacatalogV1SystemTimestampsArgs{...}
type GoogleCloudDatacatalogV1SystemTimestampsInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1SystemTimestampsOutput() GoogleCloudDatacatalogV1SystemTimestampsOutput
	ToGoogleCloudDatacatalogV1SystemTimestampsOutputWithContext(context.Context) GoogleCloudDatacatalogV1SystemTimestampsOutput
}

// Timestamps associated with this resource in a particular system.
type GoogleCloudDatacatalogV1SystemTimestampsArgs struct {
	// Creation timestamp of the resource within the given system.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.
	UpdateTime pulumi.StringPtrInput `pulumi:"updateTime"`
}

func (GoogleCloudDatacatalogV1SystemTimestampsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1SystemTimestamps)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1SystemTimestampsArgs) ToGoogleCloudDatacatalogV1SystemTimestampsOutput() GoogleCloudDatacatalogV1SystemTimestampsOutput {
	return i.ToGoogleCloudDatacatalogV1SystemTimestampsOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1SystemTimestampsArgs) ToGoogleCloudDatacatalogV1SystemTimestampsOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SystemTimestampsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1SystemTimestampsOutput)
}

func (i GoogleCloudDatacatalogV1SystemTimestampsArgs) ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutput() GoogleCloudDatacatalogV1SystemTimestampsPtrOutput {
	return i.ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1SystemTimestampsArgs) ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SystemTimestampsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1SystemTimestampsOutput).ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1SystemTimestampsPtrInput is an input type that accepts GoogleCloudDatacatalogV1SystemTimestampsArgs, GoogleCloudDatacatalogV1SystemTimestampsPtr and GoogleCloudDatacatalogV1SystemTimestampsPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1SystemTimestampsPtrInput` via:
//
//          GoogleCloudDatacatalogV1SystemTimestampsArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1SystemTimestampsPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutput() GoogleCloudDatacatalogV1SystemTimestampsPtrOutput
	ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1SystemTimestampsPtrOutput
}

type googleCloudDatacatalogV1SystemTimestampsPtrType GoogleCloudDatacatalogV1SystemTimestampsArgs

func GoogleCloudDatacatalogV1SystemTimestampsPtr(v *GoogleCloudDatacatalogV1SystemTimestampsArgs) GoogleCloudDatacatalogV1SystemTimestampsPtrInput {
	return (*googleCloudDatacatalogV1SystemTimestampsPtrType)(v)
}

func (*googleCloudDatacatalogV1SystemTimestampsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1SystemTimestamps)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1SystemTimestampsPtrType) ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutput() GoogleCloudDatacatalogV1SystemTimestampsPtrOutput {
	return i.ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1SystemTimestampsPtrType) ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SystemTimestampsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1SystemTimestampsPtrOutput)
}

// Timestamps associated with this resource in a particular system.
type GoogleCloudDatacatalogV1SystemTimestampsOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1SystemTimestampsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1SystemTimestamps)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1SystemTimestampsOutput) ToGoogleCloudDatacatalogV1SystemTimestampsOutput() GoogleCloudDatacatalogV1SystemTimestampsOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SystemTimestampsOutput) ToGoogleCloudDatacatalogV1SystemTimestampsOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SystemTimestampsOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SystemTimestampsOutput) ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutput() GoogleCloudDatacatalogV1SystemTimestampsPtrOutput {
	return o.ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1SystemTimestampsOutput) ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SystemTimestampsPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1SystemTimestamps) *GoogleCloudDatacatalogV1SystemTimestamps {
		return &v
	}).(GoogleCloudDatacatalogV1SystemTimestampsPtrOutput)
}

// Creation timestamp of the resource within the given system.
func (o GoogleCloudDatacatalogV1SystemTimestampsOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1SystemTimestamps) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.
func (o GoogleCloudDatacatalogV1SystemTimestampsOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1SystemTimestamps) *string { return v.UpdateTime }).(pulumi.StringPtrOutput)
}

type GoogleCloudDatacatalogV1SystemTimestampsPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1SystemTimestampsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1SystemTimestamps)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1SystemTimestampsPtrOutput) ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutput() GoogleCloudDatacatalogV1SystemTimestampsPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SystemTimestampsPtrOutput) ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SystemTimestampsPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SystemTimestampsPtrOutput) Elem() GoogleCloudDatacatalogV1SystemTimestampsOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1SystemTimestamps) GoogleCloudDatacatalogV1SystemTimestamps { return *v }).(GoogleCloudDatacatalogV1SystemTimestampsOutput)
}

// Creation timestamp of the resource within the given system.
func (o GoogleCloudDatacatalogV1SystemTimestampsPtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1SystemTimestamps) *string {
		if v == nil {
			return nil
		}
		return v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.
func (o GoogleCloudDatacatalogV1SystemTimestampsPtrOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1SystemTimestamps) *string {
		if v == nil {
			return nil
		}
		return v.UpdateTime
	}).(pulumi.StringPtrOutput)
}

// Timestamps associated with this resource in a particular system.
type GoogleCloudDatacatalogV1SystemTimestampsResponse struct {
	// Creation timestamp of the resource within the given system.
	CreateTime string `pulumi:"createTime"`
	// Expiration timestamp of the resource within the given system. Currently only applicable to BigQuery resources.
	ExpireTime string `pulumi:"expireTime"`
	// Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.
	UpdateTime string `pulumi:"updateTime"`
}

// GoogleCloudDatacatalogV1SystemTimestampsResponseInput is an input type that accepts GoogleCloudDatacatalogV1SystemTimestampsResponseArgs and GoogleCloudDatacatalogV1SystemTimestampsResponseOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1SystemTimestampsResponseInput` via:
//
//          GoogleCloudDatacatalogV1SystemTimestampsResponseArgs{...}
type GoogleCloudDatacatalogV1SystemTimestampsResponseInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1SystemTimestampsResponseOutput() GoogleCloudDatacatalogV1SystemTimestampsResponseOutput
	ToGoogleCloudDatacatalogV1SystemTimestampsResponseOutputWithContext(context.Context) GoogleCloudDatacatalogV1SystemTimestampsResponseOutput
}

// Timestamps associated with this resource in a particular system.
type GoogleCloudDatacatalogV1SystemTimestampsResponseArgs struct {
	// Creation timestamp of the resource within the given system.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Expiration timestamp of the resource within the given system. Currently only applicable to BigQuery resources.
	ExpireTime pulumi.StringInput `pulumi:"expireTime"`
	// Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (GoogleCloudDatacatalogV1SystemTimestampsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1SystemTimestampsResponse)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1SystemTimestampsResponseArgs) ToGoogleCloudDatacatalogV1SystemTimestampsResponseOutput() GoogleCloudDatacatalogV1SystemTimestampsResponseOutput {
	return i.ToGoogleCloudDatacatalogV1SystemTimestampsResponseOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1SystemTimestampsResponseArgs) ToGoogleCloudDatacatalogV1SystemTimestampsResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SystemTimestampsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1SystemTimestampsResponseOutput)
}

func (i GoogleCloudDatacatalogV1SystemTimestampsResponseArgs) ToGoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput() GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput {
	return i.ToGoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1SystemTimestampsResponseArgs) ToGoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1SystemTimestampsResponseOutput).ToGoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1SystemTimestampsResponsePtrInput is an input type that accepts GoogleCloudDatacatalogV1SystemTimestampsResponseArgs, GoogleCloudDatacatalogV1SystemTimestampsResponsePtr and GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1SystemTimestampsResponsePtrInput` via:
//
//          GoogleCloudDatacatalogV1SystemTimestampsResponseArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1SystemTimestampsResponsePtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput() GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput
	ToGoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput
}

type googleCloudDatacatalogV1SystemTimestampsResponsePtrType GoogleCloudDatacatalogV1SystemTimestampsResponseArgs

func GoogleCloudDatacatalogV1SystemTimestampsResponsePtr(v *GoogleCloudDatacatalogV1SystemTimestampsResponseArgs) GoogleCloudDatacatalogV1SystemTimestampsResponsePtrInput {
	return (*googleCloudDatacatalogV1SystemTimestampsResponsePtrType)(v)
}

func (*googleCloudDatacatalogV1SystemTimestampsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1SystemTimestampsResponse)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1SystemTimestampsResponsePtrType) ToGoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput() GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput {
	return i.ToGoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1SystemTimestampsResponsePtrType) ToGoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput)
}

// Timestamps associated with this resource in a particular system.
type GoogleCloudDatacatalogV1SystemTimestampsResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1SystemTimestampsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1SystemTimestampsResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1SystemTimestampsResponseOutput) ToGoogleCloudDatacatalogV1SystemTimestampsResponseOutput() GoogleCloudDatacatalogV1SystemTimestampsResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SystemTimestampsResponseOutput) ToGoogleCloudDatacatalogV1SystemTimestampsResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SystemTimestampsResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SystemTimestampsResponseOutput) ToGoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput() GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput {
	return o.ToGoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1SystemTimestampsResponseOutput) ToGoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1SystemTimestampsResponse) *GoogleCloudDatacatalogV1SystemTimestampsResponse {
		return &v
	}).(GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput)
}

// Creation timestamp of the resource within the given system.
func (o GoogleCloudDatacatalogV1SystemTimestampsResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1SystemTimestampsResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Expiration timestamp of the resource within the given system. Currently only applicable to BigQuery resources.
func (o GoogleCloudDatacatalogV1SystemTimestampsResponseOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1SystemTimestampsResponse) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.
func (o GoogleCloudDatacatalogV1SystemTimestampsResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1SystemTimestampsResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1SystemTimestampsResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput) ToGoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput() GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput) ToGoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput) Elem() GoogleCloudDatacatalogV1SystemTimestampsResponseOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1SystemTimestampsResponse) GoogleCloudDatacatalogV1SystemTimestampsResponse {
		return *v
	}).(GoogleCloudDatacatalogV1SystemTimestampsResponseOutput)
}

// Creation timestamp of the resource within the given system.
func (o GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1SystemTimestampsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// Expiration timestamp of the resource within the given system. Currently only applicable to BigQuery resources.
func (o GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1SystemTimestampsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ExpireTime
	}).(pulumi.StringPtrOutput)
}

// Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.
func (o GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1SystemTimestampsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpdateTime
	}).(pulumi.StringPtrOutput)
}

// Normal BigQuery table specification.
type GoogleCloudDatacatalogV1TableSpec struct {
}

// GoogleCloudDatacatalogV1TableSpecInput is an input type that accepts GoogleCloudDatacatalogV1TableSpecArgs and GoogleCloudDatacatalogV1TableSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1TableSpecInput` via:
//
//          GoogleCloudDatacatalogV1TableSpecArgs{...}
type GoogleCloudDatacatalogV1TableSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1TableSpecOutput() GoogleCloudDatacatalogV1TableSpecOutput
	ToGoogleCloudDatacatalogV1TableSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1TableSpecOutput
}

// Normal BigQuery table specification.
type GoogleCloudDatacatalogV1TableSpecArgs struct {
}

func (GoogleCloudDatacatalogV1TableSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1TableSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1TableSpecArgs) ToGoogleCloudDatacatalogV1TableSpecOutput() GoogleCloudDatacatalogV1TableSpecOutput {
	return i.ToGoogleCloudDatacatalogV1TableSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1TableSpecArgs) ToGoogleCloudDatacatalogV1TableSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1TableSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1TableSpecOutput)
}

func (i GoogleCloudDatacatalogV1TableSpecArgs) ToGoogleCloudDatacatalogV1TableSpecPtrOutput() GoogleCloudDatacatalogV1TableSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1TableSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1TableSpecArgs) ToGoogleCloudDatacatalogV1TableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1TableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1TableSpecOutput).ToGoogleCloudDatacatalogV1TableSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1TableSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1TableSpecArgs, GoogleCloudDatacatalogV1TableSpecPtr and GoogleCloudDatacatalogV1TableSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1TableSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1TableSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1TableSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1TableSpecPtrOutput() GoogleCloudDatacatalogV1TableSpecPtrOutput
	ToGoogleCloudDatacatalogV1TableSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1TableSpecPtrOutput
}

type googleCloudDatacatalogV1TableSpecPtrType GoogleCloudDatacatalogV1TableSpecArgs

func GoogleCloudDatacatalogV1TableSpecPtr(v *GoogleCloudDatacatalogV1TableSpecArgs) GoogleCloudDatacatalogV1TableSpecPtrInput {
	return (*googleCloudDatacatalogV1TableSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1TableSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1TableSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1TableSpecPtrType) ToGoogleCloudDatacatalogV1TableSpecPtrOutput() GoogleCloudDatacatalogV1TableSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1TableSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1TableSpecPtrType) ToGoogleCloudDatacatalogV1TableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1TableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1TableSpecPtrOutput)
}

// Normal BigQuery table specification.
type GoogleCloudDatacatalogV1TableSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1TableSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1TableSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1TableSpecOutput) ToGoogleCloudDatacatalogV1TableSpecOutput() GoogleCloudDatacatalogV1TableSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1TableSpecOutput) ToGoogleCloudDatacatalogV1TableSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1TableSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1TableSpecOutput) ToGoogleCloudDatacatalogV1TableSpecPtrOutput() GoogleCloudDatacatalogV1TableSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1TableSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1TableSpecOutput) ToGoogleCloudDatacatalogV1TableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1TableSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1TableSpec) *GoogleCloudDatacatalogV1TableSpec {
		return &v
	}).(GoogleCloudDatacatalogV1TableSpecPtrOutput)
}

type GoogleCloudDatacatalogV1TableSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1TableSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1TableSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1TableSpecPtrOutput) ToGoogleCloudDatacatalogV1TableSpecPtrOutput() GoogleCloudDatacatalogV1TableSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1TableSpecPtrOutput) ToGoogleCloudDatacatalogV1TableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1TableSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1TableSpecPtrOutput) Elem() GoogleCloudDatacatalogV1TableSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1TableSpec) GoogleCloudDatacatalogV1TableSpec { return *v }).(GoogleCloudDatacatalogV1TableSpecOutput)
}

// Normal BigQuery table specification.
type GoogleCloudDatacatalogV1TableSpecResponse struct {
	// If the table is date-sharded, that is, it matches the `[prefix]YYYYMMDD` name pattern, this field is the Data Catalog resource name of the date-sharded grouped entry. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`. Otherwise, `grouped_entry` is empty.
	GroupedEntry string `pulumi:"groupedEntry"`
}

// GoogleCloudDatacatalogV1TableSpecResponseInput is an input type that accepts GoogleCloudDatacatalogV1TableSpecResponseArgs and GoogleCloudDatacatalogV1TableSpecResponseOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1TableSpecResponseInput` via:
//
//          GoogleCloudDatacatalogV1TableSpecResponseArgs{...}
type GoogleCloudDatacatalogV1TableSpecResponseInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1TableSpecResponseOutput() GoogleCloudDatacatalogV1TableSpecResponseOutput
	ToGoogleCloudDatacatalogV1TableSpecResponseOutputWithContext(context.Context) GoogleCloudDatacatalogV1TableSpecResponseOutput
}

// Normal BigQuery table specification.
type GoogleCloudDatacatalogV1TableSpecResponseArgs struct {
	// If the table is date-sharded, that is, it matches the `[prefix]YYYYMMDD` name pattern, this field is the Data Catalog resource name of the date-sharded grouped entry. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`. Otherwise, `grouped_entry` is empty.
	GroupedEntry pulumi.StringInput `pulumi:"groupedEntry"`
}

func (GoogleCloudDatacatalogV1TableSpecResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1TableSpecResponse)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1TableSpecResponseArgs) ToGoogleCloudDatacatalogV1TableSpecResponseOutput() GoogleCloudDatacatalogV1TableSpecResponseOutput {
	return i.ToGoogleCloudDatacatalogV1TableSpecResponseOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1TableSpecResponseArgs) ToGoogleCloudDatacatalogV1TableSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1TableSpecResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1TableSpecResponseOutput)
}

func (i GoogleCloudDatacatalogV1TableSpecResponseArgs) ToGoogleCloudDatacatalogV1TableSpecResponsePtrOutput() GoogleCloudDatacatalogV1TableSpecResponsePtrOutput {
	return i.ToGoogleCloudDatacatalogV1TableSpecResponsePtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1TableSpecResponseArgs) ToGoogleCloudDatacatalogV1TableSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1TableSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1TableSpecResponseOutput).ToGoogleCloudDatacatalogV1TableSpecResponsePtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1TableSpecResponsePtrInput is an input type that accepts GoogleCloudDatacatalogV1TableSpecResponseArgs, GoogleCloudDatacatalogV1TableSpecResponsePtr and GoogleCloudDatacatalogV1TableSpecResponsePtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1TableSpecResponsePtrInput` via:
//
//          GoogleCloudDatacatalogV1TableSpecResponseArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1TableSpecResponsePtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1TableSpecResponsePtrOutput() GoogleCloudDatacatalogV1TableSpecResponsePtrOutput
	ToGoogleCloudDatacatalogV1TableSpecResponsePtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1TableSpecResponsePtrOutput
}

type googleCloudDatacatalogV1TableSpecResponsePtrType GoogleCloudDatacatalogV1TableSpecResponseArgs

func GoogleCloudDatacatalogV1TableSpecResponsePtr(v *GoogleCloudDatacatalogV1TableSpecResponseArgs) GoogleCloudDatacatalogV1TableSpecResponsePtrInput {
	return (*googleCloudDatacatalogV1TableSpecResponsePtrType)(v)
}

func (*googleCloudDatacatalogV1TableSpecResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1TableSpecResponse)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1TableSpecResponsePtrType) ToGoogleCloudDatacatalogV1TableSpecResponsePtrOutput() GoogleCloudDatacatalogV1TableSpecResponsePtrOutput {
	return i.ToGoogleCloudDatacatalogV1TableSpecResponsePtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1TableSpecResponsePtrType) ToGoogleCloudDatacatalogV1TableSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1TableSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1TableSpecResponsePtrOutput)
}

// Normal BigQuery table specification.
type GoogleCloudDatacatalogV1TableSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1TableSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1TableSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1TableSpecResponseOutput) ToGoogleCloudDatacatalogV1TableSpecResponseOutput() GoogleCloudDatacatalogV1TableSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1TableSpecResponseOutput) ToGoogleCloudDatacatalogV1TableSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1TableSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1TableSpecResponseOutput) ToGoogleCloudDatacatalogV1TableSpecResponsePtrOutput() GoogleCloudDatacatalogV1TableSpecResponsePtrOutput {
	return o.ToGoogleCloudDatacatalogV1TableSpecResponsePtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1TableSpecResponseOutput) ToGoogleCloudDatacatalogV1TableSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1TableSpecResponsePtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1TableSpecResponse) *GoogleCloudDatacatalogV1TableSpecResponse {
		return &v
	}).(GoogleCloudDatacatalogV1TableSpecResponsePtrOutput)
}

// If the table is date-sharded, that is, it matches the `[prefix]YYYYMMDD` name pattern, this field is the Data Catalog resource name of the date-sharded grouped entry. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`. Otherwise, `grouped_entry` is empty.
func (o GoogleCloudDatacatalogV1TableSpecResponseOutput) GroupedEntry() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1TableSpecResponse) string { return v.GroupedEntry }).(pulumi.StringOutput)
}

type GoogleCloudDatacatalogV1TableSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1TableSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1TableSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1TableSpecResponsePtrOutput) ToGoogleCloudDatacatalogV1TableSpecResponsePtrOutput() GoogleCloudDatacatalogV1TableSpecResponsePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1TableSpecResponsePtrOutput) ToGoogleCloudDatacatalogV1TableSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1TableSpecResponsePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1TableSpecResponsePtrOutput) Elem() GoogleCloudDatacatalogV1TableSpecResponseOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1TableSpecResponse) GoogleCloudDatacatalogV1TableSpecResponse {
		return *v
	}).(GoogleCloudDatacatalogV1TableSpecResponseOutput)
}

// If the table is date-sharded, that is, it matches the `[prefix]YYYYMMDD` name pattern, this field is the Data Catalog resource name of the date-sharded grouped entry. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`. Otherwise, `grouped_entry` is empty.
func (o GoogleCloudDatacatalogV1TableSpecResponsePtrOutput) GroupedEntry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1TableSpecResponse) *string {
		if v == nil {
			return nil
		}
		return &v.GroupedEntry
	}).(pulumi.StringPtrOutput)
}

// The set of all usage signals that Data Catalog stores. Note: Usually, these signals are updated daily. In rare cases, an update may fail but will be performed again on the next day.
type GoogleCloudDatacatalogV1UsageSignalResponse struct {
	// The end timestamp of the duration of usage statistics.
	UpdateTime string `pulumi:"updateTime"`
	// Usage statistics over each of the predefined time ranges. Supported time ranges are `{"24H", "7D", "30D"}`.
	UsageWithinTimeRange map[string]string `pulumi:"usageWithinTimeRange"`
}

// GoogleCloudDatacatalogV1UsageSignalResponseInput is an input type that accepts GoogleCloudDatacatalogV1UsageSignalResponseArgs and GoogleCloudDatacatalogV1UsageSignalResponseOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1UsageSignalResponseInput` via:
//
//          GoogleCloudDatacatalogV1UsageSignalResponseArgs{...}
type GoogleCloudDatacatalogV1UsageSignalResponseInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1UsageSignalResponseOutput() GoogleCloudDatacatalogV1UsageSignalResponseOutput
	ToGoogleCloudDatacatalogV1UsageSignalResponseOutputWithContext(context.Context) GoogleCloudDatacatalogV1UsageSignalResponseOutput
}

// The set of all usage signals that Data Catalog stores. Note: Usually, these signals are updated daily. In rare cases, an update may fail but will be performed again on the next day.
type GoogleCloudDatacatalogV1UsageSignalResponseArgs struct {
	// The end timestamp of the duration of usage statistics.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// Usage statistics over each of the predefined time ranges. Supported time ranges are `{"24H", "7D", "30D"}`.
	UsageWithinTimeRange pulumi.StringMapInput `pulumi:"usageWithinTimeRange"`
}

func (GoogleCloudDatacatalogV1UsageSignalResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1UsageSignalResponse)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1UsageSignalResponseArgs) ToGoogleCloudDatacatalogV1UsageSignalResponseOutput() GoogleCloudDatacatalogV1UsageSignalResponseOutput {
	return i.ToGoogleCloudDatacatalogV1UsageSignalResponseOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1UsageSignalResponseArgs) ToGoogleCloudDatacatalogV1UsageSignalResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1UsageSignalResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1UsageSignalResponseOutput)
}

func (i GoogleCloudDatacatalogV1UsageSignalResponseArgs) ToGoogleCloudDatacatalogV1UsageSignalResponsePtrOutput() GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput {
	return i.ToGoogleCloudDatacatalogV1UsageSignalResponsePtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1UsageSignalResponseArgs) ToGoogleCloudDatacatalogV1UsageSignalResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1UsageSignalResponseOutput).ToGoogleCloudDatacatalogV1UsageSignalResponsePtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1UsageSignalResponsePtrInput is an input type that accepts GoogleCloudDatacatalogV1UsageSignalResponseArgs, GoogleCloudDatacatalogV1UsageSignalResponsePtr and GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1UsageSignalResponsePtrInput` via:
//
//          GoogleCloudDatacatalogV1UsageSignalResponseArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1UsageSignalResponsePtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1UsageSignalResponsePtrOutput() GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput
	ToGoogleCloudDatacatalogV1UsageSignalResponsePtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput
}

type googleCloudDatacatalogV1UsageSignalResponsePtrType GoogleCloudDatacatalogV1UsageSignalResponseArgs

func GoogleCloudDatacatalogV1UsageSignalResponsePtr(v *GoogleCloudDatacatalogV1UsageSignalResponseArgs) GoogleCloudDatacatalogV1UsageSignalResponsePtrInput {
	return (*googleCloudDatacatalogV1UsageSignalResponsePtrType)(v)
}

func (*googleCloudDatacatalogV1UsageSignalResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1UsageSignalResponse)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1UsageSignalResponsePtrType) ToGoogleCloudDatacatalogV1UsageSignalResponsePtrOutput() GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput {
	return i.ToGoogleCloudDatacatalogV1UsageSignalResponsePtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1UsageSignalResponsePtrType) ToGoogleCloudDatacatalogV1UsageSignalResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput)
}

// The set of all usage signals that Data Catalog stores. Note: Usually, these signals are updated daily. In rare cases, an update may fail but will be performed again on the next day.
type GoogleCloudDatacatalogV1UsageSignalResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1UsageSignalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1UsageSignalResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1UsageSignalResponseOutput) ToGoogleCloudDatacatalogV1UsageSignalResponseOutput() GoogleCloudDatacatalogV1UsageSignalResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1UsageSignalResponseOutput) ToGoogleCloudDatacatalogV1UsageSignalResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1UsageSignalResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1UsageSignalResponseOutput) ToGoogleCloudDatacatalogV1UsageSignalResponsePtrOutput() GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput {
	return o.ToGoogleCloudDatacatalogV1UsageSignalResponsePtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1UsageSignalResponseOutput) ToGoogleCloudDatacatalogV1UsageSignalResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1UsageSignalResponse) *GoogleCloudDatacatalogV1UsageSignalResponse {
		return &v
	}).(GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput)
}

// The end timestamp of the duration of usage statistics.
func (o GoogleCloudDatacatalogV1UsageSignalResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1UsageSignalResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// Usage statistics over each of the predefined time ranges. Supported time ranges are `{"24H", "7D", "30D"}`.
func (o GoogleCloudDatacatalogV1UsageSignalResponseOutput) UsageWithinTimeRange() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1UsageSignalResponse) map[string]string { return v.UsageWithinTimeRange }).(pulumi.StringMapOutput)
}

type GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1UsageSignalResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput) ToGoogleCloudDatacatalogV1UsageSignalResponsePtrOutput() GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput) ToGoogleCloudDatacatalogV1UsageSignalResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput) Elem() GoogleCloudDatacatalogV1UsageSignalResponseOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1UsageSignalResponse) GoogleCloudDatacatalogV1UsageSignalResponse {
		return *v
	}).(GoogleCloudDatacatalogV1UsageSignalResponseOutput)
}

// The end timestamp of the duration of usage statistics.
func (o GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1UsageSignalResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpdateTime
	}).(pulumi.StringPtrOutput)
}

// Usage statistics over each of the predefined time ranges. Supported time ranges are `{"24H", "7D", "30D"}`.
func (o GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput) UsageWithinTimeRange() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1UsageSignalResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.UsageWithinTimeRange
	}).(pulumi.StringMapOutput)
}

// Table view specification.
type GoogleCloudDatacatalogV1ViewSpec struct {
}

// GoogleCloudDatacatalogV1ViewSpecInput is an input type that accepts GoogleCloudDatacatalogV1ViewSpecArgs and GoogleCloudDatacatalogV1ViewSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1ViewSpecInput` via:
//
//          GoogleCloudDatacatalogV1ViewSpecArgs{...}
type GoogleCloudDatacatalogV1ViewSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1ViewSpecOutput() GoogleCloudDatacatalogV1ViewSpecOutput
	ToGoogleCloudDatacatalogV1ViewSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1ViewSpecOutput
}

// Table view specification.
type GoogleCloudDatacatalogV1ViewSpecArgs struct {
}

func (GoogleCloudDatacatalogV1ViewSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1ViewSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1ViewSpecArgs) ToGoogleCloudDatacatalogV1ViewSpecOutput() GoogleCloudDatacatalogV1ViewSpecOutput {
	return i.ToGoogleCloudDatacatalogV1ViewSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1ViewSpecArgs) ToGoogleCloudDatacatalogV1ViewSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ViewSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1ViewSpecOutput)
}

func (i GoogleCloudDatacatalogV1ViewSpecArgs) ToGoogleCloudDatacatalogV1ViewSpecPtrOutput() GoogleCloudDatacatalogV1ViewSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1ViewSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1ViewSpecArgs) ToGoogleCloudDatacatalogV1ViewSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ViewSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1ViewSpecOutput).ToGoogleCloudDatacatalogV1ViewSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1ViewSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1ViewSpecArgs, GoogleCloudDatacatalogV1ViewSpecPtr and GoogleCloudDatacatalogV1ViewSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1ViewSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1ViewSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1ViewSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1ViewSpecPtrOutput() GoogleCloudDatacatalogV1ViewSpecPtrOutput
	ToGoogleCloudDatacatalogV1ViewSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1ViewSpecPtrOutput
}

type googleCloudDatacatalogV1ViewSpecPtrType GoogleCloudDatacatalogV1ViewSpecArgs

func GoogleCloudDatacatalogV1ViewSpecPtr(v *GoogleCloudDatacatalogV1ViewSpecArgs) GoogleCloudDatacatalogV1ViewSpecPtrInput {
	return (*googleCloudDatacatalogV1ViewSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1ViewSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1ViewSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1ViewSpecPtrType) ToGoogleCloudDatacatalogV1ViewSpecPtrOutput() GoogleCloudDatacatalogV1ViewSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1ViewSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1ViewSpecPtrType) ToGoogleCloudDatacatalogV1ViewSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ViewSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1ViewSpecPtrOutput)
}

// Table view specification.
type GoogleCloudDatacatalogV1ViewSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ViewSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1ViewSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ViewSpecOutput) ToGoogleCloudDatacatalogV1ViewSpecOutput() GoogleCloudDatacatalogV1ViewSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ViewSpecOutput) ToGoogleCloudDatacatalogV1ViewSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ViewSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ViewSpecOutput) ToGoogleCloudDatacatalogV1ViewSpecPtrOutput() GoogleCloudDatacatalogV1ViewSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1ViewSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1ViewSpecOutput) ToGoogleCloudDatacatalogV1ViewSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ViewSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ViewSpec) *GoogleCloudDatacatalogV1ViewSpec {
		return &v
	}).(GoogleCloudDatacatalogV1ViewSpecPtrOutput)
}

type GoogleCloudDatacatalogV1ViewSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ViewSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1ViewSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ViewSpecPtrOutput) ToGoogleCloudDatacatalogV1ViewSpecPtrOutput() GoogleCloudDatacatalogV1ViewSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ViewSpecPtrOutput) ToGoogleCloudDatacatalogV1ViewSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ViewSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ViewSpecPtrOutput) Elem() GoogleCloudDatacatalogV1ViewSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1ViewSpec) GoogleCloudDatacatalogV1ViewSpec { return *v }).(GoogleCloudDatacatalogV1ViewSpecOutput)
}

// Table view specification.
type GoogleCloudDatacatalogV1ViewSpecResponse struct {
	// The query that defines the table view.
	ViewQuery string `pulumi:"viewQuery"`
}

// GoogleCloudDatacatalogV1ViewSpecResponseInput is an input type that accepts GoogleCloudDatacatalogV1ViewSpecResponseArgs and GoogleCloudDatacatalogV1ViewSpecResponseOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1ViewSpecResponseInput` via:
//
//          GoogleCloudDatacatalogV1ViewSpecResponseArgs{...}
type GoogleCloudDatacatalogV1ViewSpecResponseInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1ViewSpecResponseOutput() GoogleCloudDatacatalogV1ViewSpecResponseOutput
	ToGoogleCloudDatacatalogV1ViewSpecResponseOutputWithContext(context.Context) GoogleCloudDatacatalogV1ViewSpecResponseOutput
}

// Table view specification.
type GoogleCloudDatacatalogV1ViewSpecResponseArgs struct {
	// The query that defines the table view.
	ViewQuery pulumi.StringInput `pulumi:"viewQuery"`
}

func (GoogleCloudDatacatalogV1ViewSpecResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1ViewSpecResponse)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1ViewSpecResponseArgs) ToGoogleCloudDatacatalogV1ViewSpecResponseOutput() GoogleCloudDatacatalogV1ViewSpecResponseOutput {
	return i.ToGoogleCloudDatacatalogV1ViewSpecResponseOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1ViewSpecResponseArgs) ToGoogleCloudDatacatalogV1ViewSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ViewSpecResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1ViewSpecResponseOutput)
}

func (i GoogleCloudDatacatalogV1ViewSpecResponseArgs) ToGoogleCloudDatacatalogV1ViewSpecResponsePtrOutput() GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput {
	return i.ToGoogleCloudDatacatalogV1ViewSpecResponsePtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1ViewSpecResponseArgs) ToGoogleCloudDatacatalogV1ViewSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1ViewSpecResponseOutput).ToGoogleCloudDatacatalogV1ViewSpecResponsePtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1ViewSpecResponsePtrInput is an input type that accepts GoogleCloudDatacatalogV1ViewSpecResponseArgs, GoogleCloudDatacatalogV1ViewSpecResponsePtr and GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1ViewSpecResponsePtrInput` via:
//
//          GoogleCloudDatacatalogV1ViewSpecResponseArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1ViewSpecResponsePtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1ViewSpecResponsePtrOutput() GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput
	ToGoogleCloudDatacatalogV1ViewSpecResponsePtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput
}

type googleCloudDatacatalogV1ViewSpecResponsePtrType GoogleCloudDatacatalogV1ViewSpecResponseArgs

func GoogleCloudDatacatalogV1ViewSpecResponsePtr(v *GoogleCloudDatacatalogV1ViewSpecResponseArgs) GoogleCloudDatacatalogV1ViewSpecResponsePtrInput {
	return (*googleCloudDatacatalogV1ViewSpecResponsePtrType)(v)
}

func (*googleCloudDatacatalogV1ViewSpecResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1ViewSpecResponse)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1ViewSpecResponsePtrType) ToGoogleCloudDatacatalogV1ViewSpecResponsePtrOutput() GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput {
	return i.ToGoogleCloudDatacatalogV1ViewSpecResponsePtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1ViewSpecResponsePtrType) ToGoogleCloudDatacatalogV1ViewSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput)
}

// Table view specification.
type GoogleCloudDatacatalogV1ViewSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ViewSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1ViewSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ViewSpecResponseOutput) ToGoogleCloudDatacatalogV1ViewSpecResponseOutput() GoogleCloudDatacatalogV1ViewSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ViewSpecResponseOutput) ToGoogleCloudDatacatalogV1ViewSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ViewSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ViewSpecResponseOutput) ToGoogleCloudDatacatalogV1ViewSpecResponsePtrOutput() GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput {
	return o.ToGoogleCloudDatacatalogV1ViewSpecResponsePtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1ViewSpecResponseOutput) ToGoogleCloudDatacatalogV1ViewSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ViewSpecResponse) *GoogleCloudDatacatalogV1ViewSpecResponse {
		return &v
	}).(GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput)
}

// The query that defines the table view.
func (o GoogleCloudDatacatalogV1ViewSpecResponseOutput) ViewQuery() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ViewSpecResponse) string { return v.ViewQuery }).(pulumi.StringOutput)
}

type GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1ViewSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput) ToGoogleCloudDatacatalogV1ViewSpecResponsePtrOutput() GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput) ToGoogleCloudDatacatalogV1ViewSpecResponsePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput) Elem() GoogleCloudDatacatalogV1ViewSpecResponseOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1ViewSpecResponse) GoogleCloudDatacatalogV1ViewSpecResponse { return *v }).(GoogleCloudDatacatalogV1ViewSpecResponseOutput)
}

// The query that defines the table view.
func (o GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput) ViewQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1ViewSpecResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ViewQuery
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BigQueryTableSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BigQueryTableSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ColumnSchemaOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ColumnSchemaArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ColumnSchemaResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1DataSourceResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1DataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1DatabaseTableSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1DatabaseTableSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1GcsFileSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1GcsFilesetSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1GcsFilesetSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1SchemaOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1SchemaPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1SchemaResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1SchemaResponsePtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1SystemTimestampsOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1SystemTimestampsPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1SystemTimestampsResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1SystemTimestampsResponsePtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1TableSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1TableSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1TableSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1TableSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1UsageSignalResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1UsageSignalResponsePtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ViewSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ViewSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ViewSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ViewSpecResponsePtrOutput{})
}
