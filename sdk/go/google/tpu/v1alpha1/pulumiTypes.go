// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A network endpoint over which a TPU worker can be reached.
type NetworkEndpoint struct {
	// The IP address of this network endpoint.
	IpAddress *string `pulumi:"ipAddress"`
	// The port of this network endpoint.
	Port *int `pulumi:"port"`
}

// NetworkEndpointInput is an input type that accepts NetworkEndpointArgs and NetworkEndpointOutput values.
// You can construct a concrete instance of `NetworkEndpointInput` via:
//
//          NetworkEndpointArgs{...}
type NetworkEndpointInput interface {
	pulumi.Input

	ToNetworkEndpointOutput() NetworkEndpointOutput
	ToNetworkEndpointOutputWithContext(context.Context) NetworkEndpointOutput
}

// A network endpoint over which a TPU worker can be reached.
type NetworkEndpointArgs struct {
	// The IP address of this network endpoint.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// The port of this network endpoint.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (NetworkEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkEndpoint)(nil)).Elem()
}

func (i NetworkEndpointArgs) ToNetworkEndpointOutput() NetworkEndpointOutput {
	return i.ToNetworkEndpointOutputWithContext(context.Background())
}

func (i NetworkEndpointArgs) ToNetworkEndpointOutputWithContext(ctx context.Context) NetworkEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointOutput)
}

// NetworkEndpointArrayInput is an input type that accepts NetworkEndpointArray and NetworkEndpointArrayOutput values.
// You can construct a concrete instance of `NetworkEndpointArrayInput` via:
//
//          NetworkEndpointArray{ NetworkEndpointArgs{...} }
type NetworkEndpointArrayInput interface {
	pulumi.Input

	ToNetworkEndpointArrayOutput() NetworkEndpointArrayOutput
	ToNetworkEndpointArrayOutputWithContext(context.Context) NetworkEndpointArrayOutput
}

type NetworkEndpointArray []NetworkEndpointInput

func (NetworkEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkEndpoint)(nil)).Elem()
}

func (i NetworkEndpointArray) ToNetworkEndpointArrayOutput() NetworkEndpointArrayOutput {
	return i.ToNetworkEndpointArrayOutputWithContext(context.Background())
}

func (i NetworkEndpointArray) ToNetworkEndpointArrayOutputWithContext(ctx context.Context) NetworkEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointArrayOutput)
}

// A network endpoint over which a TPU worker can be reached.
type NetworkEndpointOutput struct{ *pulumi.OutputState }

func (NetworkEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkEndpoint)(nil)).Elem()
}

func (o NetworkEndpointOutput) ToNetworkEndpointOutput() NetworkEndpointOutput {
	return o
}

func (o NetworkEndpointOutput) ToNetworkEndpointOutputWithContext(ctx context.Context) NetworkEndpointOutput {
	return o
}

// The IP address of this network endpoint.
func (o NetworkEndpointOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkEndpoint) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// The port of this network endpoint.
func (o NetworkEndpointOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkEndpoint) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type NetworkEndpointArrayOutput struct{ *pulumi.OutputState }

func (NetworkEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkEndpoint)(nil)).Elem()
}

func (o NetworkEndpointArrayOutput) ToNetworkEndpointArrayOutput() NetworkEndpointArrayOutput {
	return o
}

func (o NetworkEndpointArrayOutput) ToNetworkEndpointArrayOutputWithContext(ctx context.Context) NetworkEndpointArrayOutput {
	return o
}

func (o NetworkEndpointArrayOutput) Index(i pulumi.IntInput) NetworkEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkEndpoint {
		return vs[0].([]NetworkEndpoint)[vs[1].(int)]
	}).(NetworkEndpointOutput)
}

// Sets the scheduling options for this node.
type SchedulingConfig struct {
	// Defines whether the node is preemptible.
	Preemptible *bool `pulumi:"preemptible"`
	// Whether the node is created under a reservation.
	Reserved *bool `pulumi:"reserved"`
}

// SchedulingConfigInput is an input type that accepts SchedulingConfigArgs and SchedulingConfigOutput values.
// You can construct a concrete instance of `SchedulingConfigInput` via:
//
//          SchedulingConfigArgs{...}
type SchedulingConfigInput interface {
	pulumi.Input

	ToSchedulingConfigOutput() SchedulingConfigOutput
	ToSchedulingConfigOutputWithContext(context.Context) SchedulingConfigOutput
}

// Sets the scheduling options for this node.
type SchedulingConfigArgs struct {
	// Defines whether the node is preemptible.
	Preemptible pulumi.BoolPtrInput `pulumi:"preemptible"`
	// Whether the node is created under a reservation.
	Reserved pulumi.BoolPtrInput `pulumi:"reserved"`
}

func (SchedulingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingConfig)(nil)).Elem()
}

func (i SchedulingConfigArgs) ToSchedulingConfigOutput() SchedulingConfigOutput {
	return i.ToSchedulingConfigOutputWithContext(context.Background())
}

func (i SchedulingConfigArgs) ToSchedulingConfigOutputWithContext(ctx context.Context) SchedulingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingConfigOutput)
}

func (i SchedulingConfigArgs) ToSchedulingConfigPtrOutput() SchedulingConfigPtrOutput {
	return i.ToSchedulingConfigPtrOutputWithContext(context.Background())
}

func (i SchedulingConfigArgs) ToSchedulingConfigPtrOutputWithContext(ctx context.Context) SchedulingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingConfigOutput).ToSchedulingConfigPtrOutputWithContext(ctx)
}

// SchedulingConfigPtrInput is an input type that accepts SchedulingConfigArgs, SchedulingConfigPtr and SchedulingConfigPtrOutput values.
// You can construct a concrete instance of `SchedulingConfigPtrInput` via:
//
//          SchedulingConfigArgs{...}
//
//  or:
//
//          nil
type SchedulingConfigPtrInput interface {
	pulumi.Input

	ToSchedulingConfigPtrOutput() SchedulingConfigPtrOutput
	ToSchedulingConfigPtrOutputWithContext(context.Context) SchedulingConfigPtrOutput
}

type schedulingConfigPtrType SchedulingConfigArgs

func SchedulingConfigPtr(v *SchedulingConfigArgs) SchedulingConfigPtrInput {
	return (*schedulingConfigPtrType)(v)
}

func (*schedulingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulingConfig)(nil)).Elem()
}

func (i *schedulingConfigPtrType) ToSchedulingConfigPtrOutput() SchedulingConfigPtrOutput {
	return i.ToSchedulingConfigPtrOutputWithContext(context.Background())
}

func (i *schedulingConfigPtrType) ToSchedulingConfigPtrOutputWithContext(ctx context.Context) SchedulingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingConfigPtrOutput)
}

// Sets the scheduling options for this node.
type SchedulingConfigOutput struct{ *pulumi.OutputState }

func (SchedulingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingConfig)(nil)).Elem()
}

func (o SchedulingConfigOutput) ToSchedulingConfigOutput() SchedulingConfigOutput {
	return o
}

func (o SchedulingConfigOutput) ToSchedulingConfigOutputWithContext(ctx context.Context) SchedulingConfigOutput {
	return o
}

func (o SchedulingConfigOutput) ToSchedulingConfigPtrOutput() SchedulingConfigPtrOutput {
	return o.ToSchedulingConfigPtrOutputWithContext(context.Background())
}

func (o SchedulingConfigOutput) ToSchedulingConfigPtrOutputWithContext(ctx context.Context) SchedulingConfigPtrOutput {
	return o.ApplyT(func(v SchedulingConfig) *SchedulingConfig {
		return &v
	}).(SchedulingConfigPtrOutput)
}

// Defines whether the node is preemptible.
func (o SchedulingConfigOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchedulingConfig) *bool { return v.Preemptible }).(pulumi.BoolPtrOutput)
}

// Whether the node is created under a reservation.
func (o SchedulingConfigOutput) Reserved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchedulingConfig) *bool { return v.Reserved }).(pulumi.BoolPtrOutput)
}

type SchedulingConfigPtrOutput struct{ *pulumi.OutputState }

func (SchedulingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulingConfig)(nil)).Elem()
}

func (o SchedulingConfigPtrOutput) ToSchedulingConfigPtrOutput() SchedulingConfigPtrOutput {
	return o
}

func (o SchedulingConfigPtrOutput) ToSchedulingConfigPtrOutputWithContext(ctx context.Context) SchedulingConfigPtrOutput {
	return o
}

func (o SchedulingConfigPtrOutput) Elem() SchedulingConfigOutput {
	return o.ApplyT(func(v *SchedulingConfig) SchedulingConfig { return *v }).(SchedulingConfigOutput)
}

// Defines whether the node is preemptible.
func (o SchedulingConfigPtrOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchedulingConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Preemptible
	}).(pulumi.BoolPtrOutput)
}

// Whether the node is created under a reservation.
func (o SchedulingConfigPtrOutput) Reserved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchedulingConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Reserved
	}).(pulumi.BoolPtrOutput)
}

// A Symptom instance.
type Symptom struct {
	// Timestamp when the Symptom is created.
	CreateTime *string `pulumi:"createTime"`
	// Detailed information of the current Symptom.
	Details *string `pulumi:"details"`
	// Type of the Symptom.
	SymptomType *string `pulumi:"symptomType"`
	// A string used to uniquely distinguish a worker within a TPU node.
	WorkerId *string `pulumi:"workerId"`
}

// SymptomInput is an input type that accepts SymptomArgs and SymptomOutput values.
// You can construct a concrete instance of `SymptomInput` via:
//
//          SymptomArgs{...}
type SymptomInput interface {
	pulumi.Input

	ToSymptomOutput() SymptomOutput
	ToSymptomOutputWithContext(context.Context) SymptomOutput
}

// A Symptom instance.
type SymptomArgs struct {
	// Timestamp when the Symptom is created.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// Detailed information of the current Symptom.
	Details pulumi.StringPtrInput `pulumi:"details"`
	// Type of the Symptom.
	SymptomType pulumi.StringPtrInput `pulumi:"symptomType"`
	// A string used to uniquely distinguish a worker within a TPU node.
	WorkerId pulumi.StringPtrInput `pulumi:"workerId"`
}

func (SymptomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Symptom)(nil)).Elem()
}

func (i SymptomArgs) ToSymptomOutput() SymptomOutput {
	return i.ToSymptomOutputWithContext(context.Background())
}

func (i SymptomArgs) ToSymptomOutputWithContext(ctx context.Context) SymptomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SymptomOutput)
}

// SymptomArrayInput is an input type that accepts SymptomArray and SymptomArrayOutput values.
// You can construct a concrete instance of `SymptomArrayInput` via:
//
//          SymptomArray{ SymptomArgs{...} }
type SymptomArrayInput interface {
	pulumi.Input

	ToSymptomArrayOutput() SymptomArrayOutput
	ToSymptomArrayOutputWithContext(context.Context) SymptomArrayOutput
}

type SymptomArray []SymptomInput

func (SymptomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Symptom)(nil)).Elem()
}

func (i SymptomArray) ToSymptomArrayOutput() SymptomArrayOutput {
	return i.ToSymptomArrayOutputWithContext(context.Background())
}

func (i SymptomArray) ToSymptomArrayOutputWithContext(ctx context.Context) SymptomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SymptomArrayOutput)
}

// A Symptom instance.
type SymptomOutput struct{ *pulumi.OutputState }

func (SymptomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Symptom)(nil)).Elem()
}

func (o SymptomOutput) ToSymptomOutput() SymptomOutput {
	return o
}

func (o SymptomOutput) ToSymptomOutputWithContext(ctx context.Context) SymptomOutput {
	return o
}

// Timestamp when the Symptom is created.
func (o SymptomOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Symptom) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// Detailed information of the current Symptom.
func (o SymptomOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Symptom) *string { return v.Details }).(pulumi.StringPtrOutput)
}

// Type of the Symptom.
func (o SymptomOutput) SymptomType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Symptom) *string { return v.SymptomType }).(pulumi.StringPtrOutput)
}

// A string used to uniquely distinguish a worker within a TPU node.
func (o SymptomOutput) WorkerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Symptom) *string { return v.WorkerId }).(pulumi.StringPtrOutput)
}

type SymptomArrayOutput struct{ *pulumi.OutputState }

func (SymptomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Symptom)(nil)).Elem()
}

func (o SymptomArrayOutput) ToSymptomArrayOutput() SymptomArrayOutput {
	return o
}

func (o SymptomArrayOutput) ToSymptomArrayOutputWithContext(ctx context.Context) SymptomArrayOutput {
	return o
}

func (o SymptomArrayOutput) Index(i pulumi.IntInput) SymptomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Symptom {
		return vs[0].([]Symptom)[vs[1].(int)]
	}).(SymptomOutput)
}

func init() {
	pulumi.RegisterOutputType(NetworkEndpointOutput{})
	pulumi.RegisterOutputType(NetworkEndpointArrayOutput{})
	pulumi.RegisterOutputType(SchedulingConfigOutput{})
	pulumi.RegisterOutputType(SchedulingConfigPtrOutput{})
	pulumi.RegisterOutputType(SymptomOutput{})
	pulumi.RegisterOutputType(SymptomArrayOutput{})
}
