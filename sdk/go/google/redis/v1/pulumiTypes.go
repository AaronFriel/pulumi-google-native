// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// TlsCertificate Resource
type TlsCertificate struct {
	// PEM representation.
	Cert *string `pulumi:"cert"`
	// Output only. The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.
	CreateTime *string `pulumi:"createTime"`
	// Output only. The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.
	ExpireTime *string `pulumi:"expireTime"`
	// Serial number, as extracted from the certificate.
	SerialNumber *string `pulumi:"serialNumber"`
	// Sha1 Fingerprint of the certificate.
	Sha1Fingerprint *string `pulumi:"sha1Fingerprint"`
}

// TlsCertificateInput is an input type that accepts TlsCertificateArgs and TlsCertificateOutput values.
// You can construct a concrete instance of `TlsCertificateInput` via:
//
//          TlsCertificateArgs{...}
type TlsCertificateInput interface {
	pulumi.Input

	ToTlsCertificateOutput() TlsCertificateOutput
	ToTlsCertificateOutputWithContext(context.Context) TlsCertificateOutput
}

// TlsCertificate Resource
type TlsCertificateArgs struct {
	// PEM representation.
	Cert pulumi.StringPtrInput `pulumi:"cert"`
	// Output only. The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// Output only. The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.
	ExpireTime pulumi.StringPtrInput `pulumi:"expireTime"`
	// Serial number, as extracted from the certificate.
	SerialNumber pulumi.StringPtrInput `pulumi:"serialNumber"`
	// Sha1 Fingerprint of the certificate.
	Sha1Fingerprint pulumi.StringPtrInput `pulumi:"sha1Fingerprint"`
}

func (TlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsCertificate)(nil)).Elem()
}

func (i TlsCertificateArgs) ToTlsCertificateOutput() TlsCertificateOutput {
	return i.ToTlsCertificateOutputWithContext(context.Background())
}

func (i TlsCertificateArgs) ToTlsCertificateOutputWithContext(ctx context.Context) TlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertificateOutput)
}

// TlsCertificateArrayInput is an input type that accepts TlsCertificateArray and TlsCertificateArrayOutput values.
// You can construct a concrete instance of `TlsCertificateArrayInput` via:
//
//          TlsCertificateArray{ TlsCertificateArgs{...} }
type TlsCertificateArrayInput interface {
	pulumi.Input

	ToTlsCertificateArrayOutput() TlsCertificateArrayOutput
	ToTlsCertificateArrayOutputWithContext(context.Context) TlsCertificateArrayOutput
}

type TlsCertificateArray []TlsCertificateInput

func (TlsCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsCertificate)(nil)).Elem()
}

func (i TlsCertificateArray) ToTlsCertificateArrayOutput() TlsCertificateArrayOutput {
	return i.ToTlsCertificateArrayOutputWithContext(context.Background())
}

func (i TlsCertificateArray) ToTlsCertificateArrayOutputWithContext(ctx context.Context) TlsCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertificateArrayOutput)
}

// TlsCertificate Resource
type TlsCertificateOutput struct{ *pulumi.OutputState }

func (TlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsCertificate)(nil)).Elem()
}

func (o TlsCertificateOutput) ToTlsCertificateOutput() TlsCertificateOutput {
	return o
}

func (o TlsCertificateOutput) ToTlsCertificateOutputWithContext(ctx context.Context) TlsCertificateOutput {
	return o
}

// PEM representation.
func (o TlsCertificateOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TlsCertificate) *string { return v.Cert }).(pulumi.StringPtrOutput)
}

// Output only. The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.
func (o TlsCertificateOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TlsCertificate) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// Output only. The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.
func (o TlsCertificateOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TlsCertificate) *string { return v.ExpireTime }).(pulumi.StringPtrOutput)
}

// Serial number, as extracted from the certificate.
func (o TlsCertificateOutput) SerialNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TlsCertificate) *string { return v.SerialNumber }).(pulumi.StringPtrOutput)
}

// Sha1 Fingerprint of the certificate.
func (o TlsCertificateOutput) Sha1Fingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TlsCertificate) *string { return v.Sha1Fingerprint }).(pulumi.StringPtrOutput)
}

type TlsCertificateArrayOutput struct{ *pulumi.OutputState }

func (TlsCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsCertificate)(nil)).Elem()
}

func (o TlsCertificateArrayOutput) ToTlsCertificateArrayOutput() TlsCertificateArrayOutput {
	return o
}

func (o TlsCertificateArrayOutput) ToTlsCertificateArrayOutputWithContext(ctx context.Context) TlsCertificateArrayOutput {
	return o
}

func (o TlsCertificateArrayOutput) Index(i pulumi.IntInput) TlsCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TlsCertificate {
		return vs[0].([]TlsCertificate)[vs[1].(int)]
	}).(TlsCertificateOutput)
}

func init() {
	pulumi.RegisterOutputType(TlsCertificateOutput{})
	pulumi.RegisterOutputType(TlsCertificateArrayOutput{})
}
