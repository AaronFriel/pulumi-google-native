// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new consent store in the parent dataset. Attempting to create a consent store with the same ID as an existing store fails with an ALREADY_EXISTS error.
type ConsentStore struct {
	pulumi.CustomResourceState
}

// NewConsentStore registers a new resource with the given unique name, arguments, and options.
func NewConsentStore(ctx *pulumi.Context,
	name string, args *ConsentStoreArgs, opts ...pulumi.ResourceOption) (*ConsentStore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	var resource ConsentStore
	err := ctx.RegisterResource("google-cloud:healthcare/v1beta1:ConsentStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsentStore gets an existing ConsentStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsentStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsentStoreState, opts ...pulumi.ResourceOption) (*ConsentStore, error) {
	var resource ConsentStore
	err := ctx.ReadResource("google-cloud:healthcare/v1beta1:ConsentStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConsentStore resources.
type consentStoreState struct {
}

type ConsentStoreState struct {
}

func (ConsentStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*consentStoreState)(nil)).Elem()
}

type consentStoreArgs struct {
	// Required. The ID of the consent store to create. The string must match the following regex: `[\p{L}\p{N}_\-\.]{1,256}`. Cannot be changed after creation.
	ConsentStoreId *string `pulumi:"consentStoreId"`
	// Optional. Default time to live for Consents created in this store. Must be at least 24 hours. Updating this field will not affect the expiration time of existing consents.
	DefaultConsentTtl *string `pulumi:"defaultConsentTtl"`
	// Optional. If `true`, UpdateConsent creates the Consent if it does not already exist. If unspecified, defaults to `false`.
	EnableConsentCreateOnUpdate *bool `pulumi:"enableConsentCreateOnUpdate"`
	// Optional. User-supplied key-value pairs used to organize consent stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62}. Label values must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}. No more than 64 labels can be associated with a given store. For more information: https://cloud.google.com/healthcare/docs/how-tos/labeling-resources
	Labels map[string]string `pulumi:"labels"`
	// Resource name of the consent store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`. Cannot be changed after creation.
	Name *string `pulumi:"name"`
	// Required. The name of the dataset this consent store belongs to.
	Parent string `pulumi:"parent"`
}

// The set of arguments for constructing a ConsentStore resource.
type ConsentStoreArgs struct {
	// Required. The ID of the consent store to create. The string must match the following regex: `[\p{L}\p{N}_\-\.]{1,256}`. Cannot be changed after creation.
	ConsentStoreId pulumi.StringPtrInput
	// Optional. Default time to live for Consents created in this store. Must be at least 24 hours. Updating this field will not affect the expiration time of existing consents.
	DefaultConsentTtl pulumi.StringPtrInput
	// Optional. If `true`, UpdateConsent creates the Consent if it does not already exist. If unspecified, defaults to `false`.
	EnableConsentCreateOnUpdate pulumi.BoolPtrInput
	// Optional. User-supplied key-value pairs used to organize consent stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62}. Label values must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}. No more than 64 labels can be associated with a given store. For more information: https://cloud.google.com/healthcare/docs/how-tos/labeling-resources
	Labels pulumi.StringMapInput
	// Resource name of the consent store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`. Cannot be changed after creation.
	Name pulumi.StringPtrInput
	// Required. The name of the dataset this consent store belongs to.
	Parent pulumi.StringInput
}

func (ConsentStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consentStoreArgs)(nil)).Elem()
}

type ConsentStoreInput interface {
	pulumi.Input

	ToConsentStoreOutput() ConsentStoreOutput
	ToConsentStoreOutputWithContext(ctx context.Context) ConsentStoreOutput
}

func (*ConsentStore) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsentStore)(nil))
}

func (i *ConsentStore) ToConsentStoreOutput() ConsentStoreOutput {
	return i.ToConsentStoreOutputWithContext(context.Background())
}

func (i *ConsentStore) ToConsentStoreOutputWithContext(ctx context.Context) ConsentStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsentStoreOutput)
}

type ConsentStoreOutput struct {
	*pulumi.OutputState
}

func (ConsentStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsentStore)(nil))
}

func (o ConsentStoreOutput) ToConsentStoreOutput() ConsentStoreOutput {
	return o
}

func (o ConsentStoreOutput) ToConsentStoreOutputWithContext(ctx context.Context) ConsentStoreOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ConsentStoreOutput{})
}
