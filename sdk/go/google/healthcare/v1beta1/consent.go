// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new Consent in the parent Consent store.
type Consent struct {
	pulumi.CustomResourceState
}

// NewConsent registers a new resource with the given unique name, arguments, and options.
func NewConsent(ctx *pulumi.Context,
	name string, args *ConsentArgs, opts ...pulumi.ResourceOption) (*Consent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	var resource Consent
	err := ctx.RegisterResource("google-cloud:healthcare/v1beta1:Consent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsent gets an existing Consent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsentState, opts ...pulumi.ResourceOption) (*Consent, error) {
	var resource Consent
	err := ctx.ReadResource("google-cloud:healthcare/v1beta1:Consent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Consent resources.
type consentState struct {
}

type ConsentState struct {
}

func (ConsentState) ElementType() reflect.Type {
	return reflect.TypeOf((*consentState)(nil)).Elem()
}

type consentArgs struct {
	// Required. The resource name of the consent artifact that contains proof of the end user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
	ConsentArtifact *string `pulumi:"consentArtifact"`
	// Timestamp in UTC of when this consent is considered expired.
	ExpireTime *string `pulumi:"expireTime"`
	// User-supplied key-value pairs used to organize consent resources. Metadata keys must: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - begin with a letter - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes Metadata values must be: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes No more than 64 metadata entries can be associated with a given consent.
	Metadata map[string]string `pulumi:"metadata"`
	// Resource name of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.
	Name *string `pulumi:"name"`
	// Required. Name of the consent store.
	Parent string `pulumi:"parent"`
	// Represents an end user's consent in terms of the resources that can be accessed and under what conditions.
	Policies []GoogleCloudHealthcareV1beta1ConsentPolicy `pulumi:"policies"`
	// Output only. The timestamp that the revision was created.
	RevisionCreateTime *string `pulumi:"revisionCreateTime"`
	// Output only. The revision ID of the consent. The format is an 8-character hexadecimal string. Refer to a specific revision of a Consent by appending `@{revision_id}` to the Consent's resource name.
	RevisionId *string `pulumi:"revisionId"`
	// Indicates the current state of this consent.
	State *string `pulumi:"state"`
	// Input only. The time to live for this consent from when it is created.
	Ttl *string `pulumi:"ttl"`
	// Required. User's UUID provided by the client.
	UserId *string `pulumi:"userId"`
}

// The set of arguments for constructing a Consent resource.
type ConsentArgs struct {
	// Required. The resource name of the consent artifact that contains proof of the end user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
	ConsentArtifact pulumi.StringPtrInput
	// Timestamp in UTC of when this consent is considered expired.
	ExpireTime pulumi.StringPtrInput
	// User-supplied key-value pairs used to organize consent resources. Metadata keys must: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - begin with a letter - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes Metadata values must be: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes No more than 64 metadata entries can be associated with a given consent.
	Metadata pulumi.StringMapInput
	// Resource name of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.
	Name pulumi.StringPtrInput
	// Required. Name of the consent store.
	Parent pulumi.StringInput
	// Represents an end user's consent in terms of the resources that can be accessed and under what conditions.
	Policies GoogleCloudHealthcareV1beta1ConsentPolicyArrayInput
	// Output only. The timestamp that the revision was created.
	RevisionCreateTime pulumi.StringPtrInput
	// Output only. The revision ID of the consent. The format is an 8-character hexadecimal string. Refer to a specific revision of a Consent by appending `@{revision_id}` to the Consent's resource name.
	RevisionId pulumi.StringPtrInput
	// Indicates the current state of this consent.
	State pulumi.StringPtrInput
	// Input only. The time to live for this consent from when it is created.
	Ttl pulumi.StringPtrInput
	// Required. User's UUID provided by the client.
	UserId pulumi.StringPtrInput
}

func (ConsentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consentArgs)(nil)).Elem()
}

type ConsentInput interface {
	pulumi.Input

	ToConsentOutput() ConsentOutput
	ToConsentOutputWithContext(ctx context.Context) ConsentOutput
}

func (*Consent) ElementType() reflect.Type {
	return reflect.TypeOf((*Consent)(nil))
}

func (i *Consent) ToConsentOutput() ConsentOutput {
	return i.ToConsentOutputWithContext(context.Background())
}

func (i *Consent) ToConsentOutputWithContext(ctx context.Context) ConsentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsentOutput)
}

type ConsentOutput struct {
	*pulumi.OutputState
}

func (ConsentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Consent)(nil))
}

func (o ConsentOutput) ToConsentOutput() ConsentOutput {
	return o
}

func (o ConsentOutput) ToConsentOutputWithContext(ctx context.Context) ConsentOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ConsentOutput{})
}
