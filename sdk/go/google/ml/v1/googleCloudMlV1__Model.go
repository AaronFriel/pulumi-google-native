// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a model which will later contain one or more versions. You must add at least one version before you can request predictions from the model. Add versions by calling projects.models.versions.create.
type GoogleCloudMlV1__Model struct {
	pulumi.CustomResourceState
}

// NewGoogleCloudMlV1__Model registers a new resource with the given unique name, arguments, and options.
func NewGoogleCloudMlV1__Model(ctx *pulumi.Context,
	name string, args *GoogleCloudMlV1__ModelArgs, opts ...pulumi.ResourceOption) (*GoogleCloudMlV1__Model, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	var resource GoogleCloudMlV1__Model
	err := ctx.RegisterResource("google-cloud:ml/v1:GoogleCloudMlV1__Model", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGoogleCloudMlV1__Model gets an existing GoogleCloudMlV1__Model resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGoogleCloudMlV1__Model(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GoogleCloudMlV1__ModelState, opts ...pulumi.ResourceOption) (*GoogleCloudMlV1__Model, error) {
	var resource GoogleCloudMlV1__Model
	err := ctx.ReadResource("google-cloud:ml/v1:GoogleCloudMlV1__Model", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GoogleCloudMlV1__Model resources.
type googleCloudMlV1__ModelState struct {
}

type GoogleCloudMlV1__ModelState struct {
}

func (GoogleCloudMlV1__ModelState) ElementType() reflect.Type {
	return reflect.TypeOf((*googleCloudMlV1__ModelState)(nil)).Elem()
}

type googleCloudMlV1__ModelArgs struct {
	// Output only. The default version of the model. This version will be used to handle prediction requests that do not specify a version. You can change the default version by calling projects.models.versions.setDefault.
	DefaultVersion *GoogleCloudMlV1__Version `pulumi:"defaultVersion"`
	// Optional. The description specified for the model when it was created.
	Description *string `pulumi:"description"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a model from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform model updates in order to avoid race conditions: An `etag` is returned in the response to `GetModel`, and systems are expected to put that etag in the request to `UpdateModel` to ensure that their change will be applied to the model as intended.
	Etag *string `pulumi:"etag"`
	// Optional. One or more labels that you can add, to organize your models. Each label is a key-value pair, where both the key and the value are arbitrary strings that you supply. For more information, see the documentation on using labels.
	Labels map[string]string `pulumi:"labels"`
	// Required. The name specified for the model when it was created. The model name must be unique within the project it is created in.
	Name *string `pulumi:"name"`
	// Optional. If true, online prediction nodes send `stderr` and `stdout` streams to Cloud Logging. These can be more verbose than the standard access logs (see `onlinePredictionLogging`) and can incur higher cost. However, they are helpful for debugging. Note that [logs may incur a cost](/stackdriver/pricing), especially if your project receives prediction requests at a high QPS. Estimate your costs before enabling this option. Default is false.
	OnlinePredictionConsoleLogging *bool `pulumi:"onlinePredictionConsoleLogging"`
	// Optional. If true, online prediction access logs are sent to Cloud Logging. These logs are like standard server access logs, containing information like timestamp and latency for each request. Note that [logs may incur a cost](/stackdriver/pricing), especially if your project receives prediction requests at a high queries per second rate (QPS). Estimate your costs before enabling this option. Default is false.
	OnlinePredictionLogging *bool `pulumi:"onlinePredictionLogging"`
	// Required. The project name.
	Parent string `pulumi:"parent"`
	// Optional. The list of regions where the model is going to be deployed. Only one region per model is supported. Defaults to 'us-central1' if nothing is set. See the available regions for AI Platform services. Note: * No matter where a model is deployed, it can always be accessed by users from anywhere, both for online and batch prediction. * The region for a batch prediction job is set by the region field when submitting the batch prediction job and does not take its value from this field.
	Regions []string `pulumi:"regions"`
}

// The set of arguments for constructing a GoogleCloudMlV1__Model resource.
type GoogleCloudMlV1__ModelArgs struct {
	// Output only. The default version of the model. This version will be used to handle prediction requests that do not specify a version. You can change the default version by calling projects.models.versions.setDefault.
	DefaultVersion GoogleCloudMlV1__VersionPtrInput
	// Optional. The description specified for the model when it was created.
	Description pulumi.StringPtrInput
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a model from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform model updates in order to avoid race conditions: An `etag` is returned in the response to `GetModel`, and systems are expected to put that etag in the request to `UpdateModel` to ensure that their change will be applied to the model as intended.
	Etag pulumi.StringPtrInput
	// Optional. One or more labels that you can add, to organize your models. Each label is a key-value pair, where both the key and the value are arbitrary strings that you supply. For more information, see the documentation on using labels.
	Labels pulumi.StringMapInput
	// Required. The name specified for the model when it was created. The model name must be unique within the project it is created in.
	Name pulumi.StringPtrInput
	// Optional. If true, online prediction nodes send `stderr` and `stdout` streams to Cloud Logging. These can be more verbose than the standard access logs (see `onlinePredictionLogging`) and can incur higher cost. However, they are helpful for debugging. Note that [logs may incur a cost](/stackdriver/pricing), especially if your project receives prediction requests at a high QPS. Estimate your costs before enabling this option. Default is false.
	OnlinePredictionConsoleLogging pulumi.BoolPtrInput
	// Optional. If true, online prediction access logs are sent to Cloud Logging. These logs are like standard server access logs, containing information like timestamp and latency for each request. Note that [logs may incur a cost](/stackdriver/pricing), especially if your project receives prediction requests at a high queries per second rate (QPS). Estimate your costs before enabling this option. Default is false.
	OnlinePredictionLogging pulumi.BoolPtrInput
	// Required. The project name.
	Parent pulumi.StringInput
	// Optional. The list of regions where the model is going to be deployed. Only one region per model is supported. Defaults to 'us-central1' if nothing is set. See the available regions for AI Platform services. Note: * No matter where a model is deployed, it can always be accessed by users from anywhere, both for online and batch prediction. * The region for a batch prediction job is set by the region field when submitting the batch prediction job and does not take its value from this field.
	Regions pulumi.StringArrayInput
}

func (GoogleCloudMlV1__ModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*googleCloudMlV1__ModelArgs)(nil)).Elem()
}

type GoogleCloudMlV1__ModelInput interface {
	pulumi.Input

	ToGoogleCloudMlV1__ModelOutput() GoogleCloudMlV1__ModelOutput
	ToGoogleCloudMlV1__ModelOutputWithContext(ctx context.Context) GoogleCloudMlV1__ModelOutput
}

func (*GoogleCloudMlV1__Model) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudMlV1__Model)(nil))
}

func (i *GoogleCloudMlV1__Model) ToGoogleCloudMlV1__ModelOutput() GoogleCloudMlV1__ModelOutput {
	return i.ToGoogleCloudMlV1__ModelOutputWithContext(context.Background())
}

func (i *GoogleCloudMlV1__Model) ToGoogleCloudMlV1__ModelOutputWithContext(ctx context.Context) GoogleCloudMlV1__ModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudMlV1__ModelOutput)
}

type GoogleCloudMlV1__ModelOutput struct {
	*pulumi.OutputState
}

func (GoogleCloudMlV1__ModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudMlV1__Model)(nil))
}

func (o GoogleCloudMlV1__ModelOutput) ToGoogleCloudMlV1__ModelOutput() GoogleCloudMlV1__ModelOutput {
	return o
}

func (o GoogleCloudMlV1__ModelOutput) ToGoogleCloudMlV1__ModelOutputWithContext(ctx context.Context) GoogleCloudMlV1__ModelOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GoogleCloudMlV1__ModelOutput{})
}
