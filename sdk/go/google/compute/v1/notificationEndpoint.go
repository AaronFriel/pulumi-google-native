// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Create a NotificationEndpoint in the specified project in the given region using the parameters that are included in the request.
type NotificationEndpoint struct {
	pulumi.CustomResourceState
}

// NewNotificationEndpoint registers a new resource with the given unique name, arguments, and options.
func NewNotificationEndpoint(ctx *pulumi.Context,
	name string, args *NotificationEndpointArgs, opts ...pulumi.ResourceOption) (*NotificationEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	var resource NotificationEndpoint
	err := ctx.RegisterResource("google-cloud:compute/v1:NotificationEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationEndpoint gets an existing NotificationEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationEndpointState, opts ...pulumi.ResourceOption) (*NotificationEndpoint, error) {
	var resource NotificationEndpoint
	err := ctx.ReadResource("google-cloud:compute/v1:NotificationEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationEndpoint resources.
type notificationEndpointState struct {
}

type NotificationEndpointState struct {
}

func (NotificationEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationEndpointState)(nil)).Elem()
}

type notificationEndpointArgs struct {
	// [Output Only] Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// Settings of the gRPC notification endpoint including the endpoint URL and the retry duration.
	GrpcSettings *NotificationEndpointGrpcSettings `pulumi:"grpcSettings"`
	// [Output Only] A unique identifier for this resource type. The server generates this identifier.
	Id *string `pulumi:"id"`
	// [Output Only] Type of the resource. Always compute#notificationEndpoint for notification endpoints.
	Kind *string `pulumi:"kind"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// Project ID for this request.
	Project string `pulumi:"project"`
	// [Output Only] URL of the region where the notification endpoint resides. This field applies only to the regional resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
	Region string `pulumi:"region"`
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
	//
	// For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// [Output Only] Server-defined URL for the resource.
	SelfLink *string `pulumi:"selfLink"`
}

// The set of arguments for constructing a NotificationEndpoint resource.
type NotificationEndpointArgs struct {
	// [Output Only] Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// Settings of the gRPC notification endpoint including the endpoint URL and the retry duration.
	GrpcSettings NotificationEndpointGrpcSettingsPtrInput
	// [Output Only] A unique identifier for this resource type. The server generates this identifier.
	Id pulumi.StringPtrInput
	// [Output Only] Type of the resource. Always compute#notificationEndpoint for notification endpoints.
	Kind pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// Project ID for this request.
	Project pulumi.StringInput
	// [Output Only] URL of the region where the notification endpoint resides. This field applies only to the regional resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
	Region pulumi.StringInput
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
	//
	// For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// [Output Only] Server-defined URL for the resource.
	SelfLink pulumi.StringPtrInput
}

func (NotificationEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationEndpointArgs)(nil)).Elem()
}

type NotificationEndpointInput interface {
	pulumi.Input

	ToNotificationEndpointOutput() NotificationEndpointOutput
	ToNotificationEndpointOutputWithContext(ctx context.Context) NotificationEndpointOutput
}

func (*NotificationEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationEndpoint)(nil))
}

func (i *NotificationEndpoint) ToNotificationEndpointOutput() NotificationEndpointOutput {
	return i.ToNotificationEndpointOutputWithContext(context.Background())
}

func (i *NotificationEndpoint) ToNotificationEndpointOutputWithContext(ctx context.Context) NotificationEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationEndpointOutput)
}

type NotificationEndpointOutput struct {
	*pulumi.OutputState
}

func (NotificationEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationEndpoint)(nil))
}

func (o NotificationEndpointOutput) ToNotificationEndpointOutput() NotificationEndpointOutput {
	return o
}

func (o NotificationEndpointOutput) ToNotificationEndpointOutputWithContext(ctx context.Context) NotificationEndpointOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(NotificationEndpointOutput{})
}
