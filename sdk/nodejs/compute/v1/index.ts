// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export * from "./address";
export * from "./autoscaler";
export * from "./backendBucket";
export * from "./backendService";
export * from "./commitment";
export * from "./disk";
export * from "./externalVpnGateway";
export * from "./firewall";
export * from "./forwardingRule";
export * from "./healthCheck";
export * from "./healthCheckService";
export * from "./httpHealthCheck";
export * from "./httpsHealthCheck";
export * from "./image";
export * from "./instance";
export * from "./instanceGroup";
export * from "./instanceGroupManager";
export * from "./instanceTemplate";
export * from "./interconnect";
export * from "./interconnectAttachment";
export * from "./license";
export * from "./network";
export * from "./networkEndpointGroup";
export * from "./nodeGroup";
export * from "./nodeTemplate";
export * from "./notificationEndpoint";
export * from "./packetMirroring";
export * from "./policy";
export * from "./reservation";
export * from "./resourcePolicy";
export * from "./route";
export * from "./router";
export * from "./securityPolicy";
export * from "./sslCertificate";
export * from "./sslPolicy";
export * from "./subnetwork";
export * from "./targetGrpcProxy";
export * from "./targetHttpProxy";
export * from "./targetHttpsProxy";
export * from "./targetInstance";
export * from "./targetPool";
export * from "./targetSslProxy";
export * from "./targetTcpProxy";
export * from "./targetVpnGateway";
export * from "./urlMap";
export * from "./vpnGateway";
export * from "./vpnTunnel";

// Import resources to register:
import { Address } from "./address";
import { Autoscaler } from "./autoscaler";
import { BackendBucket } from "./backendBucket";
import { BackendService } from "./backendService";
import { Commitment } from "./commitment";
import { Disk } from "./disk";
import { ExternalVpnGateway } from "./externalVpnGateway";
import { Firewall } from "./firewall";
import { ForwardingRule } from "./forwardingRule";
import { HealthCheck } from "./healthCheck";
import { HealthCheckService } from "./healthCheckService";
import { HttpHealthCheck } from "./httpHealthCheck";
import { HttpsHealthCheck } from "./httpsHealthCheck";
import { Image } from "./image";
import { Instance } from "./instance";
import { InstanceGroup } from "./instanceGroup";
import { InstanceGroupManager } from "./instanceGroupManager";
import { InstanceTemplate } from "./instanceTemplate";
import { Interconnect } from "./interconnect";
import { InterconnectAttachment } from "./interconnectAttachment";
import { License } from "./license";
import { Network } from "./network";
import { NetworkEndpointGroup } from "./networkEndpointGroup";
import { NodeGroup } from "./nodeGroup";
import { NodeTemplate } from "./nodeTemplate";
import { NotificationEndpoint } from "./notificationEndpoint";
import { PacketMirroring } from "./packetMirroring";
import { Policy } from "./policy";
import { Reservation } from "./reservation";
import { ResourcePolicy } from "./resourcePolicy";
import { Route } from "./route";
import { Router } from "./router";
import { SecurityPolicy } from "./securityPolicy";
import { SslCertificate } from "./sslCertificate";
import { SslPolicy } from "./sslPolicy";
import { Subnetwork } from "./subnetwork";
import { TargetGrpcProxy } from "./targetGrpcProxy";
import { TargetHttpProxy } from "./targetHttpProxy";
import { TargetHttpsProxy } from "./targetHttpsProxy";
import { TargetInstance } from "./targetInstance";
import { TargetPool } from "./targetPool";
import { TargetSslProxy } from "./targetSslProxy";
import { TargetTcpProxy } from "./targetTcpProxy";
import { TargetVpnGateway } from "./targetVpnGateway";
import { UrlMap } from "./urlMap";
import { VpnGateway } from "./vpnGateway";
import { VpnTunnel } from "./vpnTunnel";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-cloud:compute/v1:Address":
                return new Address(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:Autoscaler":
                return new Autoscaler(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:BackendBucket":
                return new BackendBucket(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:BackendService":
                return new BackendService(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:Commitment":
                return new Commitment(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:Disk":
                return new Disk(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:ExternalVpnGateway":
                return new ExternalVpnGateway(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:Firewall":
                return new Firewall(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:ForwardingRule":
                return new ForwardingRule(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:HealthCheck":
                return new HealthCheck(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:HealthCheckService":
                return new HealthCheckService(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:HttpHealthCheck":
                return new HttpHealthCheck(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:HttpsHealthCheck":
                return new HttpsHealthCheck(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:Image":
                return new Image(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:InstanceGroup":
                return new InstanceGroup(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:InstanceGroupManager":
                return new InstanceGroupManager(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:InstanceTemplate":
                return new InstanceTemplate(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:Interconnect":
                return new Interconnect(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:InterconnectAttachment":
                return new InterconnectAttachment(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:License":
                return new License(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:Network":
                return new Network(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:NetworkEndpointGroup":
                return new NetworkEndpointGroup(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:NodeGroup":
                return new NodeGroup(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:NodeTemplate":
                return new NodeTemplate(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:NotificationEndpoint":
                return new NotificationEndpoint(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:PacketMirroring":
                return new PacketMirroring(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:Reservation":
                return new Reservation(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:ResourcePolicy":
                return new ResourcePolicy(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:Route":
                return new Route(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:Router":
                return new Router(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:SecurityPolicy":
                return new SecurityPolicy(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:SslCertificate":
                return new SslCertificate(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:SslPolicy":
                return new SslPolicy(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:Subnetwork":
                return new Subnetwork(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:TargetGrpcProxy":
                return new TargetGrpcProxy(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:TargetHttpProxy":
                return new TargetHttpProxy(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:TargetHttpsProxy":
                return new TargetHttpsProxy(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:TargetInstance":
                return new TargetInstance(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:TargetPool":
                return new TargetPool(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:TargetSslProxy":
                return new TargetSslProxy(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:TargetTcpProxy":
                return new TargetTcpProxy(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:TargetVpnGateway":
                return new TargetVpnGateway(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:UrlMap":
                return new UrlMap(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:VpnGateway":
                return new VpnGateway(name, <any>undefined, { urn })
            case "google-cloud:compute/v1:VpnTunnel":
                return new VpnTunnel(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-cloud", "compute/v1", _module)
