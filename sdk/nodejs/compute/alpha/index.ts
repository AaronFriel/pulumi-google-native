// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export * from "./address";
export * from "./autoscaler";
export * from "./backendBucket";
export * from "./backendService";
export * from "./commitment";
export * from "./disk";
export * from "./externalVpnGateway";
export * from "./firewall";
export * from "./firewallPolicy";
export * from "./forwardingRule";
export * from "./healthCheck";
export * from "./healthCheckService";
export * from "./httpHealthCheck";
export * from "./httpsHealthCheck";
export * from "./image";
export * from "./inPlaceSnapshot";
export * from "./instance";
export * from "./instanceGroup";
export * from "./instanceGroupManager";
export * from "./instanceTemplate";
export * from "./instantSnapshot";
export * from "./interconnect";
export * from "./interconnectAttachment";
export * from "./license";
export * from "./machineImage";
export * from "./network";
export * from "./networkEndpointGroup";
export * from "./nodeGroup";
export * from "./nodeTemplate";
export * from "./notificationEndpoint";
export * from "./packetMirroring";
export * from "./policy";
export * from "./publicAdvertisedPrefix";
export * from "./publicDelegatedPrefix";
export * from "./reservation";
export * from "./resourcePolicy";
export * from "./route";
export * from "./router";
export * from "./securityPolicy";
export * from "./serviceAttachment";
export * from "./snapshot";
export * from "./sslCertificate";
export * from "./sslPolicy";
export * from "./subnetwork";
export * from "./targetGrpcProxy";
export * from "./targetHttpProxy";
export * from "./targetHttpsProxy";
export * from "./targetInstance";
export * from "./targetPool";
export * from "./targetSslProxy";
export * from "./targetTcpProxy";
export * from "./targetVpnGateway";
export * from "./urlMap";
export * from "./vpnGateway";
export * from "./vpnTunnel";

// Import resources to register:
import { Address } from "./address";
import { Autoscaler } from "./autoscaler";
import { BackendBucket } from "./backendBucket";
import { BackendService } from "./backendService";
import { Commitment } from "./commitment";
import { Disk } from "./disk";
import { ExternalVpnGateway } from "./externalVpnGateway";
import { Firewall } from "./firewall";
import { FirewallPolicy } from "./firewallPolicy";
import { ForwardingRule } from "./forwardingRule";
import { HealthCheck } from "./healthCheck";
import { HealthCheckService } from "./healthCheckService";
import { HttpHealthCheck } from "./httpHealthCheck";
import { HttpsHealthCheck } from "./httpsHealthCheck";
import { Image } from "./image";
import { InPlaceSnapshot } from "./inPlaceSnapshot";
import { Instance } from "./instance";
import { InstanceGroup } from "./instanceGroup";
import { InstanceGroupManager } from "./instanceGroupManager";
import { InstanceTemplate } from "./instanceTemplate";
import { InstantSnapshot } from "./instantSnapshot";
import { Interconnect } from "./interconnect";
import { InterconnectAttachment } from "./interconnectAttachment";
import { License } from "./license";
import { MachineImage } from "./machineImage";
import { Network } from "./network";
import { NetworkEndpointGroup } from "./networkEndpointGroup";
import { NodeGroup } from "./nodeGroup";
import { NodeTemplate } from "./nodeTemplate";
import { NotificationEndpoint } from "./notificationEndpoint";
import { PacketMirroring } from "./packetMirroring";
import { Policy } from "./policy";
import { PublicAdvertisedPrefix } from "./publicAdvertisedPrefix";
import { PublicDelegatedPrefix } from "./publicDelegatedPrefix";
import { Reservation } from "./reservation";
import { ResourcePolicy } from "./resourcePolicy";
import { Route } from "./route";
import { Router } from "./router";
import { SecurityPolicy } from "./securityPolicy";
import { ServiceAttachment } from "./serviceAttachment";
import { Snapshot } from "./snapshot";
import { SslCertificate } from "./sslCertificate";
import { SslPolicy } from "./sslPolicy";
import { Subnetwork } from "./subnetwork";
import { TargetGrpcProxy } from "./targetGrpcProxy";
import { TargetHttpProxy } from "./targetHttpProxy";
import { TargetHttpsProxy } from "./targetHttpsProxy";
import { TargetInstance } from "./targetInstance";
import { TargetPool } from "./targetPool";
import { TargetSslProxy } from "./targetSslProxy";
import { TargetTcpProxy } from "./targetTcpProxy";
import { TargetVpnGateway } from "./targetVpnGateway";
import { UrlMap } from "./urlMap";
import { VpnGateway } from "./vpnGateway";
import { VpnTunnel } from "./vpnTunnel";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-cloud:compute/alpha:Address":
                return new Address(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:Autoscaler":
                return new Autoscaler(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:BackendBucket":
                return new BackendBucket(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:BackendService":
                return new BackendService(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:Commitment":
                return new Commitment(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:Disk":
                return new Disk(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:ExternalVpnGateway":
                return new ExternalVpnGateway(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:Firewall":
                return new Firewall(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:FirewallPolicy":
                return new FirewallPolicy(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:ForwardingRule":
                return new ForwardingRule(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:HealthCheck":
                return new HealthCheck(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:HealthCheckService":
                return new HealthCheckService(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:HttpHealthCheck":
                return new HttpHealthCheck(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:HttpsHealthCheck":
                return new HttpsHealthCheck(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:Image":
                return new Image(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:InPlaceSnapshot":
                return new InPlaceSnapshot(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:InstanceGroup":
                return new InstanceGroup(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:InstanceGroupManager":
                return new InstanceGroupManager(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:InstanceTemplate":
                return new InstanceTemplate(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:InstantSnapshot":
                return new InstantSnapshot(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:Interconnect":
                return new Interconnect(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:InterconnectAttachment":
                return new InterconnectAttachment(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:License":
                return new License(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:MachineImage":
                return new MachineImage(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:Network":
                return new Network(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:NetworkEndpointGroup":
                return new NetworkEndpointGroup(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:NodeGroup":
                return new NodeGroup(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:NodeTemplate":
                return new NodeTemplate(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:NotificationEndpoint":
                return new NotificationEndpoint(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:PacketMirroring":
                return new PacketMirroring(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:PublicAdvertisedPrefix":
                return new PublicAdvertisedPrefix(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:PublicDelegatedPrefix":
                return new PublicDelegatedPrefix(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:Reservation":
                return new Reservation(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:ResourcePolicy":
                return new ResourcePolicy(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:Route":
                return new Route(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:Router":
                return new Router(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:SecurityPolicy":
                return new SecurityPolicy(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:ServiceAttachment":
                return new ServiceAttachment(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:SslCertificate":
                return new SslCertificate(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:SslPolicy":
                return new SslPolicy(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:Subnetwork":
                return new Subnetwork(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:TargetGrpcProxy":
                return new TargetGrpcProxy(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:TargetHttpProxy":
                return new TargetHttpProxy(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:TargetHttpsProxy":
                return new TargetHttpsProxy(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:TargetInstance":
                return new TargetInstance(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:TargetPool":
                return new TargetPool(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:TargetSslProxy":
                return new TargetSslProxy(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:TargetTcpProxy":
                return new TargetTcpProxy(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:TargetVpnGateway":
                return new TargetVpnGateway(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:UrlMap":
                return new UrlMap(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:VpnGateway":
                return new VpnGateway(name, <any>undefined, { urn })
            case "google-cloud:compute/alpha:VpnTunnel":
                return new VpnTunnel(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-cloud", "compute/alpha", _module)
