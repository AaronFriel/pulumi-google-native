// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Create a new Certificate in a given Project, Location from a particular CertificateAuthority.
 */
export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-cloud:privateca/v1beta1:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }


    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            inputs["certificateDescription"] = args ? args.certificateDescription : undefined;
            inputs["certificateId"] = args ? args.certificateId : undefined;
            inputs["config"] = args ? args.config : undefined;
            inputs["createTime"] = args ? args.createTime : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["lifetime"] = args ? args.lifetime : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["parent"] = args ? args.parent : undefined;
            inputs["pemCertificate"] = args ? args.pemCertificate : undefined;
            inputs["pemCertificateChain"] = args ? args.pemCertificateChain : undefined;
            inputs["pemCsr"] = args ? args.pemCsr : undefined;
            inputs["requestId"] = args ? args.requestId : undefined;
            inputs["revocationDetails"] = args ? args.revocationDetails : undefined;
            inputs["updateTime"] = args ? args.updateTime : undefined;
        } else {
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Certificate.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * Output only. A structured description of the issued X.509 certificate.
     */
    readonly certificateDescription?: pulumi.Input<inputs.privateca.v1beta1.CertificateDescription>;
    /**
     * Optional. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`. This field is required when using a CertificateAuthority in the Enterprise CertificateAuthority.Tier, but is optional and its value is ignored otherwise.
     */
    readonly certificateId?: pulumi.Input<string>;
    /**
     * Immutable. A description of the certificate and key that does not require X.509 or ASN.1.
     */
    readonly config?: pulumi.Input<inputs.privateca.v1beta1.CertificateConfig>;
    /**
     * Output only. The time at which this Certificate was created.
     */
    readonly createTime?: pulumi.Input<string>;
    /**
     * Optional. Labels with user-defined metadata.
     */
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Required. Immutable. The desired lifetime of a certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.
     */
    readonly lifetime?: pulumi.Input<string>;
    /**
     * Output only. The resource path for this Certificate in the format `projects/*&#47;locations/*&#47;certificateAuthorities/*&#47;certificates/*`.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Required. The resource name of the location and CertificateAuthority associated with the Certificate, in the format `projects/*&#47;locations/*&#47;certificateAuthorities/*`.
     */
    readonly parent: pulumi.Input<string>;
    /**
     * Output only. The pem-encoded, signed X.509 certificate.
     */
    readonly pemCertificate?: pulumi.Input<string>;
    /**
     * Output only. The chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC 5246.
     */
    readonly pemCertificateChain?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Immutable. A pem-encoded X.509 certificate signing request (CSR).
     */
    readonly pemCsr?: pulumi.Input<string>;
    /**
     * Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     */
    readonly requestId?: pulumi.Input<string>;
    /**
     * Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if this field is present.
     */
    readonly revocationDetails?: pulumi.Input<inputs.privateca.v1beta1.RevocationDetails>;
    /**
     * Output only. The time at which this Certificate was updated.
     */
    readonly updateTime?: pulumi.Input<string>;
}
