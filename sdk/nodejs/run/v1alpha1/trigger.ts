// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a new trigger.
 */
export class Trigger extends pulumi.CustomResource {
    /**
     * Get an existing Trigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Trigger {
        return new Trigger(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-cloud:run/v1alpha1:Trigger';

    /**
     * Returns true if the given object is an instance of Trigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Trigger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Trigger.__pulumiType;
    }


    /**
     * Create a Trigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TriggerArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if ((!args || args.parent === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'parent'");
            }
            inputs["apiVersion"] = args ? args.apiVersion : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["metadata"] = args ? args.metadata : undefined;
            inputs["parent"] = args ? args.parent : undefined;
            inputs["spec"] = args ? args.spec : undefined;
            inputs["status"] = args ? args.status : undefined;
        } else {
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Trigger.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Trigger resource.
 */
export interface TriggerArgs {
    /**
     * The API version for this call such as "eventing.knative.dev/v1alpha1".
     */
    readonly apiVersion?: pulumi.Input<string>;
    /**
     * The kind of resource, in this case "Trigger".
     */
    readonly kind?: pulumi.Input<string>;
    /**
     * Metadata associated with this Trigger.
     */
    readonly metadata?: pulumi.Input<inputs.run.v1alpha1.ObjectMeta>;
    /**
     * The project ID or project number in which this trigger should be created.
     */
    readonly parent: pulumi.Input<string>;
    /**
     * Spec defines the desired state of the Trigger.
     */
    readonly spec?: pulumi.Input<inputs.run.v1alpha1.TriggerSpec>;
    /**
     * Optional. Status represents the current state of the Trigger. This data may be out of date.
     */
    readonly status?: pulumi.Input<inputs.run.v1alpha1.TriggerStatus>;
}
