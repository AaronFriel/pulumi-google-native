// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a study.
 */
export class GoogleCloudMlV1__Study extends pulumi.CustomResource {
    /**
     * Get an existing GoogleCloudMlV1__Study resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): GoogleCloudMlV1__Study {
        return new GoogleCloudMlV1__Study(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-cloud:ml/v1:GoogleCloudMlV1__Study';

    /**
     * Returns true if the given object is an instance of GoogleCloudMlV1__Study.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GoogleCloudMlV1__Study {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GoogleCloudMlV1__Study.__pulumiType;
    }


    /**
     * Create a GoogleCloudMlV1__Study resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GoogleCloudMlV1__StudyArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            inputs["createTime"] = args ? args.createTime : undefined;
            inputs["inactiveReason"] = args ? args.inactiveReason : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["parent"] = args ? args.parent : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["studyConfig"] = args ? args.studyConfig : undefined;
            inputs["studyId"] = args ? args.studyId : undefined;
        } else {
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(GoogleCloudMlV1__Study.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a GoogleCloudMlV1__Study resource.
 */
export interface GoogleCloudMlV1__StudyArgs {
    /**
     * Output only. Time at which the study was created.
     */
    readonly createTime?: pulumi.Input<string>;
    /**
     * Output only. A human readable reason why the Study is inactive. This should be empty if a study is ACTIVE or COMPLETED.
     */
    readonly inactiveReason?: pulumi.Input<string>;
    /**
     * Output only. The name of a study.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Required. The project and location that the study belongs to. Format: projects/{project}/locations/{location}
     */
    readonly parent: pulumi.Input<string>;
    /**
     * Output only. The detailed state of a study.
     */
    readonly state?: pulumi.Input<string>;
    /**
     * Required. Configuration of the study.
     */
    readonly studyConfig?: pulumi.Input<inputs.ml.v1.GoogleCloudMlV1__StudyConfig>;
    /**
     * Required. The ID to use for the study, which will become the final component of the study's resource name.
     */
    readonly studyId?: pulumi.Input<string>;
}
