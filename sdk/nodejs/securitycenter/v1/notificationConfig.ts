// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a notification config.
 */
export class NotificationConfig extends pulumi.CustomResource {
    /**
     * Get an existing NotificationConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): NotificationConfig {
        return new NotificationConfig(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-cloud:securitycenter/v1:NotificationConfig';

    /**
     * Returns true if the given object is an instance of NotificationConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationConfig.__pulumiType;
    }


    /**
     * Create a NotificationConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationConfigArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            inputs["configId"] = args ? args.configId : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["parent"] = args ? args.parent : undefined;
            inputs["pubsubTopic"] = args ? args.pubsubTopic : undefined;
            inputs["serviceAccount"] = args ? args.serviceAccount : undefined;
            inputs["streamingConfig"] = args ? args.streamingConfig : undefined;
        } else {
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(NotificationConfig.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a NotificationConfig resource.
 */
export interface NotificationConfigArgs {
    /**
     * Required. Unique identifier provided by the client within the parent scope. It must be between 1 and 128 characters, and contains alphanumeric characters, underscores or hyphens only.
     */
    readonly configId?: pulumi.Input<string>;
    /**
     * The description of the notification config (max of 1024 characters).
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The relative resource name of this notification config. See: https://cloud.google.com/apis/design/resource_names#relative_resource_name Example: "organizations/{organization_id}/notificationConfigs/notify_public_bucket".
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Required. Resource name of the new notification config's parent. Its format is "organizations/[organization_id]".
     */
    readonly parent: pulumi.Input<string>;
    /**
     * The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
     */
    readonly pubsubTopic?: pulumi.Input<string>;
    /**
     * Output only. The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
     */
    readonly serviceAccount?: pulumi.Input<string>;
    /**
     * The config for triggering streaming-based notifications.
     */
    readonly streamingConfig?: pulumi.Input<inputs.securitycenter.v1.StreamingConfig>;
}
