{
  "description": "Allows developers to run automated tests for their mobile applications on Google infrastructure.",
  "parameters": {
    "callback": {
      "location": "query",
      "type": "string",
      "description": "JSONP"
    },
    "access_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth access token."
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "alt": {
      "location": "query",
      "default": "json",
      "description": "Data format for response.",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ]
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "location": "query",
      "enum": [
        "1",
        "2"
      ]
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    }
  },
  "documentationLink": "https://developers.google.com/cloud-test-lab/",
  "title": "Cloud Testing API",
  "ownerDomain": "google.com",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "ownerName": "Google",
  "id": "testing:v1",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/cloud-platform.read-only": {
          "description": "View your data across Google Cloud Platform services"
        }
      }
    }
  },
  "resources": {
    "projects": {
      "resources": {
        "testMatrices": {
          "methods": {
            "cancel": {
              "path": "v1/projects/{projectId}/testMatrices/{testMatrixId}:cancel",
              "parameters": {
                "testMatrixId": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Test matrix that will be canceled."
                },
                "projectId": {
                  "required": true,
                  "description": "Cloud project that owns the test.",
                  "type": "string",
                  "location": "path"
                }
              },
              "httpMethod": "POST",
              "flatPath": "v1/projects/{projectId}/testMatrices/{testMatrixId}:cancel",
              "response": {
                "$ref": "CancelTestMatrixResponse"
              },
              "description": "Cancels unfinished test executions in a test matrix. This call returns immediately and cancellation proceeds asynchronously. If the matrix is already final, this operation will have no effect. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Test Matrix does not exist",
              "parameterOrder": [
                "projectId",
                "testMatrixId"
              ],
              "id": "testing.projects.testMatrices.cancel",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "get": {
              "id": "testing.projects.testMatrices.get",
              "description": "Checks the status of a test matrix. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Test Matrix does not exist",
              "flatPath": "v1/projects/{projectId}/testMatrices/{testMatrixId}",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only"
              ],
              "path": "v1/projects/{projectId}/testMatrices/{testMatrixId}",
              "response": {
                "$ref": "TestMatrix"
              },
              "parameters": {
                "projectId": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Cloud project that owns the test matrix."
                },
                "testMatrixId": {
                  "description": "Unique test matrix id which was assigned by the service.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "projectId",
                "testMatrixId"
              ]
            },
            "create": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1/projects/{projectId}/testMatrices",
              "parameters": {
                "projectId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The GCE project under which this job will run."
                },
                "requestId": {
                  "type": "string",
                  "location": "query",
                  "description": "A string id used to detect duplicated requests. Ids are automatically scoped to a project, so users should ensure the ID is unique per-project. A UUID is recommended. Optional, but strongly recommended."
                }
              },
              "response": {
                "$ref": "TestMatrix"
              },
              "description": "Creates and runs a matrix of tests according to the given specifications. Unsupported environments will be returned in the state UNSUPPORTED. A test matrix is limited to use at most 2000 devices in parallel. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed or if the matrix tries to use too many simultaneous devices.",
              "parameterOrder": [
                "projectId"
              ],
              "httpMethod": "POST",
              "id": "testing.projects.testMatrices.create",
              "path": "v1/projects/{projectId}/testMatrices",
              "request": {
                "$ref": "TestMatrix"
              }
            }
          }
        }
      }
    },
    "applicationDetailService": {
      "methods": {
        "getApkDetails": {
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Gets the details of an Android application APK.",
          "parameters": {},
          "path": "v1/applicationDetailService/getApkDetails",
          "request": {
            "$ref": "FileReference"
          },
          "httpMethod": "POST",
          "id": "testing.applicationDetailService.getApkDetails",
          "flatPath": "v1/applicationDetailService/getApkDetails",
          "response": {
            "$ref": "GetApkDetailsResponse"
          }
        }
      }
    },
    "testEnvironmentCatalog": {
      "methods": {
        "get": {
          "httpMethod": "GET",
          "flatPath": "v1/testEnvironmentCatalog/{environmentType}",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only"
          ],
          "parameterOrder": [
            "environmentType"
          ],
          "path": "v1/testEnvironmentCatalog/{environmentType}",
          "response": {
            "$ref": "TestEnvironmentCatalog"
          },
          "parameters": {
            "projectId": {
              "location": "query",
              "type": "string",
              "description": "For authorization, the cloud project requesting the TestEnvironmentCatalog."
            },
            "environmentType": {
              "description": "Required. The type of environment that should be listed.",
              "enum": [
                "ENVIRONMENT_TYPE_UNSPECIFIED",
                "ANDROID",
                "IOS",
                "NETWORK_CONFIGURATION",
                "PROVIDED_SOFTWARE",
                "DEVICE_IP_BLOCKS"
              ],
              "location": "path",
              "required": true,
              "enumDescriptions": [
                "Do not use. For proto versioning only.",
                "A device running a version of the Android OS.",
                "A device running a version of iOS.",
                "A network configuration to use when running a test.",
                "The software environment provided by TestExecutionService.",
                "The IP blocks used by devices in the test environment."
              ],
              "type": "string"
            }
          },
          "id": "testing.testEnvironmentCatalog.get",
          "description": "Gets the catalog of supported test environments. May return any of the following canonical error codes: - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the environment type does not exist - INTERNAL - if an internal error occurred"
        }
      }
    }
  },
  "servicePath": "",
  "schemas": {
    "TestMatrix": {
      "type": "object",
      "description": "TestMatrix captures all details about a test. It contains the environment configuration, test specification, test executions and overall state and outcome.",
      "id": "TestMatrix",
      "properties": {
        "testMatrixId": {
          "description": "Output only. Unique id set by the service.",
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "description": "Output only. The time this test matrix was initially created.",
          "format": "google-datetime"
        },
        "environmentMatrix": {
          "description": "Required. The devices the tests are being executed on.",
          "$ref": "EnvironmentMatrix"
        },
        "flakyTestAttempts": {
          "type": "integer",
          "description": "The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.",
          "format": "int32"
        },
        "failFast": {
          "type": "boolean",
          "description": "If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation."
        },
        "testSpecification": {
          "$ref": "TestSpecification",
          "description": "Required. How to run the test."
        },
        "outcomeSummary": {
          "enumDescriptions": [
            "Do not use. For proto versioning only.",
            "The test matrix run was successful, for instance: - All the test cases passed. - Robo did not detect a crash of the application under test.",
            "A run failed, for instance: - One or more test case failed. - A test timed out. - The application under test crashed.",
            "Something unexpected happened. The run should still be considered unsuccessful but this is likely a transient problem and re-running the test might be successful.",
            "All tests were skipped, for instance: - All device configurations were incompatible."
          ],
          "enum": [
            "OUTCOME_SUMMARY_UNSPECIFIED",
            "SUCCESS",
            "FAILURE",
            "INCONCLUSIVE",
            "SKIPPED"
          ],
          "type": "string",
          "description": "Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED."
        },
        "invalidMatrixDetails": {
          "type": "string",
          "description": "Output only. Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.",
          "enumDescriptions": [
            "Do not use. For proto versioning only.",
            "The matrix is INVALID, but there are no further details available.",
            "The input app APK could not be parsed.",
            "The input test APK could not be parsed.",
            "The AndroidManifest.xml could not be found.",
            "The APK manifest does not declare a package name.",
            "The APK application ID (aka package name) is invalid. See also https://developer.android.com/studio/build/application-id",
            "The test package and app package are the same.",
            "The test apk does not declare an instrumentation.",
            "The input app apk does not have a signature.",
            "The test runner class specified by user or in the test APK's manifest file is not compatible with Android Test Orchestrator. Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or higher. Orchestrator can be disabled by using DO_NOT_USE_ORCHESTRATOR OrchestratorOption.",
            "The test APK does not contain the test runner class specified by user or in the manifest file. This can be caused by either of the following reasons: - the user provided a runner class name that's incorrect, or - the test runner isn't built into the test APK (might be in the app APK instead).",
            "A main launcher activity could not be found.",
            "The app declares one or more permissions that are not allowed.",
            "There is a conflict in the provided robo_directives.",
            "There is at least one invalid resource name in the provided robo directives",
            "Invalid definition of action in the robo directives (e.g. a click or ignore action includes an input text field)",
            "There is no test loop intent filter, or the one that is given is not formatted correctly.",
            "The request contains a scenario label that was not declared in the manifest.",
            "There was an error when parsing a label's value.",
            "The request contains a scenario number that was not declared in the manifest.",
            "Device administrator applications are not allowed.",
            "The zipped XCTest was malformed. The zip did not contain a single .xctestrun file and the contents of the DerivedData/Build/Products directory.",
            "The zipped XCTest was built for the iOS simulator rather than for a physical device.",
            "The .xctestrun file did not specify any test targets.",
            "One or more of the test targets defined in the .xctestrun file specifies \"UseDestinationArtifacts\", which is disallowed.",
            "XC tests which run on physical devices must have \"IsAppHostedTestBundle\" == \"true\" in the xctestrun file.",
            "An Info.plist file in the XCTest zip could not be parsed.",
            "The APK is marked as \"testOnly\". Deprecated and not currently used.",
            "The input IPA could not be parsed.",
            "The application doesn't register the game loop URL scheme.",
            "The iOS application bundle (.app) couldn't be processed.",
            "APK contains no code. See also https://developer.android.com/guide/topics/manifest/application-element.html#code",
            "Either the provided input APK path was malformed, the APK file does not exist, or the user does not have permission to access the APK file.",
            "APK is built for a preview SDK which is unsupported"
          ],
          "enum": [
            "INVALID_MATRIX_DETAILS_UNSPECIFIED",
            "DETAILS_UNAVAILABLE",
            "MALFORMED_APK",
            "MALFORMED_TEST_APK",
            "NO_MANIFEST",
            "NO_PACKAGE_NAME",
            "INVALID_PACKAGE_NAME",
            "TEST_SAME_AS_APP",
            "NO_INSTRUMENTATION",
            "NO_SIGNATURE",
            "INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE",
            "NO_TEST_RUNNER_CLASS",
            "NO_LAUNCHER_ACTIVITY",
            "FORBIDDEN_PERMISSIONS",
            "INVALID_ROBO_DIRECTIVES",
            "INVALID_RESOURCE_NAME",
            "INVALID_DIRECTIVE_ACTION",
            "TEST_LOOP_INTENT_FILTER_NOT_FOUND",
            "SCENARIO_LABEL_NOT_DECLARED",
            "SCENARIO_LABEL_MALFORMED",
            "SCENARIO_NOT_DECLARED",
            "DEVICE_ADMIN_RECEIVER",
            "MALFORMED_XC_TEST_ZIP",
            "BUILT_FOR_IOS_SIMULATOR",
            "NO_TESTS_IN_XC_TEST_ZIP",
            "USE_DESTINATION_ARTIFACTS",
            "TEST_NOT_APP_HOSTED",
            "PLIST_CANNOT_BE_PARSED",
            "TEST_ONLY_APK",
            "MALFORMED_IPA",
            "MISSING_URL_SCHEME",
            "MALFORMED_APP_BUNDLE",
            "NO_CODE_APK",
            "INVALID_INPUT_APK",
            "INVALID_APK_PREVIEW_SDK"
          ]
        },
        "state": {
          "description": "Output only. Indicates the current progress of the test matrix.",
          "type": "string",
          "enumDescriptions": [
            "Do not use. For proto versioning only.",
            "The execution or matrix is being validated.",
            "The execution or matrix is waiting for resources to become available.",
            "The execution is currently being processed. Can only be set on an execution.",
            "The execution or matrix has terminated normally. On a matrix this means that the matrix level processing completed normally, but individual executions may be in an ERROR state.",
            "The execution or matrix has stopped because it encountered an infrastructure failure.",
            "The execution was not run because it corresponds to a unsupported environment. Can only be set on an execution.",
            "The execution was not run because the provided inputs are incompatible with the requested environment. Example: requested AndroidVersion is lower than APK's minSdkVersion Can only be set on an execution.",
            "The execution was not run because the provided inputs are incompatible with the requested architecture. Example: requested device does not support running the native code in the supplied APK Can only be set on an execution.",
            "The user cancelled the execution. Can only be set on an execution.",
            "The execution or matrix was not run because the provided inputs are not valid. Examples: input file is not of the expected type, is malformed/corrupt, or was flagged as malware"
          ],
          "enum": [
            "TEST_STATE_UNSPECIFIED",
            "VALIDATING",
            "PENDING",
            "RUNNING",
            "FINISHED",
            "ERROR",
            "UNSUPPORTED_ENVIRONMENT",
            "INCOMPATIBLE_ENVIRONMENT",
            "INCOMPATIBLE_ARCHITECTURE",
            "CANCELLED",
            "INVALID"
          ]
        },
        "resultStorage": {
          "$ref": "ResultStorage",
          "description": "Required. Where the results for the matrix are written."
        },
        "projectId": {
          "description": "The cloud project that owns the test matrix.",
          "type": "string"
        },
        "testExecutions": {
          "items": {
            "$ref": "TestExecution"
          },
          "description": "Output only. The list of test executions that the service creates for this matrix.",
          "type": "array"
        },
        "clientInfo": {
          "$ref": "ClientInfo",
          "description": "Information about the client which invoked the test."
        }
      }
    },
    "IosDeviceCatalog": {
      "properties": {
        "runtimeConfiguration": {
          "$ref": "IosRuntimeConfiguration",
          "description": "The set of supported runtime configurations."
        },
        "versions": {
          "items": {
            "$ref": "IosVersion"
          },
          "description": "The set of supported iOS software versions.",
          "type": "array"
        },
        "models": {
          "type": "array",
          "items": {
            "$ref": "IosModel"
          },
          "description": "The set of supported iOS device models."
        },
        "xcodeVersions": {
          "type": "array",
          "description": "The set of supported Xcode versions.",
          "items": {
            "$ref": "XcodeVersion"
          }
        }
      },
      "description": "The currently supported iOS devices.",
      "id": "IosDeviceCatalog",
      "type": "object"
    },
    "ProvidedSoftwareCatalog": {
      "properties": {
        "orchestratorVersion": {
          "description": "A string representing the current version of Android Test Orchestrator that is used in the environment. The package is available at https://maven.google.com/web/index.html#com.android.support.test:orchestrator.",
          "type": "string"
        },
        "androidxOrchestratorVersion": {
          "description": "A string representing the current version of AndroidX Test Orchestrator that is used in the environment. The package is available at https://maven.google.com/web/index.html#androidx.test:orchestrator.",
          "type": "string"
        }
      },
      "id": "ProvidedSoftwareCatalog",
      "description": "The currently provided software environment on the devices under test.",
      "type": "object"
    },
    "XcodeVersion": {
      "description": "An Xcode version that an iOS version is compatible with.",
      "type": "object",
      "id": "XcodeVersion",
      "properties": {
        "version": {
          "type": "string",
          "description": "The id for this version. Example: \"9.2\"."
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "description": "Tags for this Xcode version. Example: \"default\".",
          "type": "array"
        }
      }
    },
    "UniformSharding": {
      "id": "UniformSharding",
      "type": "object",
      "properties": {
        "numShards": {
          "format": "int32",
          "description": "Required. Total number of shards. When any physical devices are selected, the number must be \u003e= 1 and \u003c= 50. When no physical devices are selected, the number must be \u003e= 1 and \u003c= 500.",
          "type": "integer"
        }
      },
      "description": "Uniformly shards test cases given a total number of shards. For Instrumentation test, it will be translated to \"-e numShard\" \"-e shardIndex\" AndroidJUnitRunner arguments. With uniform sharding enabled, specifying these sharding arguments via environment_variables is invalid."
    },
    "NetworkConfiguration": {
      "id": "NetworkConfiguration",
      "type": "object",
      "properties": {
        "downRule": {
          "$ref": "TrafficRule",
          "description": "The emulation rule applying to the download traffic."
        },
        "upRule": {
          "$ref": "TrafficRule",
          "description": "The emulation rule applying to the upload traffic."
        },
        "id": {
          "type": "string",
          "description": "The unique opaque id for this network traffic configuration."
        }
      }
    },
    "ApkManifest": {
      "type": "object",
      "properties": {
        "usesPermission": {
          "type": "array",
          "description": "Permissions declared to be used by the application",
          "items": {
            "type": "string"
          }
        },
        "targetSdkVersion": {
          "description": "Specifies the API Level on which the application is designed to run.",
          "format": "int32",
          "type": "integer"
        },
        "maxSdkVersion": {
          "format": "int32",
          "description": "Maximum API level on which the application is designed to run.",
          "type": "integer"
        },
        "packageName": {
          "description": "Full Java-style package name for this application, e.g. \"com.example.foo\".",
          "type": "string"
        },
        "applicationLabel": {
          "type": "string",
          "description": "User-readable name for the application."
        },
        "minSdkVersion": {
          "type": "integer",
          "description": "Minimum API level required for the application to run.",
          "format": "int32"
        },
        "intentFilters": {
          "type": "array",
          "items": {
            "$ref": "IntentFilter"
          }
        }
      },
      "description": "An Android app manifest. See http://developer.android.com/guide/topics/manifest/manifest-intro.html",
      "id": "ApkManifest"
    },
    "AndroidModel": {
      "description": "A description of an Android device tests may be run on.",
      "id": "AndroidModel",
      "properties": {
        "screenDensity": {
          "format": "int32",
          "type": "integer",
          "description": "Screen density in DPI. This corresponds to ro.sf.lcd_density"
        },
        "form": {
          "type": "string",
          "enumDescriptions": [
            "Do not use. For proto versioning only.",
            "Android virtual device using Compute Engine native virtualization. Firebase Test Lab only.",
            "Actual hardware.",
            "Android virtual device using emulator in nested virtualization. Equivalent to Android Studio."
          ],
          "description": "Whether this device is virtual or physical.",
          "enum": [
            "DEVICE_FORM_UNSPECIFIED",
            "VIRTUAL",
            "PHYSICAL",
            "EMULATOR"
          ]
        },
        "tags": {
          "description": "Tags for this dimension. Examples: \"default\", \"preview\", \"deprecated\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "manufacturer": {
          "description": "The manufacturer of this device.",
          "type": "string"
        },
        "screenX": {
          "format": "int32",
          "type": "integer",
          "description": "Screen size in the horizontal (X) dimension measured in pixels."
        },
        "supportedVersionIds": {
          "description": "The set of Android versions this device supports.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "thumbnailUrl": {
          "description": "URL of a thumbnail image (photo) of the device. e.g. https://lh3.googleusercontent.com/90WcauuJiCYABEl8U0lcZeuS5STUbf2yW...",
          "type": "string"
        },
        "brand": {
          "description": "The company that this device is branded with. Example: \"Google\", \"Samsung\".",
          "type": "string"
        },
        "supportedAbis": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of supported ABIs for this device. This corresponds to either android.os.Build.SUPPORTED_ABIS (for API level 21 and above) or android.os.Build.CPU_ABI/CPU_ABI2. The most preferred ABI is the first element in the list. Elements are optionally prefixed by \"version_id:\" (where version_id is the id of an AndroidVersion), denoting an ABI that is supported only on a particular version."
        },
        "name": {
          "type": "string",
          "description": "The human-readable marketing name for this device model. Examples: \"Nexus 5\", \"Galaxy S5\"."
        },
        "formFactor": {
          "type": "string",
          "description": "Whether this device is a phone, tablet, wearable, etc.",
          "enum": [
            "DEVICE_FORM_FACTOR_UNSPECIFIED",
            "PHONE",
            "TABLET",
            "WEARABLE"
          ],
          "enumDescriptions": [
            "Do not use. For proto versioning only.",
            "This device has the shape of a phone.",
            "This device has the shape of a tablet.",
            "This device has the shape of a watch or other wearable."
          ]
        },
        "codename": {
          "type": "string",
          "description": "The name of the industrial design. This corresponds to android.os.Build.DEVICE."
        },
        "screenY": {
          "type": "integer",
          "format": "int32",
          "description": "Screen size in the vertical (Y) dimension measured in pixels."
        },
        "id": {
          "type": "string",
          "description": "The unique opaque id for this model. Use this for invoking the TestExecutionService."
        },
        "lowFpsVideoRecording": {
          "description": "True if and only if tests with this model are recorded by stitching together screenshots. See use_low_spec_video_recording in device config.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "IntentFilter": {
      "type": "object",
      "description": "The section of an tag. https://developer.android.com/guide/topics/manifest/intent-filter-element.html",
      "properties": {
        "actionNames": {
          "type": "array",
          "description": "The android:name value of the tag.",
          "items": {
            "type": "string"
          }
        },
        "categoryNames": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The android:name value of the tag."
        },
        "mimeType": {
          "type": "string",
          "description": "The android:mimeType value of the tag."
        }
      },
      "id": "IntentFilter"
    },
    "IosTestLoop": {
      "id": "IosTestLoop",
      "properties": {
        "appIpa": {
          "$ref": "FileReference",
          "description": "Required. The .ipa of the application to test."
        },
        "scenarios": {
          "description": "The list of scenarios that should be run during the test. Defaults to the single scenario 0 if unspecified.",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        },
        "appBundleId": {
          "description": "Output only. The bundle id for the application under test.",
          "type": "string"
        }
      },
      "description": "A test of an iOS application that implements one or more game loop scenarios. This test type accepts an archived application (.ipa file) and a list of integer scenarios that will be executed on the app sequentially.",
      "type": "object"
    },
    "TestDetails": {
      "type": "object",
      "description": "Additional details about the progress of the running test.",
      "id": "TestDetails",
      "properties": {
        "progressMessages": {
          "type": "array",
          "description": "Output only. Human-readable, detailed descriptions of the test's progress. For example: \"Provisioning a device\", \"Starting Test\". During the course of execution new data may be appended to the end of progress_messages.",
          "items": {
            "type": "string"
          }
        },
        "errorMessage": {
          "type": "string",
          "description": "Output only. If the TestState is ERROR, then this string will contain human-readable details about the error."
        }
      }
    },
    "TestTargetsForShard": {
      "type": "object",
      "id": "TestTargetsForShard",
      "description": "Test targets for a shard.",
      "properties": {
        "testTargets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Group of packages, classes, and/or test methods to be run for each shard. The targets need to be specified in AndroidJUnitRunner argument format. For example, \"package com.my.packages\" \"class com.my.package.MyClass\". The number of shard_test_targets must be greater than 0."
        }
      }
    },
    "IosTestSetup": {
      "description": "A description of how to set up an iOS device prior to running the test.",
      "properties": {
        "networkProfile": {
          "description": "The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.",
          "type": "string"
        },
        "pushFiles": {
          "items": {
            "$ref": "IosDeviceFile"
          },
          "description": "List of files to push to the device before starting the test.",
          "type": "array"
        },
        "pullDirectories": {
          "items": {
            "$ref": "IosDeviceFile"
          },
          "description": "List of directories on the device to upload to Cloud Storage at the end of the test. Directories should either be in a shared directory (e.g. /private/var/mobile/Media) or within an accessible directory inside the app's filesystem (e.g. /Documents) by specifying the bundle id.",
          "type": "array"
        },
        "additionalIpas": {
          "type": "array",
          "items": {
            "$ref": "FileReference"
          },
          "description": "iOS apps to install in addition to those being directly tested."
        }
      },
      "id": "IosTestSetup",
      "type": "object"
    },
    "SystraceSetup": {
      "properties": {
        "durationSeconds": {
          "description": "Systrace duration in seconds. Should be between 1 and 30 seconds. 0 disables systrace.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "SystraceSetup",
      "type": "object"
    },
    "AppBundle": {
      "properties": {
        "bundleLocation": {
          "description": ".aab file representing the app bundle under test.",
          "$ref": "FileReference"
        }
      },
      "type": "object",
      "description": "An Android App Bundle file format, containing a BundleConfig.pb file, a base module directory, zero or more dynamic feature module directories. See https://developer.android.com/guide/app-bundle/build for guidance on building App Bundles.",
      "id": "AppBundle"
    },
    "AndroidDevice": {
      "properties": {
        "orientation": {
          "type": "string",
          "description": "Required. How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options."
        },
        "locale": {
          "type": "string",
          "description": "Required. The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options."
        },
        "androidVersionId": {
          "type": "string",
          "description": "Required. The id of the Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options."
        },
        "androidModelId": {
          "type": "string",
          "description": "Required. The id of the Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options."
        }
      },
      "id": "AndroidDevice",
      "type": "object",
      "description": "A single Android device."
    },
    "AndroidRoboTest": {
      "type": "object",
      "id": "AndroidRoboTest",
      "description": "A test of an android application that explores the application on a virtual or physical Android Device, finding culprits and crashes as it goes. Next tag: 30",
      "properties": {
        "startingIntents": {
          "items": {
            "$ref": "RoboStartingIntent"
          },
          "type": "array",
          "description": "The intents used to launch the app for the crawl. If none are provided, then the main launcher activity is launched. If some are provided, then only those provided are launched (the main launcher activity must be provided explicitly)."
        },
        "roboDirectives": {
          "description": "A set of directives Robo should apply during the crawl. This allows users to customize the crawl. For example, the username and password for a test account can be provided.",
          "type": "array",
          "items": {
            "$ref": "RoboDirective"
          }
        },
        "appApk": {
          "description": "The APK for the application under test.",
          "$ref": "FileReference"
        },
        "appBundle": {
          "$ref": "AppBundle",
          "description": "A multi-apk app bundle for the application under test."
        },
        "maxSteps": {
          "format": "int32",
          "description": "The max number of steps Robo can execute. Default is no limit.",
          "type": "integer"
        },
        "roboScript": {
          "$ref": "FileReference",
          "description": "A JSON file with a sequence of actions Robo should perform as a prologue for the crawl."
        },
        "appPackageId": {
          "type": "string",
          "description": "The java package for the application under test. The default value is determined by examining the application's manifest."
        },
        "appInitialActivity": {
          "description": "The initial activity that should be used to start the app.",
          "type": "string"
        },
        "maxDepth": {
          "type": "integer",
          "description": "The max depth of the traversal stack Robo can explore. Needs to be at least 2 to make Robo explore the app beyond the first activity. Default is 50.",
          "format": "int32"
        }
      }
    },
    "ObbFile": {
      "id": "ObbFile",
      "type": "object",
      "description": "An opaque binary blob file to install on the device before the test starts.",
      "properties": {
        "obb": {
          "description": "Required. Opaque Binary Blob (OBB) file(s) to install on the device.",
          "$ref": "FileReference"
        },
        "obbFileName": {
          "type": "string",
          "description": "Required. OBB file name which must conform to the format as specified by Android e.g. [main|patch].0300110.com.example.android.obb which will be installed into \\/Android/obb/\\/ on the device."
        }
      }
    },
    "DeviceIpBlock": {
      "id": "DeviceIpBlock",
      "description": "A single device IP block",
      "type": "object",
      "properties": {
        "form": {
          "type": "string",
          "enumDescriptions": [
            "Do not use. For proto versioning only.",
            "Android virtual device using Compute Engine native virtualization. Firebase Test Lab only.",
            "Actual hardware.",
            "Android virtual device using emulator in nested virtualization. Equivalent to Android Studio."
          ],
          "description": "Whether this block is used by physical or virtual devices",
          "enum": [
            "DEVICE_FORM_UNSPECIFIED",
            "VIRTUAL",
            "PHYSICAL",
            "EMULATOR"
          ]
        },
        "addedDate": {
          "$ref": "Date",
          "description": "The date this block was added to Firebase Test Lab"
        },
        "block": {
          "type": "string",
          "description": "An IP address block in CIDR notation eg: 34.68.194.64/29"
        }
      }
    },
    "AndroidVersion": {
      "description": "A version of the Android OS.",
      "properties": {
        "versionString": {
          "description": "A string representing this version of the Android OS. Examples: \"4.3\", \"4.4\".",
          "type": "string"
        },
        "apiLevel": {
          "format": "int32",
          "description": "The API level for this Android version. Examples: 18, 19.",
          "type": "integer"
        },
        "distribution": {
          "description": "Market share for this version.",
          "$ref": "Distribution"
        },
        "id": {
          "type": "string",
          "description": "An opaque id for this Android version. Use this id to invoke the TestExecutionService."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tags for this dimension. Examples: \"default\", \"preview\", \"deprecated\"."
        },
        "releaseDate": {
          "description": "The date this Android version became available in the market.",
          "$ref": "Date"
        },
        "codeName": {
          "description": "The code name for this Android version. Examples: \"JellyBean\", \"KitKat\".",
          "type": "string"
        }
      },
      "type": "object",
      "id": "AndroidVersion"
    },
    "TestSetup": {
      "type": "object",
      "id": "TestSetup",
      "description": "A description of how to set up the Android device prior to running the test.",
      "properties": {
        "environmentVariables": {
          "items": {
            "$ref": "EnvironmentVariable"
          },
          "description": "Environment variables to set for the test (only applicable for instrumentation tests).",
          "type": "array"
        },
        "directoriesToPull": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device."
        },
        "dontAutograntPermissions": {
          "description": "Whether to prevent all runtime permissions to be granted at app install",
          "type": "boolean"
        },
        "account": {
          "description": "The device will be logged in on this account for the duration of the test.",
          "$ref": "Account"
        },
        "networkProfile": {
          "description": "The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.",
          "type": "string"
        },
        "systrace": {
          "$ref": "SystraceSetup",
          "description": "Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run."
        },
        "filesToPush": {
          "type": "array",
          "items": {
            "$ref": "DeviceFile"
          },
          "description": "List of files to push to the device before starting the test."
        },
        "additionalApks": {
          "description": "APKs to install in addition to those being directly tested. Currently capped at 100.",
          "type": "array",
          "items": {
            "$ref": "Apk"
          }
        }
      }
    },
    "Environment": {
      "id": "Environment",
      "type": "object",
      "description": "The environment in which the test is run.",
      "properties": {
        "iosDevice": {
          "$ref": "IosDevice",
          "description": "An iOS device which must be used with an iOS test."
        },
        "androidDevice": {
          "$ref": "AndroidDevice",
          "description": "An Android device which must be used with an Android test."
        }
      }
    },
    "AndroidMatrix": {
      "id": "AndroidMatrix",
      "type": "object",
      "properties": {
        "androidModelIds": {
          "type": "array",
          "description": "Required. The ids of the set of Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.",
          "items": {
            "type": "string"
          }
        },
        "orientations": {
          "description": "Required. The set of orientations to test with. Use the TestEnvironmentDiscoveryService to get supported options.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "androidVersionIds": {
          "type": "array",
          "description": "Required. The ids of the set of Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.",
          "items": {
            "type": "string"
          }
        },
        "locales": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Required. The set of locales the test device will enable for testing. Use the TestEnvironmentDiscoveryService to get supported options."
        }
      },
      "description": "A set of Android device configuration permutations is defined by the the cross-product of the given axes. Internally, the given AndroidMatrix will be expanded into a set of AndroidDevices. Only supported permutations will be instantiated. Invalid permutations (e.g., incompatible models/versions) are ignored."
    },
    "ToolResultsStep": {
      "description": "Represents a tool results step resource. This has the results of a TestExecution.",
      "type": "object",
      "properties": {
        "stepId": {
          "type": "string",
          "description": "Output only. A tool results step ID."
        },
        "executionId": {
          "type": "string",
          "description": "Output only. A tool results execution ID."
        },
        "projectId": {
          "type": "string",
          "description": "Output only. The cloud project that owns the tool results step."
        },
        "historyId": {
          "type": "string",
          "description": "Output only. A tool results history ID."
        }
      },
      "id": "ToolResultsStep"
    },
    "CancelTestMatrixResponse": {
      "properties": {
        "testState": {
          "type": "string",
          "enum": [
            "TEST_STATE_UNSPECIFIED",
            "VALIDATING",
            "PENDING",
            "RUNNING",
            "FINISHED",
            "ERROR",
            "UNSUPPORTED_ENVIRONMENT",
            "INCOMPATIBLE_ENVIRONMENT",
            "INCOMPATIBLE_ARCHITECTURE",
            "CANCELLED",
            "INVALID"
          ],
          "description": "The current rolled-up state of the test matrix. If this state is already final, then the cancelation request will have no effect.",
          "enumDescriptions": [
            "Do not use. For proto versioning only.",
            "The execution or matrix is being validated.",
            "The execution or matrix is waiting for resources to become available.",
            "The execution is currently being processed. Can only be set on an execution.",
            "The execution or matrix has terminated normally. On a matrix this means that the matrix level processing completed normally, but individual executions may be in an ERROR state.",
            "The execution or matrix has stopped because it encountered an infrastructure failure.",
            "The execution was not run because it corresponds to a unsupported environment. Can only be set on an execution.",
            "The execution was not run because the provided inputs are incompatible with the requested environment. Example: requested AndroidVersion is lower than APK's minSdkVersion Can only be set on an execution.",
            "The execution was not run because the provided inputs are incompatible with the requested architecture. Example: requested device does not support running the native code in the supplied APK Can only be set on an execution.",
            "The user cancelled the execution. Can only be set on an execution.",
            "The execution or matrix was not run because the provided inputs are not valid. Examples: input file is not of the expected type, is malformed/corrupt, or was flagged as malware"
          ]
        }
      },
      "type": "object",
      "id": "CancelTestMatrixResponse",
      "description": "Response containing the current state of the specified test matrix."
    },
    "IosRuntimeConfiguration": {
      "description": "iOS configuration that can be selected at the time a test is run.",
      "properties": {
        "locales": {
          "description": "The set of available locales.",
          "type": "array",
          "items": {
            "$ref": "Locale"
          }
        },
        "orientations": {
          "description": "The set of available orientations.",
          "type": "array",
          "items": {
            "$ref": "Orientation"
          }
        }
      },
      "type": "object",
      "id": "IosRuntimeConfiguration"
    },
    "NetworkConfigurationCatalog": {
      "id": "NetworkConfigurationCatalog",
      "type": "object",
      "properties": {
        "configurations": {
          "type": "array",
          "items": {
            "$ref": "NetworkConfiguration"
          }
        }
      }
    },
    "RegularFile": {
      "id": "RegularFile",
      "type": "object",
      "description": "A file or directory to install on the device before the test starts.",
      "properties": {
        "devicePath": {
          "type": "string",
          "description": "Required. Where to put the content on the device. Must be an absolute, allowlisted path. If the file exists, it will be replaced. The following device-side directories and any of their subdirectories are allowlisted: ${EXTERNAL_STORAGE}, /sdcard, or /storage ${ANDROID_DATA}/local/tmp, or /data/local/tmp Specifying a path outside of these directory trees is invalid. The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device and copy the file there. It is strongly advised to use the Environment API in app and test code to access files on the device in a portable way."
        },
        "content": {
          "description": "Required. The source file.",
          "$ref": "FileReference"
        }
      }
    },
    "IosXcTest": {
      "type": "object",
      "id": "IosXcTest",
      "description": "A test of an iOS application that uses the XCTest framework. Xcode supports the option to \"build for testing\", which generates an .xctestrun file that contains a test specification (arguments, test methods, etc). This test type accepts a zip file containing the .xctestrun file and the corresponding contents of the Build/Products directory that contains all the binaries needed to run the tests.",
      "properties": {
        "xcodeVersion": {
          "type": "string",
          "description": "The Xcode version that should be used for the test. Use the TestEnvironmentDiscoveryService to get supported options. Defaults to the latest Xcode version Firebase Test Lab supports."
        },
        "xctestrun": {
          "$ref": "FileReference",
          "description": "An .xctestrun file that will override the .xctestrun file in the tests zip. Because the .xctestrun file contains environment variables along with test methods to run and/or ignore, this can be useful for sharding tests. Default is taken from the tests zip."
        },
        "testsZip": {
          "$ref": "FileReference",
          "description": "Required. The .zip containing the .xctestrun file and the contents of the DerivedData/Build/Products directory. The .xctestrun file in this zip is ignored if the xctestrun field is specified."
        },
        "testSpecialEntitlements": {
          "description": "The option to test special app entitlements. Setting this would re-sign the app having special entitlements with an explicit application-identifier. Currently supports testing aps-environment entitlement.",
          "type": "boolean"
        },
        "appBundleId": {
          "description": "Output only. The bundle id for the application under test.",
          "type": "string"
        }
      }
    },
    "DeviceFile": {
      "type": "object",
      "description": "A single device file description.",
      "id": "DeviceFile",
      "properties": {
        "obbFile": {
          "description": "A reference to an opaque binary blob file.",
          "$ref": "ObbFile"
        },
        "regularFile": {
          "$ref": "RegularFile",
          "description": "A reference to a regular file."
        }
      }
    },
    "ApkDetail": {
      "id": "ApkDetail",
      "type": "object",
      "properties": {
        "apkManifest": {
          "$ref": "ApkManifest"
        }
      },
      "description": "Android application details based on application manifest and apk archive contents."
    },
    "IosDeviceList": {
      "type": "object",
      "id": "IosDeviceList",
      "description": "A list of iOS device configurations in which the test is to be executed.",
      "properties": {
        "iosDevices": {
          "items": {
            "$ref": "IosDevice"
          },
          "type": "array",
          "description": "Required. A list of iOS devices."
        }
      }
    },
    "Apk": {
      "description": "An Android package file to install.",
      "type": "object",
      "properties": {
        "location": {
          "description": "The path to an APK to be installed on the device before the test begins.",
          "$ref": "FileReference"
        },
        "packageName": {
          "type": "string",
          "description": "The java package for the APK to be installed. Value is determined by examining the application's manifest."
        }
      },
      "id": "Apk"
    },
    "ToolResultsExecution": {
      "description": "Represents a tool results execution resource. This has the results of a TestMatrix.",
      "id": "ToolResultsExecution",
      "type": "object",
      "properties": {
        "projectId": {
          "description": "Output only. The cloud project that owns the tool results execution.",
          "type": "string"
        },
        "executionId": {
          "description": "Output only. A tool results execution ID.",
          "type": "string"
        },
        "historyId": {
          "description": "Output only. A tool results history ID.",
          "type": "string"
        }
      }
    },
    "RoboStartingIntent": {
      "id": "RoboStartingIntent",
      "properties": {
        "timeout": {
          "description": "Timeout in seconds for each intent.",
          "format": "google-duration",
          "type": "string"
        },
        "launcherActivity": {
          "description": "An intent that starts the main launcher activity.",
          "$ref": "LauncherActivityIntent"
        },
        "startActivity": {
          "description": "An intent that starts an activity with specific details.",
          "$ref": "StartActivityIntent"
        }
      },
      "type": "object",
      "description": "Message for specifying the start activities to crawl."
    },
    "ClientInfoDetail": {
      "description": "Key-value pair of detailed information about the client which invoked the test. Examples: {'Version', '1.0'}, {'Release Track', 'BETA'}.",
      "id": "ClientInfoDetail",
      "type": "object",
      "properties": {
        "key": {
          "description": "Required. The key of detailed client information.",
          "type": "string"
        },
        "value": {
          "description": "Required. The value of detailed client information.",
          "type": "string"
        }
      }
    },
    "TestExecution": {
      "type": "object",
      "id": "TestExecution",
      "description": "A single test executed in a single environment.",
      "properties": {
        "testSpecification": {
          "$ref": "TestSpecification",
          "description": "Output only. How to run the test."
        },
        "toolResultsStep": {
          "description": "Output only. Where the results for this execution are written.",
          "$ref": "ToolResultsStep"
        },
        "state": {
          "enumDescriptions": [
            "Do not use. For proto versioning only.",
            "The execution or matrix is being validated.",
            "The execution or matrix is waiting for resources to become available.",
            "The execution is currently being processed. Can only be set on an execution.",
            "The execution or matrix has terminated normally. On a matrix this means that the matrix level processing completed normally, but individual executions may be in an ERROR state.",
            "The execution or matrix has stopped because it encountered an infrastructure failure.",
            "The execution was not run because it corresponds to a unsupported environment. Can only be set on an execution.",
            "The execution was not run because the provided inputs are incompatible with the requested environment. Example: requested AndroidVersion is lower than APK's minSdkVersion Can only be set on an execution.",
            "The execution was not run because the provided inputs are incompatible with the requested architecture. Example: requested device does not support running the native code in the supplied APK Can only be set on an execution.",
            "The user cancelled the execution. Can only be set on an execution.",
            "The execution or matrix was not run because the provided inputs are not valid. Examples: input file is not of the expected type, is malformed/corrupt, or was flagged as malware"
          ],
          "type": "string",
          "enum": [
            "TEST_STATE_UNSPECIFIED",
            "VALIDATING",
            "PENDING",
            "RUNNING",
            "FINISHED",
            "ERROR",
            "UNSUPPORTED_ENVIRONMENT",
            "INCOMPATIBLE_ENVIRONMENT",
            "INCOMPATIBLE_ARCHITECTURE",
            "CANCELLED",
            "INVALID"
          ],
          "description": "Output only. Indicates the current progress of the test execution (e.g., FINISHED)."
        },
        "id": {
          "type": "string",
          "description": "Output only. Unique id set by the service."
        },
        "testDetails": {
          "$ref": "TestDetails",
          "description": "Output only. Additional details about the running test."
        },
        "environment": {
          "description": "Output only. How the host machine(s) are configured.",
          "$ref": "Environment"
        },
        "shard": {
          "description": "Output only. Details about the shard.",
          "$ref": "Shard"
        },
        "matrixId": {
          "description": "Output only. Id of the containing TestMatrix.",
          "type": "string"
        },
        "projectId": {
          "description": "Output only. The cloud project that owns the test execution.",
          "type": "string"
        },
        "timestamp": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. The time this test execution was initially created."
        }
      }
    },
    "ToolResultsHistory": {
      "id": "ToolResultsHistory",
      "description": "Represents a tool results history resource.",
      "type": "object",
      "properties": {
        "historyId": {
          "type": "string",
          "description": "Required. A tool results history ID."
        },
        "projectId": {
          "type": "string",
          "description": "Required. The cloud project that owns the tool results history."
        }
      }
    },
    "Shard": {
      "description": "Output only. Details about the shard.",
      "properties": {
        "shardIndex": {
          "type": "integer",
          "format": "int32",
          "description": "Output only. The index of the shard among all the shards."
        },
        "testTargetsForShard": {
          "$ref": "TestTargetsForShard",
          "description": "Output only. Test targets for each shard."
        },
        "numShards": {
          "description": "Output only. The total number of shards.",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object",
      "id": "Shard"
    },
    "EnvironmentMatrix": {
      "properties": {
        "androidMatrix": {
          "description": "A matrix of Android devices.",
          "$ref": "AndroidMatrix"
        },
        "androidDeviceList": {
          "description": "A list of Android devices; the test will be run only on the specified devices.",
          "$ref": "AndroidDeviceList"
        },
        "iosDeviceList": {
          "$ref": "IosDeviceList",
          "description": "A list of iOS devices."
        }
      },
      "id": "EnvironmentMatrix",
      "type": "object",
      "description": "The matrix of environments in which the test is to be executed."
    },
    "FileReference": {
      "properties": {
        "gcsPath": {
          "type": "string",
          "description": "A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding)"
        }
      },
      "description": "A reference to a file, used for user inputs.",
      "type": "object",
      "id": "FileReference"
    },
    "IosDeviceFile": {
      "type": "object",
      "id": "IosDeviceFile",
      "description": "A file or directory to install on the device before the test starts.",
      "properties": {
        "devicePath": {
          "type": "string",
          "description": "Location of the file on the device, inside the app's sandboxed filesystem"
        },
        "bundleId": {
          "type": "string",
          "description": "The bundle id of the app where this file lives. iOS apps sandbox their own filesystem, so app files must specify which app installed on the device."
        },
        "content": {
          "$ref": "FileReference",
          "description": "The source file"
        }
      }
    },
    "DeviceIpBlockCatalog": {
      "id": "DeviceIpBlockCatalog",
      "properties": {
        "ipBlocks": {
          "items": {
            "$ref": "DeviceIpBlock"
          },
          "description": "The device IP blocks used by Firebase Test Lab",
          "type": "array"
        }
      },
      "description": "List of IP blocks used by the Firebase Test Lab",
      "type": "object"
    },
    "AndroidDeviceCatalog": {
      "id": "AndroidDeviceCatalog",
      "type": "object",
      "properties": {
        "versions": {
          "type": "array",
          "items": {
            "$ref": "AndroidVersion"
          },
          "description": "The set of supported Android OS versions."
        },
        "models": {
          "description": "The set of supported Android device models.",
          "type": "array",
          "items": {
            "$ref": "AndroidModel"
          }
        },
        "runtimeConfiguration": {
          "$ref": "AndroidRuntimeConfiguration",
          "description": "The set of supported runtime configurations."
        }
      },
      "description": "The currently supported Android devices."
    },
    "Distribution": {
      "properties": {
        "measurementTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. The time this distribution was measured."
        },
        "marketShare": {
          "type": "number",
          "description": "Output only. The estimated fraction (0-1) of the total market with this configuration.",
          "format": "double"
        }
      },
      "id": "Distribution",
      "description": "Data about the relative number of devices running a given configuration of the Android platform.",
      "type": "object"
    },
    "AndroidDeviceList": {
      "id": "AndroidDeviceList",
      "description": "A list of Android device configurations in which the test is to be executed.",
      "type": "object",
      "properties": {
        "androidDevices": {
          "type": "array",
          "description": "Required. A list of Android devices.",
          "items": {
            "$ref": "AndroidDevice"
          }
        }
      }
    },
    "IosModel": {
      "type": "object",
      "properties": {
        "deviceCapabilities": {
          "description": "Device capabilities. Copied from https://developer.apple.com/library/archive/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/DeviceCompatibilityMatrix/DeviceCompatibilityMatrix.html",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tags": {
          "type": "array",
          "description": "Tags for this dimension. Examples: \"default\", \"preview\", \"deprecated\".",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "description": "The unique opaque id for this model. Use this for invoking the TestExecutionService.",
          "type": "string"
        },
        "screenX": {
          "format": "int32",
          "type": "integer",
          "description": "Screen size in the horizontal (X) dimension measured in pixels."
        },
        "name": {
          "type": "string",
          "description": "The human-readable name for this device model. Examples: \"iPhone 4s\", \"iPad Mini 2\"."
        },
        "screenY": {
          "type": "integer",
          "format": "int32",
          "description": "Screen size in the vertical (Y) dimension measured in pixels."
        },
        "supportedVersionIds": {
          "type": "array",
          "description": "The set of iOS major software versions this device supports.",
          "items": {
            "type": "string"
          }
        },
        "screenDensity": {
          "format": "int32",
          "description": "Screen density in DPI.",
          "type": "integer"
        },
        "formFactor": {
          "enum": [
            "DEVICE_FORM_FACTOR_UNSPECIFIED",
            "PHONE",
            "TABLET",
            "WEARABLE"
          ],
          "type": "string",
          "enumDescriptions": [
            "Do not use. For proto versioning only.",
            "This device has the shape of a phone.",
            "This device has the shape of a tablet.",
            "This device has the shape of a watch or other wearable."
          ],
          "description": "Whether this device is a phone, tablet, wearable, etc."
        }
      },
      "description": "A description of an iOS device tests may be run on.",
      "id": "IosModel"
    },
    "EnvironmentVariable": {
      "id": "EnvironmentVariable",
      "type": "object",
      "description": "A key-value pair passed as an environment variable to the test.",
      "properties": {
        "key": {
          "description": "Key for the environment variable.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Value for the environment variable."
        }
      }
    },
    "ShardingOption": {
      "description": "Options for enabling sharding.",
      "type": "object",
      "id": "ShardingOption",
      "properties": {
        "manualSharding": {
          "$ref": "ManualSharding",
          "description": "Shards test cases into the specified groups of packages, classes, and/or methods."
        },
        "uniformSharding": {
          "$ref": "UniformSharding",
          "description": "Uniformly shards test cases given a total number of shards."
        }
      }
    },
    "Account": {
      "description": "Identifies an account and how to log into it.",
      "properties": {
        "googleAuto": {
          "description": "An automatic google login account.",
          "$ref": "GoogleAuto"
        }
      },
      "type": "object",
      "id": "Account"
    },
    "TrafficRule": {
      "id": "TrafficRule",
      "properties": {
        "burst": {
          "format": "float",
          "description": "Burst size in kbits.",
          "type": "number"
        },
        "delay": {
          "format": "google-duration",
          "description": "Packet delay, must be \u003e= 0.",
          "type": "string"
        },
        "packetDuplicationRatio": {
          "format": "float",
          "type": "number",
          "description": "Packet duplication ratio (0.0 - 1.0)."
        },
        "bandwidth": {
          "type": "number",
          "format": "float",
          "description": "Bandwidth in kbits/second."
        },
        "packetLossRatio": {
          "type": "number",
          "description": "Packet loss ratio (0.0 - 1.0).",
          "format": "float"
        }
      },
      "description": "Network emulation parameters.",
      "type": "object"
    },
    "ResultStorage": {
      "type": "object",
      "description": "Locations where the results of running the test are stored.",
      "properties": {
        "toolResultsExecution": {
          "$ref": "ToolResultsExecution",
          "description": "Output only. The tool results execution that results are written to."
        },
        "toolResultsHistory": {
          "$ref": "ToolResultsHistory",
          "description": "The tool results history that contains the tool results execution that results are written to. If not provided, the service will choose an appropriate value."
        },
        "googleCloudStorage": {
          "description": "Required.",
          "$ref": "GoogleCloudStorage"
        },
        "resultsUrl": {
          "type": "string",
          "description": "Output only. URL to the results in the Firebase Web Console."
        }
      },
      "id": "ResultStorage"
    },
    "AndroidTestLoop": {
      "type": "object",
      "id": "AndroidTestLoop",
      "description": "A test of an Android Application with a Test Loop. The intent \\ will be implicitly added, since Games is the only user of this api, for the time being.",
      "properties": {
        "appApk": {
          "$ref": "FileReference",
          "description": "The APK for the application under test."
        },
        "appBundle": {
          "description": "A multi-apk app bundle for the application under test.",
          "$ref": "AppBundle"
        },
        "appPackageId": {
          "type": "string",
          "description": "The java package for the application under test. The default is determined by examining the application's manifest."
        },
        "scenarioLabels": {
          "description": "The list of scenario labels that should be run during the test. The scenario labels should map to labels defined in the application's manifest. For example, player_experience and com.google.test.loops.player_experience add all of the loops labeled in the manifest with the com.google.test.loops.player_experience name to the execution. Scenarios can also be specified in the scenarios field.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "scenarios": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array",
          "description": "The list of scenarios that should be run during the test. The default is all test loops, derived from the application's manifest."
        }
      }
    },
    "IosDevice": {
      "type": "object",
      "description": "A single iOS device.",
      "id": "IosDevice",
      "properties": {
        "iosModelId": {
          "description": "Required. The id of the iOS device to be used. Use the TestEnvironmentDiscoveryService to get supported options.",
          "type": "string"
        },
        "locale": {
          "description": "Required. The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.",
          "type": "string"
        },
        "orientation": {
          "type": "string",
          "description": "Required. How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options."
        },
        "iosVersionId": {
          "description": "Required. The id of the iOS major software version to be used. Use the TestEnvironmentDiscoveryService to get supported options.",
          "type": "string"
        }
      }
    },
    "GetApkDetailsResponse": {
      "description": "Response containing the details of the specified Android application APK.",
      "properties": {
        "apkDetail": {
          "$ref": "ApkDetail",
          "description": "Details of the Android APK."
        }
      },
      "id": "GetApkDetailsResponse",
      "type": "object"
    },
    "TestSpecification": {
      "properties": {
        "disablePerformanceMetrics": {
          "description": "Disables performance metrics recording. May reduce test latency.",
          "type": "boolean"
        },
        "iosXcTest": {
          "description": "An iOS XCTest, via an .xctestrun file.",
          "$ref": "IosXcTest"
        },
        "disableVideoRecording": {
          "description": "Disables video recording. May reduce test latency.",
          "type": "boolean"
        },
        "androidTestLoop": {
          "$ref": "AndroidTestLoop",
          "description": "An Android Application with a Test Loop."
        },
        "androidRoboTest": {
          "description": "An Android robo test.",
          "$ref": "AndroidRoboTest"
        },
        "androidInstrumentationTest": {
          "$ref": "AndroidInstrumentationTest",
          "description": "An Android instrumentation test."
        },
        "testTimeout": {
          "description": "Max time a test execution is allowed to run before it is automatically cancelled. The default value is 5 min.",
          "type": "string",
          "format": "google-duration"
        },
        "iosTestLoop": {
          "$ref": "IosTestLoop",
          "description": "An iOS application with a test loop."
        },
        "iosTestSetup": {
          "$ref": "IosTestSetup",
          "description": "Test setup requirements for iOS."
        },
        "testSetup": {
          "$ref": "TestSetup",
          "description": "Test setup requirements for Android e.g. files to install, bootstrap scripts."
        }
      },
      "type": "object",
      "description": "A description of how to run the test.",
      "id": "TestSpecification"
    },
    "LauncherActivityIntent": {
      "properties": {},
      "id": "LauncherActivityIntent",
      "description": "Specifies an intent that starts the main launcher activity.",
      "type": "object"
    },
    "GoogleAuto": {
      "id": "GoogleAuto",
      "description": "Enables automatic Google account login. If set, the service automatically generates a Google test account and adds it to the device, before executing the test. Note that test accounts might be reused. Many applications show their full set of functionalities when an account is present on the device. Logging into the device with these generated accounts allows testing more functionalities.",
      "properties": {},
      "type": "object"
    },
    "ClientInfo": {
      "id": "ClientInfo",
      "properties": {
        "name": {
          "description": "Required. Client name, such as gcloud.",
          "type": "string"
        },
        "clientInfoDetails": {
          "description": "The list of detailed information about client.",
          "items": {
            "$ref": "ClientInfoDetail"
          },
          "type": "array"
        }
      },
      "description": "Information about the client which invoked the test.",
      "type": "object"
    },
    "GoogleCloudStorage": {
      "type": "object",
      "description": "A storage location within Google cloud storage (GCS).",
      "id": "GoogleCloudStorage",
      "properties": {
        "gcsPath": {
          "description": "Required. The path to a directory in GCS that will eventually contain the results for this test. The requesting user must have write access on the bucket in the supplied path.",
          "type": "string"
        }
      }
    },
    "AndroidRuntimeConfiguration": {
      "description": "Android configuration that can be selected at the time a test is run.",
      "id": "AndroidRuntimeConfiguration",
      "type": "object",
      "properties": {
        "locales": {
          "items": {
            "$ref": "Locale"
          },
          "description": "The set of available locales.",
          "type": "array"
        },
        "orientations": {
          "description": "The set of available orientations.",
          "type": "array",
          "items": {
            "$ref": "Orientation"
          }
        }
      }
    },
    "AndroidInstrumentationTest": {
      "properties": {
        "appBundle": {
          "$ref": "AppBundle",
          "description": "A multi-apk app bundle for the application under test."
        },
        "testRunnerClass": {
          "description": "The InstrumentationTestRunner class. The default value is determined by examining the application's manifest.",
          "type": "string"
        },
        "testPackageId": {
          "description": "The java package for the test to be executed. The default value is determined by examining the application's manifest.",
          "type": "string"
        },
        "shardingOption": {
          "description": "The option to run tests in multiple shards in parallel.",
          "$ref": "ShardingOption"
        },
        "orchestratorOption": {
          "description": "The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.",
          "enumDescriptions": [
            "Default value: the server will choose the mode. Currently implies that the test will run without the orchestrator. In the future, all instrumentation tests will be run with the orchestrator. Using the orchestrator is highly encouraged because of all the benefits it offers.",
            "Run test using orchestrator. ** Only compatible with AndroidJUnitRunner version 1.0 or higher! ** Recommended.",
            "Run test without using orchestrator."
          ],
          "type": "string",
          "enum": [
            "ORCHESTRATOR_OPTION_UNSPECIFIED",
            "USE_ORCHESTRATOR",
            "DO_NOT_USE_ORCHESTRATOR"
          ]
        },
        "appPackageId": {
          "type": "string",
          "description": "The java package for the application under test. The default value is determined by examining the application's manifest."
        },
        "appApk": {
          "$ref": "FileReference",
          "description": "The APK for the application under test."
        },
        "testTargets": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Each target must be fully qualified with the package name or class name, in one of these formats: - \"package package_name\" - \"class package_name.class_name\" - \"class package_name.class_name#method_name\" If empty, all targets in the module will be run."
        },
        "testApk": {
          "$ref": "FileReference",
          "description": "Required. The APK containing the test code to be executed."
        }
      },
      "type": "object",
      "description": "A test of an Android application that can control an Android component independently of its normal lifecycle. Android instrumentation tests run an application APK and test APK inside the same process on a virtual or physical AndroidDevice. They also specify a test runner class, such as com.google.GoogleTestRunner, which can vary on the specific instrumentation framework chosen. See for more information on types of Android tests.",
      "id": "AndroidInstrumentationTest"
    },
    "IosVersion": {
      "id": "IosVersion",
      "description": "An iOS version.",
      "type": "object",
      "properties": {
        "tags": {
          "items": {
            "type": "string"
          },
          "description": "Tags for this dimension. Examples: \"default\", \"preview\", \"deprecated\".",
          "type": "array"
        },
        "id": {
          "description": "An opaque id for this iOS version. Use this id to invoke the TestExecutionService.",
          "type": "string"
        },
        "majorVersion": {
          "format": "int32",
          "description": "An integer representing the major iOS version. Examples: \"8\", \"9\".",
          "type": "integer"
        },
        "supportedXcodeVersionIds": {
          "type": "array",
          "description": "The available Xcode versions for this version.",
          "items": {
            "type": "string"
          }
        },
        "minorVersion": {
          "description": "An integer representing the minor iOS version. Examples: \"1\", \"2\".",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ManualSharding": {
      "properties": {
        "testTargetsForShard": {
          "description": "Required. Group of packages, classes, and/or test methods to be run for each shard. When any physical devices are selected, the number of test_targets_for_shard must be \u003e= 1 and \u003c= 50. When no physical devices are selected, the number must be \u003e= 1 and \u003c= 500.",
          "items": {
            "$ref": "TestTargetsForShard"
          },
          "type": "array"
        }
      },
      "type": "object",
      "description": "Shards test cases into the specified groups of packages, classes, and/or methods. With manual sharding enabled, specifying test targets via environment_variables or in InstrumentationTest is invalid.",
      "id": "ManualSharding"
    },
    "TestEnvironmentCatalog": {
      "type": "object",
      "description": "A description of a test environment.",
      "properties": {
        "deviceIpBlockCatalog": {
          "description": "The IP blocks used by devices in the test environment.",
          "$ref": "DeviceIpBlockCatalog"
        },
        "androidDeviceCatalog": {
          "$ref": "AndroidDeviceCatalog",
          "description": "Supported Android devices."
        },
        "networkConfigurationCatalog": {
          "$ref": "NetworkConfigurationCatalog",
          "description": "Supported network configurations."
        },
        "iosDeviceCatalog": {
          "description": "Supported iOS devices.",
          "$ref": "IosDeviceCatalog"
        },
        "softwareCatalog": {
          "$ref": "ProvidedSoftwareCatalog",
          "description": "The software test environment provided by TestExecutionService."
        }
      },
      "id": "TestEnvironmentCatalog"
    },
    "Locale": {
      "id": "Locale",
      "description": "A location/region designation for language.",
      "properties": {
        "name": {
          "type": "string",
          "description": "A human-friendly name for this language/locale. Example: \"English\"."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tags for this dimension. Example: \"default\"."
        },
        "id": {
          "type": "string",
          "description": "The id for this locale. Example: \"en_US\"."
        },
        "region": {
          "type": "string",
          "description": "A human-friendly string representing the region for this locale. Example: \"United States\". Not present for every locale."
        }
      },
      "type": "object"
    },
    "StartActivityIntent": {
      "type": "object",
      "id": "StartActivityIntent",
      "properties": {
        "uri": {
          "type": "string",
          "description": "URI for the action."
        },
        "action": {
          "type": "string",
          "description": "Action name. Required for START_ACTIVITY."
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Intent categories to set on the intent."
        }
      },
      "description": "A starting intent specified by an action, uri, and categories."
    },
    "Date": {
      "id": "Date",
      "properties": {
        "month": {
          "type": "integer",
          "description": "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
          "format": "int32"
        },
        "day": {
          "format": "int32",
          "type": "integer",
          "description": "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."
        },
        "year": {
          "type": "integer",
          "format": "int32",
          "description": "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."
        }
      },
      "description": "Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`.",
      "type": "object"
    },
    "Orientation": {
      "description": "Screen orientation of the device.",
      "type": "object",
      "id": "Orientation",
      "properties": {
        "name": {
          "description": "A human-friendly name for this orientation. Example: \"portrait\".",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The id for this orientation. Example: \"portrait\"."
        },
        "tags": {
          "description": "Tags for this dimension. Example: \"default\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RoboDirective": {
      "type": "object",
      "id": "RoboDirective",
      "description": "Directs Robo to interact with a specific UI element if it is encountered during the crawl. Currently, Robo can perform text entry or element click.",
      "properties": {
        "inputText": {
          "description": "The text that Robo is directed to set. If left empty, the directive will be treated as a CLICK on the element matching the resource_name.",
          "type": "string"
        },
        "actionType": {
          "enum": [
            "ACTION_TYPE_UNSPECIFIED",
            "SINGLE_CLICK",
            "ENTER_TEXT",
            "IGNORE"
          ],
          "enumDescriptions": [
            "DO NOT USE. For proto versioning only.",
            "Direct Robo to click on the specified element. No-op if specified element is not clickable.",
            "Direct Robo to enter text on the specified element. No-op if specified element is not enabled or does not allow text entry.",
            "Direct Robo to ignore interactions with a specific element."
          ],
          "type": "string",
          "description": "Required. The type of action that Robo should perform on the specified element."
        },
        "resourceName": {
          "description": "Required. The android resource name of the target UI element. For example, in Java: R.string.foo in xml: @string/foo Only the \"foo\" part is needed. Reference doc: https://developer.android.com/guide/topics/resources/accessing-resources.html",
          "type": "string"
        }
      }
    }
  },
  "mtlsRootUrl": "https://testing.mtls.googleapis.com/",
  "rootUrl": "https://testing.googleapis.com/",
  "name": "testing",
  "protocol": "rest",
  "version": "v1",
  "revision": "20210317",
  "kind": "discovery#restDescription",
  "batchPath": "batch",
  "baseUrl": "https://testing.googleapis.com/",
  "discoveryVersion": "v1",
  "basePath": ""
}
