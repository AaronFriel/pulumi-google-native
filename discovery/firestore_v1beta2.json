{
  "name": "firestore",
  "canonicalName": "Firestore",
  "description": "Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. ",
  "version_module": true,
  "rootUrl": "https://firestore.googleapis.com/",
  "ownerName": "Google",
  "basePath": "",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "version": "v1beta2",
  "fullyEncodeReservedExpansion": true,
  "protocol": "rest",
  "schemas": {
    "GoogleFirestoreAdminV1beta2ExportDocumentsResponse": {
      "type": "object",
      "id": "GoogleFirestoreAdminV1beta2ExportDocumentsResponse",
      "description": "Returned in the google.longrunning.Operation response field.",
      "properties": {
        "outputUriPrefix": {
          "description": "Location of the output files. This can be used to begin an import into Cloud Firestore (this project or another project) after the operation completes successfully.",
          "type": "string"
        }
      }
    },
    "GoogleFirestoreAdminV1beta2ListIndexesResponse": {
      "description": "The response for FirestoreAdmin.ListIndexes.",
      "id": "GoogleFirestoreAdminV1beta2ListIndexesResponse",
      "properties": {
        "indexes": {
          "type": "array",
          "items": {
            "$ref": "GoogleFirestoreAdminV1beta2Index"
          },
          "description": "The requested indexes."
        },
        "nextPageToken": {
          "type": "string",
          "description": "A page token that may be used to request another page of results. If blank, this is the last page."
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2Field": {
      "description": "Represents a single field in the database. Fields are grouped by their \"Collection Group\", which represent all collections in the database with the same id.",
      "properties": {
        "name": {
          "description": "A field name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}` A field path may be a simple field name, e.g. `address` or a path to fields within map_value , e.g. `address.city`, or a special field path. The only valid special field is `*`, which represents any field. Field paths may be quoted using ` (backtick). The only character that needs to be escaped within a quoted field path is the backtick character itself, escaped using a backslash. Special characters in field paths that must be quoted include: `*`, `.`, ``` (backtick), `[`, `]`, as well as any ascii symbolic characters. Examples: (Note: Comments here are written in markdown syntax, so there is an additional layer of backticks to represent a code block) `\\`address.city\\`` represents a field named `address.city`, not the map key `city` in the field `address`. `\\`*\\`` represents a field named `*`, not any field. A special `Field` contains the default indexing settings for all fields. This field's resource name is: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*` Indexes defined on this `Field` will be applied to all fields which do not have their own `Field` index configuration.",
          "type": "string"
        },
        "indexConfig": {
          "$ref": "GoogleFirestoreAdminV1beta2IndexConfig",
          "description": "The index configuration for this field. If unset, field indexing will revert to the configuration defined by the `ancestor_field`. To explicitly remove all indexes for this field, specify an index config with an empty list of indexes."
        }
      },
      "type": "object",
      "id": "GoogleFirestoreAdminV1beta2Field"
    },
    "GoogleFirestoreAdminV1beta2Progress": {
      "properties": {
        "estimatedWork": {
          "type": "string",
          "description": "The amount of work estimated.",
          "format": "int64"
        },
        "completedWork": {
          "description": "The amount of work completed.",
          "format": "int64",
          "type": "string"
        }
      },
      "description": "Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.",
      "id": "GoogleFirestoreAdminV1beta2Progress",
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2ListFieldsResponse": {
      "type": "object",
      "id": "GoogleFirestoreAdminV1beta2ListFieldsResponse",
      "properties": {
        "fields": {
          "description": "The requested fields.",
          "type": "array",
          "items": {
            "$ref": "GoogleFirestoreAdminV1beta2Field"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "A page token that may be used to request another page of results. If blank, this is the last page."
        }
      },
      "description": "The response for FirestoreAdmin.ListFields."
    },
    "Status": {
      "properties": {
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "code": {
          "format": "int32",
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            }
          }
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "type": "object",
      "id": "Status"
    },
    "Empty": {
      "id": "Empty",
      "properties": {},
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
    },
    "GoogleLongrunningOperation": {
      "properties": {
        "response": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object"
        },
        "metadata": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object",
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        }
      },
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "id": "GoogleLongrunningOperation",
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2FieldOperationMetadata": {
      "description": "Metadata for google.longrunning.Operation results from FirestoreAdmin.UpdateField.",
      "properties": {
        "bytesProgress": {
          "description": "The progress, in bytes, of this operation.",
          "$ref": "GoogleFirestoreAdminV1beta2Progress"
        },
        "indexConfigDeltas": {
          "type": "array",
          "description": "A list of IndexConfigDelta, which describe the intent of this operation.",
          "items": {
            "$ref": "GoogleFirestoreAdminV1beta2IndexConfigDelta"
          }
        },
        "documentProgress": {
          "$ref": "GoogleFirestoreAdminV1beta2Progress",
          "description": "The progress, in documents, of this operation."
        },
        "endTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time this operation completed. Will be unset if operation still in progress."
        },
        "field": {
          "description": "The field resource that this operation is acting on. For example: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`",
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time this operation started."
        },
        "state": {
          "type": "string",
          "enum": [
            "OPERATION_STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "description": "The state of the operation.",
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation."
          ]
        }
      },
      "id": "GoogleFirestoreAdminV1beta2FieldOperationMetadata",
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2IndexConfigDelta": {
      "properties": {
        "changeType": {
          "enum": [
            "CHANGE_TYPE_UNSPECIFIED",
            "ADD",
            "REMOVE"
          ],
          "description": "Specifies how the index is changing.",
          "enumDescriptions": [
            "The type of change is not specified or known.",
            "The single field index is being added.",
            "The single field index is being removed."
          ],
          "type": "string"
        },
        "index": {
          "$ref": "GoogleFirestoreAdminV1beta2Index",
          "description": "The index being changed."
        }
      },
      "description": "Information about an index configuration change.",
      "id": "GoogleFirestoreAdminV1beta2IndexConfigDelta",
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2ExportDocumentsRequest": {
      "type": "object",
      "properties": {
        "outputUriPrefix": {
          "description": "The output URI. Currently only supports Google Cloud Storage URIs of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional Google Cloud Storage namespace path. When choosing a name, be sure to consider Google Cloud Storage naming guidelines: https://cloud.google.com/storage/docs/naming. If the URI is a bucket (without a namespace path), a prefix will be generated based on the start time.",
          "type": "string"
        },
        "collectionIds": {
          "type": "array",
          "description": "Which collection ids to export. Unspecified means all collections.",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "GoogleFirestoreAdminV1beta2ExportDocumentsRequest",
      "description": "The request for FirestoreAdmin.ExportDocuments."
    },
    "GoogleFirestoreAdminV1beta2ImportDocumentsRequest": {
      "id": "GoogleFirestoreAdminV1beta2ImportDocumentsRequest",
      "type": "object",
      "description": "The request for FirestoreAdmin.ImportDocuments.",
      "properties": {
        "collectionIds": {
          "description": "Which collection ids to import. Unspecified means all collections included in the import.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "inputUriPrefix": {
          "description": "Location of the exported files. This must match the output_uri_prefix of an ExportDocumentsResponse from an export that has completed successfully. See: google.firestore.admin.v1beta2.ExportDocumentsResponse.output_uri_prefix.",
          "type": "string"
        }
      }
    },
    "GoogleFirestoreAdminV1beta2Index": {
      "id": "GoogleFirestoreAdminV1beta2Index",
      "description": "Cloud Firestore indexes enable simple and complex queries against documents in a database.",
      "properties": {
        "fields": {
          "items": {
            "$ref": "GoogleFirestoreAdminV1beta2IndexField"
          },
          "type": "array",
          "description": "The fields supported by this index. For composite indexes, this is always 2 or more fields. The last field entry is always for the field path `__name__`. If, on creation, `__name__` was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the `__name__` will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field."
        },
        "queryScope": {
          "description": "Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.",
          "enum": [
            "QUERY_SCOPE_UNSPECIFIED",
            "COLLECTION",
            "COLLECTION_GROUP"
          ],
          "type": "string",
          "enumDescriptions": [
            "The query scope is unspecified. Not a valid option.",
            "Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the collection id specified by the index.",
            "Indexes with a collection group query scope specified allow queries against all collections that has the collection id specified by the index."
          ]
        },
        "name": {
          "type": "string",
          "description": "Output only. A server defined name for this index. The form of this name for composite indexes will be: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}` For single field indexes, this field will be empty."
        },
        "state": {
          "type": "string",
          "enumDescriptions": [
            "The state is unspecified.",
            "The index is being created. There is an active long-running operation for the index. The index is updated when writing a document. Some index data may exist.",
            "The index is ready to be used. The index is updated when writing a document. The index is fully populated from all stored documents it applies to.",
            "The index was being created, but something went wrong. There is no active long-running operation for the index, and the most recently finished long-running operation failed. The index is not updated when writing a document. Some index data may exist. Use the google.longrunning.Operations API to determine why the operation that last attempted to create this index failed, then re-create the index."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "READY",
            "NEEDS_REPAIR"
          ],
          "description": "Output only. The serving state of the index."
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2IndexConfig": {
      "properties": {
        "reverting": {
          "type": "boolean",
          "description": "Output only When true, the `Field`'s index configuration is in the process of being reverted. Once complete, the index config will transition to the same state as the field specified by `ancestor_field`, at which point `uses_ancestor_config` will be `true` and `reverting` will be `false`."
        },
        "indexes": {
          "description": "The indexes supported for this field.",
          "items": {
            "$ref": "GoogleFirestoreAdminV1beta2Index"
          },
          "type": "array"
        },
        "usesAncestorConfig": {
          "type": "boolean",
          "description": "Output only. When true, the `Field`'s index configuration is set from the configuration specified by the `ancestor_field`. When false, the `Field`'s index configuration is defined explicitly."
        },
        "ancestorField": {
          "description": "Output only. Specifies the resource name of the `Field` from which this field's index configuration is set (when `uses_ancestor_config` is true), or from which it *would* be set if this field had no index configuration (when `uses_ancestor_config` is false).",
          "type": "string"
        }
      },
      "description": "The index configuration for this field.",
      "id": "GoogleFirestoreAdminV1beta2IndexConfig",
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2ExportDocumentsMetadata": {
      "description": "Metadata for google.longrunning.Operation results from FirestoreAdmin.ExportDocuments.",
      "id": "GoogleFirestoreAdminV1beta2ExportDocumentsMetadata",
      "properties": {
        "progressBytes": {
          "$ref": "GoogleFirestoreAdminV1beta2Progress",
          "description": "The progress, in bytes, of this operation."
        },
        "operationState": {
          "description": "The state of the export operation.",
          "enum": [
            "OPERATION_STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation."
          ],
          "type": "string"
        },
        "collectionIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Which collection ids are being exported."
        },
        "endTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time this operation completed. Will be unset if operation still in progress."
        },
        "startTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time this operation started."
        },
        "outputUriPrefix": {
          "type": "string",
          "description": "Where the entities are being exported to."
        },
        "progressDocuments": {
          "$ref": "GoogleFirestoreAdminV1beta2Progress",
          "description": "The progress, in documents, of this operation."
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2ImportDocumentsMetadata": {
      "type": "object",
      "description": "Metadata for google.longrunning.Operation results from FirestoreAdmin.ImportDocuments.",
      "id": "GoogleFirestoreAdminV1beta2ImportDocumentsMetadata",
      "properties": {
        "progressBytes": {
          "description": "The progress, in bytes, of this operation.",
          "$ref": "GoogleFirestoreAdminV1beta2Progress"
        },
        "progressDocuments": {
          "description": "The progress, in documents, of this operation.",
          "$ref": "GoogleFirestoreAdminV1beta2Progress"
        },
        "endTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time this operation completed. Will be unset if operation still in progress."
        },
        "operationState": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation."
          ],
          "enum": [
            "OPERATION_STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "description": "The state of the import operation."
        },
        "startTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time this operation started."
        },
        "inputUriPrefix": {
          "type": "string",
          "description": "The location of the documents being imported."
        },
        "collectionIds": {
          "description": "Which collection ids are being imported.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "GoogleFirestoreAdminV1beta2IndexField": {
      "type": "object",
      "properties": {
        "order": {
          "description": "Indicates that this field supports ordering by the specified order or comparing using =, \u003c, \u003c=, \u003e, \u003e=.",
          "type": "string",
          "enum": [
            "ORDER_UNSPECIFIED",
            "ASCENDING",
            "DESCENDING"
          ],
          "enumDescriptions": [
            "The ordering is unspecified. Not a valid option.",
            "The field is ordered by ascending field value.",
            "The field is ordered by descending field value."
          ]
        },
        "fieldPath": {
          "description": "Can be __name__. For single field indexes, this must match the name of the field or may be omitted.",
          "type": "string"
        },
        "arrayConfig": {
          "description": "Indicates that this field supports operations on `array_value`s.",
          "type": "string",
          "enum": [
            "ARRAY_CONFIG_UNSPECIFIED",
            "CONTAINS"
          ],
          "enumDescriptions": [
            "The index does not support additional array queries.",
            "The index supports array containment queries."
          ]
        }
      },
      "description": "A field in an index. The field_path describes which field is indexed, the value_mode describes how the field value is indexed.",
      "id": "GoogleFirestoreAdminV1beta2IndexField"
    },
    "GoogleFirestoreAdminV1beta2IndexOperationMetadata": {
      "properties": {
        "startTime": {
          "type": "string",
          "description": "The time this operation started.",
          "format": "google-datetime"
        },
        "progressBytes": {
          "description": "The progress, in bytes, of this operation.",
          "$ref": "GoogleFirestoreAdminV1beta2Progress"
        },
        "state": {
          "type": "string",
          "description": "The state of the operation.",
          "enum": [
            "OPERATION_STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation."
          ]
        },
        "endTime": {
          "format": "google-datetime",
          "description": "The time this operation completed. Will be unset if operation still in progress.",
          "type": "string"
        },
        "index": {
          "description": "The index resource that this operation is acting on. For example: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`",
          "type": "string"
        },
        "progressDocuments": {
          "description": "The progress, in documents, of this operation.",
          "$ref": "GoogleFirestoreAdminV1beta2Progress"
        }
      },
      "description": "Metadata for google.longrunning.Operation results from FirestoreAdmin.CreateIndex.",
      "id": "GoogleFirestoreAdminV1beta2IndexOperationMetadata",
      "type": "object"
    }
  },
  "id": "firestore:v1beta2",
  "servicePath": "",
  "parameters": {
    "fields": {
      "location": "query",
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "callback": {
      "type": "string",
      "location": "query",
      "description": "JSONP"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "default": "json",
      "type": "string",
      "description": "Data format for response."
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "type": "string"
    },
    "uploadType": {
      "type": "string",
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    }
  },
  "title": "Cloud Firestore API",
  "documentationLink": "https://cloud.google.com/firestore",
  "baseUrl": "https://firestore.googleapis.com/",
  "batchPath": "batch",
  "discoveryVersion": "v1",
  "resources": {
    "projects": {
      "resources": {
        "databases": {
          "methods": {
            "importDocuments": {
              "description": "Imports documents into Google Cloud Firestore. Existing documents with the same name are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportDocuments operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Firestore.",
              "path": "v1beta2/{+name}:importDocuments",
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/databases/[^/]+$",
                  "required": true,
                  "location": "path",
                  "description": "Database to import into. Should be of the form: `projects/{project_id}/databases/{database_id}`.",
                  "type": "string"
                }
              },
              "id": "firestore.projects.databases.importDocuments",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ],
              "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}:importDocuments",
              "response": {
                "$ref": "GoogleLongrunningOperation"
              },
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "GoogleFirestoreAdminV1beta2ImportDocumentsRequest"
              },
              "httpMethod": "POST"
            },
            "exportDocuments": {
              "httpMethod": "POST",
              "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}:exportDocuments",
              "description": "Exports a copy of all or a subset of documents from Google Cloud Firestore to another storage system, such as Google Cloud Storage. Recent updates to documents may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ],
              "request": {
                "$ref": "GoogleFirestoreAdminV1beta2ExportDocumentsRequest"
              },
              "path": "v1beta2/{+name}:exportDocuments",
              "parameters": {
                "name": {
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/databases/[^/]+$",
                  "location": "path",
                  "description": "Database to export. Should be of the form: `projects/{project_id}/databases/{database_id}`."
                }
              },
              "id": "firestore.projects.databases.exportDocuments",
              "response": {
                "$ref": "GoogleLongrunningOperation"
              },
              "parameterOrder": [
                "name"
              ]
            }
          },
          "resources": {
            "collectionGroups": {
              "resources": {
                "fields": {
                  "methods": {
                    "patch": {
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$",
                          "required": true,
                          "description": "A field name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}` A field path may be a simple field name, e.g. `address` or a path to fields within map_value , e.g. `address.city`, or a special field path. The only valid special field is `*`, which represents any field. Field paths may be quoted using ` (backtick). The only character that needs to be escaped within a quoted field path is the backtick character itself, escaped using a backslash. Special characters in field paths that must be quoted include: `*`, `.`, ``` (backtick), `[`, `]`, as well as any ascii symbolic characters. Examples: (Note: Comments here are written in markdown syntax, so there is an additional layer of backticks to represent a code block) `\\`address.city\\`` represents a field named `address.city`, not the map key `city` in the field `address`. `\\`*\\`` represents a field named `*`, not any field. A special `Field` contains the default indexing settings for all fields. This field's resource name is: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*` Indexes defined on this `Field` will be applied to all fields which do not have their own `Field` index configuration.",
                          "location": "path",
                          "type": "string"
                        },
                        "updateMask": {
                          "type": "string",
                          "description": "A mask, relative to the field. If specified, only configuration specified by this field_mask will be updated in the field.",
                          "format": "google-fieldmask",
                          "location": "query"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "description": "Updates a field configuration. Currently, field updates apply only to single field index configuration. However, calls to FirestoreAdmin.UpdateField should provide a field mask to avoid changing any configuration that the caller isn't aware of. The field mask should be specified as: `{ paths: \"index_config\" }`. This call returns a google.longrunning.Operation which may be used to track the status of the field update. The metadata for the operation will be the type FieldOperationMetadata. To configure the default field settings for the database, use the special `Field` with resource name: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.",
                      "id": "firestore.projects.databases.collectionGroups.fields.patch",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ],
                      "httpMethod": "PATCH",
                      "request": {
                        "$ref": "GoogleFirestoreAdminV1beta2Field"
                      },
                      "path": "v1beta2/{+name}",
                      "response": {
                        "$ref": "GoogleLongrunningOperation"
                      },
                      "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/fields/{fieldsId}"
                    },
                    "list": {
                      "parameters": {
                        "parent": {
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$",
                          "description": "A parent name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`",
                          "type": "string",
                          "location": "path",
                          "required": true
                        },
                        "pageSize": {
                          "location": "query",
                          "format": "int32",
                          "description": "The number of results to return.",
                          "type": "integer"
                        },
                        "pageToken": {
                          "description": "A page token, returned from a previous call to FirestoreAdmin.ListFields, that may be used to get the next page of results.",
                          "location": "query",
                          "type": "string"
                        },
                        "filter": {
                          "type": "string",
                          "description": "The filter to apply to list results. Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields with the filter set to `indexConfig.usesAncestorConfig:false`.",
                          "location": "query"
                        }
                      },
                      "id": "firestore.projects.databases.collectionGroups.fields.list",
                      "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/fields",
                      "path": "v1beta2/{+parent}/fields",
                      "parameterOrder": [
                        "parent"
                      ],
                      "description": "Lists the field configuration and metadata for this database. Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields with the filter set to `indexConfig.usesAncestorConfig:false`.",
                      "httpMethod": "GET",
                      "response": {
                        "$ref": "GoogleFirestoreAdminV1beta2ListFieldsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ]
                    },
                    "get": {
                      "path": "v1beta2/{+name}",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ],
                      "parameters": {
                        "name": {
                          "type": "string",
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$",
                          "required": true,
                          "location": "path",
                          "description": "A name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`"
                        }
                      },
                      "id": "firestore.projects.databases.collectionGroups.fields.get",
                      "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/fields/{fieldsId}",
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "GET",
                      "description": "Gets the metadata and configuration for a Field.",
                      "response": {
                        "$ref": "GoogleFirestoreAdminV1beta2Field"
                      }
                    }
                  }
                },
                "indexes": {
                  "methods": {
                    "delete": {
                      "httpMethod": "DELETE",
                      "path": "v1beta2/{+name}",
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Empty"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ],
                      "parameters": {
                        "name": {
                          "description": "A name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`",
                          "location": "path",
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$",
                          "type": "string",
                          "required": true
                        }
                      },
                      "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes/{indexesId}",
                      "description": "Deletes a composite index.",
                      "id": "firestore.projects.databases.collectionGroups.indexes.delete"
                    },
                    "get": {
                      "response": {
                        "$ref": "GoogleFirestoreAdminV1beta2Index"
                      },
                      "path": "v1beta2/{+name}",
                      "httpMethod": "GET",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ],
                      "description": "Gets a composite index.",
                      "id": "firestore.projects.databases.collectionGroups.indexes.get",
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$",
                          "required": true,
                          "type": "string",
                          "description": "A name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`",
                          "location": "path"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes/{indexesId}"
                    },
                    "create": {
                      "description": "Creates a composite index. This returns a google.longrunning.Operation which may be used to track the status of the creation. The metadata for the operation will be the type IndexOperationMetadata.",
                      "response": {
                        "$ref": "GoogleLongrunningOperation"
                      },
                      "parameters": {
                        "parent": {
                          "type": "string",
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$",
                          "description": "A parent name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`",
                          "required": true,
                          "location": "path"
                        }
                      },
                      "path": "v1beta2/{+parent}/indexes",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ],
                      "parameterOrder": [
                        "parent"
                      ],
                      "id": "firestore.projects.databases.collectionGroups.indexes.create",
                      "httpMethod": "POST",
                      "request": {
                        "$ref": "GoogleFirestoreAdminV1beta2Index"
                      },
                      "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes"
                    },
                    "list": {
                      "httpMethod": "GET",
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "filter": {
                          "type": "string",
                          "description": "The filter to apply to list results.",
                          "location": "query"
                        },
                        "pageSize": {
                          "format": "int32",
                          "description": "The number of results to return.",
                          "location": "query",
                          "type": "integer"
                        },
                        "pageToken": {
                          "location": "query",
                          "description": "A page token, returned from a previous call to FirestoreAdmin.ListIndexes, that may be used to get the next page of results.",
                          "type": "string"
                        },
                        "parent": {
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$",
                          "type": "string",
                          "location": "path",
                          "required": true,
                          "description": "A parent name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`"
                        }
                      },
                      "description": "Lists composite indexes.",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ],
                      "response": {
                        "$ref": "GoogleFirestoreAdminV1beta2ListIndexesResponse"
                      },
                      "id": "firestore.projects.databases.collectionGroups.indexes.list",
                      "path": "v1beta2/{+parent}/indexes",
                      "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "mtlsRootUrl": "https://firestore.mtls.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/datastore": {
          "description": "View and manage your Google Cloud Datastore data"
        }
      }
    }
  },
  "ownerDomain": "google.com",
  "kind": "discovery#restDescription",
  "revision": "20210220"
}
